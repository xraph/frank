// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/organization"
)

// EmailTemplateCreate is the builder for creating a EmailTemplate entity.
type EmailTemplateCreate struct {
	config
	mutation *EmailTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (etc *EmailTemplateCreate) SetCreatedAt(t time.Time) *EmailTemplateCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableCreatedAt(t *time.Time) *EmailTemplateCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EmailTemplateCreate) SetUpdatedAt(t time.Time) *EmailTemplateCreate {
	etc.mutation.SetUpdatedAt(t)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableUpdatedAt(t *time.Time) *EmailTemplateCreate {
	if t != nil {
		etc.SetUpdatedAt(*t)
	}
	return etc
}

// SetDeletedAt sets the "deleted_at" field.
func (etc *EmailTemplateCreate) SetDeletedAt(t time.Time) *EmailTemplateCreate {
	etc.mutation.SetDeletedAt(t)
	return etc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableDeletedAt(t *time.Time) *EmailTemplateCreate {
	if t != nil {
		etc.SetDeletedAt(*t)
	}
	return etc
}

// SetName sets the "name" field.
func (etc *EmailTemplateCreate) SetName(s string) *EmailTemplateCreate {
	etc.mutation.SetName(s)
	return etc
}

// SetSubject sets the "subject" field.
func (etc *EmailTemplateCreate) SetSubject(s string) *EmailTemplateCreate {
	etc.mutation.SetSubject(s)
	return etc
}

// SetType sets the "type" field.
func (etc *EmailTemplateCreate) SetType(s string) *EmailTemplateCreate {
	etc.mutation.SetType(s)
	return etc
}

// SetHTMLContent sets the "html_content" field.
func (etc *EmailTemplateCreate) SetHTMLContent(s string) *EmailTemplateCreate {
	etc.mutation.SetHTMLContent(s)
	return etc
}

// SetTextContent sets the "text_content" field.
func (etc *EmailTemplateCreate) SetTextContent(s string) *EmailTemplateCreate {
	etc.mutation.SetTextContent(s)
	return etc
}

// SetNillableTextContent sets the "text_content" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableTextContent(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetTextContent(*s)
	}
	return etc
}

// SetOrganizationID sets the "organization_id" field.
func (etc *EmailTemplateCreate) SetOrganizationID(x xid.ID) *EmailTemplateCreate {
	etc.mutation.SetOrganizationID(x)
	return etc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableOrganizationID(x *xid.ID) *EmailTemplateCreate {
	if x != nil {
		etc.SetOrganizationID(*x)
	}
	return etc
}

// SetActive sets the "active" field.
func (etc *EmailTemplateCreate) SetActive(b bool) *EmailTemplateCreate {
	etc.mutation.SetActive(b)
	return etc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableActive(b *bool) *EmailTemplateCreate {
	if b != nil {
		etc.SetActive(*b)
	}
	return etc
}

// SetSystem sets the "system" field.
func (etc *EmailTemplateCreate) SetSystem(b bool) *EmailTemplateCreate {
	etc.mutation.SetSystem(b)
	return etc
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableSystem(b *bool) *EmailTemplateCreate {
	if b != nil {
		etc.SetSystem(*b)
	}
	return etc
}

// SetLocale sets the "locale" field.
func (etc *EmailTemplateCreate) SetLocale(s string) *EmailTemplateCreate {
	etc.mutation.SetLocale(s)
	return etc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableLocale(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetLocale(*s)
	}
	return etc
}

// SetMetadata sets the "metadata" field.
func (etc *EmailTemplateCreate) SetMetadata(m map[string]interface{}) *EmailTemplateCreate {
	etc.mutation.SetMetadata(m)
	return etc
}

// SetID sets the "id" field.
func (etc *EmailTemplateCreate) SetID(x xid.ID) *EmailTemplateCreate {
	etc.mutation.SetID(x)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableID(x *xid.ID) *EmailTemplateCreate {
	if x != nil {
		etc.SetID(*x)
	}
	return etc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (etc *EmailTemplateCreate) SetOrganization(o *Organization) *EmailTemplateCreate {
	return etc.SetOrganizationID(o.ID)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etc *EmailTemplateCreate) Mutation() *EmailTemplateMutation {
	return etc.mutation
}

// Save creates the EmailTemplate in the database.
func (etc *EmailTemplateCreate) Save(ctx context.Context) (*EmailTemplate, error) {
	etc.defaults()
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EmailTemplateCreate) SaveX(ctx context.Context) *EmailTemplate {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EmailTemplateCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EmailTemplateCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EmailTemplateCreate) defaults() {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		v := emailtemplate.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		v := emailtemplate.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.Active(); !ok {
		v := emailtemplate.DefaultActive
		etc.mutation.SetActive(v)
	}
	if _, ok := etc.mutation.System(); !ok {
		v := emailtemplate.DefaultSystem
		etc.mutation.SetSystem(v)
	}
	if _, ok := etc.mutation.Locale(); !ok {
		v := emailtemplate.DefaultLocale
		etc.mutation.SetLocale(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		v := emailtemplate.DefaultID()
		etc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EmailTemplateCreate) check() error {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailTemplate.created_at"`)}
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailTemplate.updated_at"`)}
	}
	if _, ok := etc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EmailTemplate.name"`)}
	}
	if v, ok := etc.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if _, ok := etc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "EmailTemplate.subject"`)}
	}
	if v, ok := etc.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if _, ok := etc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "EmailTemplate.type"`)}
	}
	if v, ok := etc.mutation.GetType(); ok {
		if err := emailtemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.type": %w`, err)}
		}
	}
	if _, ok := etc.mutation.HTMLContent(); !ok {
		return &ValidationError{Name: "html_content", err: errors.New(`ent: missing required field "EmailTemplate.html_content"`)}
	}
	if v, ok := etc.mutation.HTMLContent(); ok {
		if err := emailtemplate.HTMLContentValidator(v); err != nil {
			return &ValidationError{Name: "html_content", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.html_content": %w`, err)}
		}
	}
	if _, ok := etc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "EmailTemplate.active"`)}
	}
	if _, ok := etc.mutation.System(); !ok {
		return &ValidationError{Name: "system", err: errors.New(`ent: missing required field "EmailTemplate.system"`)}
	}
	if _, ok := etc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "EmailTemplate.locale"`)}
	}
	return nil
}

func (etc *EmailTemplateCreate) sqlSave(ctx context.Context) (*EmailTemplate, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EmailTemplateCreate) createSpec() (*EmailTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailTemplate{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(emailtemplate.Table, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	)
	_spec.OnConflict = etc.conflict
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(emailtemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := etc.mutation.DeletedAt(); ok {
		_spec.SetField(emailtemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := etc.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := etc.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := etc.mutation.GetType(); ok {
		_spec.SetField(emailtemplate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := etc.mutation.HTMLContent(); ok {
		_spec.SetField(emailtemplate.FieldHTMLContent, field.TypeString, value)
		_node.HTMLContent = value
	}
	if value, ok := etc.mutation.TextContent(); ok {
		_spec.SetField(emailtemplate.FieldTextContent, field.TypeString, value)
		_node.TextContent = value
	}
	if value, ok := etc.mutation.Active(); ok {
		_spec.SetField(emailtemplate.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := etc.mutation.System(); ok {
		_spec.SetField(emailtemplate.FieldSystem, field.TypeBool, value)
		_node.System = value
	}
	if value, ok := etc.mutation.Locale(); ok {
		_spec.SetField(emailtemplate.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := etc.mutation.Metadata(); ok {
		_spec.SetField(emailtemplate.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := etc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.OrganizationTable,
			Columns: []string{emailtemplate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (etc *EmailTemplateCreate) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertOne {
	etc.conflict = opts
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (etc *EmailTemplateCreate) OnConflictColumns(columns ...string) *EmailTemplateUpsertOne {
	etc.conflict = append(etc.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

type (
	// EmailTemplateUpsertOne is the builder for "upsert"-ing
	//  one EmailTemplate node.
	EmailTemplateUpsertOne struct {
		create *EmailTemplateCreate
	}

	// EmailTemplateUpsert is the "OnConflict" setter.
	EmailTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsert) SetUpdatedAt(v time.Time) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateUpdatedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsert) SetDeletedAt(v time.Time) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateDeletedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmailTemplateUpsert) ClearDeletedAt() *EmailTemplateUpsert {
	u.SetNull(emailtemplate.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsert) SetName(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateName() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldName)
	return u
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsert) SetSubject(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateSubject() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldSubject)
	return u
}

// SetType sets the "type" field.
func (u *EmailTemplateUpsert) SetType(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateType() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldType)
	return u
}

// SetHTMLContent sets the "html_content" field.
func (u *EmailTemplateUpsert) SetHTMLContent(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldHTMLContent, v)
	return u
}

// UpdateHTMLContent sets the "html_content" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateHTMLContent() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldHTMLContent)
	return u
}

// SetTextContent sets the "text_content" field.
func (u *EmailTemplateUpsert) SetTextContent(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldTextContent, v)
	return u
}

// UpdateTextContent sets the "text_content" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateTextContent() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldTextContent)
	return u
}

// ClearTextContent clears the value of the "text_content" field.
func (u *EmailTemplateUpsert) ClearTextContent() *EmailTemplateUpsert {
	u.SetNull(emailtemplate.FieldTextContent)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *EmailTemplateUpsert) SetOrganizationID(v xid.ID) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateOrganizationID() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *EmailTemplateUpsert) ClearOrganizationID() *EmailTemplateUpsert {
	u.SetNull(emailtemplate.FieldOrganizationID)
	return u
}

// SetActive sets the "active" field.
func (u *EmailTemplateUpsert) SetActive(v bool) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateActive() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldActive)
	return u
}

// SetSystem sets the "system" field.
func (u *EmailTemplateUpsert) SetSystem(v bool) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateSystem() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldSystem)
	return u
}

// SetLocale sets the "locale" field.
func (u *EmailTemplateUpsert) SetLocale(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateLocale() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldLocale)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *EmailTemplateUpsert) SetMetadata(v map[string]interface{}) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateMetadata() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EmailTemplateUpsert) ClearMetadata() *EmailTemplateUpsert {
	u.SetNull(emailtemplate.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmailTemplateUpsertOne) UpdateNewValues() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(emailtemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(emailtemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmailTemplateUpsertOne) Ignore() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertOne) DoNothing() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreate.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertOne) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertOne) SetUpdatedAt(v time.Time) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateUpdatedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsertOne) SetDeletedAt(v time.Time) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateDeletedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmailTemplateUpsertOne) ClearDeletedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsertOne) SetName(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateName() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateName()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertOne) SetSubject(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateSubject() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetType sets the "type" field.
func (u *EmailTemplateUpsertOne) SetType(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateType() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateType()
	})
}

// SetHTMLContent sets the "html_content" field.
func (u *EmailTemplateUpsertOne) SetHTMLContent(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetHTMLContent(v)
	})
}

// UpdateHTMLContent sets the "html_content" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateHTMLContent() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateHTMLContent()
	})
}

// SetTextContent sets the "text_content" field.
func (u *EmailTemplateUpsertOne) SetTextContent(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetTextContent(v)
	})
}

// UpdateTextContent sets the "text_content" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateTextContent() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateTextContent()
	})
}

// ClearTextContent clears the value of the "text_content" field.
func (u *EmailTemplateUpsertOne) ClearTextContent() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearTextContent()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *EmailTemplateUpsertOne) SetOrganizationID(v xid.ID) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateOrganizationID() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *EmailTemplateUpsertOne) ClearOrganizationID() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearOrganizationID()
	})
}

// SetActive sets the "active" field.
func (u *EmailTemplateUpsertOne) SetActive(v bool) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateActive() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetSystem sets the "system" field.
func (u *EmailTemplateUpsertOne) SetSystem(v bool) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateSystem() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSystem()
	})
}

// SetLocale sets the "locale" field.
func (u *EmailTemplateUpsertOne) SetLocale(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateLocale() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateLocale()
	})
}

// SetMetadata sets the "metadata" field.
func (u *EmailTemplateUpsertOne) SetMetadata(v map[string]interface{}) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateMetadata() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EmailTemplateUpsertOne) ClearMetadata() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailTemplateUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EmailTemplateUpsertOne.ID is not supported by MySQL driver. Use EmailTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailTemplateCreateBulk is the builder for creating many EmailTemplate entities in bulk.
type EmailTemplateCreateBulk struct {
	config
	err      error
	builders []*EmailTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailTemplate entities in the database.
func (etcb *EmailTemplateCreateBulk) Save(ctx context.Context) ([]*EmailTemplate, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EmailTemplate, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = etcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) SaveX(ctx context.Context) []*EmailTemplate {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EmailTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (etcb *EmailTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertBulk {
	etcb.conflict = opts
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (etcb *EmailTemplateCreateBulk) OnConflictColumns(columns ...string) *EmailTemplateUpsertBulk {
	etcb.conflict = append(etcb.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// EmailTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailTemplate nodes.
type EmailTemplateUpsertBulk struct {
	create *EmailTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmailTemplateUpsertBulk) UpdateNewValues() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(emailtemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(emailtemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmailTemplateUpsertBulk) Ignore() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertBulk) DoNothing() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertBulk) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertBulk) SetUpdatedAt(v time.Time) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateUpdatedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsertBulk) SetDeletedAt(v time.Time) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateDeletedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmailTemplateUpsertBulk) ClearDeletedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsertBulk) SetName(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateName() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateName()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertBulk) SetSubject(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateSubject() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetType sets the "type" field.
func (u *EmailTemplateUpsertBulk) SetType(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateType() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateType()
	})
}

// SetHTMLContent sets the "html_content" field.
func (u *EmailTemplateUpsertBulk) SetHTMLContent(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetHTMLContent(v)
	})
}

// UpdateHTMLContent sets the "html_content" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateHTMLContent() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateHTMLContent()
	})
}

// SetTextContent sets the "text_content" field.
func (u *EmailTemplateUpsertBulk) SetTextContent(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetTextContent(v)
	})
}

// UpdateTextContent sets the "text_content" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateTextContent() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateTextContent()
	})
}

// ClearTextContent clears the value of the "text_content" field.
func (u *EmailTemplateUpsertBulk) ClearTextContent() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearTextContent()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *EmailTemplateUpsertBulk) SetOrganizationID(v xid.ID) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateOrganizationID() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *EmailTemplateUpsertBulk) ClearOrganizationID() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearOrganizationID()
	})
}

// SetActive sets the "active" field.
func (u *EmailTemplateUpsertBulk) SetActive(v bool) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateActive() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetSystem sets the "system" field.
func (u *EmailTemplateUpsertBulk) SetSystem(v bool) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateSystem() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSystem()
	})
}

// SetLocale sets the "locale" field.
func (u *EmailTemplateUpsertBulk) SetLocale(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateLocale() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateLocale()
	})
}

// SetMetadata sets the "metadata" field.
func (u *EmailTemplateUpsertBulk) SetMetadata(v map[string]interface{}) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateMetadata() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EmailTemplateUpsertBulk) ClearMetadata() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
