// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/organization"
)

// EmailTemplate is the model entity for the EmailTemplate schema.
type EmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Template type: 'verification', 'password_reset', etc.
	Type string `json:"type,omitempty"`
	// HTMLContent holds the value of the "html_content" field.
	HTMLContent string `json:"html_content,omitempty"`
	// TextContent holds the value of the "text_content" field.
	TextContent string `json:"text_content,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// System templates can be overridden but not deleted
	System bool `json:"system,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailTemplateQuery when eager-loading is set.
	Edges        EmailTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailTemplateEdges holds the relations/edges for other nodes in the graph.
type EmailTemplateEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailTemplateEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldMetadata:
			values[i] = new([]byte)
		case emailtemplate.FieldActive, emailtemplate.FieldSystem:
			values[i] = new(sql.NullBool)
		case emailtemplate.FieldName, emailtemplate.FieldSubject, emailtemplate.FieldType, emailtemplate.FieldHTMLContent, emailtemplate.FieldTextContent, emailtemplate.FieldLocale:
			values[i] = new(sql.NullString)
		case emailtemplate.FieldCreatedAt, emailtemplate.FieldUpdatedAt, emailtemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case emailtemplate.FieldID, emailtemplate.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailTemplate fields.
func (et *EmailTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case emailtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case emailtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case emailtemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				et.DeletedAt = value.Time
			}
		case emailtemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				et.Name = value.String
			}
		case emailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				et.Subject = value.String
			}
		case emailtemplate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				et.Type = value.String
			}
		case emailtemplate.FieldHTMLContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_content", values[i])
			} else if value.Valid {
				et.HTMLContent = value.String
			}
		case emailtemplate.FieldTextContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_content", values[i])
			} else if value.Valid {
				et.TextContent = value.String
			}
		case emailtemplate.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				et.OrganizationID = *value
			}
		case emailtemplate.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				et.Active = value.Bool
			}
		case emailtemplate.FieldSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system", values[i])
			} else if value.Valid {
				et.System = value.Bool
			}
		case emailtemplate.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				et.Locale = value.String
			}
		case emailtemplate.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &et.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailTemplate.
// This includes values selected through modifiers, order, etc.
func (et *EmailTemplate) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryOrganization() *OrganizationQuery {
	return NewEmailTemplateClient(et.config).QueryOrganization(et)
}

// Update returns a builder for updating this EmailTemplate.
// Note that you need to call EmailTemplate.Unwrap() before calling this method if this EmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EmailTemplate) Update() *EmailTemplateUpdateOne {
	return NewEmailTemplateClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EmailTemplate) Unwrap() *EmailTemplate {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailTemplate is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("EmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(et.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(et.Name)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(et.Subject)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(et.Type)
	builder.WriteString(", ")
	builder.WriteString("html_content=")
	builder.WriteString(et.HTMLContent)
	builder.WriteString(", ")
	builder.WriteString("text_content=")
	builder.WriteString(et.TextContent)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", et.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", et.Active))
	builder.WriteString(", ")
	builder.WriteString("system=")
	builder.WriteString(fmt.Sprintf("%v", et.System))
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(et.Locale)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", et.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// EmailTemplates is a parsable slice of EmailTemplate.
type EmailTemplates []*EmailTemplate
