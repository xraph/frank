// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/common"
	"github.com/xraph/frank/pkg/model"
)

// ApiKeyUpdate is the builder for updating ApiKey entities.
type ApiKeyUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiKeyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (aku *ApiKeyUpdate) Where(ps ...predicate.ApiKey) *ApiKeyUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetUpdatedAt sets the "updated_at" field.
func (aku *ApiKeyUpdate) SetUpdatedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetUpdatedAt(t)
	return aku
}

// SetDeletedAt sets the "deleted_at" field.
func (aku *ApiKeyUpdate) SetDeletedAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetDeletedAt(t)
	return aku
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableDeletedAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetDeletedAt(*t)
	}
	return aku
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aku *ApiKeyUpdate) ClearDeletedAt() *ApiKeyUpdate {
	aku.mutation.ClearDeletedAt()
	return aku
}

// SetName sets the "name" field.
func (aku *ApiKeyUpdate) SetName(s string) *ApiKeyUpdate {
	aku.mutation.SetName(s)
	return aku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableName(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetName(*s)
	}
	return aku
}

// SetPublicKey sets the "public_key" field.
func (aku *ApiKeyUpdate) SetPublicKey(s string) *ApiKeyUpdate {
	aku.mutation.SetPublicKey(s)
	return aku
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillablePublicKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetPublicKey(*s)
	}
	return aku
}

// SetSecretKey sets the "secret_key" field.
func (aku *ApiKeyUpdate) SetSecretKey(s string) *ApiKeyUpdate {
	aku.mutation.SetSecretKey(s)
	return aku
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableSecretKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetSecretKey(*s)
	}
	return aku
}

// SetHashedSecretKey sets the "hashed_secret_key" field.
func (aku *ApiKeyUpdate) SetHashedSecretKey(s string) *ApiKeyUpdate {
	aku.mutation.SetHashedSecretKey(s)
	return aku
}

// SetNillableHashedSecretKey sets the "hashed_secret_key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableHashedSecretKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetHashedSecretKey(*s)
	}
	return aku
}

// SetKey sets the "key" field.
func (aku *ApiKeyUpdate) SetKey(s string) *ApiKeyUpdate {
	aku.mutation.SetKey(s)
	return aku
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetKey(*s)
	}
	return aku
}

// ClearKey clears the value of the "key" field.
func (aku *ApiKeyUpdate) ClearKey() *ApiKeyUpdate {
	aku.mutation.ClearKey()
	return aku
}

// SetHashedKey sets the "hashed_key" field.
func (aku *ApiKeyUpdate) SetHashedKey(s string) *ApiKeyUpdate {
	aku.mutation.SetHashedKey(s)
	return aku
}

// SetNillableHashedKey sets the "hashed_key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableHashedKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetHashedKey(*s)
	}
	return aku
}

// ClearHashedKey clears the value of the "hashed_key" field.
func (aku *ApiKeyUpdate) ClearHashedKey() *ApiKeyUpdate {
	aku.mutation.ClearHashedKey()
	return aku
}

// SetUserID sets the "user_id" field.
func (aku *ApiKeyUpdate) SetUserID(x xid.ID) *ApiKeyUpdate {
	aku.mutation.SetUserID(x)
	return aku
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableUserID(x *xid.ID) *ApiKeyUpdate {
	if x != nil {
		aku.SetUserID(*x)
	}
	return aku
}

// ClearUserID clears the value of the "user_id" field.
func (aku *ApiKeyUpdate) ClearUserID() *ApiKeyUpdate {
	aku.mutation.ClearUserID()
	return aku
}

// SetOrganizationID sets the "organization_id" field.
func (aku *ApiKeyUpdate) SetOrganizationID(x xid.ID) *ApiKeyUpdate {
	aku.mutation.SetOrganizationID(x)
	return aku
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableOrganizationID(x *xid.ID) *ApiKeyUpdate {
	if x != nil {
		aku.SetOrganizationID(*x)
	}
	return aku
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (aku *ApiKeyUpdate) ClearOrganizationID() *ApiKeyUpdate {
	aku.mutation.ClearOrganizationID()
	return aku
}

// SetType sets the "type" field.
func (aku *ApiKeyUpdate) SetType(mkt model.APIKeyType) *ApiKeyUpdate {
	aku.mutation.SetType(mkt)
	return aku
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableType(mkt *model.APIKeyType) *ApiKeyUpdate {
	if mkt != nil {
		aku.SetType(*mkt)
	}
	return aku
}

// SetEnvironment sets the "environment" field.
func (aku *ApiKeyUpdate) SetEnvironment(m model.Environment) *ApiKeyUpdate {
	aku.mutation.SetEnvironment(m)
	return aku
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableEnvironment(m *model.Environment) *ApiKeyUpdate {
	if m != nil {
		aku.SetEnvironment(*m)
	}
	return aku
}

// SetActive sets the "active" field.
func (aku *ApiKeyUpdate) SetActive(b bool) *ApiKeyUpdate {
	aku.mutation.SetActive(b)
	return aku
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableActive(b *bool) *ApiKeyUpdate {
	if b != nil {
		aku.SetActive(*b)
	}
	return aku
}

// SetPermissions sets the "permissions" field.
func (aku *ApiKeyUpdate) SetPermissions(s []string) *ApiKeyUpdate {
	aku.mutation.SetPermissions(s)
	return aku
}

// AppendPermissions appends s to the "permissions" field.
func (aku *ApiKeyUpdate) AppendPermissions(s []string) *ApiKeyUpdate {
	aku.mutation.AppendPermissions(s)
	return aku
}

// ClearPermissions clears the value of the "permissions" field.
func (aku *ApiKeyUpdate) ClearPermissions() *ApiKeyUpdate {
	aku.mutation.ClearPermissions()
	return aku
}

// SetScopes sets the "scopes" field.
func (aku *ApiKeyUpdate) SetScopes(s []string) *ApiKeyUpdate {
	aku.mutation.SetScopes(s)
	return aku
}

// AppendScopes appends s to the "scopes" field.
func (aku *ApiKeyUpdate) AppendScopes(s []string) *ApiKeyUpdate {
	aku.mutation.AppendScopes(s)
	return aku
}

// ClearScopes clears the value of the "scopes" field.
func (aku *ApiKeyUpdate) ClearScopes() *ApiKeyUpdate {
	aku.mutation.ClearScopes()
	return aku
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (aku *ApiKeyUpdate) SetIPWhitelist(s []string) *ApiKeyUpdate {
	aku.mutation.SetIPWhitelist(s)
	return aku
}

// AppendIPWhitelist appends s to the "ip_whitelist" field.
func (aku *ApiKeyUpdate) AppendIPWhitelist(s []string) *ApiKeyUpdate {
	aku.mutation.AppendIPWhitelist(s)
	return aku
}

// ClearIPWhitelist clears the value of the "ip_whitelist" field.
func (aku *ApiKeyUpdate) ClearIPWhitelist() *ApiKeyUpdate {
	aku.mutation.ClearIPWhitelist()
	return aku
}

// SetRateLimits sets the "rate_limits" field.
func (aku *ApiKeyUpdate) SetRateLimits(ckrl common.APIKeyRateLimits) *ApiKeyUpdate {
	aku.mutation.SetRateLimits(ckrl)
	return aku
}

// SetNillableRateLimits sets the "rate_limits" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableRateLimits(ckrl *common.APIKeyRateLimits) *ApiKeyUpdate {
	if ckrl != nil {
		aku.SetRateLimits(*ckrl)
	}
	return aku
}

// ClearRateLimits clears the value of the "rate_limits" field.
func (aku *ApiKeyUpdate) ClearRateLimits() *ApiKeyUpdate {
	aku.mutation.ClearRateLimits()
	return aku
}

// SetMetadata sets the "metadata" field.
func (aku *ApiKeyUpdate) SetMetadata(m map[string]interface{}) *ApiKeyUpdate {
	aku.mutation.SetMetadata(m)
	return aku
}

// ClearMetadata clears the value of the "metadata" field.
func (aku *ApiKeyUpdate) ClearMetadata() *ApiKeyUpdate {
	aku.mutation.ClearMetadata()
	return aku
}

// SetLastUsed sets the "last_used" field.
func (aku *ApiKeyUpdate) SetLastUsed(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetLastUsed(t)
	return aku
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableLastUsed(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetLastUsed(*t)
	}
	return aku
}

// ClearLastUsed clears the value of the "last_used" field.
func (aku *ApiKeyUpdate) ClearLastUsed() *ApiKeyUpdate {
	aku.mutation.ClearLastUsed()
	return aku
}

// SetExpiresAt sets the "expires_at" field.
func (aku *ApiKeyUpdate) SetExpiresAt(t time.Time) *ApiKeyUpdate {
	aku.mutation.SetExpiresAt(t)
	return aku
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableExpiresAt(t *time.Time) *ApiKeyUpdate {
	if t != nil {
		aku.SetExpiresAt(*t)
	}
	return aku
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (aku *ApiKeyUpdate) ClearExpiresAt() *ApiKeyUpdate {
	aku.mutation.ClearExpiresAt()
	return aku
}

// SetUser sets the "user" edge to the User entity.
func (aku *ApiKeyUpdate) SetUser(u *User) *ApiKeyUpdate {
	return aku.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (aku *ApiKeyUpdate) SetOrganization(o *Organization) *ApiKeyUpdate {
	return aku.SetOrganizationID(o.ID)
}

// AddActivityIDs adds the "activities" edge to the ApiKeyActivity entity by IDs.
func (aku *ApiKeyUpdate) AddActivityIDs(ids ...xid.ID) *ApiKeyUpdate {
	aku.mutation.AddActivityIDs(ids...)
	return aku
}

// AddActivities adds the "activities" edges to the ApiKeyActivity entity.
func (aku *ApiKeyUpdate) AddActivities(a ...*ApiKeyActivity) *ApiKeyUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aku.AddActivityIDs(ids...)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (aku *ApiKeyUpdate) Mutation() *ApiKeyMutation {
	return aku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aku *ApiKeyUpdate) ClearUser() *ApiKeyUpdate {
	aku.mutation.ClearUser()
	return aku
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (aku *ApiKeyUpdate) ClearOrganization() *ApiKeyUpdate {
	aku.mutation.ClearOrganization()
	return aku
}

// ClearActivities clears all "activities" edges to the ApiKeyActivity entity.
func (aku *ApiKeyUpdate) ClearActivities() *ApiKeyUpdate {
	aku.mutation.ClearActivities()
	return aku
}

// RemoveActivityIDs removes the "activities" edge to ApiKeyActivity entities by IDs.
func (aku *ApiKeyUpdate) RemoveActivityIDs(ids ...xid.ID) *ApiKeyUpdate {
	aku.mutation.RemoveActivityIDs(ids...)
	return aku
}

// RemoveActivities removes "activities" edges to ApiKeyActivity entities.
func (aku *ApiKeyUpdate) RemoveActivities(a ...*ApiKeyActivity) *ApiKeyUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aku.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *ApiKeyUpdate) Save(ctx context.Context) (int, error) {
	aku.defaults()
	return withHooks(ctx, aku.sqlSave, aku.mutation, aku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *ApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *ApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *ApiKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aku *ApiKeyUpdate) defaults() {
	if _, ok := aku.mutation.UpdatedAt(); !ok {
		v := apikey.UpdateDefaultUpdatedAt()
		aku.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aku *ApiKeyUpdate) check() error {
	if v, ok := aku.mutation.Name(); ok {
		if err := apikey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ApiKey.name": %w`, err)}
		}
	}
	if v, ok := aku.mutation.PublicKey(); ok {
		if err := apikey.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.public_key": %w`, err)}
		}
	}
	if v, ok := aku.mutation.HashedSecretKey(); ok {
		if err := apikey.HashedSecretKeyValidator(v); err != nil {
			return &ValidationError{Name: "hashed_secret_key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.hashed_secret_key": %w`, err)}
		}
	}
	if v, ok := aku.mutation.GetType(); ok {
		if err := apikey.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ApiKey.type": %w`, err)}
		}
	}
	if v, ok := aku.mutation.Environment(); ok {
		if err := apikey.EnvironmentValidator(v); err != nil {
			return &ValidationError{Name: "environment", err: fmt.Errorf(`ent: validator failed for field "ApiKey.environment": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aku *ApiKeyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiKeyUpdate {
	aku.modifiers = append(aku.modifiers, modifiers...)
	return aku
}

func (aku *ApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aku.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
	}
	if aku.mutation.DeletedAtCleared() {
		_spec.ClearField(apikey.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aku.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
	}
	if value, ok := aku.mutation.PublicKey(); ok {
		_spec.SetField(apikey.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := aku.mutation.SecretKey(); ok {
		_spec.SetField(apikey.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := aku.mutation.HashedSecretKey(); ok {
		_spec.SetField(apikey.FieldHashedSecretKey, field.TypeString, value)
	}
	if value, ok := aku.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
	}
	if aku.mutation.KeyCleared() {
		_spec.ClearField(apikey.FieldKey, field.TypeString)
	}
	if value, ok := aku.mutation.HashedKey(); ok {
		_spec.SetField(apikey.FieldHashedKey, field.TypeString, value)
	}
	if aku.mutation.HashedKeyCleared() {
		_spec.ClearField(apikey.FieldHashedKey, field.TypeString)
	}
	if value, ok := aku.mutation.GetType(); ok {
		_spec.SetField(apikey.FieldType, field.TypeEnum, value)
	}
	if value, ok := aku.mutation.Environment(); ok {
		_spec.SetField(apikey.FieldEnvironment, field.TypeEnum, value)
	}
	if value, ok := aku.mutation.Active(); ok {
		_spec.SetField(apikey.FieldActive, field.TypeBool, value)
	}
	if value, ok := aku.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := aku.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldPermissions, value)
		})
	}
	if aku.mutation.PermissionsCleared() {
		_spec.ClearField(apikey.FieldPermissions, field.TypeJSON)
	}
	if value, ok := aku.mutation.Scopes(); ok {
		_spec.SetField(apikey.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := aku.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldScopes, value)
		})
	}
	if aku.mutation.ScopesCleared() {
		_spec.ClearField(apikey.FieldScopes, field.TypeJSON)
	}
	if value, ok := aku.mutation.IPWhitelist(); ok {
		_spec.SetField(apikey.FieldIPWhitelist, field.TypeJSON, value)
	}
	if value, ok := aku.mutation.AppendedIPWhitelist(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldIPWhitelist, value)
		})
	}
	if aku.mutation.IPWhitelistCleared() {
		_spec.ClearField(apikey.FieldIPWhitelist, field.TypeJSON)
	}
	if value, ok := aku.mutation.RateLimits(); ok {
		_spec.SetField(apikey.FieldRateLimits, field.TypeJSON, value)
	}
	if aku.mutation.RateLimitsCleared() {
		_spec.ClearField(apikey.FieldRateLimits, field.TypeJSON)
	}
	if value, ok := aku.mutation.Metadata(); ok {
		_spec.SetField(apikey.FieldMetadata, field.TypeJSON, value)
	}
	if aku.mutation.MetadataCleared() {
		_spec.ClearField(apikey.FieldMetadata, field.TypeJSON)
	}
	if value, ok := aku.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeTime, value)
	}
	if aku.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeTime)
	}
	if value, ok := aku.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
	}
	if aku.mutation.ExpiresAtCleared() {
		_spec.ClearField(apikey.FieldExpiresAt, field.TypeTime)
	}
	if aku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aku.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aku.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !aku.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aku.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aku.mutation.done = true
	return n, nil
}

// ApiKeyUpdateOne is the builder for updating a single ApiKey entity.
type ApiKeyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiKeyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (akuo *ApiKeyUpdateOne) SetUpdatedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetUpdatedAt(t)
	return akuo
}

// SetDeletedAt sets the "deleted_at" field.
func (akuo *ApiKeyUpdateOne) SetDeletedAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetDeletedAt(t)
	return akuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableDeletedAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetDeletedAt(*t)
	}
	return akuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (akuo *ApiKeyUpdateOne) ClearDeletedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearDeletedAt()
	return akuo
}

// SetName sets the "name" field.
func (akuo *ApiKeyUpdateOne) SetName(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetName(s)
	return akuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableName(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetName(*s)
	}
	return akuo
}

// SetPublicKey sets the "public_key" field.
func (akuo *ApiKeyUpdateOne) SetPublicKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetPublicKey(s)
	return akuo
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillablePublicKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetPublicKey(*s)
	}
	return akuo
}

// SetSecretKey sets the "secret_key" field.
func (akuo *ApiKeyUpdateOne) SetSecretKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetSecretKey(s)
	return akuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableSecretKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetSecretKey(*s)
	}
	return akuo
}

// SetHashedSecretKey sets the "hashed_secret_key" field.
func (akuo *ApiKeyUpdateOne) SetHashedSecretKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetHashedSecretKey(s)
	return akuo
}

// SetNillableHashedSecretKey sets the "hashed_secret_key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableHashedSecretKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetHashedSecretKey(*s)
	}
	return akuo
}

// SetKey sets the "key" field.
func (akuo *ApiKeyUpdateOne) SetKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetKey(s)
	return akuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetKey(*s)
	}
	return akuo
}

// ClearKey clears the value of the "key" field.
func (akuo *ApiKeyUpdateOne) ClearKey() *ApiKeyUpdateOne {
	akuo.mutation.ClearKey()
	return akuo
}

// SetHashedKey sets the "hashed_key" field.
func (akuo *ApiKeyUpdateOne) SetHashedKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetHashedKey(s)
	return akuo
}

// SetNillableHashedKey sets the "hashed_key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableHashedKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetHashedKey(*s)
	}
	return akuo
}

// ClearHashedKey clears the value of the "hashed_key" field.
func (akuo *ApiKeyUpdateOne) ClearHashedKey() *ApiKeyUpdateOne {
	akuo.mutation.ClearHashedKey()
	return akuo
}

// SetUserID sets the "user_id" field.
func (akuo *ApiKeyUpdateOne) SetUserID(x xid.ID) *ApiKeyUpdateOne {
	akuo.mutation.SetUserID(x)
	return akuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableUserID(x *xid.ID) *ApiKeyUpdateOne {
	if x != nil {
		akuo.SetUserID(*x)
	}
	return akuo
}

// ClearUserID clears the value of the "user_id" field.
func (akuo *ApiKeyUpdateOne) ClearUserID() *ApiKeyUpdateOne {
	akuo.mutation.ClearUserID()
	return akuo
}

// SetOrganizationID sets the "organization_id" field.
func (akuo *ApiKeyUpdateOne) SetOrganizationID(x xid.ID) *ApiKeyUpdateOne {
	akuo.mutation.SetOrganizationID(x)
	return akuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableOrganizationID(x *xid.ID) *ApiKeyUpdateOne {
	if x != nil {
		akuo.SetOrganizationID(*x)
	}
	return akuo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (akuo *ApiKeyUpdateOne) ClearOrganizationID() *ApiKeyUpdateOne {
	akuo.mutation.ClearOrganizationID()
	return akuo
}

// SetType sets the "type" field.
func (akuo *ApiKeyUpdateOne) SetType(mkt model.APIKeyType) *ApiKeyUpdateOne {
	akuo.mutation.SetType(mkt)
	return akuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableType(mkt *model.APIKeyType) *ApiKeyUpdateOne {
	if mkt != nil {
		akuo.SetType(*mkt)
	}
	return akuo
}

// SetEnvironment sets the "environment" field.
func (akuo *ApiKeyUpdateOne) SetEnvironment(m model.Environment) *ApiKeyUpdateOne {
	akuo.mutation.SetEnvironment(m)
	return akuo
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableEnvironment(m *model.Environment) *ApiKeyUpdateOne {
	if m != nil {
		akuo.SetEnvironment(*m)
	}
	return akuo
}

// SetActive sets the "active" field.
func (akuo *ApiKeyUpdateOne) SetActive(b bool) *ApiKeyUpdateOne {
	akuo.mutation.SetActive(b)
	return akuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableActive(b *bool) *ApiKeyUpdateOne {
	if b != nil {
		akuo.SetActive(*b)
	}
	return akuo
}

// SetPermissions sets the "permissions" field.
func (akuo *ApiKeyUpdateOne) SetPermissions(s []string) *ApiKeyUpdateOne {
	akuo.mutation.SetPermissions(s)
	return akuo
}

// AppendPermissions appends s to the "permissions" field.
func (akuo *ApiKeyUpdateOne) AppendPermissions(s []string) *ApiKeyUpdateOne {
	akuo.mutation.AppendPermissions(s)
	return akuo
}

// ClearPermissions clears the value of the "permissions" field.
func (akuo *ApiKeyUpdateOne) ClearPermissions() *ApiKeyUpdateOne {
	akuo.mutation.ClearPermissions()
	return akuo
}

// SetScopes sets the "scopes" field.
func (akuo *ApiKeyUpdateOne) SetScopes(s []string) *ApiKeyUpdateOne {
	akuo.mutation.SetScopes(s)
	return akuo
}

// AppendScopes appends s to the "scopes" field.
func (akuo *ApiKeyUpdateOne) AppendScopes(s []string) *ApiKeyUpdateOne {
	akuo.mutation.AppendScopes(s)
	return akuo
}

// ClearScopes clears the value of the "scopes" field.
func (akuo *ApiKeyUpdateOne) ClearScopes() *ApiKeyUpdateOne {
	akuo.mutation.ClearScopes()
	return akuo
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (akuo *ApiKeyUpdateOne) SetIPWhitelist(s []string) *ApiKeyUpdateOne {
	akuo.mutation.SetIPWhitelist(s)
	return akuo
}

// AppendIPWhitelist appends s to the "ip_whitelist" field.
func (akuo *ApiKeyUpdateOne) AppendIPWhitelist(s []string) *ApiKeyUpdateOne {
	akuo.mutation.AppendIPWhitelist(s)
	return akuo
}

// ClearIPWhitelist clears the value of the "ip_whitelist" field.
func (akuo *ApiKeyUpdateOne) ClearIPWhitelist() *ApiKeyUpdateOne {
	akuo.mutation.ClearIPWhitelist()
	return akuo
}

// SetRateLimits sets the "rate_limits" field.
func (akuo *ApiKeyUpdateOne) SetRateLimits(ckrl common.APIKeyRateLimits) *ApiKeyUpdateOne {
	akuo.mutation.SetRateLimits(ckrl)
	return akuo
}

// SetNillableRateLimits sets the "rate_limits" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableRateLimits(ckrl *common.APIKeyRateLimits) *ApiKeyUpdateOne {
	if ckrl != nil {
		akuo.SetRateLimits(*ckrl)
	}
	return akuo
}

// ClearRateLimits clears the value of the "rate_limits" field.
func (akuo *ApiKeyUpdateOne) ClearRateLimits() *ApiKeyUpdateOne {
	akuo.mutation.ClearRateLimits()
	return akuo
}

// SetMetadata sets the "metadata" field.
func (akuo *ApiKeyUpdateOne) SetMetadata(m map[string]interface{}) *ApiKeyUpdateOne {
	akuo.mutation.SetMetadata(m)
	return akuo
}

// ClearMetadata clears the value of the "metadata" field.
func (akuo *ApiKeyUpdateOne) ClearMetadata() *ApiKeyUpdateOne {
	akuo.mutation.ClearMetadata()
	return akuo
}

// SetLastUsed sets the "last_used" field.
func (akuo *ApiKeyUpdateOne) SetLastUsed(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetLastUsed(t)
	return akuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableLastUsed(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetLastUsed(*t)
	}
	return akuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (akuo *ApiKeyUpdateOne) ClearLastUsed() *ApiKeyUpdateOne {
	akuo.mutation.ClearLastUsed()
	return akuo
}

// SetExpiresAt sets the "expires_at" field.
func (akuo *ApiKeyUpdateOne) SetExpiresAt(t time.Time) *ApiKeyUpdateOne {
	akuo.mutation.SetExpiresAt(t)
	return akuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableExpiresAt(t *time.Time) *ApiKeyUpdateOne {
	if t != nil {
		akuo.SetExpiresAt(*t)
	}
	return akuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (akuo *ApiKeyUpdateOne) ClearExpiresAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearExpiresAt()
	return akuo
}

// SetUser sets the "user" edge to the User entity.
func (akuo *ApiKeyUpdateOne) SetUser(u *User) *ApiKeyUpdateOne {
	return akuo.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (akuo *ApiKeyUpdateOne) SetOrganization(o *Organization) *ApiKeyUpdateOne {
	return akuo.SetOrganizationID(o.ID)
}

// AddActivityIDs adds the "activities" edge to the ApiKeyActivity entity by IDs.
func (akuo *ApiKeyUpdateOne) AddActivityIDs(ids ...xid.ID) *ApiKeyUpdateOne {
	akuo.mutation.AddActivityIDs(ids...)
	return akuo
}

// AddActivities adds the "activities" edges to the ApiKeyActivity entity.
func (akuo *ApiKeyUpdateOne) AddActivities(a ...*ApiKeyActivity) *ApiKeyUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return akuo.AddActivityIDs(ids...)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (akuo *ApiKeyUpdateOne) Mutation() *ApiKeyMutation {
	return akuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (akuo *ApiKeyUpdateOne) ClearUser() *ApiKeyUpdateOne {
	akuo.mutation.ClearUser()
	return akuo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (akuo *ApiKeyUpdateOne) ClearOrganization() *ApiKeyUpdateOne {
	akuo.mutation.ClearOrganization()
	return akuo
}

// ClearActivities clears all "activities" edges to the ApiKeyActivity entity.
func (akuo *ApiKeyUpdateOne) ClearActivities() *ApiKeyUpdateOne {
	akuo.mutation.ClearActivities()
	return akuo
}

// RemoveActivityIDs removes the "activities" edge to ApiKeyActivity entities by IDs.
func (akuo *ApiKeyUpdateOne) RemoveActivityIDs(ids ...xid.ID) *ApiKeyUpdateOne {
	akuo.mutation.RemoveActivityIDs(ids...)
	return akuo
}

// RemoveActivities removes "activities" edges to ApiKeyActivity entities.
func (akuo *ApiKeyUpdateOne) RemoveActivities(a ...*ApiKeyActivity) *ApiKeyUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return akuo.RemoveActivityIDs(ids...)
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (akuo *ApiKeyUpdateOne) Where(ps ...predicate.ApiKey) *ApiKeyUpdateOne {
	akuo.mutation.Where(ps...)
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *ApiKeyUpdateOne) Select(field string, fields ...string) *ApiKeyUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated ApiKey entity.
func (akuo *ApiKeyUpdateOne) Save(ctx context.Context) (*ApiKey, error) {
	akuo.defaults()
	return withHooks(ctx, akuo.sqlSave, akuo.mutation, akuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) SaveX(ctx context.Context) *ApiKey {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *ApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akuo *ApiKeyUpdateOne) defaults() {
	if _, ok := akuo.mutation.UpdatedAt(); !ok {
		v := apikey.UpdateDefaultUpdatedAt()
		akuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akuo *ApiKeyUpdateOne) check() error {
	if v, ok := akuo.mutation.Name(); ok {
		if err := apikey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ApiKey.name": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.PublicKey(); ok {
		if err := apikey.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.public_key": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.HashedSecretKey(); ok {
		if err := apikey.HashedSecretKeyValidator(v); err != nil {
			return &ValidationError{Name: "hashed_secret_key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.hashed_secret_key": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.GetType(); ok {
		if err := apikey.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ApiKey.type": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.Environment(); ok {
		if err := apikey.EnvironmentValidator(v); err != nil {
			return &ValidationError{Name: "environment", err: fmt.Errorf(`ent: validator failed for field "ApiKey.environment": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (akuo *ApiKeyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiKeyUpdateOne {
	akuo.modifiers = append(akuo.modifiers, modifiers...)
	return akuo
}

func (akuo *ApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *ApiKey, err error) {
	if err := akuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikey.FieldID)
		for _, f := range fields {
			if !apikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := akuo.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
	}
	if akuo.mutation.DeletedAtCleared() {
		_spec.ClearField(apikey.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := akuo.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
	}
	if value, ok := akuo.mutation.PublicKey(); ok {
		_spec.SetField(apikey.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.SecretKey(); ok {
		_spec.SetField(apikey.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.HashedSecretKey(); ok {
		_spec.SetField(apikey.FieldHashedSecretKey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
	}
	if akuo.mutation.KeyCleared() {
		_spec.ClearField(apikey.FieldKey, field.TypeString)
	}
	if value, ok := akuo.mutation.HashedKey(); ok {
		_spec.SetField(apikey.FieldHashedKey, field.TypeString, value)
	}
	if akuo.mutation.HashedKeyCleared() {
		_spec.ClearField(apikey.FieldHashedKey, field.TypeString)
	}
	if value, ok := akuo.mutation.GetType(); ok {
		_spec.SetField(apikey.FieldType, field.TypeEnum, value)
	}
	if value, ok := akuo.mutation.Environment(); ok {
		_spec.SetField(apikey.FieldEnvironment, field.TypeEnum, value)
	}
	if value, ok := akuo.mutation.Active(); ok {
		_spec.SetField(apikey.FieldActive, field.TypeBool, value)
	}
	if value, ok := akuo.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := akuo.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldPermissions, value)
		})
	}
	if akuo.mutation.PermissionsCleared() {
		_spec.ClearField(apikey.FieldPermissions, field.TypeJSON)
	}
	if value, ok := akuo.mutation.Scopes(); ok {
		_spec.SetField(apikey.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := akuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldScopes, value)
		})
	}
	if akuo.mutation.ScopesCleared() {
		_spec.ClearField(apikey.FieldScopes, field.TypeJSON)
	}
	if value, ok := akuo.mutation.IPWhitelist(); ok {
		_spec.SetField(apikey.FieldIPWhitelist, field.TypeJSON, value)
	}
	if value, ok := akuo.mutation.AppendedIPWhitelist(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apikey.FieldIPWhitelist, value)
		})
	}
	if akuo.mutation.IPWhitelistCleared() {
		_spec.ClearField(apikey.FieldIPWhitelist, field.TypeJSON)
	}
	if value, ok := akuo.mutation.RateLimits(); ok {
		_spec.SetField(apikey.FieldRateLimits, field.TypeJSON, value)
	}
	if akuo.mutation.RateLimitsCleared() {
		_spec.ClearField(apikey.FieldRateLimits, field.TypeJSON)
	}
	if value, ok := akuo.mutation.Metadata(); ok {
		_spec.SetField(apikey.FieldMetadata, field.TypeJSON, value)
	}
	if akuo.mutation.MetadataCleared() {
		_spec.ClearField(apikey.FieldMetadata, field.TypeJSON)
	}
	if value, ok := akuo.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeTime, value)
	}
	if akuo.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeTime)
	}
	if value, ok := akuo.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
	}
	if akuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(apikey.FieldExpiresAt, field.TypeTime)
	}
	if akuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if akuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if akuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !akuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(akuo.modifiers...)
	_node = &ApiKey{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akuo.mutation.done = true
	return _node, nil
}
