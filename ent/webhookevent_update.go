// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"
)

// WebhookEventUpdate is the builder for updating WebhookEvent entities.
type WebhookEventUpdate struct {
	config
	hooks     []Hook
	mutation  *WebhookEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WebhookEventUpdate builder.
func (weu *WebhookEventUpdate) Where(ps ...predicate.WebhookEvent) *WebhookEventUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetUpdatedAt sets the "updated_at" field.
func (weu *WebhookEventUpdate) SetUpdatedAt(t time.Time) *WebhookEventUpdate {
	weu.mutation.SetUpdatedAt(t)
	return weu
}

// SetDeletedAt sets the "deleted_at" field.
func (weu *WebhookEventUpdate) SetDeletedAt(t time.Time) *WebhookEventUpdate {
	weu.mutation.SetDeletedAt(t)
	return weu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableDeletedAt(t *time.Time) *WebhookEventUpdate {
	if t != nil {
		weu.SetDeletedAt(*t)
	}
	return weu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weu *WebhookEventUpdate) ClearDeletedAt() *WebhookEventUpdate {
	weu.mutation.ClearDeletedAt()
	return weu
}

// SetWebhookID sets the "webhook_id" field.
func (weu *WebhookEventUpdate) SetWebhookID(x xid.ID) *WebhookEventUpdate {
	weu.mutation.SetWebhookID(x)
	return weu
}

// SetNillableWebhookID sets the "webhook_id" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableWebhookID(x *xid.ID) *WebhookEventUpdate {
	if x != nil {
		weu.SetWebhookID(*x)
	}
	return weu
}

// SetEventType sets the "event_type" field.
func (weu *WebhookEventUpdate) SetEventType(s string) *WebhookEventUpdate {
	weu.mutation.SetEventType(s)
	return weu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableEventType(s *string) *WebhookEventUpdate {
	if s != nil {
		weu.SetEventType(*s)
	}
	return weu
}

// SetHeaders sets the "headers" field.
func (weu *WebhookEventUpdate) SetHeaders(m map[string]string) *WebhookEventUpdate {
	weu.mutation.SetHeaders(m)
	return weu
}

// ClearHeaders clears the value of the "headers" field.
func (weu *WebhookEventUpdate) ClearHeaders() *WebhookEventUpdate {
	weu.mutation.ClearHeaders()
	return weu
}

// SetPayload sets the "payload" field.
func (weu *WebhookEventUpdate) SetPayload(m map[string]interface{}) *WebhookEventUpdate {
	weu.mutation.SetPayload(m)
	return weu
}

// ClearPayload clears the value of the "payload" field.
func (weu *WebhookEventUpdate) ClearPayload() *WebhookEventUpdate {
	weu.mutation.ClearPayload()
	return weu
}

// SetDelivered sets the "delivered" field.
func (weu *WebhookEventUpdate) SetDelivered(b bool) *WebhookEventUpdate {
	weu.mutation.SetDelivered(b)
	return weu
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableDelivered(b *bool) *WebhookEventUpdate {
	if b != nil {
		weu.SetDelivered(*b)
	}
	return weu
}

// SetDeliveredAt sets the "delivered_at" field.
func (weu *WebhookEventUpdate) SetDeliveredAt(t time.Time) *WebhookEventUpdate {
	weu.mutation.SetDeliveredAt(t)
	return weu
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableDeliveredAt(t *time.Time) *WebhookEventUpdate {
	if t != nil {
		weu.SetDeliveredAt(*t)
	}
	return weu
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (weu *WebhookEventUpdate) ClearDeliveredAt() *WebhookEventUpdate {
	weu.mutation.ClearDeliveredAt()
	return weu
}

// SetAttempts sets the "attempts" field.
func (weu *WebhookEventUpdate) SetAttempts(i int) *WebhookEventUpdate {
	weu.mutation.ResetAttempts()
	weu.mutation.SetAttempts(i)
	return weu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableAttempts(i *int) *WebhookEventUpdate {
	if i != nil {
		weu.SetAttempts(*i)
	}
	return weu
}

// AddAttempts adds i to the "attempts" field.
func (weu *WebhookEventUpdate) AddAttempts(i int) *WebhookEventUpdate {
	weu.mutation.AddAttempts(i)
	return weu
}

// SetNextRetry sets the "next_retry" field.
func (weu *WebhookEventUpdate) SetNextRetry(t time.Time) *WebhookEventUpdate {
	weu.mutation.SetNextRetry(t)
	return weu
}

// SetNillableNextRetry sets the "next_retry" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableNextRetry(t *time.Time) *WebhookEventUpdate {
	if t != nil {
		weu.SetNextRetry(*t)
	}
	return weu
}

// ClearNextRetry clears the value of the "next_retry" field.
func (weu *WebhookEventUpdate) ClearNextRetry() *WebhookEventUpdate {
	weu.mutation.ClearNextRetry()
	return weu
}

// SetStatusCode sets the "status_code" field.
func (weu *WebhookEventUpdate) SetStatusCode(i int) *WebhookEventUpdate {
	weu.mutation.ResetStatusCode()
	weu.mutation.SetStatusCode(i)
	return weu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableStatusCode(i *int) *WebhookEventUpdate {
	if i != nil {
		weu.SetStatusCode(*i)
	}
	return weu
}

// AddStatusCode adds i to the "status_code" field.
func (weu *WebhookEventUpdate) AddStatusCode(i int) *WebhookEventUpdate {
	weu.mutation.AddStatusCode(i)
	return weu
}

// ClearStatusCode clears the value of the "status_code" field.
func (weu *WebhookEventUpdate) ClearStatusCode() *WebhookEventUpdate {
	weu.mutation.ClearStatusCode()
	return weu
}

// SetResponseBody sets the "response_body" field.
func (weu *WebhookEventUpdate) SetResponseBody(s string) *WebhookEventUpdate {
	weu.mutation.SetResponseBody(s)
	return weu
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableResponseBody(s *string) *WebhookEventUpdate {
	if s != nil {
		weu.SetResponseBody(*s)
	}
	return weu
}

// ClearResponseBody clears the value of the "response_body" field.
func (weu *WebhookEventUpdate) ClearResponseBody() *WebhookEventUpdate {
	weu.mutation.ClearResponseBody()
	return weu
}

// SetError sets the "error" field.
func (weu *WebhookEventUpdate) SetError(s string) *WebhookEventUpdate {
	weu.mutation.SetError(s)
	return weu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weu *WebhookEventUpdate) SetNillableError(s *string) *WebhookEventUpdate {
	if s != nil {
		weu.SetError(*s)
	}
	return weu
}

// ClearError clears the value of the "error" field.
func (weu *WebhookEventUpdate) ClearError() *WebhookEventUpdate {
	weu.mutation.ClearError()
	return weu
}

// SetWebhook sets the "webhook" edge to the Webhook entity.
func (weu *WebhookEventUpdate) SetWebhook(w *Webhook) *WebhookEventUpdate {
	return weu.SetWebhookID(w.ID)
}

// Mutation returns the WebhookEventMutation object of the builder.
func (weu *WebhookEventUpdate) Mutation() *WebhookEventMutation {
	return weu.mutation
}

// ClearWebhook clears the "webhook" edge to the Webhook entity.
func (weu *WebhookEventUpdate) ClearWebhook() *WebhookEventUpdate {
	weu.mutation.ClearWebhook()
	return weu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WebhookEventUpdate) Save(ctx context.Context) (int, error) {
	weu.defaults()
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WebhookEventUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WebhookEventUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WebhookEventUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weu *WebhookEventUpdate) defaults() {
	if _, ok := weu.mutation.UpdatedAt(); !ok {
		v := webhookevent.UpdateDefaultUpdatedAt()
		weu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WebhookEventUpdate) check() error {
	if v, ok := weu.mutation.WebhookID(); ok {
		if err := webhookevent.WebhookIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.webhook_id": %w`, err)}
		}
	}
	if v, ok := weu.mutation.EventType(); ok {
		if err := webhookevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.event_type": %w`, err)}
		}
	}
	if weu.mutation.WebhookCleared() && len(weu.mutation.WebhookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WebhookEvent.webhook"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (weu *WebhookEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookEventUpdate {
	weu.modifiers = append(weu.modifiers, modifiers...)
	return weu
}

func (weu *WebhookEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhookevent.Table, webhookevent.Columns, sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.UpdatedAt(); ok {
		_spec.SetField(webhookevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.DeletedAt(); ok {
		_spec.SetField(webhookevent.FieldDeletedAt, field.TypeTime, value)
	}
	if weu.mutation.DeletedAtCleared() {
		_spec.ClearField(webhookevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weu.mutation.EventType(); ok {
		_spec.SetField(webhookevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := weu.mutation.Headers(); ok {
		_spec.SetField(webhookevent.FieldHeaders, field.TypeJSON, value)
	}
	if weu.mutation.HeadersCleared() {
		_spec.ClearField(webhookevent.FieldHeaders, field.TypeJSON)
	}
	if value, ok := weu.mutation.Payload(); ok {
		_spec.SetField(webhookevent.FieldPayload, field.TypeJSON, value)
	}
	if weu.mutation.PayloadCleared() {
		_spec.ClearField(webhookevent.FieldPayload, field.TypeJSON)
	}
	if value, ok := weu.mutation.Delivered(); ok {
		_spec.SetField(webhookevent.FieldDelivered, field.TypeBool, value)
	}
	if value, ok := weu.mutation.DeliveredAt(); ok {
		_spec.SetField(webhookevent.FieldDeliveredAt, field.TypeTime, value)
	}
	if weu.mutation.DeliveredAtCleared() {
		_spec.ClearField(webhookevent.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := weu.mutation.Attempts(); ok {
		_spec.SetField(webhookevent.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedAttempts(); ok {
		_spec.AddField(webhookevent.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := weu.mutation.NextRetry(); ok {
		_spec.SetField(webhookevent.FieldNextRetry, field.TypeTime, value)
	}
	if weu.mutation.NextRetryCleared() {
		_spec.ClearField(webhookevent.FieldNextRetry, field.TypeTime)
	}
	if value, ok := weu.mutation.StatusCode(); ok {
		_spec.SetField(webhookevent.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedStatusCode(); ok {
		_spec.AddField(webhookevent.FieldStatusCode, field.TypeInt, value)
	}
	if weu.mutation.StatusCodeCleared() {
		_spec.ClearField(webhookevent.FieldStatusCode, field.TypeInt)
	}
	if value, ok := weu.mutation.ResponseBody(); ok {
		_spec.SetField(webhookevent.FieldResponseBody, field.TypeString, value)
	}
	if weu.mutation.ResponseBodyCleared() {
		_spec.ClearField(webhookevent.FieldResponseBody, field.TypeString)
	}
	if value, ok := weu.mutation.Error(); ok {
		_spec.SetField(webhookevent.FieldError, field.TypeString, value)
	}
	if weu.mutation.ErrorCleared() {
		_spec.ClearField(webhookevent.FieldError, field.TypeString)
	}
	if weu.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(weu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhookevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WebhookEventUpdateOne is the builder for updating a single WebhookEvent entity.
type WebhookEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WebhookEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (weuo *WebhookEventUpdateOne) SetUpdatedAt(t time.Time) *WebhookEventUpdateOne {
	weuo.mutation.SetUpdatedAt(t)
	return weuo
}

// SetDeletedAt sets the "deleted_at" field.
func (weuo *WebhookEventUpdateOne) SetDeletedAt(t time.Time) *WebhookEventUpdateOne {
	weuo.mutation.SetDeletedAt(t)
	return weuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableDeletedAt(t *time.Time) *WebhookEventUpdateOne {
	if t != nil {
		weuo.SetDeletedAt(*t)
	}
	return weuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weuo *WebhookEventUpdateOne) ClearDeletedAt() *WebhookEventUpdateOne {
	weuo.mutation.ClearDeletedAt()
	return weuo
}

// SetWebhookID sets the "webhook_id" field.
func (weuo *WebhookEventUpdateOne) SetWebhookID(x xid.ID) *WebhookEventUpdateOne {
	weuo.mutation.SetWebhookID(x)
	return weuo
}

// SetNillableWebhookID sets the "webhook_id" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableWebhookID(x *xid.ID) *WebhookEventUpdateOne {
	if x != nil {
		weuo.SetWebhookID(*x)
	}
	return weuo
}

// SetEventType sets the "event_type" field.
func (weuo *WebhookEventUpdateOne) SetEventType(s string) *WebhookEventUpdateOne {
	weuo.mutation.SetEventType(s)
	return weuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableEventType(s *string) *WebhookEventUpdateOne {
	if s != nil {
		weuo.SetEventType(*s)
	}
	return weuo
}

// SetHeaders sets the "headers" field.
func (weuo *WebhookEventUpdateOne) SetHeaders(m map[string]string) *WebhookEventUpdateOne {
	weuo.mutation.SetHeaders(m)
	return weuo
}

// ClearHeaders clears the value of the "headers" field.
func (weuo *WebhookEventUpdateOne) ClearHeaders() *WebhookEventUpdateOne {
	weuo.mutation.ClearHeaders()
	return weuo
}

// SetPayload sets the "payload" field.
func (weuo *WebhookEventUpdateOne) SetPayload(m map[string]interface{}) *WebhookEventUpdateOne {
	weuo.mutation.SetPayload(m)
	return weuo
}

// ClearPayload clears the value of the "payload" field.
func (weuo *WebhookEventUpdateOne) ClearPayload() *WebhookEventUpdateOne {
	weuo.mutation.ClearPayload()
	return weuo
}

// SetDelivered sets the "delivered" field.
func (weuo *WebhookEventUpdateOne) SetDelivered(b bool) *WebhookEventUpdateOne {
	weuo.mutation.SetDelivered(b)
	return weuo
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableDelivered(b *bool) *WebhookEventUpdateOne {
	if b != nil {
		weuo.SetDelivered(*b)
	}
	return weuo
}

// SetDeliveredAt sets the "delivered_at" field.
func (weuo *WebhookEventUpdateOne) SetDeliveredAt(t time.Time) *WebhookEventUpdateOne {
	weuo.mutation.SetDeliveredAt(t)
	return weuo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableDeliveredAt(t *time.Time) *WebhookEventUpdateOne {
	if t != nil {
		weuo.SetDeliveredAt(*t)
	}
	return weuo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (weuo *WebhookEventUpdateOne) ClearDeliveredAt() *WebhookEventUpdateOne {
	weuo.mutation.ClearDeliveredAt()
	return weuo
}

// SetAttempts sets the "attempts" field.
func (weuo *WebhookEventUpdateOne) SetAttempts(i int) *WebhookEventUpdateOne {
	weuo.mutation.ResetAttempts()
	weuo.mutation.SetAttempts(i)
	return weuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableAttempts(i *int) *WebhookEventUpdateOne {
	if i != nil {
		weuo.SetAttempts(*i)
	}
	return weuo
}

// AddAttempts adds i to the "attempts" field.
func (weuo *WebhookEventUpdateOne) AddAttempts(i int) *WebhookEventUpdateOne {
	weuo.mutation.AddAttempts(i)
	return weuo
}

// SetNextRetry sets the "next_retry" field.
func (weuo *WebhookEventUpdateOne) SetNextRetry(t time.Time) *WebhookEventUpdateOne {
	weuo.mutation.SetNextRetry(t)
	return weuo
}

// SetNillableNextRetry sets the "next_retry" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableNextRetry(t *time.Time) *WebhookEventUpdateOne {
	if t != nil {
		weuo.SetNextRetry(*t)
	}
	return weuo
}

// ClearNextRetry clears the value of the "next_retry" field.
func (weuo *WebhookEventUpdateOne) ClearNextRetry() *WebhookEventUpdateOne {
	weuo.mutation.ClearNextRetry()
	return weuo
}

// SetStatusCode sets the "status_code" field.
func (weuo *WebhookEventUpdateOne) SetStatusCode(i int) *WebhookEventUpdateOne {
	weuo.mutation.ResetStatusCode()
	weuo.mutation.SetStatusCode(i)
	return weuo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableStatusCode(i *int) *WebhookEventUpdateOne {
	if i != nil {
		weuo.SetStatusCode(*i)
	}
	return weuo
}

// AddStatusCode adds i to the "status_code" field.
func (weuo *WebhookEventUpdateOne) AddStatusCode(i int) *WebhookEventUpdateOne {
	weuo.mutation.AddStatusCode(i)
	return weuo
}

// ClearStatusCode clears the value of the "status_code" field.
func (weuo *WebhookEventUpdateOne) ClearStatusCode() *WebhookEventUpdateOne {
	weuo.mutation.ClearStatusCode()
	return weuo
}

// SetResponseBody sets the "response_body" field.
func (weuo *WebhookEventUpdateOne) SetResponseBody(s string) *WebhookEventUpdateOne {
	weuo.mutation.SetResponseBody(s)
	return weuo
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableResponseBody(s *string) *WebhookEventUpdateOne {
	if s != nil {
		weuo.SetResponseBody(*s)
	}
	return weuo
}

// ClearResponseBody clears the value of the "response_body" field.
func (weuo *WebhookEventUpdateOne) ClearResponseBody() *WebhookEventUpdateOne {
	weuo.mutation.ClearResponseBody()
	return weuo
}

// SetError sets the "error" field.
func (weuo *WebhookEventUpdateOne) SetError(s string) *WebhookEventUpdateOne {
	weuo.mutation.SetError(s)
	return weuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weuo *WebhookEventUpdateOne) SetNillableError(s *string) *WebhookEventUpdateOne {
	if s != nil {
		weuo.SetError(*s)
	}
	return weuo
}

// ClearError clears the value of the "error" field.
func (weuo *WebhookEventUpdateOne) ClearError() *WebhookEventUpdateOne {
	weuo.mutation.ClearError()
	return weuo
}

// SetWebhook sets the "webhook" edge to the Webhook entity.
func (weuo *WebhookEventUpdateOne) SetWebhook(w *Webhook) *WebhookEventUpdateOne {
	return weuo.SetWebhookID(w.ID)
}

// Mutation returns the WebhookEventMutation object of the builder.
func (weuo *WebhookEventUpdateOne) Mutation() *WebhookEventMutation {
	return weuo.mutation
}

// ClearWebhook clears the "webhook" edge to the Webhook entity.
func (weuo *WebhookEventUpdateOne) ClearWebhook() *WebhookEventUpdateOne {
	weuo.mutation.ClearWebhook()
	return weuo
}

// Where appends a list predicates to the WebhookEventUpdate builder.
func (weuo *WebhookEventUpdateOne) Where(ps ...predicate.WebhookEvent) *WebhookEventUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WebhookEventUpdateOne) Select(field string, fields ...string) *WebhookEventUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WebhookEvent entity.
func (weuo *WebhookEventUpdateOne) Save(ctx context.Context) (*WebhookEvent, error) {
	weuo.defaults()
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WebhookEventUpdateOne) SaveX(ctx context.Context) *WebhookEvent {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WebhookEventUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WebhookEventUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weuo *WebhookEventUpdateOne) defaults() {
	if _, ok := weuo.mutation.UpdatedAt(); !ok {
		v := webhookevent.UpdateDefaultUpdatedAt()
		weuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WebhookEventUpdateOne) check() error {
	if v, ok := weuo.mutation.WebhookID(); ok {
		if err := webhookevent.WebhookIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.webhook_id": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.EventType(); ok {
		if err := webhookevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.event_type": %w`, err)}
		}
	}
	if weuo.mutation.WebhookCleared() && len(weuo.mutation.WebhookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WebhookEvent.webhook"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (weuo *WebhookEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookEventUpdateOne {
	weuo.modifiers = append(weuo.modifiers, modifiers...)
	return weuo
}

func (weuo *WebhookEventUpdateOne) sqlSave(ctx context.Context) (_node *WebhookEvent, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhookevent.Table, webhookevent.Columns, sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebhookEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webhookevent.FieldID)
		for _, f := range fields {
			if !webhookevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webhookevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webhookevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.DeletedAt(); ok {
		_spec.SetField(webhookevent.FieldDeletedAt, field.TypeTime, value)
	}
	if weuo.mutation.DeletedAtCleared() {
		_spec.ClearField(webhookevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weuo.mutation.EventType(); ok {
		_spec.SetField(webhookevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := weuo.mutation.Headers(); ok {
		_spec.SetField(webhookevent.FieldHeaders, field.TypeJSON, value)
	}
	if weuo.mutation.HeadersCleared() {
		_spec.ClearField(webhookevent.FieldHeaders, field.TypeJSON)
	}
	if value, ok := weuo.mutation.Payload(); ok {
		_spec.SetField(webhookevent.FieldPayload, field.TypeJSON, value)
	}
	if weuo.mutation.PayloadCleared() {
		_spec.ClearField(webhookevent.FieldPayload, field.TypeJSON)
	}
	if value, ok := weuo.mutation.Delivered(); ok {
		_spec.SetField(webhookevent.FieldDelivered, field.TypeBool, value)
	}
	if value, ok := weuo.mutation.DeliveredAt(); ok {
		_spec.SetField(webhookevent.FieldDeliveredAt, field.TypeTime, value)
	}
	if weuo.mutation.DeliveredAtCleared() {
		_spec.ClearField(webhookevent.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := weuo.mutation.Attempts(); ok {
		_spec.SetField(webhookevent.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedAttempts(); ok {
		_spec.AddField(webhookevent.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.NextRetry(); ok {
		_spec.SetField(webhookevent.FieldNextRetry, field.TypeTime, value)
	}
	if weuo.mutation.NextRetryCleared() {
		_spec.ClearField(webhookevent.FieldNextRetry, field.TypeTime)
	}
	if value, ok := weuo.mutation.StatusCode(); ok {
		_spec.SetField(webhookevent.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedStatusCode(); ok {
		_spec.AddField(webhookevent.FieldStatusCode, field.TypeInt, value)
	}
	if weuo.mutation.StatusCodeCleared() {
		_spec.ClearField(webhookevent.FieldStatusCode, field.TypeInt)
	}
	if value, ok := weuo.mutation.ResponseBody(); ok {
		_spec.SetField(webhookevent.FieldResponseBody, field.TypeString, value)
	}
	if weuo.mutation.ResponseBodyCleared() {
		_spec.ClearField(webhookevent.FieldResponseBody, field.TypeString)
	}
	if value, ok := weuo.mutation.Error(); ok {
		_spec.SetField(webhookevent.FieldError, field.TypeString, value)
	}
	if weuo.mutation.ErrorCleared() {
		_spec.ClearField(webhookevent.FieldError, field.TypeString)
	}
	if weuo.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(weuo.modifiers...)
	_node = &WebhookEvent{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhookevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
