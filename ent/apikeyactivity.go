// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
)

// ApiKeyActivity is the model entity for the ApiKeyActivity schema.
type ApiKeyActivity struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// KeyID holds the value of the "key_id" field.
	KeyID xid.ID `json:"key_id,omitempty"`
	// Action performed (api_request, key_created, etc.)
	Action string `json:"action,omitempty"`
	// API endpoint called
	Endpoint string `json:"endpoint,omitempty"`
	// HTTP method (GET, POST, etc.)
	Method string `json:"method,omitempty"`
	// HTTP status code
	StatusCode int `json:"status_code,omitempty"`
	// Response time in milliseconds
	ResponseTime int `json:"response_time,omitempty"`
	// Client IP address
	IPAddress string `json:"ip_address,omitempty"`
	// Client user agent
	UserAgent string `json:"user_agent,omitempty"`
	// Whether the request was successful
	Success bool `json:"success,omitempty"`
	// Error message if failed
	Error string `json:"error,omitempty"`
	// When the activity occurred
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApiKeyActivityQuery when eager-loading is set.
	Edges        ApiKeyActivityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApiKeyActivityEdges holds the relations/edges for other nodes in the graph.
type ApiKeyActivityEdges struct {
	// Key holds the value of the key edge.
	Key *ApiKey `json:"key,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KeyOrErr returns the Key value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApiKeyActivityEdges) KeyOrErr() (*ApiKey, error) {
	if e.Key != nil {
		return e.Key, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: apikey.Label}
	}
	return nil, &NotLoadedError{edge: "key"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiKeyActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikeyactivity.FieldMetadata:
			values[i] = new([]byte)
		case apikeyactivity.FieldSuccess:
			values[i] = new(sql.NullBool)
		case apikeyactivity.FieldStatusCode, apikeyactivity.FieldResponseTime:
			values[i] = new(sql.NullInt64)
		case apikeyactivity.FieldAction, apikeyactivity.FieldEndpoint, apikeyactivity.FieldMethod, apikeyactivity.FieldIPAddress, apikeyactivity.FieldUserAgent, apikeyactivity.FieldError:
			values[i] = new(sql.NullString)
		case apikeyactivity.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case apikeyactivity.FieldID, apikeyactivity.FieldKeyID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiKeyActivity fields.
func (aka *ApiKeyActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikeyactivity.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aka.ID = *value
			}
		case apikeyactivity.FieldKeyID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value != nil {
				aka.KeyID = *value
			}
		case apikeyactivity.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				aka.Action = value.String
			}
		case apikeyactivity.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				aka.Endpoint = value.String
			}
		case apikeyactivity.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				aka.Method = value.String
			}
		case apikeyactivity.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				aka.StatusCode = int(value.Int64)
			}
		case apikeyactivity.FieldResponseTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_time", values[i])
			} else if value.Valid {
				aka.ResponseTime = int(value.Int64)
			}
		case apikeyactivity.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				aka.IPAddress = value.String
			}
		case apikeyactivity.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				aka.UserAgent = value.String
			}
		case apikeyactivity.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				aka.Success = value.Bool
			}
		case apikeyactivity.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				aka.Error = value.String
			}
		case apikeyactivity.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				aka.Timestamp = value.Time
			}
		case apikeyactivity.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aka.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			aka.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiKeyActivity.
// This includes values selected through modifiers, order, etc.
func (aka *ApiKeyActivity) Value(name string) (ent.Value, error) {
	return aka.selectValues.Get(name)
}

// QueryKey queries the "key" edge of the ApiKeyActivity entity.
func (aka *ApiKeyActivity) QueryKey() *ApiKeyQuery {
	return NewApiKeyActivityClient(aka.config).QueryKey(aka)
}

// Update returns a builder for updating this ApiKeyActivity.
// Note that you need to call ApiKeyActivity.Unwrap() before calling this method if this ApiKeyActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (aka *ApiKeyActivity) Update() *ApiKeyActivityUpdateOne {
	return NewApiKeyActivityClient(aka.config).UpdateOne(aka)
}

// Unwrap unwraps the ApiKeyActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aka *ApiKeyActivity) Unwrap() *ApiKeyActivity {
	_tx, ok := aka.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiKeyActivity is not a transactional entity")
	}
	aka.config.driver = _tx.drv
	return aka
}

// String implements the fmt.Stringer.
func (aka *ApiKeyActivity) String() string {
	var builder strings.Builder
	builder.WriteString("ApiKeyActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aka.ID))
	builder.WriteString("key_id=")
	builder.WriteString(fmt.Sprintf("%v", aka.KeyID))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(aka.Action)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(aka.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(aka.Method)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", aka.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("response_time=")
	builder.WriteString(fmt.Sprintf("%v", aka.ResponseTime))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(aka.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(aka.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", aka.Success))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(aka.Error)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(aka.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", aka.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// ApiKeyActivities is a parsable slice of ApiKeyActivity.
type ApiKeyActivities []*ApiKeyActivity
