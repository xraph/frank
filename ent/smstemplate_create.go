// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/smstemplate"
)

// SMSTemplateCreate is the builder for creating a SMSTemplate entity.
type SMSTemplateCreate struct {
	config
	mutation *SMSTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (stc *SMSTemplateCreate) SetCreatedAt(t time.Time) *SMSTemplateCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableCreatedAt(t *time.Time) *SMSTemplateCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SMSTemplateCreate) SetUpdatedAt(t time.Time) *SMSTemplateCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableUpdatedAt(t *time.Time) *SMSTemplateCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *SMSTemplateCreate) SetDeletedAt(t time.Time) *SMSTemplateCreate {
	stc.mutation.SetDeletedAt(t)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableDeletedAt(t *time.Time) *SMSTemplateCreate {
	if t != nil {
		stc.SetDeletedAt(*t)
	}
	return stc
}

// SetName sets the "name" field.
func (stc *SMSTemplateCreate) SetName(s string) *SMSTemplateCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetContent sets the "content" field.
func (stc *SMSTemplateCreate) SetContent(s string) *SMSTemplateCreate {
	stc.mutation.SetContent(s)
	return stc
}

// SetType sets the "type" field.
func (stc *SMSTemplateCreate) SetType(s string) *SMSTemplateCreate {
	stc.mutation.SetType(s)
	return stc
}

// SetOrganizationID sets the "organization_id" field.
func (stc *SMSTemplateCreate) SetOrganizationID(x xid.ID) *SMSTemplateCreate {
	stc.mutation.SetOrganizationID(x)
	return stc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableOrganizationID(x *xid.ID) *SMSTemplateCreate {
	if x != nil {
		stc.SetOrganizationID(*x)
	}
	return stc
}

// SetActive sets the "active" field.
func (stc *SMSTemplateCreate) SetActive(b bool) *SMSTemplateCreate {
	stc.mutation.SetActive(b)
	return stc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableActive(b *bool) *SMSTemplateCreate {
	if b != nil {
		stc.SetActive(*b)
	}
	return stc
}

// SetSystem sets the "system" field.
func (stc *SMSTemplateCreate) SetSystem(b bool) *SMSTemplateCreate {
	stc.mutation.SetSystem(b)
	return stc
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableSystem(b *bool) *SMSTemplateCreate {
	if b != nil {
		stc.SetSystem(*b)
	}
	return stc
}

// SetLocale sets the "locale" field.
func (stc *SMSTemplateCreate) SetLocale(s string) *SMSTemplateCreate {
	stc.mutation.SetLocale(s)
	return stc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableLocale(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetLocale(*s)
	}
	return stc
}

// SetMaxLength sets the "max_length" field.
func (stc *SMSTemplateCreate) SetMaxLength(i int) *SMSTemplateCreate {
	stc.mutation.SetMaxLength(i)
	return stc
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableMaxLength(i *int) *SMSTemplateCreate {
	if i != nil {
		stc.SetMaxLength(*i)
	}
	return stc
}

// SetMessageType sets the "message_type" field.
func (stc *SMSTemplateCreate) SetMessageType(s string) *SMSTemplateCreate {
	stc.mutation.SetMessageType(s)
	return stc
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableMessageType(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetMessageType(*s)
	}
	return stc
}

// SetEstimatedSegments sets the "estimated_segments" field.
func (stc *SMSTemplateCreate) SetEstimatedSegments(i int) *SMSTemplateCreate {
	stc.mutation.SetEstimatedSegments(i)
	return stc
}

// SetNillableEstimatedSegments sets the "estimated_segments" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableEstimatedSegments(i *int) *SMSTemplateCreate {
	if i != nil {
		stc.SetEstimatedSegments(*i)
	}
	return stc
}

// SetEstimatedCost sets the "estimated_cost" field.
func (stc *SMSTemplateCreate) SetEstimatedCost(f float64) *SMSTemplateCreate {
	stc.mutation.SetEstimatedCost(f)
	return stc
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableEstimatedCost(f *float64) *SMSTemplateCreate {
	if f != nil {
		stc.SetEstimatedCost(*f)
	}
	return stc
}

// SetCurrency sets the "currency" field.
func (stc *SMSTemplateCreate) SetCurrency(s string) *SMSTemplateCreate {
	stc.mutation.SetCurrency(s)
	return stc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableCurrency(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetCurrency(*s)
	}
	return stc
}

// SetVariables sets the "variables" field.
func (stc *SMSTemplateCreate) SetVariables(s []string) *SMSTemplateCreate {
	stc.mutation.SetVariables(s)
	return stc
}

// SetMetadata sets the "metadata" field.
func (stc *SMSTemplateCreate) SetMetadata(m map[string]interface{}) *SMSTemplateCreate {
	stc.mutation.SetMetadata(m)
	return stc
}

// SetLastUsedAt sets the "last_used_at" field.
func (stc *SMSTemplateCreate) SetLastUsedAt(t time.Time) *SMSTemplateCreate {
	stc.mutation.SetLastUsedAt(t)
	return stc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableLastUsedAt(t *time.Time) *SMSTemplateCreate {
	if t != nil {
		stc.SetLastUsedAt(*t)
	}
	return stc
}

// SetUsageCount sets the "usage_count" field.
func (stc *SMSTemplateCreate) SetUsageCount(i int) *SMSTemplateCreate {
	stc.mutation.SetUsageCount(i)
	return stc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableUsageCount(i *int) *SMSTemplateCreate {
	if i != nil {
		stc.SetUsageCount(*i)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SMSTemplateCreate) SetID(x xid.ID) *SMSTemplateCreate {
	stc.mutation.SetID(x)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableID(x *xid.ID) *SMSTemplateCreate {
	if x != nil {
		stc.SetID(*x)
	}
	return stc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (stc *SMSTemplateCreate) SetOrganization(o *Organization) *SMSTemplateCreate {
	return stc.SetOrganizationID(o.ID)
}

// Mutation returns the SMSTemplateMutation object of the builder.
func (stc *SMSTemplateCreate) Mutation() *SMSTemplateMutation {
	return stc.mutation
}

// Save creates the SMSTemplate in the database.
func (stc *SMSTemplateCreate) Save(ctx context.Context) (*SMSTemplate, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SMSTemplateCreate) SaveX(ctx context.Context) *SMSTemplate {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SMSTemplateCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SMSTemplateCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SMSTemplateCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := smstemplate.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := smstemplate.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.Active(); !ok {
		v := smstemplate.DefaultActive
		stc.mutation.SetActive(v)
	}
	if _, ok := stc.mutation.System(); !ok {
		v := smstemplate.DefaultSystem
		stc.mutation.SetSystem(v)
	}
	if _, ok := stc.mutation.Locale(); !ok {
		v := smstemplate.DefaultLocale
		stc.mutation.SetLocale(v)
	}
	if _, ok := stc.mutation.MaxLength(); !ok {
		v := smstemplate.DefaultMaxLength
		stc.mutation.SetMaxLength(v)
	}
	if _, ok := stc.mutation.MessageType(); !ok {
		v := smstemplate.DefaultMessageType
		stc.mutation.SetMessageType(v)
	}
	if _, ok := stc.mutation.EstimatedSegments(); !ok {
		v := smstemplate.DefaultEstimatedSegments
		stc.mutation.SetEstimatedSegments(v)
	}
	if _, ok := stc.mutation.EstimatedCost(); !ok {
		v := smstemplate.DefaultEstimatedCost
		stc.mutation.SetEstimatedCost(v)
	}
	if _, ok := stc.mutation.Currency(); !ok {
		v := smstemplate.DefaultCurrency
		stc.mutation.SetCurrency(v)
	}
	if _, ok := stc.mutation.UsageCount(); !ok {
		v := smstemplate.DefaultUsageCount
		stc.mutation.SetUsageCount(v)
	}
	if _, ok := stc.mutation.ID(); !ok {
		v := smstemplate.DefaultID()
		stc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SMSTemplateCreate) check() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SMSTemplate.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SMSTemplate.updated_at"`)}
	}
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SMSTemplate.name"`)}
	}
	if v, ok := stc.mutation.Name(); ok {
		if err := smstemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SMSTemplate.name": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "SMSTemplate.content"`)}
	}
	if v, ok := stc.mutation.Content(); ok {
		if err := smstemplate.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "SMSTemplate.content": %w`, err)}
		}
	}
	if _, ok := stc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SMSTemplate.type"`)}
	}
	if v, ok := stc.mutation.GetType(); ok {
		if err := smstemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SMSTemplate.type": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "SMSTemplate.active"`)}
	}
	if _, ok := stc.mutation.System(); !ok {
		return &ValidationError{Name: "system", err: errors.New(`ent: missing required field "SMSTemplate.system"`)}
	}
	if _, ok := stc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "SMSTemplate.locale"`)}
	}
	if _, ok := stc.mutation.MaxLength(); !ok {
		return &ValidationError{Name: "max_length", err: errors.New(`ent: missing required field "SMSTemplate.max_length"`)}
	}
	if _, ok := stc.mutation.MessageType(); !ok {
		return &ValidationError{Name: "message_type", err: errors.New(`ent: missing required field "SMSTemplate.message_type"`)}
	}
	if _, ok := stc.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`ent: missing required field "SMSTemplate.usage_count"`)}
	}
	return nil
}

func (stc *SMSTemplateCreate) sqlSave(ctx context.Context) (*SMSTemplate, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SMSTemplateCreate) createSpec() (*SMSTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &SMSTemplate{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(smstemplate.Table, sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString))
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(smstemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(smstemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.SetField(smstemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(smstemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.Content(); ok {
		_spec.SetField(smstemplate.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := stc.mutation.GetType(); ok {
		_spec.SetField(smstemplate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := stc.mutation.Active(); ok {
		_spec.SetField(smstemplate.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := stc.mutation.System(); ok {
		_spec.SetField(smstemplate.FieldSystem, field.TypeBool, value)
		_node.System = value
	}
	if value, ok := stc.mutation.Locale(); ok {
		_spec.SetField(smstemplate.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := stc.mutation.MaxLength(); ok {
		_spec.SetField(smstemplate.FieldMaxLength, field.TypeInt, value)
		_node.MaxLength = value
	}
	if value, ok := stc.mutation.MessageType(); ok {
		_spec.SetField(smstemplate.FieldMessageType, field.TypeString, value)
		_node.MessageType = value
	}
	if value, ok := stc.mutation.EstimatedSegments(); ok {
		_spec.SetField(smstemplate.FieldEstimatedSegments, field.TypeInt, value)
		_node.EstimatedSegments = value
	}
	if value, ok := stc.mutation.EstimatedCost(); ok {
		_spec.SetField(smstemplate.FieldEstimatedCost, field.TypeFloat64, value)
		_node.EstimatedCost = value
	}
	if value, ok := stc.mutation.Currency(); ok {
		_spec.SetField(smstemplate.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := stc.mutation.Variables(); ok {
		_spec.SetField(smstemplate.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := stc.mutation.Metadata(); ok {
		_spec.SetField(smstemplate.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := stc.mutation.LastUsedAt(); ok {
		_spec.SetField(smstemplate.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := stc.mutation.UsageCount(); ok {
		_spec.SetField(smstemplate.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if nodes := stc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   smstemplate.OrganizationTable,
			Columns: []string{smstemplate.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SMSTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SMSTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (stc *SMSTemplateCreate) OnConflict(opts ...sql.ConflictOption) *SMSTemplateUpsertOne {
	stc.conflict = opts
	return &SMSTemplateUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SMSTemplateCreate) OnConflictColumns(columns ...string) *SMSTemplateUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SMSTemplateUpsertOne{
		create: stc,
	}
}

type (
	// SMSTemplateUpsertOne is the builder for "upsert"-ing
	//  one SMSTemplate node.
	SMSTemplateUpsertOne struct {
		create *SMSTemplateCreate
	}

	// SMSTemplateUpsert is the "OnConflict" setter.
	SMSTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsert) SetUpdatedAt(v time.Time) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateUpdatedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsert) SetDeletedAt(v time.Time) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateDeletedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SMSTemplateUpsert) ClearDeletedAt() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *SMSTemplateUpsert) SetName(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateName() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldName)
	return u
}

// SetContent sets the "content" field.
func (u *SMSTemplateUpsert) SetContent(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateContent() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldContent)
	return u
}

// SetType sets the "type" field.
func (u *SMSTemplateUpsert) SetType(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateType() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldType)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *SMSTemplateUpsert) SetOrganizationID(v xid.ID) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateOrganizationID() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *SMSTemplateUpsert) ClearOrganizationID() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldOrganizationID)
	return u
}

// SetActive sets the "active" field.
func (u *SMSTemplateUpsert) SetActive(v bool) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateActive() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldActive)
	return u
}

// SetSystem sets the "system" field.
func (u *SMSTemplateUpsert) SetSystem(v bool) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateSystem() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldSystem)
	return u
}

// SetLocale sets the "locale" field.
func (u *SMSTemplateUpsert) SetLocale(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateLocale() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldLocale)
	return u
}

// SetMaxLength sets the "max_length" field.
func (u *SMSTemplateUpsert) SetMaxLength(v int) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldMaxLength, v)
	return u
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateMaxLength() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldMaxLength)
	return u
}

// AddMaxLength adds v to the "max_length" field.
func (u *SMSTemplateUpsert) AddMaxLength(v int) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldMaxLength, v)
	return u
}

// SetMessageType sets the "message_type" field.
func (u *SMSTemplateUpsert) SetMessageType(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldMessageType, v)
	return u
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateMessageType() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldMessageType)
	return u
}

// SetEstimatedSegments sets the "estimated_segments" field.
func (u *SMSTemplateUpsert) SetEstimatedSegments(v int) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldEstimatedSegments, v)
	return u
}

// UpdateEstimatedSegments sets the "estimated_segments" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateEstimatedSegments() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldEstimatedSegments)
	return u
}

// AddEstimatedSegments adds v to the "estimated_segments" field.
func (u *SMSTemplateUpsert) AddEstimatedSegments(v int) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldEstimatedSegments, v)
	return u
}

// ClearEstimatedSegments clears the value of the "estimated_segments" field.
func (u *SMSTemplateUpsert) ClearEstimatedSegments() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldEstimatedSegments)
	return u
}

// SetEstimatedCost sets the "estimated_cost" field.
func (u *SMSTemplateUpsert) SetEstimatedCost(v float64) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldEstimatedCost, v)
	return u
}

// UpdateEstimatedCost sets the "estimated_cost" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateEstimatedCost() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldEstimatedCost)
	return u
}

// AddEstimatedCost adds v to the "estimated_cost" field.
func (u *SMSTemplateUpsert) AddEstimatedCost(v float64) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldEstimatedCost, v)
	return u
}

// ClearEstimatedCost clears the value of the "estimated_cost" field.
func (u *SMSTemplateUpsert) ClearEstimatedCost() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldEstimatedCost)
	return u
}

// SetCurrency sets the "currency" field.
func (u *SMSTemplateUpsert) SetCurrency(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateCurrency() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldCurrency)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *SMSTemplateUpsert) ClearCurrency() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldCurrency)
	return u
}

// SetVariables sets the "variables" field.
func (u *SMSTemplateUpsert) SetVariables(v []string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldVariables, v)
	return u
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateVariables() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldVariables)
	return u
}

// ClearVariables clears the value of the "variables" field.
func (u *SMSTemplateUpsert) ClearVariables() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldVariables)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SMSTemplateUpsert) SetMetadata(v map[string]interface{}) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateMetadata() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SMSTemplateUpsert) ClearMetadata() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldMetadata)
	return u
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SMSTemplateUpsert) SetLastUsedAt(v time.Time) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldLastUsedAt, v)
	return u
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateLastUsedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldLastUsedAt)
	return u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SMSTemplateUpsert) ClearLastUsedAt() *SMSTemplateUpsert {
	u.SetNull(smstemplate.FieldLastUsedAt)
	return u
}

// SetUsageCount sets the "usage_count" field.
func (u *SMSTemplateUpsert) SetUsageCount(v int) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldUsageCount, v)
	return u
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateUsageCount() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldUsageCount)
	return u
}

// AddUsageCount adds v to the "usage_count" field.
func (u *SMSTemplateUpsert) AddUsageCount(v int) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldUsageCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smstemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SMSTemplateUpsertOne) UpdateNewValues() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(smstemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(smstemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SMSTemplateUpsertOne) Ignore() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SMSTemplateUpsertOne) DoNothing() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SMSTemplateCreate.OnConflict
// documentation for more info.
func (u *SMSTemplateUpsertOne) Update(set func(*SMSTemplateUpsert)) *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SMSTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsertOne) SetUpdatedAt(v time.Time) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateUpdatedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsertOne) SetDeletedAt(v time.Time) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateDeletedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SMSTemplateUpsertOne) ClearDeletedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SMSTemplateUpsertOne) SetName(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateName() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *SMSTemplateUpsertOne) SetContent(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateContent() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateContent()
	})
}

// SetType sets the "type" field.
func (u *SMSTemplateUpsertOne) SetType(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateType() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *SMSTemplateUpsertOne) SetOrganizationID(v xid.ID) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateOrganizationID() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *SMSTemplateUpsertOne) ClearOrganizationID() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearOrganizationID()
	})
}

// SetActive sets the "active" field.
func (u *SMSTemplateUpsertOne) SetActive(v bool) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateActive() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetSystem sets the "system" field.
func (u *SMSTemplateUpsertOne) SetSystem(v bool) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateSystem() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateSystem()
	})
}

// SetLocale sets the "locale" field.
func (u *SMSTemplateUpsertOne) SetLocale(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateLocale() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLocale()
	})
}

// SetMaxLength sets the "max_length" field.
func (u *SMSTemplateUpsertOne) SetMaxLength(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMaxLength(v)
	})
}

// AddMaxLength adds v to the "max_length" field.
func (u *SMSTemplateUpsertOne) AddMaxLength(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddMaxLength(v)
	})
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateMaxLength() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMaxLength()
	})
}

// SetMessageType sets the "message_type" field.
func (u *SMSTemplateUpsertOne) SetMessageType(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMessageType(v)
	})
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateMessageType() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMessageType()
	})
}

// SetEstimatedSegments sets the "estimated_segments" field.
func (u *SMSTemplateUpsertOne) SetEstimatedSegments(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetEstimatedSegments(v)
	})
}

// AddEstimatedSegments adds v to the "estimated_segments" field.
func (u *SMSTemplateUpsertOne) AddEstimatedSegments(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddEstimatedSegments(v)
	})
}

// UpdateEstimatedSegments sets the "estimated_segments" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateEstimatedSegments() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateEstimatedSegments()
	})
}

// ClearEstimatedSegments clears the value of the "estimated_segments" field.
func (u *SMSTemplateUpsertOne) ClearEstimatedSegments() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearEstimatedSegments()
	})
}

// SetEstimatedCost sets the "estimated_cost" field.
func (u *SMSTemplateUpsertOne) SetEstimatedCost(v float64) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetEstimatedCost(v)
	})
}

// AddEstimatedCost adds v to the "estimated_cost" field.
func (u *SMSTemplateUpsertOne) AddEstimatedCost(v float64) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddEstimatedCost(v)
	})
}

// UpdateEstimatedCost sets the "estimated_cost" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateEstimatedCost() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateEstimatedCost()
	})
}

// ClearEstimatedCost clears the value of the "estimated_cost" field.
func (u *SMSTemplateUpsertOne) ClearEstimatedCost() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearEstimatedCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *SMSTemplateUpsertOne) SetCurrency(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateCurrency() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *SMSTemplateUpsertOne) ClearCurrency() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearCurrency()
	})
}

// SetVariables sets the "variables" field.
func (u *SMSTemplateUpsertOne) SetVariables(v []string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateVariables() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateVariables()
	})
}

// ClearVariables clears the value of the "variables" field.
func (u *SMSTemplateUpsertOne) ClearVariables() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearVariables()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SMSTemplateUpsertOne) SetMetadata(v map[string]interface{}) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateMetadata() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SMSTemplateUpsertOne) ClearMetadata() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearMetadata()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SMSTemplateUpsertOne) SetLastUsedAt(v time.Time) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateLastUsedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLastUsedAt()
	})
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SMSTemplateUpsertOne) ClearLastUsedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearLastUsedAt()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *SMSTemplateUpsertOne) SetUsageCount(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *SMSTemplateUpsertOne) AddUsageCount(v int) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateUsageCount() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUsageCount()
	})
}

// Exec executes the query.
func (u *SMSTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SMSTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SMSTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SMSTemplateUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SMSTemplateUpsertOne.ID is not supported by MySQL driver. Use SMSTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SMSTemplateUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SMSTemplateCreateBulk is the builder for creating many SMSTemplate entities in bulk.
type SMSTemplateCreateBulk struct {
	config
	err      error
	builders []*SMSTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the SMSTemplate entities in the database.
func (stcb *SMSTemplateCreateBulk) Save(ctx context.Context) ([]*SMSTemplate, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SMSTemplate, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SMSTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SMSTemplateCreateBulk) SaveX(ctx context.Context) []*SMSTemplate {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SMSTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SMSTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SMSTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SMSTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (stcb *SMSTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SMSTemplateUpsertBulk {
	stcb.conflict = opts
	return &SMSTemplateUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SMSTemplateCreateBulk) OnConflictColumns(columns ...string) *SMSTemplateUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SMSTemplateUpsertBulk{
		create: stcb,
	}
}

// SMSTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of SMSTemplate nodes.
type SMSTemplateUpsertBulk struct {
	create *SMSTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smstemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SMSTemplateUpsertBulk) UpdateNewValues() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(smstemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(smstemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SMSTemplateUpsertBulk) Ignore() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SMSTemplateUpsertBulk) DoNothing() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SMSTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *SMSTemplateUpsertBulk) Update(set func(*SMSTemplateUpsert)) *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SMSTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsertBulk) SetUpdatedAt(v time.Time) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateUpdatedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsertBulk) SetDeletedAt(v time.Time) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateDeletedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SMSTemplateUpsertBulk) ClearDeletedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SMSTemplateUpsertBulk) SetName(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateName() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *SMSTemplateUpsertBulk) SetContent(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateContent() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateContent()
	})
}

// SetType sets the "type" field.
func (u *SMSTemplateUpsertBulk) SetType(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateType() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *SMSTemplateUpsertBulk) SetOrganizationID(v xid.ID) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateOrganizationID() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *SMSTemplateUpsertBulk) ClearOrganizationID() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearOrganizationID()
	})
}

// SetActive sets the "active" field.
func (u *SMSTemplateUpsertBulk) SetActive(v bool) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateActive() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetSystem sets the "system" field.
func (u *SMSTemplateUpsertBulk) SetSystem(v bool) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateSystem() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateSystem()
	})
}

// SetLocale sets the "locale" field.
func (u *SMSTemplateUpsertBulk) SetLocale(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateLocale() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLocale()
	})
}

// SetMaxLength sets the "max_length" field.
func (u *SMSTemplateUpsertBulk) SetMaxLength(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMaxLength(v)
	})
}

// AddMaxLength adds v to the "max_length" field.
func (u *SMSTemplateUpsertBulk) AddMaxLength(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddMaxLength(v)
	})
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateMaxLength() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMaxLength()
	})
}

// SetMessageType sets the "message_type" field.
func (u *SMSTemplateUpsertBulk) SetMessageType(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMessageType(v)
	})
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateMessageType() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMessageType()
	})
}

// SetEstimatedSegments sets the "estimated_segments" field.
func (u *SMSTemplateUpsertBulk) SetEstimatedSegments(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetEstimatedSegments(v)
	})
}

// AddEstimatedSegments adds v to the "estimated_segments" field.
func (u *SMSTemplateUpsertBulk) AddEstimatedSegments(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddEstimatedSegments(v)
	})
}

// UpdateEstimatedSegments sets the "estimated_segments" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateEstimatedSegments() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateEstimatedSegments()
	})
}

// ClearEstimatedSegments clears the value of the "estimated_segments" field.
func (u *SMSTemplateUpsertBulk) ClearEstimatedSegments() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearEstimatedSegments()
	})
}

// SetEstimatedCost sets the "estimated_cost" field.
func (u *SMSTemplateUpsertBulk) SetEstimatedCost(v float64) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetEstimatedCost(v)
	})
}

// AddEstimatedCost adds v to the "estimated_cost" field.
func (u *SMSTemplateUpsertBulk) AddEstimatedCost(v float64) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddEstimatedCost(v)
	})
}

// UpdateEstimatedCost sets the "estimated_cost" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateEstimatedCost() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateEstimatedCost()
	})
}

// ClearEstimatedCost clears the value of the "estimated_cost" field.
func (u *SMSTemplateUpsertBulk) ClearEstimatedCost() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearEstimatedCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *SMSTemplateUpsertBulk) SetCurrency(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateCurrency() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *SMSTemplateUpsertBulk) ClearCurrency() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearCurrency()
	})
}

// SetVariables sets the "variables" field.
func (u *SMSTemplateUpsertBulk) SetVariables(v []string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateVariables() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateVariables()
	})
}

// ClearVariables clears the value of the "variables" field.
func (u *SMSTemplateUpsertBulk) ClearVariables() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearVariables()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SMSTemplateUpsertBulk) SetMetadata(v map[string]interface{}) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateMetadata() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SMSTemplateUpsertBulk) ClearMetadata() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearMetadata()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SMSTemplateUpsertBulk) SetLastUsedAt(v time.Time) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateLastUsedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLastUsedAt()
	})
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SMSTemplateUpsertBulk) ClearLastUsedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.ClearLastUsedAt()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *SMSTemplateUpsertBulk) SetUsageCount(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *SMSTemplateUpsertBulk) AddUsageCount(v int) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateUsageCount() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUsageCount()
	})
}

// Exec executes the query.
func (u *SMSTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SMSTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SMSTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SMSTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
