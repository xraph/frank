// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/rs/xid"
	"github.com/xraph/frank/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/featureflag"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/mfa"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/passkey"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
	"github.com/xraph/frank/ent/providertemplate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/smstemplate"
	"github.com/xraph/frank/ent/ssostate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/verification"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// ApiKey is the client for interacting with the ApiKey builders.
	ApiKey *ApiKeyClient
	// ApiKeyActivity is the client for interacting with the ApiKeyActivity builders.
	ApiKeyActivity *ApiKeyActivityClient
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// FeatureFlag is the client for interacting with the FeatureFlag builders.
	FeatureFlag *FeatureFlagClient
	// IdentityProvider is the client for interacting with the IdentityProvider builders.
	IdentityProvider *IdentityProviderClient
	// MFA is the client for interacting with the MFA builders.
	MFA *MFAClient
	// Membership is the client for interacting with the Membership builders.
	Membership *MembershipClient
	// OAuthAuthorization is the client for interacting with the OAuthAuthorization builders.
	OAuthAuthorization *OAuthAuthorizationClient
	// OAuthClient is the client for interacting with the OAuthClient builders.
	OAuthClient *OAuthClientClient
	// OAuthScope is the client for interacting with the OAuthScope builders.
	OAuthScope *OAuthScopeClient
	// OAuthToken is the client for interacting with the OAuthToken builders.
	OAuthToken *OAuthTokenClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationFeature is the client for interacting with the OrganizationFeature builders.
	OrganizationFeature *OrganizationFeatureClient
	// OrganizationProvider is the client for interacting with the OrganizationProvider builders.
	OrganizationProvider *OrganizationProviderClient
	// Passkey is the client for interacting with the Passkey builders.
	Passkey *PasskeyClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// PermissionDependency is the client for interacting with the PermissionDependency builders.
	PermissionDependency *PermissionDependencyClient
	// ProviderTemplate is the client for interacting with the ProviderTemplate builders.
	ProviderTemplate *ProviderTemplateClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// SMSTemplate is the client for interacting with the SMSTemplate builders.
	SMSTemplate *SMSTemplateClient
	// SSOState is the client for interacting with the SSOState builders.
	SSOState *SSOStateClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPermission is the client for interacting with the UserPermission builders.
	UserPermission *UserPermissionClient
	// UserRole is the client for interacting with the UserRole builders.
	UserRole *UserRoleClient
	// Verification is the client for interacting with the Verification builders.
	Verification *VerificationClient
	// Webhook is the client for interacting with the Webhook builders.
	Webhook *WebhookClient
	// WebhookEvent is the client for interacting with the WebhookEvent builders.
	WebhookEvent *WebhookEventClient
	// historyActivated determines if the history hooks have already been activated
	historyActivated bool
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.ApiKey = NewApiKeyClient(c.config)
	c.ApiKeyActivity = NewApiKeyActivityClient(c.config)
	c.Audit = NewAuditClient(c.config)
	c.EmailTemplate = NewEmailTemplateClient(c.config)
	c.FeatureFlag = NewFeatureFlagClient(c.config)
	c.IdentityProvider = NewIdentityProviderClient(c.config)
	c.MFA = NewMFAClient(c.config)
	c.Membership = NewMembershipClient(c.config)
	c.OAuthAuthorization = NewOAuthAuthorizationClient(c.config)
	c.OAuthClient = NewOAuthClientClient(c.config)
	c.OAuthScope = NewOAuthScopeClient(c.config)
	c.OAuthToken = NewOAuthTokenClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationFeature = NewOrganizationFeatureClient(c.config)
	c.OrganizationProvider = NewOrganizationProviderClient(c.config)
	c.Passkey = NewPasskeyClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.PermissionDependency = NewPermissionDependencyClient(c.config)
	c.ProviderTemplate = NewProviderTemplateClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.SMSTemplate = NewSMSTemplateClient(c.config)
	c.SSOState = NewSSOStateClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPermission = NewUserPermissionClient(c.config)
	c.UserRole = NewUserRoleClient(c.config)
	c.Verification = NewVerificationClient(c.config)
	c.Webhook = NewWebhookClient(c.config)
	c.WebhookEvent = NewWebhookEventClient(c.config)
}

// withHistory adds the history hooks to the appropriate schemas - generated by enthistory
func (c *Client) WithHistory() {
	if !c.historyActivated {
		c.historyActivated = true
	}
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Activity:             NewActivityClient(cfg),
		ApiKey:               NewApiKeyClient(cfg),
		ApiKeyActivity:       NewApiKeyActivityClient(cfg),
		Audit:                NewAuditClient(cfg),
		EmailTemplate:        NewEmailTemplateClient(cfg),
		FeatureFlag:          NewFeatureFlagClient(cfg),
		IdentityProvider:     NewIdentityProviderClient(cfg),
		MFA:                  NewMFAClient(cfg),
		Membership:           NewMembershipClient(cfg),
		OAuthAuthorization:   NewOAuthAuthorizationClient(cfg),
		OAuthClient:          NewOAuthClientClient(cfg),
		OAuthScope:           NewOAuthScopeClient(cfg),
		OAuthToken:           NewOAuthTokenClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		OrganizationFeature:  NewOrganizationFeatureClient(cfg),
		OrganizationProvider: NewOrganizationProviderClient(cfg),
		Passkey:              NewPasskeyClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PermissionDependency: NewPermissionDependencyClient(cfg),
		ProviderTemplate:     NewProviderTemplateClient(cfg),
		Role:                 NewRoleClient(cfg),
		SMSTemplate:          NewSMSTemplateClient(cfg),
		SSOState:             NewSSOStateClient(cfg),
		Session:              NewSessionClient(cfg),
		User:                 NewUserClient(cfg),
		UserPermission:       NewUserPermissionClient(cfg),
		UserRole:             NewUserRoleClient(cfg),
		Verification:         NewVerificationClient(cfg),
		Webhook:              NewWebhookClient(cfg),
		WebhookEvent:         NewWebhookEventClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Activity:             NewActivityClient(cfg),
		ApiKey:               NewApiKeyClient(cfg),
		ApiKeyActivity:       NewApiKeyActivityClient(cfg),
		Audit:                NewAuditClient(cfg),
		EmailTemplate:        NewEmailTemplateClient(cfg),
		FeatureFlag:          NewFeatureFlagClient(cfg),
		IdentityProvider:     NewIdentityProviderClient(cfg),
		MFA:                  NewMFAClient(cfg),
		Membership:           NewMembershipClient(cfg),
		OAuthAuthorization:   NewOAuthAuthorizationClient(cfg),
		OAuthClient:          NewOAuthClientClient(cfg),
		OAuthScope:           NewOAuthScopeClient(cfg),
		OAuthToken:           NewOAuthTokenClient(cfg),
		Organization:         NewOrganizationClient(cfg),
		OrganizationFeature:  NewOrganizationFeatureClient(cfg),
		OrganizationProvider: NewOrganizationProviderClient(cfg),
		Passkey:              NewPasskeyClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PermissionDependency: NewPermissionDependencyClient(cfg),
		ProviderTemplate:     NewProviderTemplateClient(cfg),
		Role:                 NewRoleClient(cfg),
		SMSTemplate:          NewSMSTemplateClient(cfg),
		SSOState:             NewSSOStateClient(cfg),
		Session:              NewSessionClient(cfg),
		User:                 NewUserClient(cfg),
		UserPermission:       NewUserPermissionClient(cfg),
		UserRole:             NewUserRoleClient(cfg),
		Verification:         NewVerificationClient(cfg),
		Webhook:              NewWebhookClient(cfg),
		WebhookEvent:         NewWebhookEventClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Activity, c.ApiKey, c.ApiKeyActivity, c.Audit, c.EmailTemplate, c.FeatureFlag,
		c.IdentityProvider, c.MFA, c.Membership, c.OAuthAuthorization, c.OAuthClient,
		c.OAuthScope, c.OAuthToken, c.Organization, c.OrganizationFeature,
		c.OrganizationProvider, c.Passkey, c.Permission, c.PermissionDependency,
		c.ProviderTemplate, c.Role, c.SMSTemplate, c.SSOState, c.Session, c.User,
		c.UserPermission, c.UserRole, c.Verification, c.Webhook, c.WebhookEvent,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Activity, c.ApiKey, c.ApiKeyActivity, c.Audit, c.EmailTemplate, c.FeatureFlag,
		c.IdentityProvider, c.MFA, c.Membership, c.OAuthAuthorization, c.OAuthClient,
		c.OAuthScope, c.OAuthToken, c.Organization, c.OrganizationFeature,
		c.OrganizationProvider, c.Passkey, c.Permission, c.PermissionDependency,
		c.ProviderTemplate, c.Role, c.SMSTemplate, c.SSOState, c.Session, c.User,
		c.UserPermission, c.UserRole, c.Verification, c.Webhook, c.WebhookEvent,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivityMutation:
		return c.Activity.mutate(ctx, m)
	case *ApiKeyMutation:
		return c.ApiKey.mutate(ctx, m)
	case *ApiKeyActivityMutation:
		return c.ApiKeyActivity.mutate(ctx, m)
	case *AuditMutation:
		return c.Audit.mutate(ctx, m)
	case *EmailTemplateMutation:
		return c.EmailTemplate.mutate(ctx, m)
	case *FeatureFlagMutation:
		return c.FeatureFlag.mutate(ctx, m)
	case *IdentityProviderMutation:
		return c.IdentityProvider.mutate(ctx, m)
	case *MFAMutation:
		return c.MFA.mutate(ctx, m)
	case *MembershipMutation:
		return c.Membership.mutate(ctx, m)
	case *OAuthAuthorizationMutation:
		return c.OAuthAuthorization.mutate(ctx, m)
	case *OAuthClientMutation:
		return c.OAuthClient.mutate(ctx, m)
	case *OAuthScopeMutation:
		return c.OAuthScope.mutate(ctx, m)
	case *OAuthTokenMutation:
		return c.OAuthToken.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationFeatureMutation:
		return c.OrganizationFeature.mutate(ctx, m)
	case *OrganizationProviderMutation:
		return c.OrganizationProvider.mutate(ctx, m)
	case *PasskeyMutation:
		return c.Passkey.mutate(ctx, m)
	case *PermissionMutation:
		return c.Permission.mutate(ctx, m)
	case *PermissionDependencyMutation:
		return c.PermissionDependency.mutate(ctx, m)
	case *ProviderTemplateMutation:
		return c.ProviderTemplate.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SMSTemplateMutation:
		return c.SMSTemplate.mutate(ctx, m)
	case *SSOStateMutation:
		return c.SSOState.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPermissionMutation:
		return c.UserPermission.mutate(ctx, m)
	case *UserRoleMutation:
		return c.UserRole.mutate(ctx, m)
	case *VerificationMutation:
		return c.Verification.mutate(ctx, m)
	case *WebhookMutation:
		return c.Webhook.mutate(ctx, m)
	case *WebhookEventMutation:
		return c.WebhookEvent.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activity.Intercept(f(g(h())))`.
func (c *ActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Activity = append(c.inters.Activity, interceptors...)
}

// Create returns a builder for creating a Activity entity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivityClient) MapCreateBulk(slice any, setFunc func(*ActivityCreate, int)) *ActivityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivityCreateBulk{err: fmt.Errorf("calling to ActivityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id xid.ID) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityClient) DeleteOneID(id xid.ID) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id xid.ID) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id xid.ID) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Activity.
func (c *ActivityClient) QueryUser(a *Activity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.UserTable, activity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Activity.
func (c *ActivityClient) QueryOrganization(a *Activity) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.OrganizationTable, activity.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySession queries the session edge of a Activity.
func (c *ActivityClient) QuerySession(a *Activity) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.SessionTable, activity.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// Interceptors returns the client interceptors.
func (c *ActivityClient) Interceptors() []Interceptor {
	return c.inters.Activity
}

func (c *ActivityClient) mutate(ctx context.Context, m *ActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Activity mutation op: %q", m.Op())
	}
}

// ApiKeyClient is a client for the ApiKey schema.
type ApiKeyClient struct {
	config
}

// NewApiKeyClient returns a client for the ApiKey from the given config.
func NewApiKeyClient(c config) *ApiKeyClient {
	return &ApiKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *ApiKeyClient) Use(hooks ...Hook) {
	c.hooks.ApiKey = append(c.hooks.ApiKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *ApiKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiKey = append(c.inters.ApiKey, interceptors...)
}

// Create returns a builder for creating a ApiKey entity.
func (c *ApiKeyClient) Create() *ApiKeyCreate {
	mutation := newApiKeyMutation(c.config, OpCreate)
	return &ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiKey entities.
func (c *ApiKeyClient) CreateBulk(builders ...*ApiKeyCreate) *ApiKeyCreateBulk {
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApiKeyClient) MapCreateBulk(slice any, setFunc func(*ApiKeyCreate, int)) *ApiKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApiKeyCreateBulk{err: fmt.Errorf("calling to ApiKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApiKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiKey.
func (c *ApiKeyClient) Update() *ApiKeyUpdate {
	mutation := newApiKeyMutation(c.config, OpUpdate)
	return &ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiKeyClient) UpdateOne(ak *ApiKey) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKey(ak))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiKeyClient) UpdateOneID(id xid.ID) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKeyID(id))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiKey.
func (c *ApiKeyClient) Delete() *ApiKeyDelete {
	mutation := newApiKeyMutation(c.config, OpDelete)
	return &ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiKeyClient) DeleteOne(ak *ApiKey) *ApiKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiKeyClient) DeleteOneID(id xid.ID) *ApiKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiKeyDeleteOne{builder}
}

// Query returns a query builder for ApiKey.
func (c *ApiKeyClient) Query() *ApiKeyQuery {
	return &ApiKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiKey},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiKey entity by its id.
func (c *ApiKeyClient) Get(ctx context.Context, id xid.ID) (*ApiKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiKeyClient) GetX(ctx context.Context, id xid.ID) *ApiKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ApiKey.
func (c *ApiKeyClient) QueryUser(ak *ApiKey) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.UserTable, apikey.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a ApiKey.
func (c *ApiKeyClient) QueryOrganization(ak *ApiKey) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.OrganizationTable, apikey.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a ApiKey.
func (c *ApiKeyClient) QueryActivities(ak *ApiKey) *ApiKeyActivityQuery {
	query := (&ApiKeyActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(apikeyactivity.Table, apikeyactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apikey.ActivitiesTable, apikey.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiKeyClient) Hooks() []Hook {
	return c.hooks.ApiKey
}

// Interceptors returns the client interceptors.
func (c *ApiKeyClient) Interceptors() []Interceptor {
	return c.inters.ApiKey
}

func (c *ApiKeyClient) mutate(ctx context.Context, m *ApiKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiKey mutation op: %q", m.Op())
	}
}

// ApiKeyActivityClient is a client for the ApiKeyActivity schema.
type ApiKeyActivityClient struct {
	config
}

// NewApiKeyActivityClient returns a client for the ApiKeyActivity from the given config.
func NewApiKeyActivityClient(c config) *ApiKeyActivityClient {
	return &ApiKeyActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikeyactivity.Hooks(f(g(h())))`.
func (c *ApiKeyActivityClient) Use(hooks ...Hook) {
	c.hooks.ApiKeyActivity = append(c.hooks.ApiKeyActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikeyactivity.Intercept(f(g(h())))`.
func (c *ApiKeyActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiKeyActivity = append(c.inters.ApiKeyActivity, interceptors...)
}

// Create returns a builder for creating a ApiKeyActivity entity.
func (c *ApiKeyActivityClient) Create() *ApiKeyActivityCreate {
	mutation := newApiKeyActivityMutation(c.config, OpCreate)
	return &ApiKeyActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiKeyActivity entities.
func (c *ApiKeyActivityClient) CreateBulk(builders ...*ApiKeyActivityCreate) *ApiKeyActivityCreateBulk {
	return &ApiKeyActivityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApiKeyActivityClient) MapCreateBulk(slice any, setFunc func(*ApiKeyActivityCreate, int)) *ApiKeyActivityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApiKeyActivityCreateBulk{err: fmt.Errorf("calling to ApiKeyActivityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApiKeyActivityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApiKeyActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiKeyActivity.
func (c *ApiKeyActivityClient) Update() *ApiKeyActivityUpdate {
	mutation := newApiKeyActivityMutation(c.config, OpUpdate)
	return &ApiKeyActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiKeyActivityClient) UpdateOne(aka *ApiKeyActivity) *ApiKeyActivityUpdateOne {
	mutation := newApiKeyActivityMutation(c.config, OpUpdateOne, withApiKeyActivity(aka))
	return &ApiKeyActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiKeyActivityClient) UpdateOneID(id xid.ID) *ApiKeyActivityUpdateOne {
	mutation := newApiKeyActivityMutation(c.config, OpUpdateOne, withApiKeyActivityID(id))
	return &ApiKeyActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiKeyActivity.
func (c *ApiKeyActivityClient) Delete() *ApiKeyActivityDelete {
	mutation := newApiKeyActivityMutation(c.config, OpDelete)
	return &ApiKeyActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiKeyActivityClient) DeleteOne(aka *ApiKeyActivity) *ApiKeyActivityDeleteOne {
	return c.DeleteOneID(aka.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiKeyActivityClient) DeleteOneID(id xid.ID) *ApiKeyActivityDeleteOne {
	builder := c.Delete().Where(apikeyactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiKeyActivityDeleteOne{builder}
}

// Query returns a query builder for ApiKeyActivity.
func (c *ApiKeyActivityClient) Query() *ApiKeyActivityQuery {
	return &ApiKeyActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiKeyActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiKeyActivity entity by its id.
func (c *ApiKeyActivityClient) Get(ctx context.Context, id xid.ID) (*ApiKeyActivity, error) {
	return c.Query().Where(apikeyactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiKeyActivityClient) GetX(ctx context.Context, id xid.ID) *ApiKeyActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKey queries the key edge of a ApiKeyActivity.
func (c *ApiKeyActivityClient) QueryKey(aka *ApiKeyActivity) *ApiKeyQuery {
	query := (&ApiKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aka.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikeyactivity.Table, apikeyactivity.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikeyactivity.KeyTable, apikeyactivity.KeyColumn),
		)
		fromV = sqlgraph.Neighbors(aka.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApiKeyActivityClient) Hooks() []Hook {
	return c.hooks.ApiKeyActivity
}

// Interceptors returns the client interceptors.
func (c *ApiKeyActivityClient) Interceptors() []Interceptor {
	return c.inters.ApiKeyActivity
}

func (c *ApiKeyActivityClient) mutate(ctx context.Context, m *ApiKeyActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiKeyActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiKeyActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiKeyActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiKeyActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiKeyActivity mutation op: %q", m.Op())
	}
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `audit.Intercept(f(g(h())))`.
func (c *AuditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Audit = append(c.inters.Audit, interceptors...)
}

// Create returns a builder for creating a Audit entity.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditClient) MapCreateBulk(slice any, setFunc func(*AuditCreate, int)) *AuditCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditCreateBulk{err: fmt.Errorf("calling to AuditClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(a *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(a))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id xid.ID) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditClient) DeleteOne(a *Audit) *AuditDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditClient) DeleteOneID(id xid.ID) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAudit},
		inters: c.Interceptors(),
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id xid.ID) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id xid.ID) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Audit.
func (c *AuditClient) QueryUser(a *Audit) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audit.Table, audit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, audit.UserTable, audit.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Audit.
func (c *AuditClient) QueryOrganization(a *Audit) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audit.Table, audit.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, audit.OrganizationTable, audit.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySession queries the session edge of a Audit.
func (c *AuditClient) QuerySession(a *Audit) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audit.Table, audit.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, audit.SessionTable, audit.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// Interceptors returns the client interceptors.
func (c *AuditClient) Interceptors() []Interceptor {
	return c.inters.Audit
}

func (c *AuditClient) mutate(ctx context.Context, m *AuditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Audit mutation op: %q", m.Op())
	}
}

// EmailTemplateClient is a client for the EmailTemplate schema.
type EmailTemplateClient struct {
	config
}

// NewEmailTemplateClient returns a client for the EmailTemplate from the given config.
func NewEmailTemplateClient(c config) *EmailTemplateClient {
	return &EmailTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailtemplate.Hooks(f(g(h())))`.
func (c *EmailTemplateClient) Use(hooks ...Hook) {
	c.hooks.EmailTemplate = append(c.hooks.EmailTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailtemplate.Intercept(f(g(h())))`.
func (c *EmailTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailTemplate = append(c.inters.EmailTemplate, interceptors...)
}

// Create returns a builder for creating a EmailTemplate entity.
func (c *EmailTemplateClient) Create() *EmailTemplateCreate {
	mutation := newEmailTemplateMutation(c.config, OpCreate)
	return &EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailTemplate entities.
func (c *EmailTemplateClient) CreateBulk(builders ...*EmailTemplateCreate) *EmailTemplateCreateBulk {
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailTemplateClient) MapCreateBulk(slice any, setFunc func(*EmailTemplateCreate, int)) *EmailTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailTemplateCreateBulk{err: fmt.Errorf("calling to EmailTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailTemplate.
func (c *EmailTemplateClient) Update() *EmailTemplateUpdate {
	mutation := newEmailTemplateMutation(c.config, OpUpdate)
	return &EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailTemplateClient) UpdateOne(et *EmailTemplate) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplate(et))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailTemplateClient) UpdateOneID(id xid.ID) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplateID(id))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailTemplate.
func (c *EmailTemplateClient) Delete() *EmailTemplateDelete {
	mutation := newEmailTemplateMutation(c.config, OpDelete)
	return &EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailTemplateClient) DeleteOne(et *EmailTemplate) *EmailTemplateDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailTemplateClient) DeleteOneID(id xid.ID) *EmailTemplateDeleteOne {
	builder := c.Delete().Where(emailtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailTemplateDeleteOne{builder}
}

// Query returns a query builder for EmailTemplate.
func (c *EmailTemplateClient) Query() *EmailTemplateQuery {
	return &EmailTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailTemplate entity by its id.
func (c *EmailTemplateClient) Get(ctx context.Context, id xid.ID) (*EmailTemplate, error) {
	return c.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailTemplateClient) GetX(ctx context.Context, id xid.ID) *EmailTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryOrganization(et *EmailTemplate) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emailtemplate.OrganizationTable, emailtemplate.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailTemplateClient) Hooks() []Hook {
	return c.hooks.EmailTemplate
}

// Interceptors returns the client interceptors.
func (c *EmailTemplateClient) Interceptors() []Interceptor {
	return c.inters.EmailTemplate
}

func (c *EmailTemplateClient) mutate(ctx context.Context, m *EmailTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailTemplate mutation op: %q", m.Op())
	}
}

// FeatureFlagClient is a client for the FeatureFlag schema.
type FeatureFlagClient struct {
	config
}

// NewFeatureFlagClient returns a client for the FeatureFlag from the given config.
func NewFeatureFlagClient(c config) *FeatureFlagClient {
	return &FeatureFlagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `featureflag.Hooks(f(g(h())))`.
func (c *FeatureFlagClient) Use(hooks ...Hook) {
	c.hooks.FeatureFlag = append(c.hooks.FeatureFlag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `featureflag.Intercept(f(g(h())))`.
func (c *FeatureFlagClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeatureFlag = append(c.inters.FeatureFlag, interceptors...)
}

// Create returns a builder for creating a FeatureFlag entity.
func (c *FeatureFlagClient) Create() *FeatureFlagCreate {
	mutation := newFeatureFlagMutation(c.config, OpCreate)
	return &FeatureFlagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeatureFlag entities.
func (c *FeatureFlagClient) CreateBulk(builders ...*FeatureFlagCreate) *FeatureFlagCreateBulk {
	return &FeatureFlagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureFlagClient) MapCreateBulk(slice any, setFunc func(*FeatureFlagCreate, int)) *FeatureFlagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureFlagCreateBulk{err: fmt.Errorf("calling to FeatureFlagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureFlagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureFlagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeatureFlag.
func (c *FeatureFlagClient) Update() *FeatureFlagUpdate {
	mutation := newFeatureFlagMutation(c.config, OpUpdate)
	return &FeatureFlagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureFlagClient) UpdateOne(ff *FeatureFlag) *FeatureFlagUpdateOne {
	mutation := newFeatureFlagMutation(c.config, OpUpdateOne, withFeatureFlag(ff))
	return &FeatureFlagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureFlagClient) UpdateOneID(id xid.ID) *FeatureFlagUpdateOne {
	mutation := newFeatureFlagMutation(c.config, OpUpdateOne, withFeatureFlagID(id))
	return &FeatureFlagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeatureFlag.
func (c *FeatureFlagClient) Delete() *FeatureFlagDelete {
	mutation := newFeatureFlagMutation(c.config, OpDelete)
	return &FeatureFlagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureFlagClient) DeleteOne(ff *FeatureFlag) *FeatureFlagDeleteOne {
	return c.DeleteOneID(ff.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureFlagClient) DeleteOneID(id xid.ID) *FeatureFlagDeleteOne {
	builder := c.Delete().Where(featureflag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureFlagDeleteOne{builder}
}

// Query returns a query builder for FeatureFlag.
func (c *FeatureFlagClient) Query() *FeatureFlagQuery {
	return &FeatureFlagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeatureFlag},
		inters: c.Interceptors(),
	}
}

// Get returns a FeatureFlag entity by its id.
func (c *FeatureFlagClient) Get(ctx context.Context, id xid.ID) (*FeatureFlag, error) {
	return c.Query().Where(featureflag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureFlagClient) GetX(ctx context.Context, id xid.ID) *FeatureFlag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationFeatures queries the organization_features edge of a FeatureFlag.
func (c *FeatureFlagClient) QueryOrganizationFeatures(ff *FeatureFlag) *OrganizationFeatureQuery {
	query := (&OrganizationFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ff.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(featureflag.Table, featureflag.FieldID, id),
			sqlgraph.To(organizationfeature.Table, organizationfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, featureflag.OrganizationFeaturesTable, featureflag.OrganizationFeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(ff.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureFlagClient) Hooks() []Hook {
	return c.hooks.FeatureFlag
}

// Interceptors returns the client interceptors.
func (c *FeatureFlagClient) Interceptors() []Interceptor {
	return c.inters.FeatureFlag
}

func (c *FeatureFlagClient) mutate(ctx context.Context, m *FeatureFlagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureFlagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureFlagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureFlagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureFlagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeatureFlag mutation op: %q", m.Op())
	}
}

// IdentityProviderClient is a client for the IdentityProvider schema.
type IdentityProviderClient struct {
	config
}

// NewIdentityProviderClient returns a client for the IdentityProvider from the given config.
func NewIdentityProviderClient(c config) *IdentityProviderClient {
	return &IdentityProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identityprovider.Hooks(f(g(h())))`.
func (c *IdentityProviderClient) Use(hooks ...Hook) {
	c.hooks.IdentityProvider = append(c.hooks.IdentityProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `identityprovider.Intercept(f(g(h())))`.
func (c *IdentityProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.IdentityProvider = append(c.inters.IdentityProvider, interceptors...)
}

// Create returns a builder for creating a IdentityProvider entity.
func (c *IdentityProviderClient) Create() *IdentityProviderCreate {
	mutation := newIdentityProviderMutation(c.config, OpCreate)
	return &IdentityProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IdentityProvider entities.
func (c *IdentityProviderClient) CreateBulk(builders ...*IdentityProviderCreate) *IdentityProviderCreateBulk {
	return &IdentityProviderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdentityProviderClient) MapCreateBulk(slice any, setFunc func(*IdentityProviderCreate, int)) *IdentityProviderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdentityProviderCreateBulk{err: fmt.Errorf("calling to IdentityProviderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdentityProviderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdentityProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IdentityProvider.
func (c *IdentityProviderClient) Update() *IdentityProviderUpdate {
	mutation := newIdentityProviderMutation(c.config, OpUpdate)
	return &IdentityProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityProviderClient) UpdateOne(ip *IdentityProvider) *IdentityProviderUpdateOne {
	mutation := newIdentityProviderMutation(c.config, OpUpdateOne, withIdentityProvider(ip))
	return &IdentityProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityProviderClient) UpdateOneID(id xid.ID) *IdentityProviderUpdateOne {
	mutation := newIdentityProviderMutation(c.config, OpUpdateOne, withIdentityProviderID(id))
	return &IdentityProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IdentityProvider.
func (c *IdentityProviderClient) Delete() *IdentityProviderDelete {
	mutation := newIdentityProviderMutation(c.config, OpDelete)
	return &IdentityProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdentityProviderClient) DeleteOne(ip *IdentityProvider) *IdentityProviderDeleteOne {
	return c.DeleteOneID(ip.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdentityProviderClient) DeleteOneID(id xid.ID) *IdentityProviderDeleteOne {
	builder := c.Delete().Where(identityprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityProviderDeleteOne{builder}
}

// Query returns a query builder for IdentityProvider.
func (c *IdentityProviderClient) Query() *IdentityProviderQuery {
	return &IdentityProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdentityProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a IdentityProvider entity by its id.
func (c *IdentityProviderClient) Get(ctx context.Context, id xid.ID) (*IdentityProvider, error) {
	return c.Query().Where(identityprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityProviderClient) GetX(ctx context.Context, id xid.ID) *IdentityProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a IdentityProvider.
func (c *IdentityProviderClient) QueryOrganization(ip *IdentityProvider) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(identityprovider.Table, identityprovider.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, identityprovider.OrganizationTable, identityprovider.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationProviders queries the organization_providers edge of a IdentityProvider.
func (c *IdentityProviderClient) QueryOrganizationProviders(ip *IdentityProvider) *OrganizationProviderQuery {
	query := (&OrganizationProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(identityprovider.Table, identityprovider.FieldID, id),
			sqlgraph.To(organizationprovider.Table, organizationprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, identityprovider.OrganizationProvidersTable, identityprovider.OrganizationProvidersColumn),
		)
		fromV = sqlgraph.Neighbors(ip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdentityProviderClient) Hooks() []Hook {
	return c.hooks.IdentityProvider
}

// Interceptors returns the client interceptors.
func (c *IdentityProviderClient) Interceptors() []Interceptor {
	return c.inters.IdentityProvider
}

func (c *IdentityProviderClient) mutate(ctx context.Context, m *IdentityProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdentityProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdentityProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdentityProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdentityProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IdentityProvider mutation op: %q", m.Op())
	}
}

// MFAClient is a client for the MFA schema.
type MFAClient struct {
	config
}

// NewMFAClient returns a client for the MFA from the given config.
func NewMFAClient(c config) *MFAClient {
	return &MFAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mfa.Hooks(f(g(h())))`.
func (c *MFAClient) Use(hooks ...Hook) {
	c.hooks.MFA = append(c.hooks.MFA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mfa.Intercept(f(g(h())))`.
func (c *MFAClient) Intercept(interceptors ...Interceptor) {
	c.inters.MFA = append(c.inters.MFA, interceptors...)
}

// Create returns a builder for creating a MFA entity.
func (c *MFAClient) Create() *MFACreate {
	mutation := newMFAMutation(c.config, OpCreate)
	return &MFACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MFA entities.
func (c *MFAClient) CreateBulk(builders ...*MFACreate) *MFACreateBulk {
	return &MFACreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MFAClient) MapCreateBulk(slice any, setFunc func(*MFACreate, int)) *MFACreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MFACreateBulk{err: fmt.Errorf("calling to MFAClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MFACreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MFACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MFA.
func (c *MFAClient) Update() *MFAUpdate {
	mutation := newMFAMutation(c.config, OpUpdate)
	return &MFAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MFAClient) UpdateOne(m *MFA) *MFAUpdateOne {
	mutation := newMFAMutation(c.config, OpUpdateOne, withMFA(m))
	return &MFAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MFAClient) UpdateOneID(id xid.ID) *MFAUpdateOne {
	mutation := newMFAMutation(c.config, OpUpdateOne, withMFAID(id))
	return &MFAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MFA.
func (c *MFAClient) Delete() *MFADelete {
	mutation := newMFAMutation(c.config, OpDelete)
	return &MFADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MFAClient) DeleteOne(m *MFA) *MFADeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MFAClient) DeleteOneID(id xid.ID) *MFADeleteOne {
	builder := c.Delete().Where(mfa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MFADeleteOne{builder}
}

// Query returns a query builder for MFA.
func (c *MFAClient) Query() *MFAQuery {
	return &MFAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMFA},
		inters: c.Interceptors(),
	}
}

// Get returns a MFA entity by its id.
func (c *MFAClient) Get(ctx context.Context, id xid.ID) (*MFA, error) {
	return c.Query().Where(mfa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MFAClient) GetX(ctx context.Context, id xid.ID) *MFA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a MFA.
func (c *MFAClient) QueryUser(m *MFA) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mfa.Table, mfa.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mfa.UserTable, mfa.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MFAClient) Hooks() []Hook {
	return c.hooks.MFA
}

// Interceptors returns the client interceptors.
func (c *MFAClient) Interceptors() []Interceptor {
	return c.inters.MFA
}

func (c *MFAClient) mutate(ctx context.Context, m *MFAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MFACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MFAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MFAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MFADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MFA mutation op: %q", m.Op())
	}
}

// MembershipClient is a client for the Membership schema.
type MembershipClient struct {
	config
}

// NewMembershipClient returns a client for the Membership from the given config.
func NewMembershipClient(c config) *MembershipClient {
	return &MembershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membership.Hooks(f(g(h())))`.
func (c *MembershipClient) Use(hooks ...Hook) {
	c.hooks.Membership = append(c.hooks.Membership, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membership.Intercept(f(g(h())))`.
func (c *MembershipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Membership = append(c.inters.Membership, interceptors...)
}

// Create returns a builder for creating a Membership entity.
func (c *MembershipClient) Create() *MembershipCreate {
	mutation := newMembershipMutation(c.config, OpCreate)
	return &MembershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Membership entities.
func (c *MembershipClient) CreateBulk(builders ...*MembershipCreate) *MembershipCreateBulk {
	return &MembershipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MembershipClient) MapCreateBulk(slice any, setFunc func(*MembershipCreate, int)) *MembershipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MembershipCreateBulk{err: fmt.Errorf("calling to MembershipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MembershipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MembershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Membership.
func (c *MembershipClient) Update() *MembershipUpdate {
	mutation := newMembershipMutation(c.config, OpUpdate)
	return &MembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MembershipClient) UpdateOne(m *Membership) *MembershipUpdateOne {
	mutation := newMembershipMutation(c.config, OpUpdateOne, withMembership(m))
	return &MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MembershipClient) UpdateOneID(id xid.ID) *MembershipUpdateOne {
	mutation := newMembershipMutation(c.config, OpUpdateOne, withMembershipID(id))
	return &MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Membership.
func (c *MembershipClient) Delete() *MembershipDelete {
	mutation := newMembershipMutation(c.config, OpDelete)
	return &MembershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MembershipClient) DeleteOne(m *Membership) *MembershipDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MembershipClient) DeleteOneID(id xid.ID) *MembershipDeleteOne {
	builder := c.Delete().Where(membership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MembershipDeleteOne{builder}
}

// Query returns a query builder for Membership.
func (c *MembershipClient) Query() *MembershipQuery {
	return &MembershipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMembership},
		inters: c.Interceptors(),
	}
}

// Get returns a Membership entity by its id.
func (c *MembershipClient) Get(ctx context.Context, id xid.ID) (*Membership, error) {
	return c.Query().Where(membership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MembershipClient) GetX(ctx context.Context, id xid.ID) *Membership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Membership.
func (c *MembershipClient) QueryUser(m *Membership) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membership.Table, membership.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membership.UserTable, membership.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Membership.
func (c *MembershipClient) QueryOrganization(m *Membership) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membership.Table, membership.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membership.OrganizationTable, membership.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a Membership.
func (c *MembershipClient) QueryRole(m *Membership) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membership.Table, membership.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membership.RoleTable, membership.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInviter queries the inviter edge of a Membership.
func (c *MembershipClient) QueryInviter(m *Membership) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membership.Table, membership.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membership.InviterTable, membership.InviterColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MembershipClient) Hooks() []Hook {
	return c.hooks.Membership
}

// Interceptors returns the client interceptors.
func (c *MembershipClient) Interceptors() []Interceptor {
	return c.inters.Membership
}

func (c *MembershipClient) mutate(ctx context.Context, m *MembershipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MembershipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MembershipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Membership mutation op: %q", m.Op())
	}
}

// OAuthAuthorizationClient is a client for the OAuthAuthorization schema.
type OAuthAuthorizationClient struct {
	config
}

// NewOAuthAuthorizationClient returns a client for the OAuthAuthorization from the given config.
func NewOAuthAuthorizationClient(c config) *OAuthAuthorizationClient {
	return &OAuthAuthorizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthauthorization.Hooks(f(g(h())))`.
func (c *OAuthAuthorizationClient) Use(hooks ...Hook) {
	c.hooks.OAuthAuthorization = append(c.hooks.OAuthAuthorization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthauthorization.Intercept(f(g(h())))`.
func (c *OAuthAuthorizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthAuthorization = append(c.inters.OAuthAuthorization, interceptors...)
}

// Create returns a builder for creating a OAuthAuthorization entity.
func (c *OAuthAuthorizationClient) Create() *OAuthAuthorizationCreate {
	mutation := newOAuthAuthorizationMutation(c.config, OpCreate)
	return &OAuthAuthorizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthAuthorization entities.
func (c *OAuthAuthorizationClient) CreateBulk(builders ...*OAuthAuthorizationCreate) *OAuthAuthorizationCreateBulk {
	return &OAuthAuthorizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthAuthorizationClient) MapCreateBulk(slice any, setFunc func(*OAuthAuthorizationCreate, int)) *OAuthAuthorizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthAuthorizationCreateBulk{err: fmt.Errorf("calling to OAuthAuthorizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthAuthorizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthAuthorizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthAuthorization.
func (c *OAuthAuthorizationClient) Update() *OAuthAuthorizationUpdate {
	mutation := newOAuthAuthorizationMutation(c.config, OpUpdate)
	return &OAuthAuthorizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthAuthorizationClient) UpdateOne(oa *OAuthAuthorization) *OAuthAuthorizationUpdateOne {
	mutation := newOAuthAuthorizationMutation(c.config, OpUpdateOne, withOAuthAuthorization(oa))
	return &OAuthAuthorizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthAuthorizationClient) UpdateOneID(id xid.ID) *OAuthAuthorizationUpdateOne {
	mutation := newOAuthAuthorizationMutation(c.config, OpUpdateOne, withOAuthAuthorizationID(id))
	return &OAuthAuthorizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthAuthorization.
func (c *OAuthAuthorizationClient) Delete() *OAuthAuthorizationDelete {
	mutation := newOAuthAuthorizationMutation(c.config, OpDelete)
	return &OAuthAuthorizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthAuthorizationClient) DeleteOne(oa *OAuthAuthorization) *OAuthAuthorizationDeleteOne {
	return c.DeleteOneID(oa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthAuthorizationClient) DeleteOneID(id xid.ID) *OAuthAuthorizationDeleteOne {
	builder := c.Delete().Where(oauthauthorization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthAuthorizationDeleteOne{builder}
}

// Query returns a query builder for OAuthAuthorization.
func (c *OAuthAuthorizationClient) Query() *OAuthAuthorizationQuery {
	return &OAuthAuthorizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthAuthorization},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthAuthorization entity by its id.
func (c *OAuthAuthorizationClient) Get(ctx context.Context, id xid.ID) (*OAuthAuthorization, error) {
	return c.Query().Where(oauthauthorization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthAuthorizationClient) GetX(ctx context.Context, id xid.ID) *OAuthAuthorization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClient queries the client edge of a OAuthAuthorization.
func (c *OAuthAuthorizationClient) QueryClient(oa *OAuthAuthorization) *OAuthClientQuery {
	query := (&OAuthClientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthauthorization.Table, oauthauthorization.FieldID, id),
			sqlgraph.To(oauthclient.Table, oauthclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthauthorization.ClientTable, oauthauthorization.ClientColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a OAuthAuthorization.
func (c *OAuthAuthorizationClient) QueryUser(oa *OAuthAuthorization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthauthorization.Table, oauthauthorization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthauthorization.UserTable, oauthauthorization.UserColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScopes queries the scopes edge of a OAuthAuthorization.
func (c *OAuthAuthorizationClient) QueryScopes(oa *OAuthAuthorization) *OAuthScopeQuery {
	query := (&OAuthScopeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthauthorization.Table, oauthauthorization.FieldID, id),
			sqlgraph.To(oauthscope.Table, oauthscope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oauthauthorization.ScopesTable, oauthauthorization.ScopesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthAuthorizationClient) Hooks() []Hook {
	return c.hooks.OAuthAuthorization
}

// Interceptors returns the client interceptors.
func (c *OAuthAuthorizationClient) Interceptors() []Interceptor {
	return c.inters.OAuthAuthorization
}

func (c *OAuthAuthorizationClient) mutate(ctx context.Context, m *OAuthAuthorizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthAuthorizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthAuthorizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthAuthorizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthAuthorizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthAuthorization mutation op: %q", m.Op())
	}
}

// OAuthClientClient is a client for the OAuthClient schema.
type OAuthClientClient struct {
	config
}

// NewOAuthClientClient returns a client for the OAuthClient from the given config.
func NewOAuthClientClient(c config) *OAuthClientClient {
	return &OAuthClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthclient.Hooks(f(g(h())))`.
func (c *OAuthClientClient) Use(hooks ...Hook) {
	c.hooks.OAuthClient = append(c.hooks.OAuthClient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthclient.Intercept(f(g(h())))`.
func (c *OAuthClientClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthClient = append(c.inters.OAuthClient, interceptors...)
}

// Create returns a builder for creating a OAuthClient entity.
func (c *OAuthClientClient) Create() *OAuthClientCreate {
	mutation := newOAuthClientMutation(c.config, OpCreate)
	return &OAuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthClient entities.
func (c *OAuthClientClient) CreateBulk(builders ...*OAuthClientCreate) *OAuthClientCreateBulk {
	return &OAuthClientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthClientClient) MapCreateBulk(slice any, setFunc func(*OAuthClientCreate, int)) *OAuthClientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthClientCreateBulk{err: fmt.Errorf("calling to OAuthClientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthClientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthClient.
func (c *OAuthClientClient) Update() *OAuthClientUpdate {
	mutation := newOAuthClientMutation(c.config, OpUpdate)
	return &OAuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthClientClient) UpdateOne(oc *OAuthClient) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClient(oc))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthClientClient) UpdateOneID(id xid.ID) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClientID(id))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthClient.
func (c *OAuthClientClient) Delete() *OAuthClientDelete {
	mutation := newOAuthClientMutation(c.config, OpDelete)
	return &OAuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthClientClient) DeleteOne(oc *OAuthClient) *OAuthClientDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthClientClient) DeleteOneID(id xid.ID) *OAuthClientDeleteOne {
	builder := c.Delete().Where(oauthclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthClientDeleteOne{builder}
}

// Query returns a query builder for OAuthClient.
func (c *OAuthClientClient) Query() *OAuthClientQuery {
	return &OAuthClientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthClient},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthClient entity by its id.
func (c *OAuthClientClient) Get(ctx context.Context, id xid.ID) (*OAuthClient, error) {
	return c.Query().Where(oauthclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthClientClient) GetX(ctx context.Context, id xid.ID) *OAuthClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OAuthClient.
func (c *OAuthClientClient) QueryOrganization(oc *OAuthClient) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthclient.Table, oauthclient.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthclient.OrganizationTable, oauthclient.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(oc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTokens queries the tokens edge of a OAuthClient.
func (c *OAuthClientClient) QueryTokens(oc *OAuthClient) *OAuthTokenQuery {
	query := (&OAuthTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthclient.Table, oauthclient.FieldID, id),
			sqlgraph.To(oauthtoken.Table, oauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oauthclient.TokensTable, oauthclient.TokensColumn),
		)
		fromV = sqlgraph.Neighbors(oc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthorizations queries the authorizations edge of a OAuthClient.
func (c *OAuthClientClient) QueryAuthorizations(oc *OAuthClient) *OAuthAuthorizationQuery {
	query := (&OAuthAuthorizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthclient.Table, oauthclient.FieldID, id),
			sqlgraph.To(oauthauthorization.Table, oauthauthorization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oauthclient.AuthorizationsTable, oauthclient.AuthorizationsColumn),
		)
		fromV = sqlgraph.Neighbors(oc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScopes queries the scopes edge of a OAuthClient.
func (c *OAuthClientClient) QueryScopes(oc *OAuthClient) *OAuthScopeQuery {
	query := (&OAuthScopeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthclient.Table, oauthclient.FieldID, id),
			sqlgraph.To(oauthscope.Table, oauthscope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oauthclient.ScopesTable, oauthclient.ScopesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(oc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthClientClient) Hooks() []Hook {
	return c.hooks.OAuthClient
}

// Interceptors returns the client interceptors.
func (c *OAuthClientClient) Interceptors() []Interceptor {
	return c.inters.OAuthClient
}

func (c *OAuthClientClient) mutate(ctx context.Context, m *OAuthClientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthClient mutation op: %q", m.Op())
	}
}

// OAuthScopeClient is a client for the OAuthScope schema.
type OAuthScopeClient struct {
	config
}

// NewOAuthScopeClient returns a client for the OAuthScope from the given config.
func NewOAuthScopeClient(c config) *OAuthScopeClient {
	return &OAuthScopeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthscope.Hooks(f(g(h())))`.
func (c *OAuthScopeClient) Use(hooks ...Hook) {
	c.hooks.OAuthScope = append(c.hooks.OAuthScope, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthscope.Intercept(f(g(h())))`.
func (c *OAuthScopeClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthScope = append(c.inters.OAuthScope, interceptors...)
}

// Create returns a builder for creating a OAuthScope entity.
func (c *OAuthScopeClient) Create() *OAuthScopeCreate {
	mutation := newOAuthScopeMutation(c.config, OpCreate)
	return &OAuthScopeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthScope entities.
func (c *OAuthScopeClient) CreateBulk(builders ...*OAuthScopeCreate) *OAuthScopeCreateBulk {
	return &OAuthScopeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthScopeClient) MapCreateBulk(slice any, setFunc func(*OAuthScopeCreate, int)) *OAuthScopeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthScopeCreateBulk{err: fmt.Errorf("calling to OAuthScopeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthScopeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthScopeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthScope.
func (c *OAuthScopeClient) Update() *OAuthScopeUpdate {
	mutation := newOAuthScopeMutation(c.config, OpUpdate)
	return &OAuthScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthScopeClient) UpdateOne(os *OAuthScope) *OAuthScopeUpdateOne {
	mutation := newOAuthScopeMutation(c.config, OpUpdateOne, withOAuthScope(os))
	return &OAuthScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthScopeClient) UpdateOneID(id xid.ID) *OAuthScopeUpdateOne {
	mutation := newOAuthScopeMutation(c.config, OpUpdateOne, withOAuthScopeID(id))
	return &OAuthScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthScope.
func (c *OAuthScopeClient) Delete() *OAuthScopeDelete {
	mutation := newOAuthScopeMutation(c.config, OpDelete)
	return &OAuthScopeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthScopeClient) DeleteOne(os *OAuthScope) *OAuthScopeDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthScopeClient) DeleteOneID(id xid.ID) *OAuthScopeDeleteOne {
	builder := c.Delete().Where(oauthscope.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthScopeDeleteOne{builder}
}

// Query returns a query builder for OAuthScope.
func (c *OAuthScopeClient) Query() *OAuthScopeQuery {
	return &OAuthScopeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthScope},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthScope entity by its id.
func (c *OAuthScopeClient) Get(ctx context.Context, id xid.ID) (*OAuthScope, error) {
	return c.Query().Where(oauthscope.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthScopeClient) GetX(ctx context.Context, id xid.ID) *OAuthScope {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClients queries the clients edge of a OAuthScope.
func (c *OAuthScopeClient) QueryClients(os *OAuthScope) *OAuthClientQuery {
	query := (&OAuthClientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthscope.Table, oauthscope.FieldID, id),
			sqlgraph.To(oauthclient.Table, oauthclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oauthscope.ClientsTable, oauthscope.ClientsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTokens queries the tokens edge of a OAuthScope.
func (c *OAuthScopeClient) QueryTokens(os *OAuthScope) *OAuthTokenQuery {
	query := (&OAuthTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthscope.Table, oauthscope.FieldID, id),
			sqlgraph.To(oauthtoken.Table, oauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oauthscope.TokensTable, oauthscope.TokensPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthorizations queries the authorizations edge of a OAuthScope.
func (c *OAuthScopeClient) QueryAuthorizations(os *OAuthScope) *OAuthAuthorizationQuery {
	query := (&OAuthAuthorizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthscope.Table, oauthscope.FieldID, id),
			sqlgraph.To(oauthauthorization.Table, oauthauthorization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oauthscope.AuthorizationsTable, oauthscope.AuthorizationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthScopeClient) Hooks() []Hook {
	return c.hooks.OAuthScope
}

// Interceptors returns the client interceptors.
func (c *OAuthScopeClient) Interceptors() []Interceptor {
	return c.inters.OAuthScope
}

func (c *OAuthScopeClient) mutate(ctx context.Context, m *OAuthScopeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthScopeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthScopeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthScopeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthScopeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthScope mutation op: %q", m.Op())
	}
}

// OAuthTokenClient is a client for the OAuthToken schema.
type OAuthTokenClient struct {
	config
}

// NewOAuthTokenClient returns a client for the OAuthToken from the given config.
func NewOAuthTokenClient(c config) *OAuthTokenClient {
	return &OAuthTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthtoken.Hooks(f(g(h())))`.
func (c *OAuthTokenClient) Use(hooks ...Hook) {
	c.hooks.OAuthToken = append(c.hooks.OAuthToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthtoken.Intercept(f(g(h())))`.
func (c *OAuthTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthToken = append(c.inters.OAuthToken, interceptors...)
}

// Create returns a builder for creating a OAuthToken entity.
func (c *OAuthTokenClient) Create() *OAuthTokenCreate {
	mutation := newOAuthTokenMutation(c.config, OpCreate)
	return &OAuthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthToken entities.
func (c *OAuthTokenClient) CreateBulk(builders ...*OAuthTokenCreate) *OAuthTokenCreateBulk {
	return &OAuthTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthTokenClient) MapCreateBulk(slice any, setFunc func(*OAuthTokenCreate, int)) *OAuthTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthTokenCreateBulk{err: fmt.Errorf("calling to OAuthTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthToken.
func (c *OAuthTokenClient) Update() *OAuthTokenUpdate {
	mutation := newOAuthTokenMutation(c.config, OpUpdate)
	return &OAuthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthTokenClient) UpdateOne(ot *OAuthToken) *OAuthTokenUpdateOne {
	mutation := newOAuthTokenMutation(c.config, OpUpdateOne, withOAuthToken(ot))
	return &OAuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthTokenClient) UpdateOneID(id xid.ID) *OAuthTokenUpdateOne {
	mutation := newOAuthTokenMutation(c.config, OpUpdateOne, withOAuthTokenID(id))
	return &OAuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthToken.
func (c *OAuthTokenClient) Delete() *OAuthTokenDelete {
	mutation := newOAuthTokenMutation(c.config, OpDelete)
	return &OAuthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthTokenClient) DeleteOne(ot *OAuthToken) *OAuthTokenDeleteOne {
	return c.DeleteOneID(ot.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthTokenClient) DeleteOneID(id xid.ID) *OAuthTokenDeleteOne {
	builder := c.Delete().Where(oauthtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthTokenDeleteOne{builder}
}

// Query returns a query builder for OAuthToken.
func (c *OAuthTokenClient) Query() *OAuthTokenQuery {
	return &OAuthTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthToken},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthToken entity by its id.
func (c *OAuthTokenClient) Get(ctx context.Context, id xid.ID) (*OAuthToken, error) {
	return c.Query().Where(oauthtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthTokenClient) GetX(ctx context.Context, id xid.ID) *OAuthToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClient queries the client edge of a OAuthToken.
func (c *OAuthTokenClient) QueryClient(ot *OAuthToken) *OAuthClientQuery {
	query := (&OAuthClientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthtoken.Table, oauthtoken.FieldID, id),
			sqlgraph.To(oauthclient.Table, oauthclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthtoken.ClientTable, oauthtoken.ClientColumn),
		)
		fromV = sqlgraph.Neighbors(ot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a OAuthToken.
func (c *OAuthTokenClient) QueryUser(ot *OAuthToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthtoken.Table, oauthtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthtoken.UserTable, oauthtoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScopes queries the scopes edge of a OAuthToken.
func (c *OAuthTokenClient) QueryScopes(ot *OAuthToken) *OAuthScopeQuery {
	query := (&OAuthScopeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthtoken.Table, oauthtoken.FieldID, id),
			sqlgraph.To(oauthscope.Table, oauthscope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oauthtoken.ScopesTable, oauthtoken.ScopesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthTokenClient) Hooks() []Hook {
	return c.hooks.OAuthToken
}

// Interceptors returns the client interceptors.
func (c *OAuthTokenClient) Interceptors() []Interceptor {
	return c.inters.OAuthToken
}

func (c *OAuthTokenClient) mutate(ctx context.Context, m *OAuthTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthToken mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id xid.ID) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id xid.ID) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id xid.ID) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id xid.ID) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Organization.
func (c *OrganizationClient) QueryUsers(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.UsersTable, organization.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberships queries the memberships edge of a Organization.
func (c *OrganizationClient) QueryMemberships(o *Organization) *MembershipQuery {
	query := (&MembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.MembershipsTable, organization.MembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmsTemplates queries the sms_templates edge of a Organization.
func (c *OrganizationClient) QuerySmsTemplates(o *Organization) *SMSTemplateQuery {
	query := (&SMSTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(smstemplate.Table, smstemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SmsTemplatesTable, organization.SmsTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailTemplates queries the email_templates edge of a Organization.
func (c *OrganizationClient) QueryEmailTemplates(o *Organization) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EmailTemplatesTable, organization.EmailTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKeys queries the api_keys edge of a Organization.
func (c *OrganizationClient) QueryAPIKeys(o *Organization) *ApiKeyQuery {
	query := (&ApiKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.APIKeysTable, organization.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWebhooks queries the webhooks edge of a Organization.
func (c *OrganizationClient) QueryWebhooks(o *Organization) *WebhookQuery {
	query := (&WebhookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(webhook.Table, webhook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.WebhooksTable, organization.WebhooksColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatureFlags queries the feature_flags edge of a Organization.
func (c *OrganizationClient) QueryFeatureFlags(o *Organization) *OrganizationFeatureQuery {
	query := (&OrganizationFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationfeature.Table, organizationfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.FeatureFlagsTable, organization.FeatureFlagsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdentityProviders queries the identity_providers edge of a Organization.
func (c *OrganizationClient) QueryIdentityProviders(o *Organization) *IdentityProviderQuery {
	query := (&IdentityProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(identityprovider.Table, identityprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.IdentityProvidersTable, organization.IdentityProvidersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthClients queries the oauth_clients edge of a Organization.
func (c *OrganizationClient) QueryOauthClients(o *Organization) *OAuthClientQuery {
	query := (&OAuthClientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(oauthclient.Table, oauthclient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OauthClientsTable, organization.OauthClientsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a Organization.
func (c *OrganizationClient) QueryRoles(o *Organization) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RolesTable, organization.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRoleContexts queries the user_role_contexts edge of a Organization.
func (c *OrganizationClient) QueryUserRoleContexts(o *Organization) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.UserRoleContextsTable, organization.UserRoleContextsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPermissionContexts queries the user_permission_contexts edge of a Organization.
func (c *OrganizationClient) QueryUserPermissionContexts(o *Organization) *UserPermissionQuery {
	query := (&UserPermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(userpermission.Table, userpermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.UserPermissionContextsTable, organization.UserPermissionContextsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a Organization.
func (c *OrganizationClient) QueryAuditLogs(o *Organization) *AuditQuery {
	query := (&AuditClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(audit.Table, audit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.AuditLogsTable, organization.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationProviders queries the organization_providers edge of a Organization.
func (c *OrganizationClient) QueryOrganizationProviders(o *Organization) *OrganizationProviderQuery {
	query := (&OrganizationProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationprovider.Table, organizationprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrganizationProvidersTable, organization.OrganizationProvidersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Organization.
func (c *OrganizationClient) QueryActivities(o *Organization) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ActivitiesTable, organization.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationFeatureClient is a client for the OrganizationFeature schema.
type OrganizationFeatureClient struct {
	config
}

// NewOrganizationFeatureClient returns a client for the OrganizationFeature from the given config.
func NewOrganizationFeatureClient(c config) *OrganizationFeatureClient {
	return &OrganizationFeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationfeature.Hooks(f(g(h())))`.
func (c *OrganizationFeatureClient) Use(hooks ...Hook) {
	c.hooks.OrganizationFeature = append(c.hooks.OrganizationFeature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationfeature.Intercept(f(g(h())))`.
func (c *OrganizationFeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationFeature = append(c.inters.OrganizationFeature, interceptors...)
}

// Create returns a builder for creating a OrganizationFeature entity.
func (c *OrganizationFeatureClient) Create() *OrganizationFeatureCreate {
	mutation := newOrganizationFeatureMutation(c.config, OpCreate)
	return &OrganizationFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationFeature entities.
func (c *OrganizationFeatureClient) CreateBulk(builders ...*OrganizationFeatureCreate) *OrganizationFeatureCreateBulk {
	return &OrganizationFeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationFeatureClient) MapCreateBulk(slice any, setFunc func(*OrganizationFeatureCreate, int)) *OrganizationFeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationFeatureCreateBulk{err: fmt.Errorf("calling to OrganizationFeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationFeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationFeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationFeature.
func (c *OrganizationFeatureClient) Update() *OrganizationFeatureUpdate {
	mutation := newOrganizationFeatureMutation(c.config, OpUpdate)
	return &OrganizationFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationFeatureClient) UpdateOne(of *OrganizationFeature) *OrganizationFeatureUpdateOne {
	mutation := newOrganizationFeatureMutation(c.config, OpUpdateOne, withOrganizationFeature(of))
	return &OrganizationFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationFeatureClient) UpdateOneID(id xid.ID) *OrganizationFeatureUpdateOne {
	mutation := newOrganizationFeatureMutation(c.config, OpUpdateOne, withOrganizationFeatureID(id))
	return &OrganizationFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationFeature.
func (c *OrganizationFeatureClient) Delete() *OrganizationFeatureDelete {
	mutation := newOrganizationFeatureMutation(c.config, OpDelete)
	return &OrganizationFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationFeatureClient) DeleteOne(of *OrganizationFeature) *OrganizationFeatureDeleteOne {
	return c.DeleteOneID(of.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationFeatureClient) DeleteOneID(id xid.ID) *OrganizationFeatureDeleteOne {
	builder := c.Delete().Where(organizationfeature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationFeatureDeleteOne{builder}
}

// Query returns a query builder for OrganizationFeature.
func (c *OrganizationFeatureClient) Query() *OrganizationFeatureQuery {
	return &OrganizationFeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationFeature entity by its id.
func (c *OrganizationFeatureClient) Get(ctx context.Context, id xid.ID) (*OrganizationFeature, error) {
	return c.Query().Where(organizationfeature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationFeatureClient) GetX(ctx context.Context, id xid.ID) *OrganizationFeature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationFeature.
func (c *OrganizationFeatureClient) QueryOrganization(of *OrganizationFeature) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := of.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationfeature.Table, organizationfeature.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationfeature.OrganizationTable, organizationfeature.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(of.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeature queries the feature edge of a OrganizationFeature.
func (c *OrganizationFeatureClient) QueryFeature(of *OrganizationFeature) *FeatureFlagQuery {
	query := (&FeatureFlagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := of.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationfeature.Table, organizationfeature.FieldID, id),
			sqlgraph.To(featureflag.Table, featureflag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationfeature.FeatureTable, organizationfeature.FeatureColumn),
		)
		fromV = sqlgraph.Neighbors(of.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationFeatureClient) Hooks() []Hook {
	return c.hooks.OrganizationFeature
}

// Interceptors returns the client interceptors.
func (c *OrganizationFeatureClient) Interceptors() []Interceptor {
	return c.inters.OrganizationFeature
}

func (c *OrganizationFeatureClient) mutate(ctx context.Context, m *OrganizationFeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationFeature mutation op: %q", m.Op())
	}
}

// OrganizationProviderClient is a client for the OrganizationProvider schema.
type OrganizationProviderClient struct {
	config
}

// NewOrganizationProviderClient returns a client for the OrganizationProvider from the given config.
func NewOrganizationProviderClient(c config) *OrganizationProviderClient {
	return &OrganizationProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationprovider.Hooks(f(g(h())))`.
func (c *OrganizationProviderClient) Use(hooks ...Hook) {
	c.hooks.OrganizationProvider = append(c.hooks.OrganizationProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationprovider.Intercept(f(g(h())))`.
func (c *OrganizationProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationProvider = append(c.inters.OrganizationProvider, interceptors...)
}

// Create returns a builder for creating a OrganizationProvider entity.
func (c *OrganizationProviderClient) Create() *OrganizationProviderCreate {
	mutation := newOrganizationProviderMutation(c.config, OpCreate)
	return &OrganizationProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationProvider entities.
func (c *OrganizationProviderClient) CreateBulk(builders ...*OrganizationProviderCreate) *OrganizationProviderCreateBulk {
	return &OrganizationProviderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationProviderClient) MapCreateBulk(slice any, setFunc func(*OrganizationProviderCreate, int)) *OrganizationProviderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationProviderCreateBulk{err: fmt.Errorf("calling to OrganizationProviderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationProviderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationProvider.
func (c *OrganizationProviderClient) Update() *OrganizationProviderUpdate {
	mutation := newOrganizationProviderMutation(c.config, OpUpdate)
	return &OrganizationProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationProviderClient) UpdateOne(op *OrganizationProvider) *OrganizationProviderUpdateOne {
	mutation := newOrganizationProviderMutation(c.config, OpUpdateOne, withOrganizationProvider(op))
	return &OrganizationProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationProviderClient) UpdateOneID(id xid.ID) *OrganizationProviderUpdateOne {
	mutation := newOrganizationProviderMutation(c.config, OpUpdateOne, withOrganizationProviderID(id))
	return &OrganizationProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationProvider.
func (c *OrganizationProviderClient) Delete() *OrganizationProviderDelete {
	mutation := newOrganizationProviderMutation(c.config, OpDelete)
	return &OrganizationProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationProviderClient) DeleteOne(op *OrganizationProvider) *OrganizationProviderDeleteOne {
	return c.DeleteOneID(op.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationProviderClient) DeleteOneID(id xid.ID) *OrganizationProviderDeleteOne {
	builder := c.Delete().Where(organizationprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationProviderDeleteOne{builder}
}

// Query returns a query builder for OrganizationProvider.
func (c *OrganizationProviderClient) Query() *OrganizationProviderQuery {
	return &OrganizationProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationProvider entity by its id.
func (c *OrganizationProviderClient) Get(ctx context.Context, id xid.ID) (*OrganizationProvider, error) {
	return c.Query().Where(organizationprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationProviderClient) GetX(ctx context.Context, id xid.ID) *OrganizationProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationProvider.
func (c *OrganizationProviderClient) QueryOrganization(op *OrganizationProvider) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationprovider.Table, organizationprovider.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationprovider.OrganizationTable, organizationprovider.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a OrganizationProvider.
func (c *OrganizationProviderClient) QueryProvider(op *OrganizationProvider) *IdentityProviderQuery {
	query := (&IdentityProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationprovider.Table, organizationprovider.FieldID, id),
			sqlgraph.To(identityprovider.Table, identityprovider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationprovider.ProviderTable, organizationprovider.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a OrganizationProvider.
func (c *OrganizationProviderClient) QueryTemplate(op *OrganizationProvider) *ProviderTemplateQuery {
	query := (&ProviderTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationprovider.Table, organizationprovider.FieldID, id),
			sqlgraph.To(providertemplate.Table, providertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationprovider.TemplateTable, organizationprovider.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationProviderClient) Hooks() []Hook {
	return c.hooks.OrganizationProvider
}

// Interceptors returns the client interceptors.
func (c *OrganizationProviderClient) Interceptors() []Interceptor {
	return c.inters.OrganizationProvider
}

func (c *OrganizationProviderClient) mutate(ctx context.Context, m *OrganizationProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationProvider mutation op: %q", m.Op())
	}
}

// PasskeyClient is a client for the Passkey schema.
type PasskeyClient struct {
	config
}

// NewPasskeyClient returns a client for the Passkey from the given config.
func NewPasskeyClient(c config) *PasskeyClient {
	return &PasskeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passkey.Hooks(f(g(h())))`.
func (c *PasskeyClient) Use(hooks ...Hook) {
	c.hooks.Passkey = append(c.hooks.Passkey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passkey.Intercept(f(g(h())))`.
func (c *PasskeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Passkey = append(c.inters.Passkey, interceptors...)
}

// Create returns a builder for creating a Passkey entity.
func (c *PasskeyClient) Create() *PasskeyCreate {
	mutation := newPasskeyMutation(c.config, OpCreate)
	return &PasskeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Passkey entities.
func (c *PasskeyClient) CreateBulk(builders ...*PasskeyCreate) *PasskeyCreateBulk {
	return &PasskeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasskeyClient) MapCreateBulk(slice any, setFunc func(*PasskeyCreate, int)) *PasskeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasskeyCreateBulk{err: fmt.Errorf("calling to PasskeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasskeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasskeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Passkey.
func (c *PasskeyClient) Update() *PasskeyUpdate {
	mutation := newPasskeyMutation(c.config, OpUpdate)
	return &PasskeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasskeyClient) UpdateOne(pa *Passkey) *PasskeyUpdateOne {
	mutation := newPasskeyMutation(c.config, OpUpdateOne, withPasskey(pa))
	return &PasskeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasskeyClient) UpdateOneID(id xid.ID) *PasskeyUpdateOne {
	mutation := newPasskeyMutation(c.config, OpUpdateOne, withPasskeyID(id))
	return &PasskeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Passkey.
func (c *PasskeyClient) Delete() *PasskeyDelete {
	mutation := newPasskeyMutation(c.config, OpDelete)
	return &PasskeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasskeyClient) DeleteOne(pa *Passkey) *PasskeyDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasskeyClient) DeleteOneID(id xid.ID) *PasskeyDeleteOne {
	builder := c.Delete().Where(passkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasskeyDeleteOne{builder}
}

// Query returns a query builder for Passkey.
func (c *PasskeyClient) Query() *PasskeyQuery {
	return &PasskeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasskey},
		inters: c.Interceptors(),
	}
}

// Get returns a Passkey entity by its id.
func (c *PasskeyClient) Get(ctx context.Context, id xid.ID) (*Passkey, error) {
	return c.Query().Where(passkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasskeyClient) GetX(ctx context.Context, id xid.ID) *Passkey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Passkey.
func (c *PasskeyClient) QueryUser(pa *Passkey) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passkey.Table, passkey.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passkey.UserTable, passkey.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasskeyClient) Hooks() []Hook {
	return c.hooks.Passkey
}

// Interceptors returns the client interceptors.
func (c *PasskeyClient) Interceptors() []Interceptor {
	return c.inters.Passkey
}

func (c *PasskeyClient) mutate(ctx context.Context, m *PasskeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasskeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasskeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasskeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasskeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Passkey mutation op: %q", m.Op())
	}
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permission.Intercept(f(g(h())))`.
func (c *PermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Permission = append(c.inters.Permission, interceptors...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionClient) MapCreateBulk(slice any, setFunc func(*PermissionCreate, int)) *PermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionCreateBulk{err: fmt.Errorf("calling to PermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id xid.ID) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id xid.ID) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id xid.ID) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id xid.ID) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a Permission.
func (c *PermissionClient) QueryRoles(pe *Permission) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permission.RolesTable, permission.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserAssignments queries the user_assignments edge of a Permission.
func (c *PermissionClient) QueryUserAssignments(pe *Permission) *UserPermissionQuery {
	query := (&UserPermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(userpermission.Table, userpermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permission.UserAssignmentsTable, permission.UserAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependencies queries the dependencies edge of a Permission.
func (c *PermissionClient) QueryDependencies(pe *Permission) *PermissionDependencyQuery {
	query := (&PermissionDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(permissiondependency.Table, permissiondependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permission.DependenciesTable, permission.DependenciesColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependents queries the dependents edge of a Permission.
func (c *PermissionClient) QueryDependents(pe *Permission) *PermissionDependencyQuery {
	query := (&PermissionDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(permissiondependency.Table, permissiondependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permission.DependentsTable, permission.DependentsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependentPermissions queries the dependent_permissions edge of a Permission.
func (c *PermissionClient) QueryDependentPermissions(pe *Permission) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permission.DependentPermissionsTable, permission.DependentPermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequiredPermissions queries the required_permissions edge of a Permission.
func (c *PermissionClient) QueryRequiredPermissions(pe *Permission) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, permission.RequiredPermissionsTable, permission.RequiredPermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// Interceptors returns the client interceptors.
func (c *PermissionClient) Interceptors() []Interceptor {
	return c.inters.Permission
}

func (c *PermissionClient) mutate(ctx context.Context, m *PermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Permission mutation op: %q", m.Op())
	}
}

// PermissionDependencyClient is a client for the PermissionDependency schema.
type PermissionDependencyClient struct {
	config
}

// NewPermissionDependencyClient returns a client for the PermissionDependency from the given config.
func NewPermissionDependencyClient(c config) *PermissionDependencyClient {
	return &PermissionDependencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permissiondependency.Hooks(f(g(h())))`.
func (c *PermissionDependencyClient) Use(hooks ...Hook) {
	c.hooks.PermissionDependency = append(c.hooks.PermissionDependency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permissiondependency.Intercept(f(g(h())))`.
func (c *PermissionDependencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.PermissionDependency = append(c.inters.PermissionDependency, interceptors...)
}

// Create returns a builder for creating a PermissionDependency entity.
func (c *PermissionDependencyClient) Create() *PermissionDependencyCreate {
	mutation := newPermissionDependencyMutation(c.config, OpCreate)
	return &PermissionDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PermissionDependency entities.
func (c *PermissionDependencyClient) CreateBulk(builders ...*PermissionDependencyCreate) *PermissionDependencyCreateBulk {
	return &PermissionDependencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionDependencyClient) MapCreateBulk(slice any, setFunc func(*PermissionDependencyCreate, int)) *PermissionDependencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionDependencyCreateBulk{err: fmt.Errorf("calling to PermissionDependencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionDependencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionDependencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PermissionDependency.
func (c *PermissionDependencyClient) Update() *PermissionDependencyUpdate {
	mutation := newPermissionDependencyMutation(c.config, OpUpdate)
	return &PermissionDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionDependencyClient) UpdateOne(pd *PermissionDependency) *PermissionDependencyUpdateOne {
	mutation := newPermissionDependencyMutation(c.config, OpUpdateOne, withPermissionDependency(pd))
	return &PermissionDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionDependencyClient) UpdateOneID(id xid.ID) *PermissionDependencyUpdateOne {
	mutation := newPermissionDependencyMutation(c.config, OpUpdateOne, withPermissionDependencyID(id))
	return &PermissionDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PermissionDependency.
func (c *PermissionDependencyClient) Delete() *PermissionDependencyDelete {
	mutation := newPermissionDependencyMutation(c.config, OpDelete)
	return &PermissionDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionDependencyClient) DeleteOne(pd *PermissionDependency) *PermissionDependencyDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionDependencyClient) DeleteOneID(id xid.ID) *PermissionDependencyDeleteOne {
	builder := c.Delete().Where(permissiondependency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDependencyDeleteOne{builder}
}

// Query returns a query builder for PermissionDependency.
func (c *PermissionDependencyClient) Query() *PermissionDependencyQuery {
	return &PermissionDependencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermissionDependency},
		inters: c.Interceptors(),
	}
}

// Get returns a PermissionDependency entity by its id.
func (c *PermissionDependencyClient) Get(ctx context.Context, id xid.ID) (*PermissionDependency, error) {
	return c.Query().Where(permissiondependency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionDependencyClient) GetX(ctx context.Context, id xid.ID) *PermissionDependency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermission queries the permission edge of a PermissionDependency.
func (c *PermissionDependencyClient) QueryPermission(pd *PermissionDependency) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiondependency.Table, permissiondependency.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissiondependency.PermissionTable, permissiondependency.PermissionColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequiredPermission queries the required_permission edge of a PermissionDependency.
func (c *PermissionDependencyClient) QueryRequiredPermission(pd *PermissionDependency) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiondependency.Table, permissiondependency.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissiondependency.RequiredPermissionTable, permissiondependency.RequiredPermissionColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionDependencyClient) Hooks() []Hook {
	return c.hooks.PermissionDependency
}

// Interceptors returns the client interceptors.
func (c *PermissionDependencyClient) Interceptors() []Interceptor {
	return c.inters.PermissionDependency
}

func (c *PermissionDependencyClient) mutate(ctx context.Context, m *PermissionDependencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PermissionDependency mutation op: %q", m.Op())
	}
}

// ProviderTemplateClient is a client for the ProviderTemplate schema.
type ProviderTemplateClient struct {
	config
}

// NewProviderTemplateClient returns a client for the ProviderTemplate from the given config.
func NewProviderTemplateClient(c config) *ProviderTemplateClient {
	return &ProviderTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providertemplate.Hooks(f(g(h())))`.
func (c *ProviderTemplateClient) Use(hooks ...Hook) {
	c.hooks.ProviderTemplate = append(c.hooks.ProviderTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providertemplate.Intercept(f(g(h())))`.
func (c *ProviderTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderTemplate = append(c.inters.ProviderTemplate, interceptors...)
}

// Create returns a builder for creating a ProviderTemplate entity.
func (c *ProviderTemplateClient) Create() *ProviderTemplateCreate {
	mutation := newProviderTemplateMutation(c.config, OpCreate)
	return &ProviderTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderTemplate entities.
func (c *ProviderTemplateClient) CreateBulk(builders ...*ProviderTemplateCreate) *ProviderTemplateCreateBulk {
	return &ProviderTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProviderTemplateClient) MapCreateBulk(slice any, setFunc func(*ProviderTemplateCreate, int)) *ProviderTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProviderTemplateCreateBulk{err: fmt.Errorf("calling to ProviderTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProviderTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProviderTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderTemplate.
func (c *ProviderTemplateClient) Update() *ProviderTemplateUpdate {
	mutation := newProviderTemplateMutation(c.config, OpUpdate)
	return &ProviderTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderTemplateClient) UpdateOne(pt *ProviderTemplate) *ProviderTemplateUpdateOne {
	mutation := newProviderTemplateMutation(c.config, OpUpdateOne, withProviderTemplate(pt))
	return &ProviderTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderTemplateClient) UpdateOneID(id xid.ID) *ProviderTemplateUpdateOne {
	mutation := newProviderTemplateMutation(c.config, OpUpdateOne, withProviderTemplateID(id))
	return &ProviderTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderTemplate.
func (c *ProviderTemplateClient) Delete() *ProviderTemplateDelete {
	mutation := newProviderTemplateMutation(c.config, OpDelete)
	return &ProviderTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderTemplateClient) DeleteOne(pt *ProviderTemplate) *ProviderTemplateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderTemplateClient) DeleteOneID(id xid.ID) *ProviderTemplateDeleteOne {
	builder := c.Delete().Where(providertemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderTemplateDeleteOne{builder}
}

// Query returns a query builder for ProviderTemplate.
func (c *ProviderTemplateClient) Query() *ProviderTemplateQuery {
	return &ProviderTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderTemplate entity by its id.
func (c *ProviderTemplateClient) Get(ctx context.Context, id xid.ID) (*ProviderTemplate, error) {
	return c.Query().Where(providertemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderTemplateClient) GetX(ctx context.Context, id xid.ID) *ProviderTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationProviders queries the organization_providers edge of a ProviderTemplate.
func (c *ProviderTemplateClient) QueryOrganizationProviders(pt *ProviderTemplate) *OrganizationProviderQuery {
	query := (&OrganizationProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providertemplate.Table, providertemplate.FieldID, id),
			sqlgraph.To(organizationprovider.Table, organizationprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providertemplate.OrganizationProvidersTable, providertemplate.OrganizationProvidersColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderTemplateClient) Hooks() []Hook {
	return c.hooks.ProviderTemplate
}

// Interceptors returns the client interceptors.
func (c *ProviderTemplateClient) Interceptors() []Interceptor {
	return c.inters.ProviderTemplate
}

func (c *ProviderTemplateClient) mutate(ctx context.Context, m *ProviderTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderTemplate mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id xid.ID) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id xid.ID) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id xid.ID) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id xid.ID) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a Role.
func (c *RoleClient) QueryOrganization(r *Role) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, role.OrganizationTable, role.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserAssignments queries the user_assignments edge of a Role.
func (c *RoleClient) QueryUserAssignments(r *Role) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.UserAssignmentsTable, role.UserAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySystemUsers queries the system_users edge of a Role.
func (c *RoleClient) QuerySystemUsers(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.SystemUsersTable, role.SystemUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a Role.
func (c *RoleClient) QueryPermissions(r *Role) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.PermissionsTable, role.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberships queries the memberships edge of a Role.
func (c *RoleClient) QueryMemberships(r *Role) *MembershipQuery {
	query := (&MembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.MembershipsTable, role.MembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Role.
func (c *RoleClient) QueryParent(r *Role) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, role.ParentTable, role.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Role.
func (c *RoleClient) QueryChildren(r *Role) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.ChildrenTable, role.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SMSTemplateClient is a client for the SMSTemplate schema.
type SMSTemplateClient struct {
	config
}

// NewSMSTemplateClient returns a client for the SMSTemplate from the given config.
func NewSMSTemplateClient(c config) *SMSTemplateClient {
	return &SMSTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smstemplate.Hooks(f(g(h())))`.
func (c *SMSTemplateClient) Use(hooks ...Hook) {
	c.hooks.SMSTemplate = append(c.hooks.SMSTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smstemplate.Intercept(f(g(h())))`.
func (c *SMSTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.SMSTemplate = append(c.inters.SMSTemplate, interceptors...)
}

// Create returns a builder for creating a SMSTemplate entity.
func (c *SMSTemplateClient) Create() *SMSTemplateCreate {
	mutation := newSMSTemplateMutation(c.config, OpCreate)
	return &SMSTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SMSTemplate entities.
func (c *SMSTemplateClient) CreateBulk(builders ...*SMSTemplateCreate) *SMSTemplateCreateBulk {
	return &SMSTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SMSTemplateClient) MapCreateBulk(slice any, setFunc func(*SMSTemplateCreate, int)) *SMSTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SMSTemplateCreateBulk{err: fmt.Errorf("calling to SMSTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SMSTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SMSTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SMSTemplate.
func (c *SMSTemplateClient) Update() *SMSTemplateUpdate {
	mutation := newSMSTemplateMutation(c.config, OpUpdate)
	return &SMSTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SMSTemplateClient) UpdateOne(st *SMSTemplate) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplate(st))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SMSTemplateClient) UpdateOneID(id xid.ID) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplateID(id))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SMSTemplate.
func (c *SMSTemplateClient) Delete() *SMSTemplateDelete {
	mutation := newSMSTemplateMutation(c.config, OpDelete)
	return &SMSTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SMSTemplateClient) DeleteOne(st *SMSTemplate) *SMSTemplateDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SMSTemplateClient) DeleteOneID(id xid.ID) *SMSTemplateDeleteOne {
	builder := c.Delete().Where(smstemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SMSTemplateDeleteOne{builder}
}

// Query returns a query builder for SMSTemplate.
func (c *SMSTemplateClient) Query() *SMSTemplateQuery {
	return &SMSTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSMSTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a SMSTemplate entity by its id.
func (c *SMSTemplateClient) Get(ctx context.Context, id xid.ID) (*SMSTemplate, error) {
	return c.Query().Where(smstemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SMSTemplateClient) GetX(ctx context.Context, id xid.ID) *SMSTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a SMSTemplate.
func (c *SMSTemplateClient) QueryOrganization(st *SMSTemplate) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(smstemplate.Table, smstemplate.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, smstemplate.OrganizationTable, smstemplate.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SMSTemplateClient) Hooks() []Hook {
	return c.hooks.SMSTemplate
}

// Interceptors returns the client interceptors.
func (c *SMSTemplateClient) Interceptors() []Interceptor {
	return c.inters.SMSTemplate
}

func (c *SMSTemplateClient) mutate(ctx context.Context, m *SMSTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SMSTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SMSTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SMSTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SMSTemplate mutation op: %q", m.Op())
	}
}

// SSOStateClient is a client for the SSOState schema.
type SSOStateClient struct {
	config
}

// NewSSOStateClient returns a client for the SSOState from the given config.
func NewSSOStateClient(c config) *SSOStateClient {
	return &SSOStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ssostate.Hooks(f(g(h())))`.
func (c *SSOStateClient) Use(hooks ...Hook) {
	c.hooks.SSOState = append(c.hooks.SSOState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ssostate.Intercept(f(g(h())))`.
func (c *SSOStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.SSOState = append(c.inters.SSOState, interceptors...)
}

// Create returns a builder for creating a SSOState entity.
func (c *SSOStateClient) Create() *SSOStateCreate {
	mutation := newSSOStateMutation(c.config, OpCreate)
	return &SSOStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SSOState entities.
func (c *SSOStateClient) CreateBulk(builders ...*SSOStateCreate) *SSOStateCreateBulk {
	return &SSOStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SSOStateClient) MapCreateBulk(slice any, setFunc func(*SSOStateCreate, int)) *SSOStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SSOStateCreateBulk{err: fmt.Errorf("calling to SSOStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SSOStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SSOStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SSOState.
func (c *SSOStateClient) Update() *SSOStateUpdate {
	mutation := newSSOStateMutation(c.config, OpUpdate)
	return &SSOStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SSOStateClient) UpdateOne(ss *SSOState) *SSOStateUpdateOne {
	mutation := newSSOStateMutation(c.config, OpUpdateOne, withSSOState(ss))
	return &SSOStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SSOStateClient) UpdateOneID(id xid.ID) *SSOStateUpdateOne {
	mutation := newSSOStateMutation(c.config, OpUpdateOne, withSSOStateID(id))
	return &SSOStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SSOState.
func (c *SSOStateClient) Delete() *SSOStateDelete {
	mutation := newSSOStateMutation(c.config, OpDelete)
	return &SSOStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SSOStateClient) DeleteOne(ss *SSOState) *SSOStateDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SSOStateClient) DeleteOneID(id xid.ID) *SSOStateDeleteOne {
	builder := c.Delete().Where(ssostate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SSOStateDeleteOne{builder}
}

// Query returns a query builder for SSOState.
func (c *SSOStateClient) Query() *SSOStateQuery {
	return &SSOStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSSOState},
		inters: c.Interceptors(),
	}
}

// Get returns a SSOState entity by its id.
func (c *SSOStateClient) Get(ctx context.Context, id xid.ID) (*SSOState, error) {
	return c.Query().Where(ssostate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SSOStateClient) GetX(ctx context.Context, id xid.ID) *SSOState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SSOStateClient) Hooks() []Hook {
	return c.hooks.SSOState
}

// Interceptors returns the client interceptors.
func (c *SSOStateClient) Interceptors() []Interceptor {
	return c.inters.SSOState
}

func (c *SSOStateClient) mutate(ctx context.Context, m *SSOStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SSOStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SSOStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SSOStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SSOStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SSOState mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id xid.ID) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id xid.ID) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id xid.ID) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id xid.ID) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a Session.
func (c *SessionClient) QueryAuditLogs(s *Session) *AuditQuery {
	query := (&AuditClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(audit.Table, audit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.AuditLogsTable, session.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a Session.
func (c *SessionClient) QueryActivities(s *Session) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.ActivitiesTable, session.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id xid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id xid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id xid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id xid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a User.
func (c *UserClient) QueryOrganization(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.OrganizationTable, user.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberships queries the memberships edge of a User.
func (c *UserClient) QueryMemberships(u *User) *MembershipQuery {
	query := (&MembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MembershipsTable, user.MembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentInvitations queries the sent_invitations edge of a User.
func (c *UserClient) QuerySentInvitations(u *User) *MembershipQuery {
	query := (&MembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentInvitationsTable, user.SentInvitationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKeys queries the api_keys edge of a User.
func (c *UserClient) QueryAPIKeys(u *User) *ApiKeyQuery {
	query := (&ApiKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APIKeysTable, user.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMfaMethods queries the mfa_methods edge of a User.
func (c *UserClient) QueryMfaMethods(u *User) *MFAQuery {
	query := (&MFAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mfa.Table, mfa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MfaMethodsTable, user.MfaMethodsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasskeys queries the passkeys edge of a User.
func (c *UserClient) QueryPasskeys(u *User) *PasskeyQuery {
	query := (&PasskeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(passkey.Table, passkey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasskeysTable, user.PasskeysColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthTokens queries the oauth_tokens edge of a User.
func (c *UserClient) QueryOauthTokens(u *User) *OAuthTokenQuery {
	query := (&OAuthTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(oauthtoken.Table, oauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OauthTokensTable, user.OauthTokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthAuthorizations queries the oauth_authorizations edge of a User.
func (c *UserClient) QueryOauthAuthorizations(u *User) *OAuthAuthorizationQuery {
	query := (&OAuthAuthorizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(oauthauthorization.Table, oauthauthorization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OauthAuthorizationsTable, user.OauthAuthorizationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVerifications queries the verifications edge of a User.
func (c *UserClient) QueryVerifications(u *User) *VerificationQuery {
	query := (&VerificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(verification.Table, verification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VerificationsTable, user.VerificationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRoles queries the user_roles edge of a User.
func (c *UserClient) QueryUserRoles(u *User) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserRolesTable, user.UserRolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPermissions queries the user_permissions edge of a User.
func (c *UserClient) QueryUserPermissions(u *User) *UserPermissionQuery {
	query := (&UserPermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpermission.Table, userpermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserPermissionsTable, user.UserPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySystemRoles queries the system_roles edge of a User.
func (c *UserClient) QuerySystemRoles(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SystemRolesTable, user.SystemRolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedUserRoles queries the assigned_user_roles edge of a User.
func (c *UserClient) QueryAssignedUserRoles(u *User) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedUserRolesTable, user.AssignedUserRolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedUserPermissions queries the assigned_user_permissions edge of a User.
func (c *UserClient) QueryAssignedUserPermissions(u *User) *UserPermissionQuery {
	query := (&UserPermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpermission.Table, userpermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedUserPermissionsTable, user.AssignedUserPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a User.
func (c *UserClient) QueryAuditLogs(u *User) *AuditQuery {
	query := (&AuditClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(audit.Table, audit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditLogsTable, user.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a User.
func (c *UserClient) QueryActivities(u *User) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivitiesTable, user.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPermissionClient is a client for the UserPermission schema.
type UserPermissionClient struct {
	config
}

// NewUserPermissionClient returns a client for the UserPermission from the given config.
func NewUserPermissionClient(c config) *UserPermissionClient {
	return &UserPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpermission.Hooks(f(g(h())))`.
func (c *UserPermissionClient) Use(hooks ...Hook) {
	c.hooks.UserPermission = append(c.hooks.UserPermission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpermission.Intercept(f(g(h())))`.
func (c *UserPermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPermission = append(c.inters.UserPermission, interceptors...)
}

// Create returns a builder for creating a UserPermission entity.
func (c *UserPermissionClient) Create() *UserPermissionCreate {
	mutation := newUserPermissionMutation(c.config, OpCreate)
	return &UserPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPermission entities.
func (c *UserPermissionClient) CreateBulk(builders ...*UserPermissionCreate) *UserPermissionCreateBulk {
	return &UserPermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPermissionClient) MapCreateBulk(slice any, setFunc func(*UserPermissionCreate, int)) *UserPermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPermissionCreateBulk{err: fmt.Errorf("calling to UserPermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPermission.
func (c *UserPermissionClient) Update() *UserPermissionUpdate {
	mutation := newUserPermissionMutation(c.config, OpUpdate)
	return &UserPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPermissionClient) UpdateOne(up *UserPermission) *UserPermissionUpdateOne {
	mutation := newUserPermissionMutation(c.config, OpUpdateOne, withUserPermission(up))
	return &UserPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPermissionClient) UpdateOneID(id xid.ID) *UserPermissionUpdateOne {
	mutation := newUserPermissionMutation(c.config, OpUpdateOne, withUserPermissionID(id))
	return &UserPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPermission.
func (c *UserPermissionClient) Delete() *UserPermissionDelete {
	mutation := newUserPermissionMutation(c.config, OpDelete)
	return &UserPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPermissionClient) DeleteOne(up *UserPermission) *UserPermissionDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPermissionClient) DeleteOneID(id xid.ID) *UserPermissionDeleteOne {
	builder := c.Delete().Where(userpermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPermissionDeleteOne{builder}
}

// Query returns a query builder for UserPermission.
func (c *UserPermissionClient) Query() *UserPermissionQuery {
	return &UserPermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPermission},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPermission entity by its id.
func (c *UserPermissionClient) Get(ctx context.Context, id xid.ID) (*UserPermission, error) {
	return c.Query().Where(userpermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPermissionClient) GetX(ctx context.Context, id xid.ID) *UserPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPermission.
func (c *UserPermissionClient) QueryUser(up *UserPermission) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpermission.Table, userpermission.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpermission.UserTable, userpermission.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermission queries the permission edge of a UserPermission.
func (c *UserPermissionClient) QueryPermission(up *UserPermission) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpermission.Table, userpermission.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpermission.PermissionTable, userpermission.PermissionColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByUser queries the assigned_by_user edge of a UserPermission.
func (c *UserPermissionClient) QueryAssignedByUser(up *UserPermission) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpermission.Table, userpermission.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpermission.AssignedByUserTable, userpermission.AssignedByUserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationContext queries the organization_context edge of a UserPermission.
func (c *UserPermissionClient) QueryOrganizationContext(up *UserPermission) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpermission.Table, userpermission.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpermission.OrganizationContextTable, userpermission.OrganizationContextColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPermissionClient) Hooks() []Hook {
	return c.hooks.UserPermission
}

// Interceptors returns the client interceptors.
func (c *UserPermissionClient) Interceptors() []Interceptor {
	return c.inters.UserPermission
}

func (c *UserPermissionClient) mutate(ctx context.Context, m *UserPermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPermission mutation op: %q", m.Op())
	}
}

// UserRoleClient is a client for the UserRole schema.
type UserRoleClient struct {
	config
}

// NewUserRoleClient returns a client for the UserRole from the given config.
func NewUserRoleClient(c config) *UserRoleClient {
	return &UserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userrole.Hooks(f(g(h())))`.
func (c *UserRoleClient) Use(hooks ...Hook) {
	c.hooks.UserRole = append(c.hooks.UserRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userrole.Intercept(f(g(h())))`.
func (c *UserRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserRole = append(c.inters.UserRole, interceptors...)
}

// Create returns a builder for creating a UserRole entity.
func (c *UserRoleClient) Create() *UserRoleCreate {
	mutation := newUserRoleMutation(c.config, OpCreate)
	return &UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserRole entities.
func (c *UserRoleClient) CreateBulk(builders ...*UserRoleCreate) *UserRoleCreateBulk {
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserRoleClient) MapCreateBulk(slice any, setFunc func(*UserRoleCreate, int)) *UserRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserRoleCreateBulk{err: fmt.Errorf("calling to UserRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserRole.
func (c *UserRoleClient) Update() *UserRoleUpdate {
	mutation := newUserRoleMutation(c.config, OpUpdate)
	return &UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserRoleClient) UpdateOne(ur *UserRole) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRole(ur))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserRoleClient) UpdateOneID(id xid.ID) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRoleID(id))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserRole.
func (c *UserRoleClient) Delete() *UserRoleDelete {
	mutation := newUserRoleMutation(c.config, OpDelete)
	return &UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserRoleClient) DeleteOne(ur *UserRole) *UserRoleDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserRoleClient) DeleteOneID(id xid.ID) *UserRoleDeleteOne {
	builder := c.Delete().Where(userrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserRoleDeleteOne{builder}
}

// Query returns a query builder for UserRole.
func (c *UserRoleClient) Query() *UserRoleQuery {
	return &UserRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserRole},
		inters: c.Interceptors(),
	}
}

// Get returns a UserRole entity by its id.
func (c *UserRoleClient) Get(ctx context.Context, id xid.ID) (*UserRole, error) {
	return c.Query().Where(userrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserRoleClient) GetX(ctx context.Context, id xid.ID) *UserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserRole.
func (c *UserRoleClient) QueryUser(ur *UserRole) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userrole.UserTable, userrole.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a UserRole.
func (c *UserRoleClient) QueryRole(ur *UserRole) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userrole.RoleTable, userrole.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationContext queries the organization_context edge of a UserRole.
func (c *UserRoleClient) QueryOrganizationContext(ur *UserRole) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrole.OrganizationContextTable, userrole.OrganizationContextColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByUser queries the assigned_by_user edge of a UserRole.
func (c *UserRoleClient) QueryAssignedByUser(ur *UserRole) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userrole.AssignedByUserTable, userrole.AssignedByUserColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserRoleClient) Hooks() []Hook {
	return c.hooks.UserRole
}

// Interceptors returns the client interceptors.
func (c *UserRoleClient) Interceptors() []Interceptor {
	return c.inters.UserRole
}

func (c *UserRoleClient) mutate(ctx context.Context, m *UserRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserRole mutation op: %q", m.Op())
	}
}

// VerificationClient is a client for the Verification schema.
type VerificationClient struct {
	config
}

// NewVerificationClient returns a client for the Verification from the given config.
func NewVerificationClient(c config) *VerificationClient {
	return &VerificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `verification.Hooks(f(g(h())))`.
func (c *VerificationClient) Use(hooks ...Hook) {
	c.hooks.Verification = append(c.hooks.Verification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `verification.Intercept(f(g(h())))`.
func (c *VerificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Verification = append(c.inters.Verification, interceptors...)
}

// Create returns a builder for creating a Verification entity.
func (c *VerificationClient) Create() *VerificationCreate {
	mutation := newVerificationMutation(c.config, OpCreate)
	return &VerificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Verification entities.
func (c *VerificationClient) CreateBulk(builders ...*VerificationCreate) *VerificationCreateBulk {
	return &VerificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VerificationClient) MapCreateBulk(slice any, setFunc func(*VerificationCreate, int)) *VerificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VerificationCreateBulk{err: fmt.Errorf("calling to VerificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VerificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VerificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Verification.
func (c *VerificationClient) Update() *VerificationUpdate {
	mutation := newVerificationMutation(c.config, OpUpdate)
	return &VerificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VerificationClient) UpdateOne(v *Verification) *VerificationUpdateOne {
	mutation := newVerificationMutation(c.config, OpUpdateOne, withVerification(v))
	return &VerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VerificationClient) UpdateOneID(id xid.ID) *VerificationUpdateOne {
	mutation := newVerificationMutation(c.config, OpUpdateOne, withVerificationID(id))
	return &VerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Verification.
func (c *VerificationClient) Delete() *VerificationDelete {
	mutation := newVerificationMutation(c.config, OpDelete)
	return &VerificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VerificationClient) DeleteOne(v *Verification) *VerificationDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VerificationClient) DeleteOneID(id xid.ID) *VerificationDeleteOne {
	builder := c.Delete().Where(verification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VerificationDeleteOne{builder}
}

// Query returns a query builder for Verification.
func (c *VerificationClient) Query() *VerificationQuery {
	return &VerificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVerification},
		inters: c.Interceptors(),
	}
}

// Get returns a Verification entity by its id.
func (c *VerificationClient) Get(ctx context.Context, id xid.ID) (*Verification, error) {
	return c.Query().Where(verification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VerificationClient) GetX(ctx context.Context, id xid.ID) *Verification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Verification.
func (c *VerificationClient) QueryUser(v *Verification) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(verification.Table, verification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, verification.UserTable, verification.UserColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VerificationClient) Hooks() []Hook {
	return c.hooks.Verification
}

// Interceptors returns the client interceptors.
func (c *VerificationClient) Interceptors() []Interceptor {
	return c.inters.Verification
}

func (c *VerificationClient) mutate(ctx context.Context, m *VerificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VerificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VerificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VerificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Verification mutation op: %q", m.Op())
	}
}

// WebhookClient is a client for the Webhook schema.
type WebhookClient struct {
	config
}

// NewWebhookClient returns a client for the Webhook from the given config.
func NewWebhookClient(c config) *WebhookClient {
	return &WebhookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webhook.Hooks(f(g(h())))`.
func (c *WebhookClient) Use(hooks ...Hook) {
	c.hooks.Webhook = append(c.hooks.Webhook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webhook.Intercept(f(g(h())))`.
func (c *WebhookClient) Intercept(interceptors ...Interceptor) {
	c.inters.Webhook = append(c.inters.Webhook, interceptors...)
}

// Create returns a builder for creating a Webhook entity.
func (c *WebhookClient) Create() *WebhookCreate {
	mutation := newWebhookMutation(c.config, OpCreate)
	return &WebhookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Webhook entities.
func (c *WebhookClient) CreateBulk(builders ...*WebhookCreate) *WebhookCreateBulk {
	return &WebhookCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WebhookClient) MapCreateBulk(slice any, setFunc func(*WebhookCreate, int)) *WebhookCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WebhookCreateBulk{err: fmt.Errorf("calling to WebhookClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WebhookCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WebhookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Webhook.
func (c *WebhookClient) Update() *WebhookUpdate {
	mutation := newWebhookMutation(c.config, OpUpdate)
	return &WebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebhookClient) UpdateOne(w *Webhook) *WebhookUpdateOne {
	mutation := newWebhookMutation(c.config, OpUpdateOne, withWebhook(w))
	return &WebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebhookClient) UpdateOneID(id xid.ID) *WebhookUpdateOne {
	mutation := newWebhookMutation(c.config, OpUpdateOne, withWebhookID(id))
	return &WebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Webhook.
func (c *WebhookClient) Delete() *WebhookDelete {
	mutation := newWebhookMutation(c.config, OpDelete)
	return &WebhookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebhookClient) DeleteOne(w *Webhook) *WebhookDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebhookClient) DeleteOneID(id xid.ID) *WebhookDeleteOne {
	builder := c.Delete().Where(webhook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebhookDeleteOne{builder}
}

// Query returns a query builder for Webhook.
func (c *WebhookClient) Query() *WebhookQuery {
	return &WebhookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebhook},
		inters: c.Interceptors(),
	}
}

// Get returns a Webhook entity by its id.
func (c *WebhookClient) Get(ctx context.Context, id xid.ID) (*Webhook, error) {
	return c.Query().Where(webhook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebhookClient) GetX(ctx context.Context, id xid.ID) *Webhook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a Webhook.
func (c *WebhookClient) QueryOrganization(w *Webhook) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webhook.Table, webhook.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webhook.OrganizationTable, webhook.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a Webhook.
func (c *WebhookClient) QueryEvents(w *Webhook) *WebhookEventQuery {
	query := (&WebhookEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webhook.Table, webhook.FieldID, id),
			sqlgraph.To(webhookevent.Table, webhookevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, webhook.EventsTable, webhook.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebhookClient) Hooks() []Hook {
	return c.hooks.Webhook
}

// Interceptors returns the client interceptors.
func (c *WebhookClient) Interceptors() []Interceptor {
	return c.inters.Webhook
}

func (c *WebhookClient) mutate(ctx context.Context, m *WebhookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebhookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebhookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Webhook mutation op: %q", m.Op())
	}
}

// WebhookEventClient is a client for the WebhookEvent schema.
type WebhookEventClient struct {
	config
}

// NewWebhookEventClient returns a client for the WebhookEvent from the given config.
func NewWebhookEventClient(c config) *WebhookEventClient {
	return &WebhookEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webhookevent.Hooks(f(g(h())))`.
func (c *WebhookEventClient) Use(hooks ...Hook) {
	c.hooks.WebhookEvent = append(c.hooks.WebhookEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webhookevent.Intercept(f(g(h())))`.
func (c *WebhookEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebhookEvent = append(c.inters.WebhookEvent, interceptors...)
}

// Create returns a builder for creating a WebhookEvent entity.
func (c *WebhookEventClient) Create() *WebhookEventCreate {
	mutation := newWebhookEventMutation(c.config, OpCreate)
	return &WebhookEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebhookEvent entities.
func (c *WebhookEventClient) CreateBulk(builders ...*WebhookEventCreate) *WebhookEventCreateBulk {
	return &WebhookEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WebhookEventClient) MapCreateBulk(slice any, setFunc func(*WebhookEventCreate, int)) *WebhookEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WebhookEventCreateBulk{err: fmt.Errorf("calling to WebhookEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WebhookEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WebhookEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebhookEvent.
func (c *WebhookEventClient) Update() *WebhookEventUpdate {
	mutation := newWebhookEventMutation(c.config, OpUpdate)
	return &WebhookEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebhookEventClient) UpdateOne(we *WebhookEvent) *WebhookEventUpdateOne {
	mutation := newWebhookEventMutation(c.config, OpUpdateOne, withWebhookEvent(we))
	return &WebhookEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebhookEventClient) UpdateOneID(id xid.ID) *WebhookEventUpdateOne {
	mutation := newWebhookEventMutation(c.config, OpUpdateOne, withWebhookEventID(id))
	return &WebhookEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebhookEvent.
func (c *WebhookEventClient) Delete() *WebhookEventDelete {
	mutation := newWebhookEventMutation(c.config, OpDelete)
	return &WebhookEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebhookEventClient) DeleteOne(we *WebhookEvent) *WebhookEventDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebhookEventClient) DeleteOneID(id xid.ID) *WebhookEventDeleteOne {
	builder := c.Delete().Where(webhookevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebhookEventDeleteOne{builder}
}

// Query returns a query builder for WebhookEvent.
func (c *WebhookEventClient) Query() *WebhookEventQuery {
	return &WebhookEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebhookEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a WebhookEvent entity by its id.
func (c *WebhookEventClient) Get(ctx context.Context, id xid.ID) (*WebhookEvent, error) {
	return c.Query().Where(webhookevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebhookEventClient) GetX(ctx context.Context, id xid.ID) *WebhookEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWebhook queries the webhook edge of a WebhookEvent.
func (c *WebhookEventClient) QueryWebhook(we *WebhookEvent) *WebhookQuery {
	query := (&WebhookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webhookevent.Table, webhookevent.FieldID, id),
			sqlgraph.To(webhook.Table, webhook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webhookevent.WebhookTable, webhookevent.WebhookColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebhookEventClient) Hooks() []Hook {
	return c.hooks.WebhookEvent
}

// Interceptors returns the client interceptors.
func (c *WebhookEventClient) Interceptors() []Interceptor {
	return c.inters.WebhookEvent
}

func (c *WebhookEventClient) mutate(ctx context.Context, m *WebhookEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebhookEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebhookEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebhookEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebhookEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebhookEvent mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Activity, ApiKey, ApiKeyActivity, Audit, EmailTemplate, FeatureFlag,
		IdentityProvider, MFA, Membership, OAuthAuthorization, OAuthClient, OAuthScope,
		OAuthToken, Organization, OrganizationFeature, OrganizationProvider, Passkey,
		Permission, PermissionDependency, ProviderTemplate, Role, SMSTemplate,
		SSOState, Session, User, UserPermission, UserRole, Verification, Webhook,
		WebhookEvent []ent.Hook
	}
	inters struct {
		Activity, ApiKey, ApiKeyActivity, Audit, EmailTemplate, FeatureFlag,
		IdentityProvider, MFA, Membership, OAuthAuthorization, OAuthClient, OAuthScope,
		OAuthToken, Organization, OrganizationFeature, OrganizationProvider, Passkey,
		Permission, PermissionDependency, ProviderTemplate, Role, SMSTemplate,
		SSOState, Session, User, UserPermission, UserRole, Verification, Webhook,
		WebhookEvent []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
