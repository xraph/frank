// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/pkg/model"
)

// UserPermissionCreate is the builder for creating a UserPermission entity.
type UserPermissionCreate struct {
	config
	mutation *UserPermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserPermissionCreate) SetCreatedAt(t time.Time) *UserPermissionCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableCreatedAt(t *time.Time) *UserPermissionCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserPermissionCreate) SetUpdatedAt(t time.Time) *UserPermissionCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableUpdatedAt(t *time.Time) *UserPermissionCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetDeletedAt sets the "deleted_at" field.
func (upc *UserPermissionCreate) SetDeletedAt(t time.Time) *UserPermissionCreate {
	upc.mutation.SetDeletedAt(t)
	return upc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableDeletedAt(t *time.Time) *UserPermissionCreate {
	if t != nil {
		upc.SetDeletedAt(*t)
	}
	return upc
}

// SetUserID sets the "user_id" field.
func (upc *UserPermissionCreate) SetUserID(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetUserID(x)
	return upc
}

// SetPermissionID sets the "permission_id" field.
func (upc *UserPermissionCreate) SetPermissionID(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetPermissionID(x)
	return upc
}

// SetContextType sets the "context_type" field.
func (upc *UserPermissionCreate) SetContextType(mt model.ContextType) *UserPermissionCreate {
	upc.mutation.SetContextType(mt)
	return upc
}

// SetContextID sets the "context_id" field.
func (upc *UserPermissionCreate) SetContextID(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetContextID(x)
	return upc
}

// SetNillableContextID sets the "context_id" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableContextID(x *xid.ID) *UserPermissionCreate {
	if x != nil {
		upc.SetContextID(*x)
	}
	return upc
}

// SetResourceType sets the "resource_type" field.
func (upc *UserPermissionCreate) SetResourceType(s string) *UserPermissionCreate {
	upc.mutation.SetResourceType(s)
	return upc
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableResourceType(s *string) *UserPermissionCreate {
	if s != nil {
		upc.SetResourceType(*s)
	}
	return upc
}

// SetResourceID sets the "resource_id" field.
func (upc *UserPermissionCreate) SetResourceID(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetResourceID(x)
	return upc
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableResourceID(x *xid.ID) *UserPermissionCreate {
	if x != nil {
		upc.SetResourceID(*x)
	}
	return upc
}

// SetPermissionType sets the "permission_type" field.
func (upc *UserPermissionCreate) SetPermissionType(mt model.PermissionType) *UserPermissionCreate {
	upc.mutation.SetPermissionType(mt)
	return upc
}

// SetNillablePermissionType sets the "permission_type" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillablePermissionType(mt *model.PermissionType) *UserPermissionCreate {
	if mt != nil {
		upc.SetPermissionType(*mt)
	}
	return upc
}

// SetAssignedBy sets the "assigned_by" field.
func (upc *UserPermissionCreate) SetAssignedBy(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetAssignedBy(x)
	return upc
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableAssignedBy(x *xid.ID) *UserPermissionCreate {
	if x != nil {
		upc.SetAssignedBy(*x)
	}
	return upc
}

// SetAssignedAt sets the "assigned_at" field.
func (upc *UserPermissionCreate) SetAssignedAt(t time.Time) *UserPermissionCreate {
	upc.mutation.SetAssignedAt(t)
	return upc
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableAssignedAt(t *time.Time) *UserPermissionCreate {
	if t != nil {
		upc.SetAssignedAt(*t)
	}
	return upc
}

// SetExpiresAt sets the "expires_at" field.
func (upc *UserPermissionCreate) SetExpiresAt(t time.Time) *UserPermissionCreate {
	upc.mutation.SetExpiresAt(t)
	return upc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableExpiresAt(t *time.Time) *UserPermissionCreate {
	if t != nil {
		upc.SetExpiresAt(*t)
	}
	return upc
}

// SetActive sets the "active" field.
func (upc *UserPermissionCreate) SetActive(b bool) *UserPermissionCreate {
	upc.mutation.SetActive(b)
	return upc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableActive(b *bool) *UserPermissionCreate {
	if b != nil {
		upc.SetActive(*b)
	}
	return upc
}

// SetConditions sets the "conditions" field.
func (upc *UserPermissionCreate) SetConditions(m map[string]interface{}) *UserPermissionCreate {
	upc.mutation.SetConditions(m)
	return upc
}

// SetReason sets the "reason" field.
func (upc *UserPermissionCreate) SetReason(s string) *UserPermissionCreate {
	upc.mutation.SetReason(s)
	return upc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableReason(s *string) *UserPermissionCreate {
	if s != nil {
		upc.SetReason(*s)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserPermissionCreate) SetID(x xid.ID) *UserPermissionCreate {
	upc.mutation.SetID(x)
	return upc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableID(x *xid.ID) *UserPermissionCreate {
	if x != nil {
		upc.SetID(*x)
	}
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPermissionCreate) SetUser(u *User) *UserPermissionCreate {
	return upc.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upc *UserPermissionCreate) SetPermission(p *Permission) *UserPermissionCreate {
	return upc.SetPermissionID(p.ID)
}

// SetAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID.
func (upc *UserPermissionCreate) SetAssignedByUserID(id xid.ID) *UserPermissionCreate {
	upc.mutation.SetAssignedByUserID(id)
	return upc
}

// SetNillableAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableAssignedByUserID(id *xid.ID) *UserPermissionCreate {
	if id != nil {
		upc = upc.SetAssignedByUserID(*id)
	}
	return upc
}

// SetAssignedByUser sets the "assigned_by_user" edge to the User entity.
func (upc *UserPermissionCreate) SetAssignedByUser(u *User) *UserPermissionCreate {
	return upc.SetAssignedByUserID(u.ID)
}

// SetOrganizationContextID sets the "organization_context" edge to the Organization entity by ID.
func (upc *UserPermissionCreate) SetOrganizationContextID(id xid.ID) *UserPermissionCreate {
	upc.mutation.SetOrganizationContextID(id)
	return upc
}

// SetNillableOrganizationContextID sets the "organization_context" edge to the Organization entity by ID if the given value is not nil.
func (upc *UserPermissionCreate) SetNillableOrganizationContextID(id *xid.ID) *UserPermissionCreate {
	if id != nil {
		upc = upc.SetOrganizationContextID(*id)
	}
	return upc
}

// SetOrganizationContext sets the "organization_context" edge to the Organization entity.
func (upc *UserPermissionCreate) SetOrganizationContext(o *Organization) *UserPermissionCreate {
	return upc.SetOrganizationContextID(o.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upc *UserPermissionCreate) Mutation() *UserPermissionMutation {
	return upc.mutation
}

// Save creates the UserPermission in the database.
func (upc *UserPermissionCreate) Save(ctx context.Context) (*UserPermission, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPermissionCreate) SaveX(ctx context.Context) *UserPermission {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPermissionCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPermissionCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPermissionCreate) defaults() {
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := userpermission.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		v := userpermission.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
	if _, ok := upc.mutation.PermissionType(); !ok {
		v := userpermission.DefaultPermissionType
		upc.mutation.SetPermissionType(v)
	}
	if _, ok := upc.mutation.AssignedAt(); !ok {
		v := userpermission.DefaultAssignedAt()
		upc.mutation.SetAssignedAt(v)
	}
	if _, ok := upc.mutation.Active(); !ok {
		v := userpermission.DefaultActive
		upc.mutation.SetActive(v)
	}
	if _, ok := upc.mutation.ID(); !ok {
		v := userpermission.DefaultID()
		upc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPermissionCreate) check() error {
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserPermission.created_at"`)}
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserPermission.updated_at"`)}
	}
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserPermission.user_id"`)}
	}
	if v, ok := upc.mutation.UserID(); ok {
		if err := userpermission.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.user_id": %w`, err)}
		}
	}
	if _, ok := upc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "UserPermission.permission_id"`)}
	}
	if v, ok := upc.mutation.PermissionID(); ok {
		if err := userpermission.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_id": %w`, err)}
		}
	}
	if _, ok := upc.mutation.ContextType(); !ok {
		return &ValidationError{Name: "context_type", err: errors.New(`ent: missing required field "UserPermission.context_type"`)}
	}
	if v, ok := upc.mutation.ContextType(); ok {
		if err := userpermission.ContextTypeValidator(v); err != nil {
			return &ValidationError{Name: "context_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.context_type": %w`, err)}
		}
	}
	if _, ok := upc.mutation.PermissionType(); !ok {
		return &ValidationError{Name: "permission_type", err: errors.New(`ent: missing required field "UserPermission.permission_type"`)}
	}
	if v, ok := upc.mutation.PermissionType(); ok {
		if err := userpermission.PermissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "permission_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_type": %w`, err)}
		}
	}
	if _, ok := upc.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`ent: missing required field "UserPermission.assigned_at"`)}
	}
	if _, ok := upc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "UserPermission.active"`)}
	}
	if len(upc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserPermission.user"`)}
	}
	if len(upc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "UserPermission.permission"`)}
	}
	return nil
}

func (upc *UserPermissionCreate) sqlSave(ctx context.Context) (*UserPermission, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPermissionCreate) createSpec() (*UserPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPermission{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpermission.Table, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString))
	)
	_spec.OnConflict = upc.conflict
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userpermission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userpermission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := upc.mutation.DeletedAt(); ok {
		_spec.SetField(userpermission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := upc.mutation.ContextType(); ok {
		_spec.SetField(userpermission.FieldContextType, field.TypeEnum, value)
		_node.ContextType = value
	}
	if value, ok := upc.mutation.ResourceType(); ok {
		_spec.SetField(userpermission.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := upc.mutation.ResourceID(); ok {
		_spec.SetField(userpermission.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := upc.mutation.PermissionType(); ok {
		_spec.SetField(userpermission.FieldPermissionType, field.TypeEnum, value)
		_node.PermissionType = value
	}
	if value, ok := upc.mutation.AssignedAt(); ok {
		_spec.SetField(userpermission.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := upc.mutation.ExpiresAt(); ok {
		_spec.SetField(userpermission.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := upc.mutation.Active(); ok {
		_spec.SetField(userpermission.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := upc.mutation.Conditions(); ok {
		_spec.SetField(userpermission.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := upc.mutation.Reason(); ok {
		_spec.SetField(userpermission.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.AssignedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssignedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.OrganizationContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContextID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPermission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (upc *UserPermissionCreate) OnConflict(opts ...sql.ConflictOption) *UserPermissionUpsertOne {
	upc.conflict = opts
	return &UserPermissionUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserPermissionCreate) OnConflictColumns(columns ...string) *UserPermissionUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserPermissionUpsertOne{
		create: upc,
	}
}

type (
	// UserPermissionUpsertOne is the builder for "upsert"-ing
	//  one UserPermission node.
	UserPermissionUpsertOne struct {
		create *UserPermissionCreate
	}

	// UserPermissionUpsert is the "OnConflict" setter.
	UserPermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPermissionUpsert) SetUpdatedAt(v time.Time) *UserPermissionUpsert {
	u.Set(userpermission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateUpdatedAt() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserPermissionUpsert) SetDeletedAt(v time.Time) *UserPermissionUpsert {
	u.Set(userpermission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateDeletedAt() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserPermissionUpsert) ClearDeletedAt() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserPermissionUpsert) SetUserID(v xid.ID) *UserPermissionUpsert {
	u.Set(userpermission.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateUserID() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldUserID)
	return u
}

// SetPermissionID sets the "permission_id" field.
func (u *UserPermissionUpsert) SetPermissionID(v xid.ID) *UserPermissionUpsert {
	u.Set(userpermission.FieldPermissionID, v)
	return u
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdatePermissionID() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldPermissionID)
	return u
}

// SetContextType sets the "context_type" field.
func (u *UserPermissionUpsert) SetContextType(v model.ContextType) *UserPermissionUpsert {
	u.Set(userpermission.FieldContextType, v)
	return u
}

// UpdateContextType sets the "context_type" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateContextType() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldContextType)
	return u
}

// SetContextID sets the "context_id" field.
func (u *UserPermissionUpsert) SetContextID(v xid.ID) *UserPermissionUpsert {
	u.Set(userpermission.FieldContextID, v)
	return u
}

// UpdateContextID sets the "context_id" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateContextID() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldContextID)
	return u
}

// ClearContextID clears the value of the "context_id" field.
func (u *UserPermissionUpsert) ClearContextID() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldContextID)
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *UserPermissionUpsert) SetResourceType(v string) *UserPermissionUpsert {
	u.Set(userpermission.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateResourceType() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldResourceType)
	return u
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *UserPermissionUpsert) ClearResourceType() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *UserPermissionUpsert) SetResourceID(v xid.ID) *UserPermissionUpsert {
	u.Set(userpermission.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateResourceID() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldResourceID)
	return u
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *UserPermissionUpsert) ClearResourceID() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldResourceID)
	return u
}

// SetPermissionType sets the "permission_type" field.
func (u *UserPermissionUpsert) SetPermissionType(v model.PermissionType) *UserPermissionUpsert {
	u.Set(userpermission.FieldPermissionType, v)
	return u
}

// UpdatePermissionType sets the "permission_type" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdatePermissionType() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldPermissionType)
	return u
}

// SetAssignedBy sets the "assigned_by" field.
func (u *UserPermissionUpsert) SetAssignedBy(v xid.ID) *UserPermissionUpsert {
	u.Set(userpermission.FieldAssignedBy, v)
	return u
}

// UpdateAssignedBy sets the "assigned_by" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateAssignedBy() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldAssignedBy)
	return u
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (u *UserPermissionUpsert) ClearAssignedBy() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldAssignedBy)
	return u
}

// SetAssignedAt sets the "assigned_at" field.
func (u *UserPermissionUpsert) SetAssignedAt(v time.Time) *UserPermissionUpsert {
	u.Set(userpermission.FieldAssignedAt, v)
	return u
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateAssignedAt() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldAssignedAt)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserPermissionUpsert) SetExpiresAt(v time.Time) *UserPermissionUpsert {
	u.Set(userpermission.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateExpiresAt() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *UserPermissionUpsert) ClearExpiresAt() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldExpiresAt)
	return u
}

// SetActive sets the "active" field.
func (u *UserPermissionUpsert) SetActive(v bool) *UserPermissionUpsert {
	u.Set(userpermission.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateActive() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldActive)
	return u
}

// SetConditions sets the "conditions" field.
func (u *UserPermissionUpsert) SetConditions(v map[string]interface{}) *UserPermissionUpsert {
	u.Set(userpermission.FieldConditions, v)
	return u
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateConditions() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldConditions)
	return u
}

// ClearConditions clears the value of the "conditions" field.
func (u *UserPermissionUpsert) ClearConditions() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldConditions)
	return u
}

// SetReason sets the "reason" field.
func (u *UserPermissionUpsert) SetReason(v string) *UserPermissionUpsert {
	u.Set(userpermission.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *UserPermissionUpsert) UpdateReason() *UserPermissionUpsert {
	u.SetExcluded(userpermission.FieldReason)
	return u
}

// ClearReason clears the value of the "reason" field.
func (u *UserPermissionUpsert) ClearReason() *UserPermissionUpsert {
	u.SetNull(userpermission.FieldReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userpermission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserPermissionUpsertOne) UpdateNewValues() *UserPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userpermission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userpermission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserPermissionUpsertOne) Ignore() *UserPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPermissionUpsertOne) DoNothing() *UserPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPermissionCreate.OnConflict
// documentation for more info.
func (u *UserPermissionUpsertOne) Update(set func(*UserPermissionUpsert)) *UserPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPermissionUpsertOne) SetUpdatedAt(v time.Time) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateUpdatedAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserPermissionUpsertOne) SetDeletedAt(v time.Time) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateDeletedAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserPermissionUpsertOne) ClearDeletedAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPermissionUpsertOne) SetUserID(v xid.ID) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateUserID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateUserID()
	})
}

// SetPermissionID sets the "permission_id" field.
func (u *UserPermissionUpsertOne) SetPermissionID(v xid.ID) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetPermissionID(v)
	})
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdatePermissionID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdatePermissionID()
	})
}

// SetContextType sets the "context_type" field.
func (u *UserPermissionUpsertOne) SetContextType(v model.ContextType) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetContextType(v)
	})
}

// UpdateContextType sets the "context_type" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateContextType() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateContextType()
	})
}

// SetContextID sets the "context_id" field.
func (u *UserPermissionUpsertOne) SetContextID(v xid.ID) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetContextID(v)
	})
}

// UpdateContextID sets the "context_id" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateContextID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateContextID()
	})
}

// ClearContextID clears the value of the "context_id" field.
func (u *UserPermissionUpsertOne) ClearContextID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearContextID()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *UserPermissionUpsertOne) SetResourceType(v string) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateResourceType() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateResourceType()
	})
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *UserPermissionUpsertOne) ClearResourceType() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *UserPermissionUpsertOne) SetResourceID(v xid.ID) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateResourceID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *UserPermissionUpsertOne) ClearResourceID() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearResourceID()
	})
}

// SetPermissionType sets the "permission_type" field.
func (u *UserPermissionUpsertOne) SetPermissionType(v model.PermissionType) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetPermissionType(v)
	})
}

// UpdatePermissionType sets the "permission_type" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdatePermissionType() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdatePermissionType()
	})
}

// SetAssignedBy sets the "assigned_by" field.
func (u *UserPermissionUpsertOne) SetAssignedBy(v xid.ID) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetAssignedBy(v)
	})
}

// UpdateAssignedBy sets the "assigned_by" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateAssignedBy() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateAssignedBy()
	})
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (u *UserPermissionUpsertOne) ClearAssignedBy() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearAssignedBy()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *UserPermissionUpsertOne) SetAssignedAt(v time.Time) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateAssignedAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateAssignedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserPermissionUpsertOne) SetExpiresAt(v time.Time) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateExpiresAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *UserPermissionUpsertOne) ClearExpiresAt() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearExpiresAt()
	})
}

// SetActive sets the "active" field.
func (u *UserPermissionUpsertOne) SetActive(v bool) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateActive() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateActive()
	})
}

// SetConditions sets the "conditions" field.
func (u *UserPermissionUpsertOne) SetConditions(v map[string]interface{}) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetConditions(v)
	})
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateConditions() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateConditions()
	})
}

// ClearConditions clears the value of the "conditions" field.
func (u *UserPermissionUpsertOne) ClearConditions() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearConditions()
	})
}

// SetReason sets the "reason" field.
func (u *UserPermissionUpsertOne) SetReason(v string) *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *UserPermissionUpsertOne) UpdateReason() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *UserPermissionUpsertOne) ClearReason() *UserPermissionUpsertOne {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearReason()
	})
}

// Exec executes the query.
func (u *UserPermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserPermissionUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserPermissionUpsertOne.ID is not supported by MySQL driver. Use UserPermissionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserPermissionUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserPermissionCreateBulk is the builder for creating many UserPermission entities in bulk.
type UserPermissionCreateBulk struct {
	config
	err      error
	builders []*UserPermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the UserPermission entities in the database.
func (upcb *UserPermissionCreateBulk) Save(ctx context.Context) ([]*UserPermission, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPermission, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPermissionCreateBulk) SaveX(ctx context.Context) []*UserPermission {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPermission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserPermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserPermissionUpsertBulk {
	upcb.conflict = opts
	return &UserPermissionUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserPermissionCreateBulk) OnConflictColumns(columns ...string) *UserPermissionUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserPermissionUpsertBulk{
		create: upcb,
	}
}

// UserPermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of UserPermission nodes.
type UserPermissionUpsertBulk struct {
	create *UserPermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userpermission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserPermissionUpsertBulk) UpdateNewValues() *UserPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userpermission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userpermission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPermission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserPermissionUpsertBulk) Ignore() *UserPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPermissionUpsertBulk) DoNothing() *UserPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPermissionCreateBulk.OnConflict
// documentation for more info.
func (u *UserPermissionUpsertBulk) Update(set func(*UserPermissionUpsert)) *UserPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPermissionUpsertBulk) SetUpdatedAt(v time.Time) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateUpdatedAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserPermissionUpsertBulk) SetDeletedAt(v time.Time) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateDeletedAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserPermissionUpsertBulk) ClearDeletedAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPermissionUpsertBulk) SetUserID(v xid.ID) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateUserID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateUserID()
	})
}

// SetPermissionID sets the "permission_id" field.
func (u *UserPermissionUpsertBulk) SetPermissionID(v xid.ID) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetPermissionID(v)
	})
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdatePermissionID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdatePermissionID()
	})
}

// SetContextType sets the "context_type" field.
func (u *UserPermissionUpsertBulk) SetContextType(v model.ContextType) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetContextType(v)
	})
}

// UpdateContextType sets the "context_type" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateContextType() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateContextType()
	})
}

// SetContextID sets the "context_id" field.
func (u *UserPermissionUpsertBulk) SetContextID(v xid.ID) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetContextID(v)
	})
}

// UpdateContextID sets the "context_id" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateContextID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateContextID()
	})
}

// ClearContextID clears the value of the "context_id" field.
func (u *UserPermissionUpsertBulk) ClearContextID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearContextID()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *UserPermissionUpsertBulk) SetResourceType(v string) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateResourceType() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateResourceType()
	})
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *UserPermissionUpsertBulk) ClearResourceType() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *UserPermissionUpsertBulk) SetResourceID(v xid.ID) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateResourceID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *UserPermissionUpsertBulk) ClearResourceID() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearResourceID()
	})
}

// SetPermissionType sets the "permission_type" field.
func (u *UserPermissionUpsertBulk) SetPermissionType(v model.PermissionType) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetPermissionType(v)
	})
}

// UpdatePermissionType sets the "permission_type" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdatePermissionType() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdatePermissionType()
	})
}

// SetAssignedBy sets the "assigned_by" field.
func (u *UserPermissionUpsertBulk) SetAssignedBy(v xid.ID) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetAssignedBy(v)
	})
}

// UpdateAssignedBy sets the "assigned_by" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateAssignedBy() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateAssignedBy()
	})
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (u *UserPermissionUpsertBulk) ClearAssignedBy() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearAssignedBy()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *UserPermissionUpsertBulk) SetAssignedAt(v time.Time) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateAssignedAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateAssignedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserPermissionUpsertBulk) SetExpiresAt(v time.Time) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateExpiresAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *UserPermissionUpsertBulk) ClearExpiresAt() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearExpiresAt()
	})
}

// SetActive sets the "active" field.
func (u *UserPermissionUpsertBulk) SetActive(v bool) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateActive() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateActive()
	})
}

// SetConditions sets the "conditions" field.
func (u *UserPermissionUpsertBulk) SetConditions(v map[string]interface{}) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetConditions(v)
	})
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateConditions() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateConditions()
	})
}

// ClearConditions clears the value of the "conditions" field.
func (u *UserPermissionUpsertBulk) ClearConditions() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearConditions()
	})
}

// SetReason sets the "reason" field.
func (u *UserPermissionUpsertBulk) SetReason(v string) *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *UserPermissionUpsertBulk) UpdateReason() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *UserPermissionUpsertBulk) ClearReason() *UserPermissionUpsertBulk {
	return u.Update(func(s *UserPermissionUpsert) {
		s.ClearReason()
	})
}

// Exec executes the query.
func (u *UserPermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserPermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
