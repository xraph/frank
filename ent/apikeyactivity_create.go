// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
)

// ApiKeyActivityCreate is the builder for creating a ApiKeyActivity entity.
type ApiKeyActivityCreate struct {
	config
	mutation *ApiKeyActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKeyID sets the "key_id" field.
func (akac *ApiKeyActivityCreate) SetKeyID(x xid.ID) *ApiKeyActivityCreate {
	akac.mutation.SetKeyID(x)
	return akac
}

// SetAction sets the "action" field.
func (akac *ApiKeyActivityCreate) SetAction(s string) *ApiKeyActivityCreate {
	akac.mutation.SetAction(s)
	return akac
}

// SetEndpoint sets the "endpoint" field.
func (akac *ApiKeyActivityCreate) SetEndpoint(s string) *ApiKeyActivityCreate {
	akac.mutation.SetEndpoint(s)
	return akac
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableEndpoint(s *string) *ApiKeyActivityCreate {
	if s != nil {
		akac.SetEndpoint(*s)
	}
	return akac
}

// SetMethod sets the "method" field.
func (akac *ApiKeyActivityCreate) SetMethod(s string) *ApiKeyActivityCreate {
	akac.mutation.SetMethod(s)
	return akac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableMethod(s *string) *ApiKeyActivityCreate {
	if s != nil {
		akac.SetMethod(*s)
	}
	return akac
}

// SetStatusCode sets the "status_code" field.
func (akac *ApiKeyActivityCreate) SetStatusCode(i int) *ApiKeyActivityCreate {
	akac.mutation.SetStatusCode(i)
	return akac
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableStatusCode(i *int) *ApiKeyActivityCreate {
	if i != nil {
		akac.SetStatusCode(*i)
	}
	return akac
}

// SetResponseTime sets the "response_time" field.
func (akac *ApiKeyActivityCreate) SetResponseTime(i int) *ApiKeyActivityCreate {
	akac.mutation.SetResponseTime(i)
	return akac
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableResponseTime(i *int) *ApiKeyActivityCreate {
	if i != nil {
		akac.SetResponseTime(*i)
	}
	return akac
}

// SetIPAddress sets the "ip_address" field.
func (akac *ApiKeyActivityCreate) SetIPAddress(s string) *ApiKeyActivityCreate {
	akac.mutation.SetIPAddress(s)
	return akac
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableIPAddress(s *string) *ApiKeyActivityCreate {
	if s != nil {
		akac.SetIPAddress(*s)
	}
	return akac
}

// SetUserAgent sets the "user_agent" field.
func (akac *ApiKeyActivityCreate) SetUserAgent(s string) *ApiKeyActivityCreate {
	akac.mutation.SetUserAgent(s)
	return akac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableUserAgent(s *string) *ApiKeyActivityCreate {
	if s != nil {
		akac.SetUserAgent(*s)
	}
	return akac
}

// SetSuccess sets the "success" field.
func (akac *ApiKeyActivityCreate) SetSuccess(b bool) *ApiKeyActivityCreate {
	akac.mutation.SetSuccess(b)
	return akac
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableSuccess(b *bool) *ApiKeyActivityCreate {
	if b != nil {
		akac.SetSuccess(*b)
	}
	return akac
}

// SetError sets the "error" field.
func (akac *ApiKeyActivityCreate) SetError(s string) *ApiKeyActivityCreate {
	akac.mutation.SetError(s)
	return akac
}

// SetNillableError sets the "error" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableError(s *string) *ApiKeyActivityCreate {
	if s != nil {
		akac.SetError(*s)
	}
	return akac
}

// SetTimestamp sets the "timestamp" field.
func (akac *ApiKeyActivityCreate) SetTimestamp(t time.Time) *ApiKeyActivityCreate {
	akac.mutation.SetTimestamp(t)
	return akac
}

// SetMetadata sets the "metadata" field.
func (akac *ApiKeyActivityCreate) SetMetadata(m map[string]interface{}) *ApiKeyActivityCreate {
	akac.mutation.SetMetadata(m)
	return akac
}

// SetID sets the "id" field.
func (akac *ApiKeyActivityCreate) SetID(x xid.ID) *ApiKeyActivityCreate {
	akac.mutation.SetID(x)
	return akac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (akac *ApiKeyActivityCreate) SetNillableID(x *xid.ID) *ApiKeyActivityCreate {
	if x != nil {
		akac.SetID(*x)
	}
	return akac
}

// SetKey sets the "key" edge to the ApiKey entity.
func (akac *ApiKeyActivityCreate) SetKey(a *ApiKey) *ApiKeyActivityCreate {
	return akac.SetKeyID(a.ID)
}

// Mutation returns the ApiKeyActivityMutation object of the builder.
func (akac *ApiKeyActivityCreate) Mutation() *ApiKeyActivityMutation {
	return akac.mutation
}

// Save creates the ApiKeyActivity in the database.
func (akac *ApiKeyActivityCreate) Save(ctx context.Context) (*ApiKeyActivity, error) {
	akac.defaults()
	return withHooks(ctx, akac.sqlSave, akac.mutation, akac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (akac *ApiKeyActivityCreate) SaveX(ctx context.Context) *ApiKeyActivity {
	v, err := akac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akac *ApiKeyActivityCreate) Exec(ctx context.Context) error {
	_, err := akac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akac *ApiKeyActivityCreate) ExecX(ctx context.Context) {
	if err := akac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akac *ApiKeyActivityCreate) defaults() {
	if _, ok := akac.mutation.Success(); !ok {
		v := apikeyactivity.DefaultSuccess
		akac.mutation.SetSuccess(v)
	}
	if _, ok := akac.mutation.ID(); !ok {
		v := apikeyactivity.DefaultID()
		akac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akac *ApiKeyActivityCreate) check() error {
	if _, ok := akac.mutation.KeyID(); !ok {
		return &ValidationError{Name: "key_id", err: errors.New(`ent: missing required field "ApiKeyActivity.key_id"`)}
	}
	if v, ok := akac.mutation.KeyID(); ok {
		if err := apikeyactivity.KeyIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "key_id", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.key_id": %w`, err)}
		}
	}
	if _, ok := akac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "ApiKeyActivity.action"`)}
	}
	if v, ok := akac.mutation.Action(); ok {
		if err := apikeyactivity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.action": %w`, err)}
		}
	}
	if _, ok := akac.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "ApiKeyActivity.success"`)}
	}
	if _, ok := akac.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ApiKeyActivity.timestamp"`)}
	}
	if len(akac.mutation.KeyIDs()) == 0 {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required edge "ApiKeyActivity.key"`)}
	}
	return nil
}

func (akac *ApiKeyActivityCreate) sqlSave(ctx context.Context) (*ApiKeyActivity, error) {
	if err := akac.check(); err != nil {
		return nil, err
	}
	_node, _spec := akac.createSpec()
	if err := sqlgraph.CreateNode(ctx, akac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	akac.mutation.id = &_node.ID
	akac.mutation.done = true
	return _node, nil
}

func (akac *ApiKeyActivityCreate) createSpec() (*ApiKeyActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiKeyActivity{config: akac.config}
		_spec = sqlgraph.NewCreateSpec(apikeyactivity.Table, sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString))
	)
	_spec.OnConflict = akac.conflict
	if id, ok := akac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := akac.mutation.Action(); ok {
		_spec.SetField(apikeyactivity.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := akac.mutation.Endpoint(); ok {
		_spec.SetField(apikeyactivity.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := akac.mutation.Method(); ok {
		_spec.SetField(apikeyactivity.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := akac.mutation.StatusCode(); ok {
		_spec.SetField(apikeyactivity.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := akac.mutation.ResponseTime(); ok {
		_spec.SetField(apikeyactivity.FieldResponseTime, field.TypeInt, value)
		_node.ResponseTime = value
	}
	if value, ok := akac.mutation.IPAddress(); ok {
		_spec.SetField(apikeyactivity.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := akac.mutation.UserAgent(); ok {
		_spec.SetField(apikeyactivity.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := akac.mutation.Success(); ok {
		_spec.SetField(apikeyactivity.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := akac.mutation.Error(); ok {
		_spec.SetField(apikeyactivity.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := akac.mutation.Timestamp(); ok {
		_spec.SetField(apikeyactivity.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := akac.mutation.Metadata(); ok {
		_spec.SetField(apikeyactivity.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := akac.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.KeyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiKeyActivity.Create().
//		SetKeyID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiKeyActivityUpsert) {
//			SetKeyID(v+v).
//		}).
//		Exec(ctx)
func (akac *ApiKeyActivityCreate) OnConflict(opts ...sql.ConflictOption) *ApiKeyActivityUpsertOne {
	akac.conflict = opts
	return &ApiKeyActivityUpsertOne{
		create: akac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akac *ApiKeyActivityCreate) OnConflictColumns(columns ...string) *ApiKeyActivityUpsertOne {
	akac.conflict = append(akac.conflict, sql.ConflictColumns(columns...))
	return &ApiKeyActivityUpsertOne{
		create: akac,
	}
}

type (
	// ApiKeyActivityUpsertOne is the builder for "upsert"-ing
	//  one ApiKeyActivity node.
	ApiKeyActivityUpsertOne struct {
		create *ApiKeyActivityCreate
	}

	// ApiKeyActivityUpsert is the "OnConflict" setter.
	ApiKeyActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetKeyID sets the "key_id" field.
func (u *ApiKeyActivityUpsert) SetKeyID(v xid.ID) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldKeyID, v)
	return u
}

// UpdateKeyID sets the "key_id" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateKeyID() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldKeyID)
	return u
}

// SetAction sets the "action" field.
func (u *ApiKeyActivityUpsert) SetAction(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateAction() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldAction)
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *ApiKeyActivityUpsert) SetEndpoint(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldEndpoint, v)
	return u
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateEndpoint() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldEndpoint)
	return u
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ApiKeyActivityUpsert) ClearEndpoint() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldEndpoint)
	return u
}

// SetMethod sets the "method" field.
func (u *ApiKeyActivityUpsert) SetMethod(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateMethod() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *ApiKeyActivityUpsert) ClearMethod() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldMethod)
	return u
}

// SetStatusCode sets the "status_code" field.
func (u *ApiKeyActivityUpsert) SetStatusCode(v int) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldStatusCode, v)
	return u
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateStatusCode() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldStatusCode)
	return u
}

// AddStatusCode adds v to the "status_code" field.
func (u *ApiKeyActivityUpsert) AddStatusCode(v int) *ApiKeyActivityUpsert {
	u.Add(apikeyactivity.FieldStatusCode, v)
	return u
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ApiKeyActivityUpsert) ClearStatusCode() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldStatusCode)
	return u
}

// SetResponseTime sets the "response_time" field.
func (u *ApiKeyActivityUpsert) SetResponseTime(v int) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldResponseTime, v)
	return u
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateResponseTime() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldResponseTime)
	return u
}

// AddResponseTime adds v to the "response_time" field.
func (u *ApiKeyActivityUpsert) AddResponseTime(v int) *ApiKeyActivityUpsert {
	u.Add(apikeyactivity.FieldResponseTime, v)
	return u
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ApiKeyActivityUpsert) ClearResponseTime() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldResponseTime)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *ApiKeyActivityUpsert) SetIPAddress(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateIPAddress() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ApiKeyActivityUpsert) ClearIPAddress() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *ApiKeyActivityUpsert) SetUserAgent(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateUserAgent() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ApiKeyActivityUpsert) ClearUserAgent() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldUserAgent)
	return u
}

// SetSuccess sets the "success" field.
func (u *ApiKeyActivityUpsert) SetSuccess(v bool) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldSuccess, v)
	return u
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateSuccess() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldSuccess)
	return u
}

// SetError sets the "error" field.
func (u *ApiKeyActivityUpsert) SetError(v string) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateError() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *ApiKeyActivityUpsert) ClearError() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldError)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *ApiKeyActivityUpsert) SetTimestamp(v time.Time) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateTimestamp() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldTimestamp)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyActivityUpsert) SetMetadata(v map[string]interface{}) *ApiKeyActivityUpsert {
	u.Set(apikeyactivity.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyActivityUpsert) UpdateMetadata() *ApiKeyActivityUpsert {
	u.SetExcluded(apikeyactivity.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyActivityUpsert) ClearMetadata() *ApiKeyActivityUpsert {
	u.SetNull(apikeyactivity.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apikeyactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiKeyActivityUpsertOne) UpdateNewValues() *ApiKeyActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apikeyactivity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiKeyActivityUpsertOne) Ignore() *ApiKeyActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiKeyActivityUpsertOne) DoNothing() *ApiKeyActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiKeyActivityCreate.OnConflict
// documentation for more info.
func (u *ApiKeyActivityUpsertOne) Update(set func(*ApiKeyActivityUpsert)) *ApiKeyActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiKeyActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetKeyID sets the "key_id" field.
func (u *ApiKeyActivityUpsertOne) SetKeyID(v xid.ID) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetKeyID(v)
	})
}

// UpdateKeyID sets the "key_id" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateKeyID() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateKeyID()
	})
}

// SetAction sets the "action" field.
func (u *ApiKeyActivityUpsertOne) SetAction(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateAction() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateAction()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *ApiKeyActivityUpsertOne) SetEndpoint(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateEndpoint() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateEndpoint()
	})
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ApiKeyActivityUpsertOne) ClearEndpoint() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearEndpoint()
	})
}

// SetMethod sets the "method" field.
func (u *ApiKeyActivityUpsertOne) SetMethod(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateMethod() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiKeyActivityUpsertOne) ClearMethod() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearMethod()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *ApiKeyActivityUpsertOne) SetStatusCode(v int) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *ApiKeyActivityUpsertOne) AddStatusCode(v int) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateStatusCode() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ApiKeyActivityUpsertOne) ClearStatusCode() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseTime sets the "response_time" field.
func (u *ApiKeyActivityUpsertOne) SetResponseTime(v int) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetResponseTime(v)
	})
}

// AddResponseTime adds v to the "response_time" field.
func (u *ApiKeyActivityUpsertOne) AddResponseTime(v int) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.AddResponseTime(v)
	})
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateResponseTime() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateResponseTime()
	})
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ApiKeyActivityUpsertOne) ClearResponseTime() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearResponseTime()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ApiKeyActivityUpsertOne) SetIPAddress(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateIPAddress() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ApiKeyActivityUpsertOne) ClearIPAddress() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ApiKeyActivityUpsertOne) SetUserAgent(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateUserAgent() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ApiKeyActivityUpsertOne) ClearUserAgent() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearUserAgent()
	})
}

// SetSuccess sets the "success" field.
func (u *ApiKeyActivityUpsertOne) SetSuccess(v bool) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateSuccess() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateSuccess()
	})
}

// SetError sets the "error" field.
func (u *ApiKeyActivityUpsertOne) SetError(v string) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateError() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ApiKeyActivityUpsertOne) ClearError() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearError()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *ApiKeyActivityUpsertOne) SetTimestamp(v time.Time) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateTimestamp() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateTimestamp()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyActivityUpsertOne) SetMetadata(v map[string]interface{}) *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertOne) UpdateMetadata() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyActivityUpsertOne) ClearMetadata() *ApiKeyActivityUpsertOne {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *ApiKeyActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiKeyActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiKeyActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiKeyActivityUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiKeyActivityUpsertOne.ID is not supported by MySQL driver. Use ApiKeyActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiKeyActivityUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiKeyActivityCreateBulk is the builder for creating many ApiKeyActivity entities in bulk.
type ApiKeyActivityCreateBulk struct {
	config
	err      error
	builders []*ApiKeyActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiKeyActivity entities in the database.
func (akacb *ApiKeyActivityCreateBulk) Save(ctx context.Context) ([]*ApiKeyActivity, error) {
	if akacb.err != nil {
		return nil, akacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(akacb.builders))
	nodes := make([]*ApiKeyActivity, len(akacb.builders))
	mutators := make([]Mutator, len(akacb.builders))
	for i := range akacb.builders {
		func(i int, root context.Context) {
			builder := akacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiKeyActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = akacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akacb *ApiKeyActivityCreateBulk) SaveX(ctx context.Context) []*ApiKeyActivity {
	v, err := akacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akacb *ApiKeyActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := akacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akacb *ApiKeyActivityCreateBulk) ExecX(ctx context.Context) {
	if err := akacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiKeyActivity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiKeyActivityUpsert) {
//			SetKeyID(v+v).
//		}).
//		Exec(ctx)
func (akacb *ApiKeyActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiKeyActivityUpsertBulk {
	akacb.conflict = opts
	return &ApiKeyActivityUpsertBulk{
		create: akacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akacb *ApiKeyActivityCreateBulk) OnConflictColumns(columns ...string) *ApiKeyActivityUpsertBulk {
	akacb.conflict = append(akacb.conflict, sql.ConflictColumns(columns...))
	return &ApiKeyActivityUpsertBulk{
		create: akacb,
	}
}

// ApiKeyActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiKeyActivity nodes.
type ApiKeyActivityUpsertBulk struct {
	create *ApiKeyActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apikeyactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiKeyActivityUpsertBulk) UpdateNewValues() *ApiKeyActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apikeyactivity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiKeyActivity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiKeyActivityUpsertBulk) Ignore() *ApiKeyActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiKeyActivityUpsertBulk) DoNothing() *ApiKeyActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiKeyActivityCreateBulk.OnConflict
// documentation for more info.
func (u *ApiKeyActivityUpsertBulk) Update(set func(*ApiKeyActivityUpsert)) *ApiKeyActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiKeyActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetKeyID sets the "key_id" field.
func (u *ApiKeyActivityUpsertBulk) SetKeyID(v xid.ID) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetKeyID(v)
	})
}

// UpdateKeyID sets the "key_id" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateKeyID() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateKeyID()
	})
}

// SetAction sets the "action" field.
func (u *ApiKeyActivityUpsertBulk) SetAction(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateAction() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateAction()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *ApiKeyActivityUpsertBulk) SetEndpoint(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateEndpoint() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateEndpoint()
	})
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ApiKeyActivityUpsertBulk) ClearEndpoint() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearEndpoint()
	})
}

// SetMethod sets the "method" field.
func (u *ApiKeyActivityUpsertBulk) SetMethod(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateMethod() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ApiKeyActivityUpsertBulk) ClearMethod() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearMethod()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *ApiKeyActivityUpsertBulk) SetStatusCode(v int) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *ApiKeyActivityUpsertBulk) AddStatusCode(v int) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateStatusCode() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ApiKeyActivityUpsertBulk) ClearStatusCode() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseTime sets the "response_time" field.
func (u *ApiKeyActivityUpsertBulk) SetResponseTime(v int) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetResponseTime(v)
	})
}

// AddResponseTime adds v to the "response_time" field.
func (u *ApiKeyActivityUpsertBulk) AddResponseTime(v int) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.AddResponseTime(v)
	})
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateResponseTime() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateResponseTime()
	})
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ApiKeyActivityUpsertBulk) ClearResponseTime() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearResponseTime()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ApiKeyActivityUpsertBulk) SetIPAddress(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateIPAddress() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ApiKeyActivityUpsertBulk) ClearIPAddress() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ApiKeyActivityUpsertBulk) SetUserAgent(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateUserAgent() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ApiKeyActivityUpsertBulk) ClearUserAgent() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearUserAgent()
	})
}

// SetSuccess sets the "success" field.
func (u *ApiKeyActivityUpsertBulk) SetSuccess(v bool) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateSuccess() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateSuccess()
	})
}

// SetError sets the "error" field.
func (u *ApiKeyActivityUpsertBulk) SetError(v string) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateError() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ApiKeyActivityUpsertBulk) ClearError() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearError()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *ApiKeyActivityUpsertBulk) SetTimestamp(v time.Time) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateTimestamp() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateTimestamp()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyActivityUpsertBulk) SetMetadata(v map[string]interface{}) *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyActivityUpsertBulk) UpdateMetadata() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyActivityUpsertBulk) ClearMetadata() *ApiKeyActivityUpsertBulk {
	return u.Update(func(s *ApiKeyActivityUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *ApiKeyActivityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiKeyActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiKeyActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiKeyActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
