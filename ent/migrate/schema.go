// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActivitiesColumns holds the columns for the "activities" table.
	ActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "resource_type", Type: field.TypeEnum, Enums: []string{"global", "system", "organization", "user", "role", "permission", "api_key", "session", "mfa", "webhook", "audit", "application", "end_user", "integration", "billing", "analytics", "webhook_event", "email_template", "verification", "audit_log", "common", "oauth", "membership", "provider", "passkey", "sso", "self_user", "personal_api_key", "personal_session", "personal_mfa", "internal_user", "end_user_session", "customer_organization", "platform_analytics", "end_user_analytics", "auth_service_analytics", "auth_service", "auth_service_domain"}, Default: "common"},
		{Name: "resource_id", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "category", Type: field.TypeString, Default: "general"},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "endpoint", Type: field.TypeString, Nullable: true},
		{Name: "method", Type: field.TypeString, Nullable: true},
		{Name: "status_code", Type: field.TypeInt, Nullable: true},
		{Name: "response_time", Type: field.TypeInt, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "success", Type: field.TypeBool, Default: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "error_code", Type: field.TypeString, Nullable: true},
		{Name: "size", Type: field.TypeInt, Nullable: true},
		{Name: "count", Type: field.TypeInt, Nullable: true},
		{Name: "value", Type: field.TypeFloat64, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "session_id", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// ActivitiesTable holds the schema information for the "activities" table.
	ActivitiesTable = &schema.Table{
		Name:       "activities",
		Columns:    ActivitiesColumns,
		PrimaryKey: []*schema.Column{ActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activities_organizations_activities",
				Columns:    []*schema.Column{ActivitiesColumns[23]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "activities_sessions_activities",
				Columns:    []*schema.Column{ActivitiesColumns[24]},
				RefColumns: []*schema.Column{SessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "activities_users_activities",
				Columns:    []*schema.Column{ActivitiesColumns[25]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "activity_resource_type_resource_id",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[1], ActivitiesColumns[2]},
			},
			{
				Name:    "activity_resource_type_resource_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[1], ActivitiesColumns[2], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_user_id",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[25]},
			},
			{
				Name:    "activity_organization_id",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[23]},
			},
			{
				Name:    "activity_session_id",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[24]},
			},
			{
				Name:    "activity_action",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[3]},
			},
			{
				Name:    "activity_resource_type_action",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[1], ActivitiesColumns[3]},
			},
			{
				Name:    "activity_category",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[4]},
			},
			{
				Name:    "activity_source",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[5]},
			},
			{
				Name:    "activity_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[19]},
			},
			{
				Name:    "activity_timestamp_resource_type",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[19], ActivitiesColumns[1]},
			},
			{
				Name:    "activity_timestamp_action",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[19], ActivitiesColumns[3]},
			},
			{
				Name:    "activity_timestamp_success",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[19], ActivitiesColumns[13]},
			},
			{
				Name:    "activity_endpoint",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[6]},
			},
			{
				Name:    "activity_method",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[7]},
			},
			{
				Name:    "activity_status_code",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[8]},
			},
			{
				Name:    "activity_success",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[13]},
			},
			{
				Name:    "activity_resource_type_timestamp_success",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[1], ActivitiesColumns[19], ActivitiesColumns[13]},
			},
			{
				Name:    "activity_organization_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[23], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_user_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[25], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_resource_type_action_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[1], ActivitiesColumns[3], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_organization_id_resource_type_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[23], ActivitiesColumns[1], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_user_id_resource_type_timestamp",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[25], ActivitiesColumns[1], ActivitiesColumns[19]},
			},
			{
				Name:    "activity_ip_address",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[10]},
			},
			{
				Name:    "activity_user_agent",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[11]},
			},
			{
				Name:    "activity_expires_at",
				Unique:  false,
				Columns: []*schema.Column{ActivitiesColumns[20]},
			},
		},
	}
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "public_key", Type: field.TypeString, Unique: true},
		{Name: "secret_key", Type: field.TypeString, Unique: true},
		{Name: "hashed_secret_key", Type: field.TypeString, Unique: true},
		{Name: "key", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "hashed_key", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"server", "client", "admin"}, Default: "server"},
		{Name: "environment", Type: field.TypeEnum, Enums: []string{"test", "live", "development", "staging", "production"}, Default: "test"},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "permissions", Type: field.TypeJSON, Nullable: true},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "ip_whitelist", Type: field.TypeJSON, Nullable: true},
		{Name: "rate_limits", Type: field.TypeJSON, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_organizations_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[20]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apikey_user_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[21]},
			},
			{
				Name:    "apikey_organization_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[20]},
			},
			{
				Name:    "apikey_public_key",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[5]},
			},
			{
				Name:    "apikey_hashed_secret_key",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[7]},
			},
			{
				Name:    "apikey_hashed_key",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[9]},
			},
			{
				Name:    "apikey_type",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[10]},
			},
			{
				Name:    "apikey_environment",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[11]},
			},
			{
				Name:    "apikey_active",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[12]},
			},
			{
				Name:    "apikey_expires_at",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[19]},
			},
			{
				Name:    "apikey_last_used",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[18]},
			},
			{
				Name:    "apikey_user_id_active",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[21], APIKeysColumns[12]},
			},
			{
				Name:    "apikey_organization_id_active",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[20], APIKeysColumns[12]},
			},
			{
				Name:    "apikey_user_id_type",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[21], APIKeysColumns[10]},
			},
			{
				Name:    "apikey_organization_id_type",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[20], APIKeysColumns[10]},
			},
			{
				Name:    "apikey_user_id_environment",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[21], APIKeysColumns[11]},
			},
			{
				Name:    "apikey_organization_id_environment",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[20], APIKeysColumns[11]},
			},
			{
				Name:    "apikey_active_expires_at",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[12], APIKeysColumns[19]},
			},
			{
				Name:    "apikey_type_environment",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[10], APIKeysColumns[11]},
			},
			{
				Name:    "apikey_name",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[4]},
			},
			{
				Name:    "apikey_created_at",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[1]},
			},
			{
				Name:    "apikey_updated_at",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[2]},
			},
		},
	}
	// APIKeyActivitiesColumns holds the columns for the "api_key_activities" table.
	APIKeyActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "action", Type: field.TypeString},
		{Name: "endpoint", Type: field.TypeString, Nullable: true},
		{Name: "method", Type: field.TypeString, Nullable: true},
		{Name: "status_code", Type: field.TypeInt, Nullable: true},
		{Name: "response_time", Type: field.TypeInt, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "success", Type: field.TypeBool, Default: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "key_id", Type: field.TypeString},
	}
	// APIKeyActivitiesTable holds the schema information for the "api_key_activities" table.
	APIKeyActivitiesTable = &schema.Table{
		Name:       "api_key_activities",
		Columns:    APIKeyActivitiesColumns,
		PrimaryKey: []*schema.Column{APIKeyActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_key_activities_api_keys_activities",
				Columns:    []*schema.Column{APIKeyActivitiesColumns[12]},
				RefColumns: []*schema.Column{APIKeysColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apikeyactivity_key_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[12]},
			},
			{
				Name:    "apikeyactivity_timestamp",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[10]},
			},
			{
				Name:    "apikeyactivity_key_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[12], APIKeyActivitiesColumns[10]},
			},
			{
				Name:    "apikeyactivity_action",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[1]},
			},
			{
				Name:    "apikeyactivity_endpoint",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[2]},
			},
			{
				Name:    "apikeyactivity_method",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[3]},
			},
			{
				Name:    "apikeyactivity_status_code",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[4]},
			},
			{
				Name:    "apikeyactivity_success",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[8]},
			},
			{
				Name:    "apikeyactivity_ip_address",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[6]},
			},
			{
				Name:    "apikeyactivity_key_id_action",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[12], APIKeyActivitiesColumns[1]},
			},
			{
				Name:    "apikeyactivity_key_id_success",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[12], APIKeyActivitiesColumns[8]},
			},
			{
				Name:    "apikeyactivity_key_id_endpoint",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[12], APIKeyActivitiesColumns[2]},
			},
			{
				Name:    "apikeyactivity_action_timestamp",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[1], APIKeyActivitiesColumns[10]},
			},
			{
				Name:    "apikeyactivity_success_timestamp",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[8], APIKeyActivitiesColumns[10]},
			},
			{
				Name:    "apikeyactivity_timestamp_key_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[10], APIKeyActivitiesColumns[12]},
			},
			{
				Name:    "apikeyactivity_timestamp_action",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[10], APIKeyActivitiesColumns[1]},
			},
			{
				Name:    "apikeyactivity_timestamp_success",
				Unique:  false,
				Columns: []*schema.Column{APIKeyActivitiesColumns[10], APIKeyActivitiesColumns[8]},
			},
		},
	}
	// AuditsColumns holds the columns for the "audits" table.
	AuditsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "action", Type: field.TypeString},
		{Name: "resource_type", Type: field.TypeString},
		{Name: "resource_id", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "device_id", Type: field.TypeString, Nullable: true},
		{Name: "request_id", Type: field.TypeString, Nullable: true},
		{Name: "error_code", Type: field.TypeString, Nullable: true},
		{Name: "error_message", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "old_values", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "current_values", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "session_id", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// AuditsTable holds the schema information for the "audits" table.
	AuditsTable = &schema.Table{
		Name:       "audits",
		Columns:    AuditsColumns,
		PrimaryKey: []*schema.Column{AuditsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audits_organizations_audit_logs",
				Columns:    []*schema.Column{AuditsColumns[20]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "audits_sessions_audit_logs",
				Columns:    []*schema.Column{AuditsColumns[21]},
				RefColumns: []*schema.Column{SessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "audits_users_audit_logs",
				Columns:    []*schema.Column{AuditsColumns[22]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "audit_user_id",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[22]},
			},
			{
				Name:    "audit_organization_id",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[20]},
			},
			{
				Name:    "audit_session_id",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[21]},
			},
			{
				Name:    "audit_action",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[4]},
			},
			{
				Name:    "audit_resource_type",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[5]},
			},
			{
				Name:    "audit_resource_id",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[6]},
			},
			{
				Name:    "audit_status",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[7]},
			},
			{
				Name:    "audit_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[19]},
			},
			{
				Name:    "audit_organization_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[20], AuditsColumns[19]},
			},
			{
				Name:    "audit_user_id_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[22], AuditsColumns[19]},
			},
			{
				Name:    "audit_action_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[4], AuditsColumns[19]},
			},
			{
				Name:    "audit_resource_type_resource_id",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[5], AuditsColumns[6]},
			},
			{
				Name:    "audit_ip_address_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditsColumns[8], AuditsColumns[19]},
			},
		},
	}
	// EmailTemplatesColumns holds the columns for the "email_templates" table.
	EmailTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "html_content", Type: field.TypeString},
		{Name: "text_content", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "locale", Type: field.TypeString, Default: "en"},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// EmailTemplatesTable holds the schema information for the "email_templates" table.
	EmailTemplatesTable = &schema.Table{
		Name:       "email_templates",
		Columns:    EmailTemplatesColumns,
		PrimaryKey: []*schema.Column{EmailTemplatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "email_templates_organizations_email_templates",
				Columns:    []*schema.Column{EmailTemplatesColumns[13]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "emailtemplate_organization_id",
				Unique:  false,
				Columns: []*schema.Column{EmailTemplatesColumns[13]},
			},
			{
				Name:    "emailtemplate_type",
				Unique:  false,
				Columns: []*schema.Column{EmailTemplatesColumns[6]},
			},
			{
				Name:    "emailtemplate_organization_id_type_locale",
				Unique:  true,
				Columns: []*schema.Column{EmailTemplatesColumns[13], EmailTemplatesColumns[6], EmailTemplatesColumns[11]},
			},
		},
	}
	// FeatureFlagsColumns holds the columns for the "feature_flags" table.
	FeatureFlagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "component", Type: field.TypeEnum, Enums: []string{"oauth2", "passwordless", "mfa", "passkeys", "sso", "enterprise", "webhooks", "api_keys"}},
	}
	// FeatureFlagsTable holds the schema information for the "feature_flags" table.
	FeatureFlagsTable = &schema.Table{
		Name:       "feature_flags",
		Columns:    FeatureFlagsColumns,
		PrimaryKey: []*schema.Column{FeatureFlagsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "featureflag_key",
				Unique:  false,
				Columns: []*schema.Column{FeatureFlagsColumns[5]},
			},
			{
				Name:    "featureflag_component",
				Unique:  false,
				Columns: []*schema.Column{FeatureFlagsColumns[9]},
			},
		},
	}
	// IdentityProvidersColumns holds the columns for the "identity_providers" table.
	IdentityProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "provider_type", Type: field.TypeString},
		{Name: "client_id", Type: field.TypeString, Nullable: true},
		{Name: "client_secret", Type: field.TypeString, Nullable: true},
		{Name: "issuer", Type: field.TypeString, Nullable: true},
		{Name: "authorization_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "token_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "userinfo_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "jwks_uri", Type: field.TypeString, Nullable: true},
		{Name: "metadata_url", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uri", Type: field.TypeString, Nullable: true},
		{Name: "certificate", Type: field.TypeString, Nullable: true},
		{Name: "private_key", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "primary", Type: field.TypeBool, Default: false},
		{Name: "auto_provision", Type: field.TypeBool, Default: false},
		{Name: "default_role", Type: field.TypeString, Nullable: true},
		{Name: "domain", Type: field.TypeString, Nullable: true},
		{Name: "icon_url", Type: field.TypeString, Nullable: true},
		{Name: "button_text", Type: field.TypeString, Nullable: true},
		{Name: "protocol", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "attributes_mapping", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
	}
	// IdentityProvidersTable holds the schema information for the "identity_providers" table.
	IdentityProvidersTable = &schema.Table{
		Name:       "identity_providers",
		Columns:    IdentityProvidersColumns,
		PrimaryKey: []*schema.Column{IdentityProvidersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "identity_providers_organizations_identity_providers",
				Columns:    []*schema.Column{IdentityProvidersColumns[29]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "identityprovider_organization_id",
				Unique:  false,
				Columns: []*schema.Column{IdentityProvidersColumns[29]},
			},
			{
				Name:    "identityprovider_provider_type",
				Unique:  false,
				Columns: []*schema.Column{IdentityProvidersColumns[5]},
			},
		},
	}
	// MfAsColumns holds the columns for the "mf_as" table.
	MfAsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "method", Type: field.TypeString},
		{Name: "secret", Type: field.TypeString},
		{Name: "verified", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "backup_codes", Type: field.TypeJSON, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// MfAsTable holds the schema information for the "mf_as" table.
	MfAsTable = &schema.Table{
		Name:       "mf_as",
		Columns:    MfAsColumns,
		PrimaryKey: []*schema.Column{MfAsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mf_as_users_mfa_methods",
				Columns:    []*schema.Column{MfAsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mfa_user_id",
				Unique:  false,
				Columns: []*schema.Column{MfAsColumns[13]},
			},
			{
				Name:    "mfa_method_user_id",
				Unique:  true,
				Columns: []*schema.Column{MfAsColumns[4], MfAsColumns[13]},
			},
		},
	}
	// MembershipsColumns holds the columns for the "memberships" table.
	MembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "active", "inactive", "suspended"}, Default: "pending"},
		{Name: "invited_at", Type: field.TypeTime},
		{Name: "joined_at", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "invitation_token", Type: field.TypeString, Nullable: true},
		{Name: "is_billing_contact", Type: field.TypeBool, Default: false},
		{Name: "is_primary_contact", Type: field.TypeBool, Default: false},
		{Name: "left_at", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "custom_fields", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "role_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
		{Name: "invited_by", Type: field.TypeString, Nullable: true},
	}
	// MembershipsTable holds the schema information for the "memberships" table.
	MembershipsTable = &schema.Table{
		Name:       "memberships",
		Columns:    MembershipsColumns,
		PrimaryKey: []*schema.Column{MembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "memberships_organizations_memberships",
				Columns:    []*schema.Column{MembershipsColumns[15]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "memberships_roles_memberships",
				Columns:    []*schema.Column{MembershipsColumns[16]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "memberships_users_memberships",
				Columns:    []*schema.Column{MembershipsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "memberships_users_sent_invitations",
				Columns:    []*schema.Column{MembershipsColumns[18]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "membership_user_id_organization_id",
				Unique:  true,
				Columns: []*schema.Column{MembershipsColumns[17], MembershipsColumns[15]},
			},
			{
				Name:    "membership_organization_id",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[15]},
			},
			{
				Name:    "membership_user_id",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[17]},
			},
			{
				Name:    "membership_role_id",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[16]},
			},
			{
				Name:    "membership_status",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[5]},
			},
			{
				Name:    "membership_invitation_token",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[9]},
			},
			{
				Name:    "membership_expires_at",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[8]},
			},
			{
				Name:    "membership_invited_by",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[18]},
			},
		},
	}
	// OauthAuthorizationsColumns holds the columns for the "oauth_authorizations" table.
	OauthAuthorizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "code", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "code_challenge", Type: field.TypeString, Nullable: true},
		{Name: "code_challenge_method", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uri", Type: field.TypeString},
		{Name: "scope_names", Type: field.TypeJSON, Nullable: true},
		{Name: "used", Type: field.TypeBool, Default: false},
		{Name: "used_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "nonce", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OauthAuthorizationsTable holds the schema information for the "oauth_authorizations" table.
	OauthAuthorizationsTable = &schema.Table{
		Name:       "oauth_authorizations",
		Columns:    OauthAuthorizationsColumns,
		PrimaryKey: []*schema.Column{OauthAuthorizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_authorizations_oauth_clients_authorizations",
				Columns:    []*schema.Column{OauthAuthorizationsColumns[17]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oauth_authorizations_users_oauth_authorizations",
				Columns:    []*schema.Column{OauthAuthorizationsColumns[18]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthauthorization_code",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[5]},
			},
			{
				Name:    "oauthauthorization_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[17]},
			},
			{
				Name:    "oauthauthorization_user_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[18]},
			},
			{
				Name:    "oauthauthorization_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[4]},
			},
			{
				Name:    "oauthauthorization_expires_at",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[12]},
			},
		},
	}
	// OauthClientsColumns holds the columns for the "oauth_clients" table.
	OauthClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "client_id", Type: field.TypeString, Unique: true},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "client_name", Type: field.TypeString},
		{Name: "client_description", Type: field.TypeString, Nullable: true},
		{Name: "client_uri", Type: field.TypeString, Nullable: true},
		{Name: "logo_uri", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uris", Type: field.TypeJSON},
		{Name: "post_logout_redirect_uris", Type: field.TypeJSON, Nullable: true},
		{Name: "public", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "allowed_cors_origins", Type: field.TypeJSON, Nullable: true},
		{Name: "allowed_grant_types", Type: field.TypeJSON},
		{Name: "token_expiry_seconds", Type: field.TypeInt, Default: 3600},
		{Name: "refresh_token_expiry_seconds", Type: field.TypeInt, Default: 2592000},
		{Name: "auth_code_expiry_seconds", Type: field.TypeInt, Default: 600},
		{Name: "requires_pkce", Type: field.TypeBool, Default: true},
		{Name: "requires_consent", Type: field.TypeBool, Default: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// OauthClientsTable holds the schema information for the "oauth_clients" table.
	OauthClientsTable = &schema.Table{
		Name:       "oauth_clients",
		Columns:    OauthClientsColumns,
		PrimaryKey: []*schema.Column{OauthClientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_clients_organizations_oauth_clients",
				Columns:    []*schema.Column{OauthClientsColumns[21]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthclient_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthClientsColumns[4]},
			},
			{
				Name:    "oauthclient_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthClientsColumns[21]},
			},
		},
	}
	// OauthScopesColumns holds the columns for the "oauth_scopes" table.
	OauthScopesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "default_scope", Type: field.TypeBool, Default: false},
		{Name: "public", Type: field.TypeBool, Default: true},
	}
	// OauthScopesTable holds the schema information for the "oauth_scopes" table.
	OauthScopesTable = &schema.Table{
		Name:       "oauth_scopes",
		Columns:    OauthScopesColumns,
		PrimaryKey: []*schema.Column{OauthScopesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "oauthscope_name",
				Unique:  false,
				Columns: []*schema.Column{OauthScopesColumns[4]},
			},
		},
	}
	// OauthTokensColumns holds the columns for the "oauth_tokens" table.
	OauthTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "access_token", Type: field.TypeString, Unique: true},
		{Name: "refresh_token", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "token_type", Type: field.TypeString, Default: "bearer"},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "scope_names", Type: field.TypeJSON, Nullable: true},
		{Name: "expires_in", Type: field.TypeInt, Default: 3600},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "refresh_token_expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "revoked", Type: field.TypeBool, Default: false},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OauthTokensTable holds the schema information for the "oauth_tokens" table.
	OauthTokensTable = &schema.Table{
		Name:       "oauth_tokens",
		Columns:    OauthTokensColumns,
		PrimaryKey: []*schema.Column{OauthTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_tokens_oauth_clients_tokens",
				Columns:    []*schema.Column{OauthTokensColumns[16]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oauth_tokens_users_oauth_tokens",
				Columns:    []*schema.Column{OauthTokensColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthtoken_access_token",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[4]},
			},
			{
				Name:    "oauthtoken_refresh_token",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[5]},
			},
			{
				Name:    "oauthtoken_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[16]},
			},
			{
				Name:    "oauthtoken_user_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[17]},
			},
			{
				Name:    "oauthtoken_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[7]},
			},
			{
				Name:    "oauthtoken_expires_at",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[10]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "verified_domains", Type: field.TypeJSON, Nullable: true},
		{Name: "domain", Type: field.TypeString, Nullable: true},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "plan", Type: field.TypeString, Default: "free"},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "trial_ends_at", Type: field.TypeTime, Nullable: true},
		{Name: "trial_used", Type: field.TypeBool, Default: false},
		{Name: "owner_id", Type: field.TypeString, Nullable: true},
		{Name: "org_type", Type: field.TypeEnum, Enums: []string{"platform", "customer"}, Default: "customer"},
		{Name: "is_platform_organization", Type: field.TypeBool, Default: false},
		{Name: "external_user_limit", Type: field.TypeInt, Default: 5},
		{Name: "end_user_limit", Type: field.TypeInt, Default: 100},
		{Name: "sso_enabled", Type: field.TypeBool, Default: false},
		{Name: "sso_domain", Type: field.TypeString, Nullable: true},
		{Name: "subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "customer_id", Type: field.TypeString, Nullable: true},
		{Name: "subscription_status", Type: field.TypeEnum, Enums: []string{"active", "trialing", "past_due", "canceled", "unpaid"}, Default: "trialing"},
		{Name: "auth_service_enabled", Type: field.TypeBool, Default: false},
		{Name: "auth_config", Type: field.TypeJSON, Nullable: true},
		{Name: "auth_domain", Type: field.TypeString, Nullable: true},
		{Name: "api_request_limit", Type: field.TypeInt, Default: 10000},
		{Name: "api_requests_used", Type: field.TypeInt, Default: 0},
		{Name: "current_external_users", Type: field.TypeInt, Default: 0},
		{Name: "current_end_users", Type: field.TypeInt, Default: 0},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "organization_domain",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[8]},
			},
			{
				Name:    "organization_slug",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[5]},
			},
			{
				Name:    "organization_owner_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[15]},
			},
			{
				Name:    "organization_sso_domain",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[21]},
			},
			{
				Name:    "organization_org_type",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[16]},
			},
			{
				Name:    "organization_is_platform_organization",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[17]},
			},
			{
				Name:    "organization_subscription_status",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[24]},
			},
			{
				Name:    "organization_auth_service_enabled",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[25]},
			},
			{
				Name:    "organization_auth_domain",
				Unique:  true,
				Columns: []*schema.Column{OrganizationsColumns[27]},
			},
			{
				Name:    "organization_customer_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[23]},
			},
			{
				Name:    "organization_subscription_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[22]},
			},
			{
				Name:    "organization_active",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[11]},
			},
		},
	}
	// OrganizationFeaturesColumns holds the columns for the "organization_features" table.
	OrganizationFeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "settings", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "feature_id", Type: field.TypeString},
		{Name: "organization_id", Type: field.TypeString},
	}
	// OrganizationFeaturesTable holds the schema information for the "organization_features" table.
	OrganizationFeaturesTable = &schema.Table{
		Name:       "organization_features",
		Columns:    OrganizationFeaturesColumns,
		PrimaryKey: []*schema.Column{OrganizationFeaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_features_feature_flags_organization_features",
				Columns:    []*schema.Column{OrganizationFeaturesColumns[6]},
				RefColumns: []*schema.Column{FeatureFlagsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "organization_features_organizations_feature_flags",
				Columns:    []*schema.Column{OrganizationFeaturesColumns[7]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organizationfeature_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationFeaturesColumns[7]},
			},
			{
				Name:    "organizationfeature_feature_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationFeaturesColumns[6]},
			},
			{
				Name:    "organizationfeature_organization_id_feature_id",
				Unique:  true,
				Columns: []*schema.Column{OrganizationFeaturesColumns[7], OrganizationFeaturesColumns[6]},
			},
		},
	}
	// OrganizationProvidersColumns holds the columns for the "organization_providers" table.
	OrganizationProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "template_key", Type: field.TypeString},
		{Name: "custom_config", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "enabled_at", Type: field.TypeTime},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "usage_count", Type: field.TypeInt, Default: 0},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "success_rate", Type: field.TypeFloat64, Default: 0},
		{Name: "total_logins", Type: field.TypeInt, Default: 0},
		{Name: "successful_logins", Type: field.TypeInt, Default: 0},
		{Name: "failed_logins", Type: field.TypeInt, Default: 0},
		{Name: "last_success", Type: field.TypeTime, Nullable: true},
		{Name: "last_failure", Type: field.TypeTime, Nullable: true},
		{Name: "config_errors", Type: field.TypeInt, Default: 0},
		{Name: "average_response_time", Type: field.TypeFloat64, Default: 0},
		{Name: "analytics_data", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "template_id", Type: field.TypeString},
	}
	// OrganizationProvidersTable holds the schema information for the "organization_providers" table.
	OrganizationProvidersTable = &schema.Table{
		Name:       "organization_providers",
		Columns:    OrganizationProvidersColumns,
		PrimaryKey: []*schema.Column{OrganizationProvidersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_providers_identity_providers_organization_providers",
				Columns:    []*schema.Column{OrganizationProvidersColumns[20]},
				RefColumns: []*schema.Column{IdentityProvidersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "organization_providers_organizations_organization_providers",
				Columns:    []*schema.Column{OrganizationProvidersColumns[21]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "organization_providers_provider_templates_organization_providers",
				Columns:    []*schema.Column{OrganizationProvidersColumns[22]},
				RefColumns: []*schema.Column{ProviderTemplatesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organizationprovider_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[21]},
			},
			{
				Name:    "organizationprovider_provider_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[20]},
			},
			{
				Name:    "organizationprovider_template_key",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[4]},
			},
			{
				Name:    "organizationprovider_template_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[22]},
			},
			{
				Name:    "organizationprovider_enabled",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[9]},
			},
			{
				Name:    "organizationprovider_organization_id_provider_id",
				Unique:  true,
				Columns: []*schema.Column{OrganizationProvidersColumns[21], OrganizationProvidersColumns[20]},
			},
			{
				Name:    "organizationprovider_organization_id_template_key",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[21], OrganizationProvidersColumns[4]},
			},
			{
				Name:    "organizationprovider_organization_id_template_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[21], OrganizationProvidersColumns[22]},
			},
			{
				Name:    "organizationprovider_organization_id_enabled",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[21], OrganizationProvidersColumns[9]},
			},
			{
				Name:    "organizationprovider_template_key_enabled",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[4], OrganizationProvidersColumns[9]},
			},
			{
				Name:    "organizationprovider_template_id_enabled",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[22], OrganizationProvidersColumns[9]},
			},
			{
				Name:    "organizationprovider_last_used",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[7]},
			},
			{
				Name:    "organizationprovider_usage_count",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[8]},
			},
			{
				Name:    "organizationprovider_success_rate",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[10]},
			},
			{
				Name:    "organizationprovider_enabled_at",
				Unique:  false,
				Columns: []*schema.Column{OrganizationProvidersColumns[6]},
			},
		},
	}
	// PasskeysColumns holds the columns for the "passkeys" table.
	PasskeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "credential_id", Type: field.TypeString, Unique: true},
		{Name: "public_key", Type: field.TypeBytes},
		{Name: "sign_count", Type: field.TypeInt, Default: 0},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "device_type", Type: field.TypeString, Nullable: true},
		{Name: "aaguid", Type: field.TypeString, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "transports", Type: field.TypeJSON, Nullable: true},
		{Name: "attestation", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "backup_state", Type: field.TypeBool, Nullable: true},
		{Name: "backup_eligible", Type: field.TypeBool, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString},
	}
	// PasskeysTable holds the schema information for the "passkeys" table.
	PasskeysTable = &schema.Table{
		Name:       "passkeys",
		Columns:    PasskeysColumns,
		PrimaryKey: []*schema.Column{PasskeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "passkeys_users_passkeys",
				Columns:    []*schema.Column{PasskeysColumns[18]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "passkey_user_id",
				Unique:  false,
				Columns: []*schema.Column{PasskeysColumns[18]},
			},
			{
				Name:    "passkey_credential_id",
				Unique:  false,
				Columns: []*schema.Column{PasskeysColumns[5]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString},
		{Name: "resource", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"platform", "organization", "application", "resource", "membership", "user_management", "self_access", "api_management", "rbac", "security", "integration", "system", "platform_management", "billing", "analytics", "compliance", "support"}},
		{Name: "applicable_user_types", Type: field.TypeJSON},
		{Name: "applicable_contexts", Type: field.TypeJSON},
		{Name: "conditions", Type: field.TypeString, Nullable: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "dangerous", Type: field.TypeBool, Default: false},
		{Name: "risk_level", Type: field.TypeInt, Default: 1},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "permission_group", Type: field.TypeString, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "permission_name",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[4]},
			},
			{
				Name:    "permission_resource_action",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[7], PermissionsColumns[8]},
			},
			{
				Name:    "permission_category",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[9]},
			},
			{
				Name:    "permission_system",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[13]},
			},
			{
				Name:    "permission_dangerous",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[14]},
			},
			{
				Name:    "permission_risk_level",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[15]},
			},
			{
				Name:    "permission_active",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[17]},
			},
			{
				Name:    "permission_permission_group",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[18]},
			},
			{
				Name:    "permission_created_by",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[16]},
			},
		},
	}
	// PermissionDependenciesColumns holds the columns for the "permission_dependencies" table.
	PermissionDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "dependency_type", Type: field.TypeEnum, Enums: []string{"required", "implied", "conditional"}, Default: "required"},
		{Name: "condition", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "permission_id", Type: field.TypeString},
		{Name: "required_permission_id", Type: field.TypeString},
	}
	// PermissionDependenciesTable holds the schema information for the "permission_dependencies" table.
	PermissionDependenciesTable = &schema.Table{
		Name:       "permission_dependencies",
		Columns:    PermissionDependenciesColumns,
		PrimaryKey: []*schema.Column{PermissionDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_dependencies_permissions_dependencies",
				Columns:    []*schema.Column{PermissionDependenciesColumns[8]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "permission_dependencies_permissions_dependents",
				Columns:    []*schema.Column{PermissionDependenciesColumns[9]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "permissiondependency_permission_id_required_permission_id",
				Unique:  true,
				Columns: []*schema.Column{PermissionDependenciesColumns[8], PermissionDependenciesColumns[9]},
			},
			{
				Name:    "permissiondependency_permission_id",
				Unique:  false,
				Columns: []*schema.Column{PermissionDependenciesColumns[8]},
			},
			{
				Name:    "permissiondependency_required_permission_id",
				Unique:  false,
				Columns: []*schema.Column{PermissionDependenciesColumns[9]},
			},
			{
				Name:    "permissiondependency_dependency_type",
				Unique:  false,
				Columns: []*schema.Column{PermissionDependenciesColumns[4]},
			},
			{
				Name:    "permissiondependency_active",
				Unique:  false,
				Columns: []*schema.Column{PermissionDependenciesColumns[6]},
			},
			{
				Name:    "permissiondependency_created_by",
				Unique:  false,
				Columns: []*schema.Column{PermissionDependenciesColumns[7]},
			},
		},
	}
	// ProviderTemplatesColumns holds the columns for the "provider_templates" table.
	ProviderTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "protocol", Type: field.TypeString},
		{Name: "icon_url", Type: field.TypeString, Nullable: true},
		{Name: "category", Type: field.TypeString, Default: "general"},
		{Name: "popular", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "config_template", Type: field.TypeJSON, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "required_fields", Type: field.TypeJSON, Nullable: true},
		{Name: "supported_features", Type: field.TypeJSON, Nullable: true},
		{Name: "documentation_url", Type: field.TypeString, Nullable: true},
		{Name: "setup_guide_url", Type: field.TypeString, Nullable: true},
		{Name: "usage_count", Type: field.TypeInt, Default: 0},
		{Name: "average_setup_time", Type: field.TypeFloat64, Nullable: true},
		{Name: "success_rate", Type: field.TypeFloat64, Default: 0},
		{Name: "popularity_rank", Type: field.TypeInt, Default: 0},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
	}
	// ProviderTemplatesTable holds the schema information for the "provider_templates" table.
	ProviderTemplatesTable = &schema.Table{
		Name:       "provider_templates",
		Columns:    ProviderTemplatesColumns,
		PrimaryKey: []*schema.Column{ProviderTemplatesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "providertemplate_key",
				Unique:  true,
				Columns: []*schema.Column{ProviderTemplatesColumns[4]},
			},
			{
				Name:    "providertemplate_category",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[10]},
			},
			{
				Name:    "providertemplate_type",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[7]},
			},
			{
				Name:    "providertemplate_popular",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[11]},
			},
			{
				Name:    "providertemplate_active",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[12]},
			},
			{
				Name:    "providertemplate_popularity_rank",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[22]},
			},
			{
				Name:    "providertemplate_category_popular",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[10], ProviderTemplatesColumns[11]},
			},
			{
				Name:    "providertemplate_type_active",
				Unique:  false,
				Columns: []*schema.Column{ProviderTemplatesColumns[7], ProviderTemplatesColumns[12]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "role_type", Type: field.TypeEnum, Enums: []string{"system", "organization", "application"}},
		{Name: "application_id", Type: field.TypeString, Nullable: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "priority", Type: field.TypeInt, Default: 0},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "applicable_user_types", Type: field.TypeJSON},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "parent_id", Type: field.TypeString, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_organizations_roles",
				Columns:    []*schema.Column{RolesColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "roles_roles_children",
				Columns:    []*schema.Column{RolesColumns[17]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "role_name_role_type_organization_id_application_id",
				Unique:  true,
				Columns: []*schema.Column{RolesColumns[4], RolesColumns[7], RolesColumns[16], RolesColumns[8]},
			},
			{
				Name:    "role_organization_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[16]},
			},
			{
				Name:    "role_application_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[8]},
			},
			{
				Name:    "role_role_type",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[7]},
			},
			{
				Name:    "role_system",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[9]},
			},
			{
				Name:    "role_is_default",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[10]},
			},
			{
				Name:    "role_priority",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[11]},
			},
			{
				Name:    "role_active",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[15]},
			},
			{
				Name:    "role_created_by",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[14]},
			},
			{
				Name:    "role_parent_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[17]},
			},
			{
				Name:    "role_role_type_organization_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[7], RolesColumns[16]},
			},
			{
				Name:    "role_role_type_application_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[7], RolesColumns[8]},
			},
			{
				Name:    "role_organization_id_is_default",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[16], RolesColumns[10]},
			},
			{
				Name:    "role_parent_id_active",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[17], RolesColumns[15]},
			},
		},
	}
	// SmsTemplatesColumns holds the columns for the "sms_templates" table.
	SmsTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "locale", Type: field.TypeString, Default: "en"},
		{Name: "max_length", Type: field.TypeInt, Default: 160},
		{Name: "message_type", Type: field.TypeString, Default: "transactional"},
		{Name: "estimated_segments", Type: field.TypeInt, Nullable: true, Default: 1},
		{Name: "estimated_cost", Type: field.TypeFloat64, Nullable: true, Default: 0},
		{Name: "currency", Type: field.TypeString, Nullable: true, Default: "USD"},
		{Name: "variables", Type: field.TypeJSON, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "last_used_at", Type: field.TypeTime, Nullable: true},
		{Name: "usage_count", Type: field.TypeInt, Default: 0},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// SmsTemplatesTable holds the schema information for the "sms_templates" table.
	SmsTemplatesTable = &schema.Table{
		Name:       "sms_templates",
		Columns:    SmsTemplatesColumns,
		PrimaryKey: []*schema.Column{SmsTemplatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sms_templates_organizations_sms_templates",
				Columns:    []*schema.Column{SmsTemplatesColumns[19]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "smstemplate_organization_id",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[19]},
			},
			{
				Name:    "smstemplate_type",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[6]},
			},
			{
				Name:    "smstemplate_message_type",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[11]},
			},
			{
				Name:    "smstemplate_active",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[7]},
			},
			{
				Name:    "smstemplate_system",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[8]},
			},
			{
				Name:    "smstemplate_organization_id_type",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[19], SmsTemplatesColumns[6]},
			},
			{
				Name:    "smstemplate_organization_id_type_locale",
				Unique:  true,
				Columns: []*schema.Column{SmsTemplatesColumns[19], SmsTemplatesColumns[6], SmsTemplatesColumns[9]},
			},
			{
				Name:    "smstemplate_usage_count",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[18]},
			},
			{
				Name:    "smstemplate_last_used_at",
				Unique:  false,
				Columns: []*schema.Column{SmsTemplatesColumns[17]},
			},
		},
	}
	// SSOStatesColumns holds the columns for the "sso_states" table.
	SSOStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "state", Type: field.TypeString, Unique: true},
		{Name: "data", Type: field.TypeString, Size: 4096},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "redirect_url", Type: field.TypeString, Nullable: true},
	}
	// SSOStatesTable holds the schema information for the "sso_states" table.
	SSOStatesTable = &schema.Table{
		Name:       "sso_states",
		Columns:    SSOStatesColumns,
		PrimaryKey: []*schema.Column{SSOStatesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "ssostate_expires_at",
				Unique:  false,
				Columns: []*schema.Column{SSOStatesColumns[6]},
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "device_id", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "last_active_at", Type: field.TypeTime},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "session_user_id",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[13]},
			},
			{
				Name:    "session_organization_id",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[8]},
			},
			{
				Name:    "session_token",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[3]},
			},
			{
				Name:    "session_expires_at",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[10]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password_hash", Type: field.TypeString, Nullable: true},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "phone_verified", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "blocked", Type: field.TypeBool, Default: false},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "last_password_change", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "profile_image_url", Type: field.TypeString, Nullable: true},
		{Name: "locale", Type: field.TypeString, Default: "en"},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "user_type", Type: field.TypeEnum, Enums: []string{"internal", "external", "end_user"}, Default: "external"},
		{Name: "primary_organization_id", Type: field.TypeString, Nullable: true},
		{Name: "is_platform_admin", Type: field.TypeBool, Default: false},
		{Name: "auth_provider", Type: field.TypeString, Default: "internal"},
		{Name: "external_id", Type: field.TypeString, Nullable: true},
		{Name: "customer_id", Type: field.TypeString, Nullable: true},
		{Name: "custom_attributes", Type: field.TypeJSON, Nullable: true},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "password_reset_token_expires", Type: field.TypeTime, Nullable: true},
		{Name: "password_reset_token", Type: field.TypeString, Nullable: true},
		{Name: "login_count", Type: field.TypeInt, Default: 0},
		{Name: "last_login_ip", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_organizations_users",
				Columns:    []*schema.Column{UsersColumns[31]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_organization_id_user_type_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[31], UsersColumns[19], UsersColumns[3]},
			},
			{
				Name:    "user_organization_id_user_type_username",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[31], UsersColumns[19], UsersColumns[7]},
			},
			{
				Name:    "user_organization_id_user_type_auth_provider_external_id",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[31], UsersColumns[19], UsersColumns[22], UsersColumns[23]},
			},
			{
				Name:    "user_organization_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[31]},
			},
			{
				Name:    "user_user_type",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[19]},
			},
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_username",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[7]},
			},
			{
				Name:    "user_is_platform_admin",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[21]},
			},
			{
				Name:    "user_auth_provider",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[22]},
			},
			{
				Name:    "user_active",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[11]},
			},
			{
				Name:    "user_blocked",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[12]},
			},
			{
				Name:    "user_last_login",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[13]},
			},
			{
				Name:    "user_customer_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[24]},
			},
			{
				Name:    "user_created_by",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[26]},
			},
			{
				Name:    "user_external_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[23]},
			},
			{
				Name:    "user_organization_id_user_type",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[31], UsersColumns[19]},
			},
			{
				Name:    "user_organization_id_active",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[31], UsersColumns[11]},
			},
			{
				Name:    "user_user_type_active",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[19], UsersColumns[11]},
			},
			{
				Name:    "user_auth_provider_external_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[22], UsersColumns[23]},
			},
		},
	}
	// UserPermissionsColumns holds the columns for the "user_permissions" table.
	UserPermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "context_type", Type: field.TypeEnum, Enums: []string{"platform", "organization", "application", "resource", "self", "global"}},
		{Name: "resource_type", Type: field.TypeString, Nullable: true},
		{Name: "resource_id", Type: field.TypeString, Nullable: true},
		{Name: "permission_type", Type: field.TypeEnum, Enums: []string{"grant", "deny"}, Default: "grant"},
		{Name: "assigned_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "conditions", Type: field.TypeJSON, Nullable: true},
		{Name: "reason", Type: field.TypeString, Nullable: true},
		{Name: "permission_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
		{Name: "assigned_by", Type: field.TypeString, Nullable: true},
		{Name: "context_id", Type: field.TypeString, Nullable: true},
	}
	// UserPermissionsTable holds the schema information for the "user_permissions" table.
	UserPermissionsTable = &schema.Table{
		Name:       "user_permissions",
		Columns:    UserPermissionsColumns,
		PrimaryKey: []*schema.Column{UserPermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_permissions_permissions_user_assignments",
				Columns:    []*schema.Column{UserPermissionsColumns[13]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_permissions_users_user_permissions",
				Columns:    []*schema.Column{UserPermissionsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_permissions_users_assigned_user_permissions",
				Columns:    []*schema.Column{UserPermissionsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_permissions_organizations_organization_context",
				Columns:    []*schema.Column{UserPermissionsColumns[16]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userpermission_user_id_permission_id_context_type_context_id_resource_type_resource_id",
				Unique:  true,
				Columns: []*schema.Column{UserPermissionsColumns[14], UserPermissionsColumns[13], UserPermissionsColumns[4], UserPermissionsColumns[16], UserPermissionsColumns[5], UserPermissionsColumns[6]},
			},
			{
				Name:    "userpermission_user_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[14]},
			},
			{
				Name:    "userpermission_permission_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[13]},
			},
			{
				Name:    "userpermission_context_type",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[4]},
			},
			{
				Name:    "userpermission_context_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[16]},
			},
			{
				Name:    "userpermission_resource_type",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[5]},
			},
			{
				Name:    "userpermission_resource_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[6]},
			},
			{
				Name:    "userpermission_permission_type",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[7]},
			},
			{
				Name:    "userpermission_active",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[10]},
			},
			{
				Name:    "userpermission_expires_at",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[9]},
			},
			{
				Name:    "userpermission_assigned_by",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[15]},
			},
			{
				Name:    "userpermission_user_id_context_type_context_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[14], UserPermissionsColumns[4], UserPermissionsColumns[16]},
			},
			{
				Name:    "userpermission_user_id_resource_type_resource_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[14], UserPermissionsColumns[5], UserPermissionsColumns[6]},
			},
			{
				Name:    "userpermission_context_type_context_id_active",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[4], UserPermissionsColumns[16], UserPermissionsColumns[10]},
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "context_type", Type: field.TypeEnum, Enums: []string{"platform", "organization", "application", "resource", "self", "global"}},
		{Name: "assigned_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "conditions", Type: field.TypeJSON, Nullable: true},
		{Name: "role_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
		{Name: "assigned_by", Type: field.TypeString, Nullable: true},
		{Name: "context_id", Type: field.TypeString, Nullable: true},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_roles_user_assignments",
				Columns:    []*schema.Column{UserRolesColumns[9]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_roles_users_user_roles",
				Columns:    []*schema.Column{UserRolesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_roles_users_assigned_user_roles",
				Columns:    []*schema.Column{UserRolesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_roles_organizations_organization_context",
				Columns:    []*schema.Column{UserRolesColumns[12]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userrole_user_id_role_id_context_type_context_id",
				Unique:  true,
				Columns: []*schema.Column{UserRolesColumns[10], UserRolesColumns[9], UserRolesColumns[4], UserRolesColumns[12]},
			},
			{
				Name:    "userrole_user_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[10]},
			},
			{
				Name:    "userrole_role_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[9]},
			},
			{
				Name:    "userrole_context_type",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[4]},
			},
			{
				Name:    "userrole_context_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[12]},
			},
			{
				Name:    "userrole_active",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[7]},
			},
			{
				Name:    "userrole_expires_at",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[6]},
			},
			{
				Name:    "userrole_assigned_by",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[11]},
			},
			{
				Name:    "userrole_user_id_context_type_context_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[10], UserRolesColumns[4], UserRolesColumns[12]},
			},
			{
				Name:    "userrole_context_type_context_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[4], UserRolesColumns[12]},
			},
		},
	}
	// VerificationsColumns holds the columns for the "verifications" table.
	VerificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeString},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "redirect_url", Type: field.TypeString, Nullable: true},
		{Name: "used", Type: field.TypeBool, Default: false},
		{Name: "used_at", Type: field.TypeTime, Nullable: true},
		{Name: "attempts", Type: field.TypeInt, Default: 0},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "attestation", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// VerificationsTable holds the schema information for the "verifications" table.
	VerificationsTable = &schema.Table{
		Name:       "verifications",
		Columns:    VerificationsColumns,
		PrimaryKey: []*schema.Column{VerificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "verifications_users_verifications",
				Columns:    []*schema.Column{VerificationsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "verification_user_id",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[17]},
			},
			{
				Name:    "verification_token",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[5]},
			},
			{
				Name:    "verification_email",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[6]},
			},
			{
				Name:    "verification_phone_number",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[7]},
			},
			{
				Name:    "verification_expires_at",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[12]},
			},
		},
	}
	// WebhooksColumns holds the columns for the "webhooks" table.
	WebhooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "secret", Type: field.TypeString},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "event_types", Type: field.TypeJSON},
		{Name: "version", Type: field.TypeString, Default: "v1"},
		{Name: "retry_count", Type: field.TypeInt, Default: 3},
		{Name: "timeout_ms", Type: field.TypeInt, Default: 5000},
		{Name: "format", Type: field.TypeEnum, Enums: []string{"json", "form"}, Default: "json"},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "headers", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
	}
	// WebhooksTable holds the schema information for the "webhooks" table.
	WebhooksTable = &schema.Table{
		Name:       "webhooks",
		Columns:    WebhooksColumns,
		PrimaryKey: []*schema.Column{WebhooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhooks_organizations_webhooks",
				Columns:    []*schema.Column{WebhooksColumns[15]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "webhook_organization_id",
				Unique:  false,
				Columns: []*schema.Column{WebhooksColumns[15]},
			},
		},
	}
	// WebhookEventsColumns holds the columns for the "webhook_events" table.
	WebhookEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "event_type", Type: field.TypeString},
		{Name: "headers", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "payload", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "delivered", Type: field.TypeBool, Default: false},
		{Name: "delivered_at", Type: field.TypeTime, Nullable: true},
		{Name: "attempts", Type: field.TypeInt, Default: 0},
		{Name: "next_retry", Type: field.TypeTime, Nullable: true},
		{Name: "status_code", Type: field.TypeInt, Nullable: true},
		{Name: "response_body", Type: field.TypeString, Nullable: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "webhook_id", Type: field.TypeString},
	}
	// WebhookEventsTable holds the schema information for the "webhook_events" table.
	WebhookEventsTable = &schema.Table{
		Name:       "webhook_events",
		Columns:    WebhookEventsColumns,
		PrimaryKey: []*schema.Column{WebhookEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhook_events_webhooks_events",
				Columns:    []*schema.Column{WebhookEventsColumns[14]},
				RefColumns: []*schema.Column{WebhooksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "webhookevent_webhook_id",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[14]},
			},
			{
				Name:    "webhookevent_event_type",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[4]},
			},
			{
				Name:    "webhookevent_delivered",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[7]},
			},
			{
				Name:    "webhookevent_next_retry",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[10]},
			},
		},
	}
	// OauthAuthorizationScopesColumns holds the columns for the "oauth_authorization_scopes" table.
	OauthAuthorizationScopesColumns = []*schema.Column{
		{Name: "oauth_authorization_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthAuthorizationScopesTable holds the schema information for the "oauth_authorization_scopes" table.
	OauthAuthorizationScopesTable = &schema.Table{
		Name:       "oauth_authorization_scopes",
		Columns:    OauthAuthorizationScopesColumns,
		PrimaryKey: []*schema.Column{OauthAuthorizationScopesColumns[0], OauthAuthorizationScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_authorization_scopes_oauth_authorization_id",
				Columns:    []*schema.Column{OauthAuthorizationScopesColumns[0]},
				RefColumns: []*schema.Column{OauthAuthorizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_authorization_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthAuthorizationScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OauthClientScopesColumns holds the columns for the "oauth_client_scopes" table.
	OauthClientScopesColumns = []*schema.Column{
		{Name: "oauth_client_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthClientScopesTable holds the schema information for the "oauth_client_scopes" table.
	OauthClientScopesTable = &schema.Table{
		Name:       "oauth_client_scopes",
		Columns:    OauthClientScopesColumns,
		PrimaryKey: []*schema.Column{OauthClientScopesColumns[0], OauthClientScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_client_scopes_oauth_client_id",
				Columns:    []*schema.Column{OauthClientScopesColumns[0]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_client_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthClientScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OauthTokenScopesColumns holds the columns for the "oauth_token_scopes" table.
	OauthTokenScopesColumns = []*schema.Column{
		{Name: "oauth_token_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthTokenScopesTable holds the schema information for the "oauth_token_scopes" table.
	OauthTokenScopesTable = &schema.Table{
		Name:       "oauth_token_scopes",
		Columns:    OauthTokenScopesColumns,
		PrimaryKey: []*schema.Column{OauthTokenScopesColumns[0], OauthTokenScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_token_scopes_oauth_token_id",
				Columns:    []*schema.Column{OauthTokenScopesColumns[0]},
				RefColumns: []*schema.Column{OauthTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_token_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthTokenScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionRequiredPermissionsColumns holds the columns for the "permission_required_permissions" table.
	PermissionRequiredPermissionsColumns = []*schema.Column{
		{Name: "permission_id", Type: field.TypeString},
		{Name: "dependent_permission_id", Type: field.TypeString},
	}
	// PermissionRequiredPermissionsTable holds the schema information for the "permission_required_permissions" table.
	PermissionRequiredPermissionsTable = &schema.Table{
		Name:       "permission_required_permissions",
		Columns:    PermissionRequiredPermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionRequiredPermissionsColumns[0], PermissionRequiredPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_required_permissions_permission_id",
				Columns:    []*schema.Column{PermissionRequiredPermissionsColumns[0]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permission_required_permissions_dependent_permission_id",
				Columns:    []*schema.Column{PermissionRequiredPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeString},
		{Name: "permission_id", Type: field.TypeString},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0], RolePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_role_id",
				Columns:    []*schema.Column{RolePermissionsColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_permissions_permission_id",
				Columns:    []*schema.Column{RolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSystemRolesColumns holds the columns for the "user_system_roles" table.
	UserSystemRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "role_id", Type: field.TypeString},
	}
	// UserSystemRolesTable holds the schema information for the "user_system_roles" table.
	UserSystemRolesTable = &schema.Table{
		Name:       "user_system_roles",
		Columns:    UserSystemRolesColumns,
		PrimaryKey: []*schema.Column{UserSystemRolesColumns[0], UserSystemRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_system_roles_user_id",
				Columns:    []*schema.Column{UserSystemRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_system_roles_role_id",
				Columns:    []*schema.Column{UserSystemRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActivitiesTable,
		APIKeysTable,
		APIKeyActivitiesTable,
		AuditsTable,
		EmailTemplatesTable,
		FeatureFlagsTable,
		IdentityProvidersTable,
		MfAsTable,
		MembershipsTable,
		OauthAuthorizationsTable,
		OauthClientsTable,
		OauthScopesTable,
		OauthTokensTable,
		OrganizationsTable,
		OrganizationFeaturesTable,
		OrganizationProvidersTable,
		PasskeysTable,
		PermissionsTable,
		PermissionDependenciesTable,
		ProviderTemplatesTable,
		RolesTable,
		SmsTemplatesTable,
		SSOStatesTable,
		SessionsTable,
		UsersTable,
		UserPermissionsTable,
		UserRolesTable,
		VerificationsTable,
		WebhooksTable,
		WebhookEventsTable,
		OauthAuthorizationScopesTable,
		OauthClientScopesTable,
		OauthTokenScopesTable,
		PermissionRequiredPermissionsTable,
		RolePermissionsTable,
		UserSystemRolesTable,
	}
)

func init() {
	ActivitiesTable.ForeignKeys[0].RefTable = OrganizationsTable
	ActivitiesTable.ForeignKeys[1].RefTable = SessionsTable
	ActivitiesTable.ForeignKeys[2].RefTable = UsersTable
	APIKeysTable.ForeignKeys[0].RefTable = OrganizationsTable
	APIKeysTable.ForeignKeys[1].RefTable = UsersTable
	APIKeyActivitiesTable.ForeignKeys[0].RefTable = APIKeysTable
	AuditsTable.ForeignKeys[0].RefTable = OrganizationsTable
	AuditsTable.ForeignKeys[1].RefTable = SessionsTable
	AuditsTable.ForeignKeys[2].RefTable = UsersTable
	EmailTemplatesTable.ForeignKeys[0].RefTable = OrganizationsTable
	IdentityProvidersTable.ForeignKeys[0].RefTable = OrganizationsTable
	MfAsTable.ForeignKeys[0].RefTable = UsersTable
	MembershipsTable.ForeignKeys[0].RefTable = OrganizationsTable
	MembershipsTable.ForeignKeys[1].RefTable = RolesTable
	MembershipsTable.ForeignKeys[2].RefTable = UsersTable
	MembershipsTable.ForeignKeys[3].RefTable = UsersTable
	OauthAuthorizationsTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthAuthorizationsTable.ForeignKeys[1].RefTable = UsersTable
	OauthClientsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OauthTokensTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthTokensTable.ForeignKeys[1].RefTable = UsersTable
	OrganizationFeaturesTable.ForeignKeys[0].RefTable = FeatureFlagsTable
	OrganizationFeaturesTable.ForeignKeys[1].RefTable = OrganizationsTable
	OrganizationProvidersTable.ForeignKeys[0].RefTable = IdentityProvidersTable
	OrganizationProvidersTable.ForeignKeys[1].RefTable = OrganizationsTable
	OrganizationProvidersTable.ForeignKeys[2].RefTable = ProviderTemplatesTable
	PasskeysTable.ForeignKeys[0].RefTable = UsersTable
	PermissionDependenciesTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionDependenciesTable.ForeignKeys[1].RefTable = PermissionsTable
	RolesTable.ForeignKeys[0].RefTable = OrganizationsTable
	RolesTable.ForeignKeys[1].RefTable = RolesTable
	SmsTemplatesTable.ForeignKeys[0].RefTable = OrganizationsTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = OrganizationsTable
	UserPermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	UserPermissionsTable.ForeignKeys[1].RefTable = UsersTable
	UserPermissionsTable.ForeignKeys[2].RefTable = UsersTable
	UserPermissionsTable.ForeignKeys[3].RefTable = OrganizationsTable
	UserRolesTable.ForeignKeys[0].RefTable = RolesTable
	UserRolesTable.ForeignKeys[1].RefTable = UsersTable
	UserRolesTable.ForeignKeys[2].RefTable = UsersTable
	UserRolesTable.ForeignKeys[3].RefTable = OrganizationsTable
	VerificationsTable.ForeignKeys[0].RefTable = UsersTable
	WebhooksTable.ForeignKeys[0].RefTable = OrganizationsTable
	WebhookEventsTable.ForeignKeys[0].RefTable = WebhooksTable
	OauthAuthorizationScopesTable.ForeignKeys[0].RefTable = OauthAuthorizationsTable
	OauthAuthorizationScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	OauthClientScopesTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthClientScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	OauthTokenScopesTable.ForeignKeys[0].RefTable = OauthTokensTable
	OauthTokenScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	PermissionRequiredPermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionRequiredPermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	RolePermissionsTable.ForeignKeys[0].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	UserSystemRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserSystemRolesTable.ForeignKeys[1].RefTable = RolesTable
}
