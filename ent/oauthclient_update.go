// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
)

// OAuthClientUpdate is the builder for updating OAuthClient entities.
type OAuthClientUpdate struct {
	config
	hooks     []Hook
	mutation  *OAuthClientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OAuthClientUpdate builder.
func (ocu *OAuthClientUpdate) Where(ps ...predicate.OAuthClient) *OAuthClientUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetUpdatedAt sets the "updated_at" field.
func (ocu *OAuthClientUpdate) SetUpdatedAt(t time.Time) *OAuthClientUpdate {
	ocu.mutation.SetUpdatedAt(t)
	return ocu
}

// SetDeletedAt sets the "deleted_at" field.
func (ocu *OAuthClientUpdate) SetDeletedAt(t time.Time) *OAuthClientUpdate {
	ocu.mutation.SetDeletedAt(t)
	return ocu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableDeletedAt(t *time.Time) *OAuthClientUpdate {
	if t != nil {
		ocu.SetDeletedAt(*t)
	}
	return ocu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ocu *OAuthClientUpdate) ClearDeletedAt() *OAuthClientUpdate {
	ocu.mutation.ClearDeletedAt()
	return ocu
}

// SetClientID sets the "client_id" field.
func (ocu *OAuthClientUpdate) SetClientID(s string) *OAuthClientUpdate {
	ocu.mutation.SetClientID(s)
	return ocu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableClientID(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetClientID(*s)
	}
	return ocu
}

// SetClientSecret sets the "client_secret" field.
func (ocu *OAuthClientUpdate) SetClientSecret(s string) *OAuthClientUpdate {
	ocu.mutation.SetClientSecret(s)
	return ocu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableClientSecret(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetClientSecret(*s)
	}
	return ocu
}

// SetClientName sets the "client_name" field.
func (ocu *OAuthClientUpdate) SetClientName(s string) *OAuthClientUpdate {
	ocu.mutation.SetClientName(s)
	return ocu
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableClientName(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetClientName(*s)
	}
	return ocu
}

// SetClientDescription sets the "client_description" field.
func (ocu *OAuthClientUpdate) SetClientDescription(s string) *OAuthClientUpdate {
	ocu.mutation.SetClientDescription(s)
	return ocu
}

// SetNillableClientDescription sets the "client_description" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableClientDescription(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetClientDescription(*s)
	}
	return ocu
}

// ClearClientDescription clears the value of the "client_description" field.
func (ocu *OAuthClientUpdate) ClearClientDescription() *OAuthClientUpdate {
	ocu.mutation.ClearClientDescription()
	return ocu
}

// SetClientURI sets the "client_uri" field.
func (ocu *OAuthClientUpdate) SetClientURI(s string) *OAuthClientUpdate {
	ocu.mutation.SetClientURI(s)
	return ocu
}

// SetNillableClientURI sets the "client_uri" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableClientURI(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetClientURI(*s)
	}
	return ocu
}

// ClearClientURI clears the value of the "client_uri" field.
func (ocu *OAuthClientUpdate) ClearClientURI() *OAuthClientUpdate {
	ocu.mutation.ClearClientURI()
	return ocu
}

// SetLogoURI sets the "logo_uri" field.
func (ocu *OAuthClientUpdate) SetLogoURI(s string) *OAuthClientUpdate {
	ocu.mutation.SetLogoURI(s)
	return ocu
}

// SetNillableLogoURI sets the "logo_uri" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableLogoURI(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetLogoURI(*s)
	}
	return ocu
}

// ClearLogoURI clears the value of the "logo_uri" field.
func (ocu *OAuthClientUpdate) ClearLogoURI() *OAuthClientUpdate {
	ocu.mutation.ClearLogoURI()
	return ocu
}

// SetRedirectUris sets the "redirect_uris" field.
func (ocu *OAuthClientUpdate) SetRedirectUris(s []string) *OAuthClientUpdate {
	ocu.mutation.SetRedirectUris(s)
	return ocu
}

// AppendRedirectUris appends s to the "redirect_uris" field.
func (ocu *OAuthClientUpdate) AppendRedirectUris(s []string) *OAuthClientUpdate {
	ocu.mutation.AppendRedirectUris(s)
	return ocu
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (ocu *OAuthClientUpdate) SetPostLogoutRedirectUris(s []string) *OAuthClientUpdate {
	ocu.mutation.SetPostLogoutRedirectUris(s)
	return ocu
}

// AppendPostLogoutRedirectUris appends s to the "post_logout_redirect_uris" field.
func (ocu *OAuthClientUpdate) AppendPostLogoutRedirectUris(s []string) *OAuthClientUpdate {
	ocu.mutation.AppendPostLogoutRedirectUris(s)
	return ocu
}

// ClearPostLogoutRedirectUris clears the value of the "post_logout_redirect_uris" field.
func (ocu *OAuthClientUpdate) ClearPostLogoutRedirectUris() *OAuthClientUpdate {
	ocu.mutation.ClearPostLogoutRedirectUris()
	return ocu
}

// SetOrganizationID sets the "organization_id" field.
func (ocu *OAuthClientUpdate) SetOrganizationID(x xid.ID) *OAuthClientUpdate {
	ocu.mutation.SetOrganizationID(x)
	return ocu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableOrganizationID(x *xid.ID) *OAuthClientUpdate {
	if x != nil {
		ocu.SetOrganizationID(*x)
	}
	return ocu
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (ocu *OAuthClientUpdate) ClearOrganizationID() *OAuthClientUpdate {
	ocu.mutation.ClearOrganizationID()
	return ocu
}

// SetPublic sets the "public" field.
func (ocu *OAuthClientUpdate) SetPublic(b bool) *OAuthClientUpdate {
	ocu.mutation.SetPublic(b)
	return ocu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillablePublic(b *bool) *OAuthClientUpdate {
	if b != nil {
		ocu.SetPublic(*b)
	}
	return ocu
}

// SetActive sets the "active" field.
func (ocu *OAuthClientUpdate) SetActive(b bool) *OAuthClientUpdate {
	ocu.mutation.SetActive(b)
	return ocu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableActive(b *bool) *OAuthClientUpdate {
	if b != nil {
		ocu.SetActive(*b)
	}
	return ocu
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (ocu *OAuthClientUpdate) SetAllowedCorsOrigins(s []string) *OAuthClientUpdate {
	ocu.mutation.SetAllowedCorsOrigins(s)
	return ocu
}

// AppendAllowedCorsOrigins appends s to the "allowed_cors_origins" field.
func (ocu *OAuthClientUpdate) AppendAllowedCorsOrigins(s []string) *OAuthClientUpdate {
	ocu.mutation.AppendAllowedCorsOrigins(s)
	return ocu
}

// ClearAllowedCorsOrigins clears the value of the "allowed_cors_origins" field.
func (ocu *OAuthClientUpdate) ClearAllowedCorsOrigins() *OAuthClientUpdate {
	ocu.mutation.ClearAllowedCorsOrigins()
	return ocu
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (ocu *OAuthClientUpdate) SetAllowedGrantTypes(s []string) *OAuthClientUpdate {
	ocu.mutation.SetAllowedGrantTypes(s)
	return ocu
}

// AppendAllowedGrantTypes appends s to the "allowed_grant_types" field.
func (ocu *OAuthClientUpdate) AppendAllowedGrantTypes(s []string) *OAuthClientUpdate {
	ocu.mutation.AppendAllowedGrantTypes(s)
	return ocu
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (ocu *OAuthClientUpdate) SetTokenExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.ResetTokenExpirySeconds()
	ocu.mutation.SetTokenExpirySeconds(i)
	return ocu
}

// SetNillableTokenExpirySeconds sets the "token_expiry_seconds" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableTokenExpirySeconds(i *int) *OAuthClientUpdate {
	if i != nil {
		ocu.SetTokenExpirySeconds(*i)
	}
	return ocu
}

// AddTokenExpirySeconds adds i to the "token_expiry_seconds" field.
func (ocu *OAuthClientUpdate) AddTokenExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.AddTokenExpirySeconds(i)
	return ocu
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (ocu *OAuthClientUpdate) SetRefreshTokenExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.ResetRefreshTokenExpirySeconds()
	ocu.mutation.SetRefreshTokenExpirySeconds(i)
	return ocu
}

// SetNillableRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableRefreshTokenExpirySeconds(i *int) *OAuthClientUpdate {
	if i != nil {
		ocu.SetRefreshTokenExpirySeconds(*i)
	}
	return ocu
}

// AddRefreshTokenExpirySeconds adds i to the "refresh_token_expiry_seconds" field.
func (ocu *OAuthClientUpdate) AddRefreshTokenExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.AddRefreshTokenExpirySeconds(i)
	return ocu
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (ocu *OAuthClientUpdate) SetAuthCodeExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.ResetAuthCodeExpirySeconds()
	ocu.mutation.SetAuthCodeExpirySeconds(i)
	return ocu
}

// SetNillableAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableAuthCodeExpirySeconds(i *int) *OAuthClientUpdate {
	if i != nil {
		ocu.SetAuthCodeExpirySeconds(*i)
	}
	return ocu
}

// AddAuthCodeExpirySeconds adds i to the "auth_code_expiry_seconds" field.
func (ocu *OAuthClientUpdate) AddAuthCodeExpirySeconds(i int) *OAuthClientUpdate {
	ocu.mutation.AddAuthCodeExpirySeconds(i)
	return ocu
}

// SetRequiresPkce sets the "requires_pkce" field.
func (ocu *OAuthClientUpdate) SetRequiresPkce(b bool) *OAuthClientUpdate {
	ocu.mutation.SetRequiresPkce(b)
	return ocu
}

// SetNillableRequiresPkce sets the "requires_pkce" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableRequiresPkce(b *bool) *OAuthClientUpdate {
	if b != nil {
		ocu.SetRequiresPkce(*b)
	}
	return ocu
}

// SetRequiresConsent sets the "requires_consent" field.
func (ocu *OAuthClientUpdate) SetRequiresConsent(b bool) *OAuthClientUpdate {
	ocu.mutation.SetRequiresConsent(b)
	return ocu
}

// SetNillableRequiresConsent sets the "requires_consent" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableRequiresConsent(b *bool) *OAuthClientUpdate {
	if b != nil {
		ocu.SetRequiresConsent(*b)
	}
	return ocu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ocu *OAuthClientUpdate) SetOrganization(o *Organization) *OAuthClientUpdate {
	return ocu.SetOrganizationID(o.ID)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (ocu *OAuthClientUpdate) AddTokenIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.AddTokenIDs(ids...)
	return ocu
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (ocu *OAuthClientUpdate) AddTokens(o ...*OAuthToken) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (ocu *OAuthClientUpdate) AddAuthorizationIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.AddAuthorizationIDs(ids...)
	return ocu
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (ocu *OAuthClientUpdate) AddAuthorizations(o ...*OAuthAuthorization) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.AddAuthorizationIDs(ids...)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (ocu *OAuthClientUpdate) AddScopeIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.AddScopeIDs(ids...)
	return ocu
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (ocu *OAuthClientUpdate) AddScopes(o ...*OAuthScope) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.AddScopeIDs(ids...)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (ocu *OAuthClientUpdate) Mutation() *OAuthClientMutation {
	return ocu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ocu *OAuthClientUpdate) ClearOrganization() *OAuthClientUpdate {
	ocu.mutation.ClearOrganization()
	return ocu
}

// ClearTokens clears all "tokens" edges to the OAuthToken entity.
func (ocu *OAuthClientUpdate) ClearTokens() *OAuthClientUpdate {
	ocu.mutation.ClearTokens()
	return ocu
}

// RemoveTokenIDs removes the "tokens" edge to OAuthToken entities by IDs.
func (ocu *OAuthClientUpdate) RemoveTokenIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.RemoveTokenIDs(ids...)
	return ocu
}

// RemoveTokens removes "tokens" edges to OAuthToken entities.
func (ocu *OAuthClientUpdate) RemoveTokens(o ...*OAuthToken) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.RemoveTokenIDs(ids...)
}

// ClearAuthorizations clears all "authorizations" edges to the OAuthAuthorization entity.
func (ocu *OAuthClientUpdate) ClearAuthorizations() *OAuthClientUpdate {
	ocu.mutation.ClearAuthorizations()
	return ocu
}

// RemoveAuthorizationIDs removes the "authorizations" edge to OAuthAuthorization entities by IDs.
func (ocu *OAuthClientUpdate) RemoveAuthorizationIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.RemoveAuthorizationIDs(ids...)
	return ocu
}

// RemoveAuthorizations removes "authorizations" edges to OAuthAuthorization entities.
func (ocu *OAuthClientUpdate) RemoveAuthorizations(o ...*OAuthAuthorization) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.RemoveAuthorizationIDs(ids...)
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (ocu *OAuthClientUpdate) ClearScopes() *OAuthClientUpdate {
	ocu.mutation.ClearScopes()
	return ocu
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (ocu *OAuthClientUpdate) RemoveScopeIDs(ids ...xid.ID) *OAuthClientUpdate {
	ocu.mutation.RemoveScopeIDs(ids...)
	return ocu
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (ocu *OAuthClientUpdate) RemoveScopes(o ...*OAuthScope) *OAuthClientUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocu.RemoveScopeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OAuthClientUpdate) Save(ctx context.Context) (int, error) {
	ocu.defaults()
	return withHooks(ctx, ocu.sqlSave, ocu.mutation, ocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OAuthClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OAuthClientUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OAuthClientUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocu *OAuthClientUpdate) defaults() {
	if _, ok := ocu.mutation.UpdatedAt(); !ok {
		v := oauthclient.UpdateDefaultUpdatedAt()
		ocu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocu *OAuthClientUpdate) check() error {
	if v, ok := ocu.mutation.ClientID(); ok {
		if err := oauthclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_id": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.ClientSecret(); ok {
		if err := oauthclient.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_secret": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.ClientName(); ok {
		if err := oauthclient.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocu *OAuthClientUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthClientUpdate {
	ocu.modifiers = append(ocu.modifiers, modifiers...)
	return ocu
}

func (ocu *OAuthClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthclient.Table, oauthclient.Columns, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ocu.mutation.DeletedAt(); ok {
		_spec.SetField(oauthclient.FieldDeletedAt, field.TypeTime, value)
	}
	if ocu.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthclient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ocu.mutation.ClientID(); ok {
		_spec.SetField(oauthclient.FieldClientID, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ClientSecret(); ok {
		_spec.SetField(oauthclient.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ClientName(); ok {
		_spec.SetField(oauthclient.FieldClientName, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ClientDescription(); ok {
		_spec.SetField(oauthclient.FieldClientDescription, field.TypeString, value)
	}
	if ocu.mutation.ClientDescriptionCleared() {
		_spec.ClearField(oauthclient.FieldClientDescription, field.TypeString)
	}
	if value, ok := ocu.mutation.ClientURI(); ok {
		_spec.SetField(oauthclient.FieldClientURI, field.TypeString, value)
	}
	if ocu.mutation.ClientURICleared() {
		_spec.ClearField(oauthclient.FieldClientURI, field.TypeString)
	}
	if value, ok := ocu.mutation.LogoURI(); ok {
		_spec.SetField(oauthclient.FieldLogoURI, field.TypeString, value)
	}
	if ocu.mutation.LogoURICleared() {
		_spec.ClearField(oauthclient.FieldLogoURI, field.TypeString)
	}
	if value, ok := ocu.mutation.RedirectUris(); ok {
		_spec.SetField(oauthclient.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := ocu.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldRedirectUris, value)
		})
	}
	if value, ok := ocu.mutation.PostLogoutRedirectUris(); ok {
		_spec.SetField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON, value)
	}
	if value, ok := ocu.mutation.AppendedPostLogoutRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldPostLogoutRedirectUris, value)
		})
	}
	if ocu.mutation.PostLogoutRedirectUrisCleared() {
		_spec.ClearField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON)
	}
	if value, ok := ocu.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
	}
	if value, ok := ocu.mutation.Active(); ok {
		_spec.SetField(oauthclient.FieldActive, field.TypeBool, value)
	}
	if value, ok := ocu.mutation.AllowedCorsOrigins(); ok {
		_spec.SetField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON, value)
	}
	if value, ok := ocu.mutation.AppendedAllowedCorsOrigins(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldAllowedCorsOrigins, value)
		})
	}
	if ocu.mutation.AllowedCorsOriginsCleared() {
		_spec.ClearField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON)
	}
	if value, ok := ocu.mutation.AllowedGrantTypes(); ok {
		_spec.SetField(oauthclient.FieldAllowedGrantTypes, field.TypeJSON, value)
	}
	if value, ok := ocu.mutation.AppendedAllowedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldAllowedGrantTypes, value)
		})
	}
	if value, ok := ocu.mutation.TokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.AddedTokenExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.RefreshTokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.AddedRefreshTokenExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.AuthCodeExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.AddedAuthCodeExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocu.mutation.RequiresPkce(); ok {
		_spec.SetField(oauthclient.FieldRequiresPkce, field.TypeBool, value)
	}
	if value, ok := ocu.mutation.RequiresConsent(); ok {
		_spec.SetField(oauthclient.FieldRequiresConsent, field.TypeBool, value)
	}
	if ocu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !ocu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.AuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.RemovedAuthorizationsIDs(); len(nodes) > 0 && !ocu.mutation.AuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.RemovedScopesIDs(); len(nodes) > 0 && !ocu.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ocu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ocu.mutation.done = true
	return n, nil
}

// OAuthClientUpdateOne is the builder for updating a single OAuthClient entity.
type OAuthClientUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OAuthClientMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ocuo *OAuthClientUpdateOne) SetUpdatedAt(t time.Time) *OAuthClientUpdateOne {
	ocuo.mutation.SetUpdatedAt(t)
	return ocuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ocuo *OAuthClientUpdateOne) SetDeletedAt(t time.Time) *OAuthClientUpdateOne {
	ocuo.mutation.SetDeletedAt(t)
	return ocuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableDeletedAt(t *time.Time) *OAuthClientUpdateOne {
	if t != nil {
		ocuo.SetDeletedAt(*t)
	}
	return ocuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ocuo *OAuthClientUpdateOne) ClearDeletedAt() *OAuthClientUpdateOne {
	ocuo.mutation.ClearDeletedAt()
	return ocuo
}

// SetClientID sets the "client_id" field.
func (ocuo *OAuthClientUpdateOne) SetClientID(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetClientID(s)
	return ocuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableClientID(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetClientID(*s)
	}
	return ocuo
}

// SetClientSecret sets the "client_secret" field.
func (ocuo *OAuthClientUpdateOne) SetClientSecret(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetClientSecret(s)
	return ocuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableClientSecret(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetClientSecret(*s)
	}
	return ocuo
}

// SetClientName sets the "client_name" field.
func (ocuo *OAuthClientUpdateOne) SetClientName(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetClientName(s)
	return ocuo
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableClientName(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetClientName(*s)
	}
	return ocuo
}

// SetClientDescription sets the "client_description" field.
func (ocuo *OAuthClientUpdateOne) SetClientDescription(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetClientDescription(s)
	return ocuo
}

// SetNillableClientDescription sets the "client_description" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableClientDescription(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetClientDescription(*s)
	}
	return ocuo
}

// ClearClientDescription clears the value of the "client_description" field.
func (ocuo *OAuthClientUpdateOne) ClearClientDescription() *OAuthClientUpdateOne {
	ocuo.mutation.ClearClientDescription()
	return ocuo
}

// SetClientURI sets the "client_uri" field.
func (ocuo *OAuthClientUpdateOne) SetClientURI(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetClientURI(s)
	return ocuo
}

// SetNillableClientURI sets the "client_uri" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableClientURI(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetClientURI(*s)
	}
	return ocuo
}

// ClearClientURI clears the value of the "client_uri" field.
func (ocuo *OAuthClientUpdateOne) ClearClientURI() *OAuthClientUpdateOne {
	ocuo.mutation.ClearClientURI()
	return ocuo
}

// SetLogoURI sets the "logo_uri" field.
func (ocuo *OAuthClientUpdateOne) SetLogoURI(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetLogoURI(s)
	return ocuo
}

// SetNillableLogoURI sets the "logo_uri" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableLogoURI(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetLogoURI(*s)
	}
	return ocuo
}

// ClearLogoURI clears the value of the "logo_uri" field.
func (ocuo *OAuthClientUpdateOne) ClearLogoURI() *OAuthClientUpdateOne {
	ocuo.mutation.ClearLogoURI()
	return ocuo
}

// SetRedirectUris sets the "redirect_uris" field.
func (ocuo *OAuthClientUpdateOne) SetRedirectUris(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.SetRedirectUris(s)
	return ocuo
}

// AppendRedirectUris appends s to the "redirect_uris" field.
func (ocuo *OAuthClientUpdateOne) AppendRedirectUris(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.AppendRedirectUris(s)
	return ocuo
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (ocuo *OAuthClientUpdateOne) SetPostLogoutRedirectUris(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.SetPostLogoutRedirectUris(s)
	return ocuo
}

// AppendPostLogoutRedirectUris appends s to the "post_logout_redirect_uris" field.
func (ocuo *OAuthClientUpdateOne) AppendPostLogoutRedirectUris(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.AppendPostLogoutRedirectUris(s)
	return ocuo
}

// ClearPostLogoutRedirectUris clears the value of the "post_logout_redirect_uris" field.
func (ocuo *OAuthClientUpdateOne) ClearPostLogoutRedirectUris() *OAuthClientUpdateOne {
	ocuo.mutation.ClearPostLogoutRedirectUris()
	return ocuo
}

// SetOrganizationID sets the "organization_id" field.
func (ocuo *OAuthClientUpdateOne) SetOrganizationID(x xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.SetOrganizationID(x)
	return ocuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableOrganizationID(x *xid.ID) *OAuthClientUpdateOne {
	if x != nil {
		ocuo.SetOrganizationID(*x)
	}
	return ocuo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (ocuo *OAuthClientUpdateOne) ClearOrganizationID() *OAuthClientUpdateOne {
	ocuo.mutation.ClearOrganizationID()
	return ocuo
}

// SetPublic sets the "public" field.
func (ocuo *OAuthClientUpdateOne) SetPublic(b bool) *OAuthClientUpdateOne {
	ocuo.mutation.SetPublic(b)
	return ocuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillablePublic(b *bool) *OAuthClientUpdateOne {
	if b != nil {
		ocuo.SetPublic(*b)
	}
	return ocuo
}

// SetActive sets the "active" field.
func (ocuo *OAuthClientUpdateOne) SetActive(b bool) *OAuthClientUpdateOne {
	ocuo.mutation.SetActive(b)
	return ocuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableActive(b *bool) *OAuthClientUpdateOne {
	if b != nil {
		ocuo.SetActive(*b)
	}
	return ocuo
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (ocuo *OAuthClientUpdateOne) SetAllowedCorsOrigins(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.SetAllowedCorsOrigins(s)
	return ocuo
}

// AppendAllowedCorsOrigins appends s to the "allowed_cors_origins" field.
func (ocuo *OAuthClientUpdateOne) AppendAllowedCorsOrigins(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.AppendAllowedCorsOrigins(s)
	return ocuo
}

// ClearAllowedCorsOrigins clears the value of the "allowed_cors_origins" field.
func (ocuo *OAuthClientUpdateOne) ClearAllowedCorsOrigins() *OAuthClientUpdateOne {
	ocuo.mutation.ClearAllowedCorsOrigins()
	return ocuo
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (ocuo *OAuthClientUpdateOne) SetAllowedGrantTypes(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.SetAllowedGrantTypes(s)
	return ocuo
}

// AppendAllowedGrantTypes appends s to the "allowed_grant_types" field.
func (ocuo *OAuthClientUpdateOne) AppendAllowedGrantTypes(s []string) *OAuthClientUpdateOne {
	ocuo.mutation.AppendAllowedGrantTypes(s)
	return ocuo
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) SetTokenExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.ResetTokenExpirySeconds()
	ocuo.mutation.SetTokenExpirySeconds(i)
	return ocuo
}

// SetNillableTokenExpirySeconds sets the "token_expiry_seconds" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableTokenExpirySeconds(i *int) *OAuthClientUpdateOne {
	if i != nil {
		ocuo.SetTokenExpirySeconds(*i)
	}
	return ocuo
}

// AddTokenExpirySeconds adds i to the "token_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) AddTokenExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.AddTokenExpirySeconds(i)
	return ocuo
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) SetRefreshTokenExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.ResetRefreshTokenExpirySeconds()
	ocuo.mutation.SetRefreshTokenExpirySeconds(i)
	return ocuo
}

// SetNillableRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableRefreshTokenExpirySeconds(i *int) *OAuthClientUpdateOne {
	if i != nil {
		ocuo.SetRefreshTokenExpirySeconds(*i)
	}
	return ocuo
}

// AddRefreshTokenExpirySeconds adds i to the "refresh_token_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) AddRefreshTokenExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.AddRefreshTokenExpirySeconds(i)
	return ocuo
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) SetAuthCodeExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.ResetAuthCodeExpirySeconds()
	ocuo.mutation.SetAuthCodeExpirySeconds(i)
	return ocuo
}

// SetNillableAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableAuthCodeExpirySeconds(i *int) *OAuthClientUpdateOne {
	if i != nil {
		ocuo.SetAuthCodeExpirySeconds(*i)
	}
	return ocuo
}

// AddAuthCodeExpirySeconds adds i to the "auth_code_expiry_seconds" field.
func (ocuo *OAuthClientUpdateOne) AddAuthCodeExpirySeconds(i int) *OAuthClientUpdateOne {
	ocuo.mutation.AddAuthCodeExpirySeconds(i)
	return ocuo
}

// SetRequiresPkce sets the "requires_pkce" field.
func (ocuo *OAuthClientUpdateOne) SetRequiresPkce(b bool) *OAuthClientUpdateOne {
	ocuo.mutation.SetRequiresPkce(b)
	return ocuo
}

// SetNillableRequiresPkce sets the "requires_pkce" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableRequiresPkce(b *bool) *OAuthClientUpdateOne {
	if b != nil {
		ocuo.SetRequiresPkce(*b)
	}
	return ocuo
}

// SetRequiresConsent sets the "requires_consent" field.
func (ocuo *OAuthClientUpdateOne) SetRequiresConsent(b bool) *OAuthClientUpdateOne {
	ocuo.mutation.SetRequiresConsent(b)
	return ocuo
}

// SetNillableRequiresConsent sets the "requires_consent" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableRequiresConsent(b *bool) *OAuthClientUpdateOne {
	if b != nil {
		ocuo.SetRequiresConsent(*b)
	}
	return ocuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ocuo *OAuthClientUpdateOne) SetOrganization(o *Organization) *OAuthClientUpdateOne {
	return ocuo.SetOrganizationID(o.ID)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (ocuo *OAuthClientUpdateOne) AddTokenIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.AddTokenIDs(ids...)
	return ocuo
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (ocuo *OAuthClientUpdateOne) AddTokens(o ...*OAuthToken) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (ocuo *OAuthClientUpdateOne) AddAuthorizationIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.AddAuthorizationIDs(ids...)
	return ocuo
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (ocuo *OAuthClientUpdateOne) AddAuthorizations(o ...*OAuthAuthorization) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.AddAuthorizationIDs(ids...)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (ocuo *OAuthClientUpdateOne) AddScopeIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.AddScopeIDs(ids...)
	return ocuo
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (ocuo *OAuthClientUpdateOne) AddScopes(o ...*OAuthScope) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.AddScopeIDs(ids...)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (ocuo *OAuthClientUpdateOne) Mutation() *OAuthClientMutation {
	return ocuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ocuo *OAuthClientUpdateOne) ClearOrganization() *OAuthClientUpdateOne {
	ocuo.mutation.ClearOrganization()
	return ocuo
}

// ClearTokens clears all "tokens" edges to the OAuthToken entity.
func (ocuo *OAuthClientUpdateOne) ClearTokens() *OAuthClientUpdateOne {
	ocuo.mutation.ClearTokens()
	return ocuo
}

// RemoveTokenIDs removes the "tokens" edge to OAuthToken entities by IDs.
func (ocuo *OAuthClientUpdateOne) RemoveTokenIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.RemoveTokenIDs(ids...)
	return ocuo
}

// RemoveTokens removes "tokens" edges to OAuthToken entities.
func (ocuo *OAuthClientUpdateOne) RemoveTokens(o ...*OAuthToken) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.RemoveTokenIDs(ids...)
}

// ClearAuthorizations clears all "authorizations" edges to the OAuthAuthorization entity.
func (ocuo *OAuthClientUpdateOne) ClearAuthorizations() *OAuthClientUpdateOne {
	ocuo.mutation.ClearAuthorizations()
	return ocuo
}

// RemoveAuthorizationIDs removes the "authorizations" edge to OAuthAuthorization entities by IDs.
func (ocuo *OAuthClientUpdateOne) RemoveAuthorizationIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.RemoveAuthorizationIDs(ids...)
	return ocuo
}

// RemoveAuthorizations removes "authorizations" edges to OAuthAuthorization entities.
func (ocuo *OAuthClientUpdateOne) RemoveAuthorizations(o ...*OAuthAuthorization) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.RemoveAuthorizationIDs(ids...)
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (ocuo *OAuthClientUpdateOne) ClearScopes() *OAuthClientUpdateOne {
	ocuo.mutation.ClearScopes()
	return ocuo
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (ocuo *OAuthClientUpdateOne) RemoveScopeIDs(ids ...xid.ID) *OAuthClientUpdateOne {
	ocuo.mutation.RemoveScopeIDs(ids...)
	return ocuo
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (ocuo *OAuthClientUpdateOne) RemoveScopes(o ...*OAuthScope) *OAuthClientUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ocuo.RemoveScopeIDs(ids...)
}

// Where appends a list predicates to the OAuthClientUpdate builder.
func (ocuo *OAuthClientUpdateOne) Where(ps ...predicate.OAuthClient) *OAuthClientUpdateOne {
	ocuo.mutation.Where(ps...)
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OAuthClientUpdateOne) Select(field string, fields ...string) *OAuthClientUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OAuthClient entity.
func (ocuo *OAuthClientUpdateOne) Save(ctx context.Context) (*OAuthClient, error) {
	ocuo.defaults()
	return withHooks(ctx, ocuo.sqlSave, ocuo.mutation, ocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OAuthClientUpdateOne) SaveX(ctx context.Context) *OAuthClient {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OAuthClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OAuthClientUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocuo *OAuthClientUpdateOne) defaults() {
	if _, ok := ocuo.mutation.UpdatedAt(); !ok {
		v := oauthclient.UpdateDefaultUpdatedAt()
		ocuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocuo *OAuthClientUpdateOne) check() error {
	if v, ok := ocuo.mutation.ClientID(); ok {
		if err := oauthclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_id": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.ClientSecret(); ok {
		if err := oauthclient.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_secret": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.ClientName(); ok {
		if err := oauthclient.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocuo *OAuthClientUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthClientUpdateOne {
	ocuo.modifiers = append(ocuo.modifiers, modifiers...)
	return ocuo
}

func (ocuo *OAuthClientUpdateOne) sqlSave(ctx context.Context) (_node *OAuthClient, err error) {
	if err := ocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthclient.Table, oauthclient.Columns, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthclient.FieldID)
		for _, f := range fields {
			if !oauthclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ocuo.mutation.DeletedAt(); ok {
		_spec.SetField(oauthclient.FieldDeletedAt, field.TypeTime, value)
	}
	if ocuo.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthclient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ocuo.mutation.ClientID(); ok {
		_spec.SetField(oauthclient.FieldClientID, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ClientSecret(); ok {
		_spec.SetField(oauthclient.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ClientName(); ok {
		_spec.SetField(oauthclient.FieldClientName, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ClientDescription(); ok {
		_spec.SetField(oauthclient.FieldClientDescription, field.TypeString, value)
	}
	if ocuo.mutation.ClientDescriptionCleared() {
		_spec.ClearField(oauthclient.FieldClientDescription, field.TypeString)
	}
	if value, ok := ocuo.mutation.ClientURI(); ok {
		_spec.SetField(oauthclient.FieldClientURI, field.TypeString, value)
	}
	if ocuo.mutation.ClientURICleared() {
		_spec.ClearField(oauthclient.FieldClientURI, field.TypeString)
	}
	if value, ok := ocuo.mutation.LogoURI(); ok {
		_spec.SetField(oauthclient.FieldLogoURI, field.TypeString, value)
	}
	if ocuo.mutation.LogoURICleared() {
		_spec.ClearField(oauthclient.FieldLogoURI, field.TypeString)
	}
	if value, ok := ocuo.mutation.RedirectUris(); ok {
		_spec.SetField(oauthclient.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := ocuo.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldRedirectUris, value)
		})
	}
	if value, ok := ocuo.mutation.PostLogoutRedirectUris(); ok {
		_spec.SetField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON, value)
	}
	if value, ok := ocuo.mutation.AppendedPostLogoutRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldPostLogoutRedirectUris, value)
		})
	}
	if ocuo.mutation.PostLogoutRedirectUrisCleared() {
		_spec.ClearField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON)
	}
	if value, ok := ocuo.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
	}
	if value, ok := ocuo.mutation.Active(); ok {
		_spec.SetField(oauthclient.FieldActive, field.TypeBool, value)
	}
	if value, ok := ocuo.mutation.AllowedCorsOrigins(); ok {
		_spec.SetField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON, value)
	}
	if value, ok := ocuo.mutation.AppendedAllowedCorsOrigins(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldAllowedCorsOrigins, value)
		})
	}
	if ocuo.mutation.AllowedCorsOriginsCleared() {
		_spec.ClearField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON)
	}
	if value, ok := ocuo.mutation.AllowedGrantTypes(); ok {
		_spec.SetField(oauthclient.FieldAllowedGrantTypes, field.TypeJSON, value)
	}
	if value, ok := ocuo.mutation.AppendedAllowedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthclient.FieldAllowedGrantTypes, value)
		})
	}
	if value, ok := ocuo.mutation.TokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.AddedTokenExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.RefreshTokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.AddedRefreshTokenExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.AuthCodeExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.AddedAuthCodeExpirySeconds(); ok {
		_spec.AddField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
	}
	if value, ok := ocuo.mutation.RequiresPkce(); ok {
		_spec.SetField(oauthclient.FieldRequiresPkce, field.TypeBool, value)
	}
	if value, ok := ocuo.mutation.RequiresConsent(); ok {
		_spec.SetField(oauthclient.FieldRequiresConsent, field.TypeBool, value)
	}
	if ocuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !ocuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.AuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.RemovedAuthorizationsIDs(); len(nodes) > 0 && !ocuo.mutation.AuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.RemovedScopesIDs(); len(nodes) > 0 && !ocuo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ocuo.modifiers...)
	_node = &OAuthClient{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ocuo.mutation.done = true
	return _node, nil
}
