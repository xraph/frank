// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetResourceType sets the "resource_type" field.
func (ac *ActivityCreate) SetResourceType(mt model.ResourceType) *ActivityCreate {
	ac.mutation.SetResourceType(mt)
	return ac
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableResourceType(mt *model.ResourceType) *ActivityCreate {
	if mt != nil {
		ac.SetResourceType(*mt)
	}
	return ac
}

// SetResourceID sets the "resource_id" field.
func (ac *ActivityCreate) SetResourceID(x xid.ID) *ActivityCreate {
	ac.mutation.SetResourceID(x)
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *ActivityCreate) SetUserID(x xid.ID) *ActivityCreate {
	ac.mutation.SetUserID(x)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUserID(x *xid.ID) *ActivityCreate {
	if x != nil {
		ac.SetUserID(*x)
	}
	return ac
}

// SetOrganizationID sets the "organization_id" field.
func (ac *ActivityCreate) SetOrganizationID(x xid.ID) *ActivityCreate {
	ac.mutation.SetOrganizationID(x)
	return ac
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableOrganizationID(x *xid.ID) *ActivityCreate {
	if x != nil {
		ac.SetOrganizationID(*x)
	}
	return ac
}

// SetSessionID sets the "session_id" field.
func (ac *ActivityCreate) SetSessionID(x xid.ID) *ActivityCreate {
	ac.mutation.SetSessionID(x)
	return ac
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSessionID(x *xid.ID) *ActivityCreate {
	if x != nil {
		ac.SetSessionID(*x)
	}
	return ac
}

// SetAction sets the "action" field.
func (ac *ActivityCreate) SetAction(s string) *ActivityCreate {
	ac.mutation.SetAction(s)
	return ac
}

// SetCategory sets the "category" field.
func (ac *ActivityCreate) SetCategory(s string) *ActivityCreate {
	ac.mutation.SetCategory(s)
	return ac
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCategory(s *string) *ActivityCreate {
	if s != nil {
		ac.SetCategory(*s)
	}
	return ac
}

// SetSource sets the "source" field.
func (ac *ActivityCreate) SetSource(s string) *ActivityCreate {
	ac.mutation.SetSource(s)
	return ac
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSource(s *string) *ActivityCreate {
	if s != nil {
		ac.SetSource(*s)
	}
	return ac
}

// SetEndpoint sets the "endpoint" field.
func (ac *ActivityCreate) SetEndpoint(s string) *ActivityCreate {
	ac.mutation.SetEndpoint(s)
	return ac
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableEndpoint(s *string) *ActivityCreate {
	if s != nil {
		ac.SetEndpoint(*s)
	}
	return ac
}

// SetMethod sets the "method" field.
func (ac *ActivityCreate) SetMethod(s string) *ActivityCreate {
	ac.mutation.SetMethod(s)
	return ac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableMethod(s *string) *ActivityCreate {
	if s != nil {
		ac.SetMethod(*s)
	}
	return ac
}

// SetStatusCode sets the "status_code" field.
func (ac *ActivityCreate) SetStatusCode(i int) *ActivityCreate {
	ac.mutation.SetStatusCode(i)
	return ac
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableStatusCode(i *int) *ActivityCreate {
	if i != nil {
		ac.SetStatusCode(*i)
	}
	return ac
}

// SetResponseTime sets the "response_time" field.
func (ac *ActivityCreate) SetResponseTime(i int) *ActivityCreate {
	ac.mutation.SetResponseTime(i)
	return ac
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableResponseTime(i *int) *ActivityCreate {
	if i != nil {
		ac.SetResponseTime(*i)
	}
	return ac
}

// SetIPAddress sets the "ip_address" field.
func (ac *ActivityCreate) SetIPAddress(s string) *ActivityCreate {
	ac.mutation.SetIPAddress(s)
	return ac
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableIPAddress(s *string) *ActivityCreate {
	if s != nil {
		ac.SetIPAddress(*s)
	}
	return ac
}

// SetUserAgent sets the "user_agent" field.
func (ac *ActivityCreate) SetUserAgent(s string) *ActivityCreate {
	ac.mutation.SetUserAgent(s)
	return ac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUserAgent(s *string) *ActivityCreate {
	if s != nil {
		ac.SetUserAgent(*s)
	}
	return ac
}

// SetLocation sets the "location" field.
func (ac *ActivityCreate) SetLocation(s string) *ActivityCreate {
	ac.mutation.SetLocation(s)
	return ac
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableLocation(s *string) *ActivityCreate {
	if s != nil {
		ac.SetLocation(*s)
	}
	return ac
}

// SetSuccess sets the "success" field.
func (ac *ActivityCreate) SetSuccess(b bool) *ActivityCreate {
	ac.mutation.SetSuccess(b)
	return ac
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSuccess(b *bool) *ActivityCreate {
	if b != nil {
		ac.SetSuccess(*b)
	}
	return ac
}

// SetError sets the "error" field.
func (ac *ActivityCreate) SetError(s string) *ActivityCreate {
	ac.mutation.SetError(s)
	return ac
}

// SetNillableError sets the "error" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableError(s *string) *ActivityCreate {
	if s != nil {
		ac.SetError(*s)
	}
	return ac
}

// SetErrorCode sets the "error_code" field.
func (ac *ActivityCreate) SetErrorCode(s string) *ActivityCreate {
	ac.mutation.SetErrorCode(s)
	return ac
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableErrorCode(s *string) *ActivityCreate {
	if s != nil {
		ac.SetErrorCode(*s)
	}
	return ac
}

// SetSize sets the "size" field.
func (ac *ActivityCreate) SetSize(i int) *ActivityCreate {
	ac.mutation.SetSize(i)
	return ac
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSize(i *int) *ActivityCreate {
	if i != nil {
		ac.SetSize(*i)
	}
	return ac
}

// SetCount sets the "count" field.
func (ac *ActivityCreate) SetCount(i int) *ActivityCreate {
	ac.mutation.SetCount(i)
	return ac
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCount(i *int) *ActivityCreate {
	if i != nil {
		ac.SetCount(*i)
	}
	return ac
}

// SetValue sets the "value" field.
func (ac *ActivityCreate) SetValue(f float64) *ActivityCreate {
	ac.mutation.SetValue(f)
	return ac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableValue(f *float64) *ActivityCreate {
	if f != nil {
		ac.SetValue(*f)
	}
	return ac
}

// SetTimestamp sets the "timestamp" field.
func (ac *ActivityCreate) SetTimestamp(t time.Time) *ActivityCreate {
	ac.mutation.SetTimestamp(t)
	return ac
}

// SetExpiresAt sets the "expires_at" field.
func (ac *ActivityCreate) SetExpiresAt(t time.Time) *ActivityCreate {
	ac.mutation.SetExpiresAt(t)
	return ac
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableExpiresAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetExpiresAt(*t)
	}
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *ActivityCreate) SetMetadata(m map[string]interface{}) *ActivityCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetTags sets the "tags" field.
func (ac *ActivityCreate) SetTags(s []string) *ActivityCreate {
	ac.mutation.SetTags(s)
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(x xid.ID) *ActivityCreate {
	ac.mutation.SetID(x)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableID(x *xid.ID) *ActivityCreate {
	if x != nil {
		ac.SetID(*x)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *ActivityCreate) SetUser(u *User) *ActivityCreate {
	return ac.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ac *ActivityCreate) SetOrganization(o *Organization) *ActivityCreate {
	return ac.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (ac *ActivityCreate) SetSession(s *Session) *ActivityCreate {
	return ac.SetSessionID(s.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.ResourceType(); !ok {
		v := activity.DefaultResourceType
		ac.mutation.SetResourceType(v)
	}
	if _, ok := ac.mutation.Category(); !ok {
		v := activity.DefaultCategory
		ac.mutation.SetCategory(v)
	}
	if _, ok := ac.mutation.Success(); !ok {
		v := activity.DefaultSuccess
		ac.mutation.SetSuccess(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := activity.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "Activity.resource_type"`)}
	}
	if v, ok := ac.mutation.ResourceType(); ok {
		if err := activity.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "Activity.resource_id"`)}
	}
	if v, ok := ac.mutation.ResourceID(); ok {
		if err := activity.ResourceIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Activity.action"`)}
	}
	if v, ok := ac.mutation.Action(); ok {
		if err := activity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Activity.action": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Activity.category"`)}
	}
	if _, ok := ac.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "Activity.success"`)}
	}
	if _, ok := ac.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Activity.timestamp"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.ResourceType(); ok {
		_spec.SetField(activity.FieldResourceType, field.TypeEnum, value)
		_node.ResourceType = value
	}
	if value, ok := ac.mutation.ResourceID(); ok {
		_spec.SetField(activity.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := ac.mutation.Action(); ok {
		_spec.SetField(activity.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := ac.mutation.Category(); ok {
		_spec.SetField(activity.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ac.mutation.Source(); ok {
		_spec.SetField(activity.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := ac.mutation.Endpoint(); ok {
		_spec.SetField(activity.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := ac.mutation.Method(); ok {
		_spec.SetField(activity.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := ac.mutation.StatusCode(); ok {
		_spec.SetField(activity.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := ac.mutation.ResponseTime(); ok {
		_spec.SetField(activity.FieldResponseTime, field.TypeInt, value)
		_node.ResponseTime = value
	}
	if value, ok := ac.mutation.IPAddress(); ok {
		_spec.SetField(activity.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := ac.mutation.UserAgent(); ok {
		_spec.SetField(activity.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := ac.mutation.Location(); ok {
		_spec.SetField(activity.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ac.mutation.Success(); ok {
		_spec.SetField(activity.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := ac.mutation.Error(); ok {
		_spec.SetField(activity.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := ac.mutation.ErrorCode(); ok {
		_spec.SetField(activity.FieldErrorCode, field.TypeString, value)
		_node.ErrorCode = value
	}
	if value, ok := ac.mutation.Size(); ok {
		_spec.SetField(activity.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := ac.mutation.Count(); ok {
		_spec.SetField(activity.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := ac.mutation.Value(); ok {
		_spec.SetField(activity.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := ac.mutation.Timestamp(); ok {
		_spec.SetField(activity.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := ac.mutation.ExpiresAt(); ok {
		_spec.SetField(activity.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ac.mutation.Tags(); ok {
		_spec.SetField(activity.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SessionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.Create().
//		SetResourceType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetResourceType(v+v).
//		}).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertOne {
	ac.conflict = opts
	return &ActivityUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflictColumns(columns ...string) *ActivityUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertOne{
		create: ac,
	}
}

type (
	// ActivityUpsertOne is the builder for "upsert"-ing
	//  one Activity node.
	ActivityUpsertOne struct {
		create *ActivityCreate
	}

	// ActivityUpsert is the "OnConflict" setter.
	ActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetResourceType sets the "resource_type" field.
func (u *ActivityUpsert) SetResourceType(v model.ResourceType) *ActivityUpsert {
	u.Set(activity.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateResourceType() *ActivityUpsert {
	u.SetExcluded(activity.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *ActivityUpsert) SetResourceID(v xid.ID) *ActivityUpsert {
	u.Set(activity.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateResourceID() *ActivityUpsert {
	u.SetExcluded(activity.FieldResourceID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ActivityUpsert) SetUserID(v xid.ID) *ActivityUpsert {
	u.Set(activity.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateUserID() *ActivityUpsert {
	u.SetExcluded(activity.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ActivityUpsert) ClearUserID() *ActivityUpsert {
	u.SetNull(activity.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *ActivityUpsert) SetOrganizationID(v xid.ID) *ActivityUpsert {
	u.Set(activity.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateOrganizationID() *ActivityUpsert {
	u.SetExcluded(activity.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ActivityUpsert) ClearOrganizationID() *ActivityUpsert {
	u.SetNull(activity.FieldOrganizationID)
	return u
}

// SetSessionID sets the "session_id" field.
func (u *ActivityUpsert) SetSessionID(v xid.ID) *ActivityUpsert {
	u.Set(activity.FieldSessionID, v)
	return u
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSessionID() *ActivityUpsert {
	u.SetExcluded(activity.FieldSessionID)
	return u
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ActivityUpsert) ClearSessionID() *ActivityUpsert {
	u.SetNull(activity.FieldSessionID)
	return u
}

// SetAction sets the "action" field.
func (u *ActivityUpsert) SetAction(v string) *ActivityUpsert {
	u.Set(activity.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateAction() *ActivityUpsert {
	u.SetExcluded(activity.FieldAction)
	return u
}

// SetCategory sets the "category" field.
func (u *ActivityUpsert) SetCategory(v string) *ActivityUpsert {
	u.Set(activity.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateCategory() *ActivityUpsert {
	u.SetExcluded(activity.FieldCategory)
	return u
}

// SetSource sets the "source" field.
func (u *ActivityUpsert) SetSource(v string) *ActivityUpsert {
	u.Set(activity.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSource() *ActivityUpsert {
	u.SetExcluded(activity.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *ActivityUpsert) ClearSource() *ActivityUpsert {
	u.SetNull(activity.FieldSource)
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *ActivityUpsert) SetEndpoint(v string) *ActivityUpsert {
	u.Set(activity.FieldEndpoint, v)
	return u
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateEndpoint() *ActivityUpsert {
	u.SetExcluded(activity.FieldEndpoint)
	return u
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ActivityUpsert) ClearEndpoint() *ActivityUpsert {
	u.SetNull(activity.FieldEndpoint)
	return u
}

// SetMethod sets the "method" field.
func (u *ActivityUpsert) SetMethod(v string) *ActivityUpsert {
	u.Set(activity.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateMethod() *ActivityUpsert {
	u.SetExcluded(activity.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *ActivityUpsert) ClearMethod() *ActivityUpsert {
	u.SetNull(activity.FieldMethod)
	return u
}

// SetStatusCode sets the "status_code" field.
func (u *ActivityUpsert) SetStatusCode(v int) *ActivityUpsert {
	u.Set(activity.FieldStatusCode, v)
	return u
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateStatusCode() *ActivityUpsert {
	u.SetExcluded(activity.FieldStatusCode)
	return u
}

// AddStatusCode adds v to the "status_code" field.
func (u *ActivityUpsert) AddStatusCode(v int) *ActivityUpsert {
	u.Add(activity.FieldStatusCode, v)
	return u
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ActivityUpsert) ClearStatusCode() *ActivityUpsert {
	u.SetNull(activity.FieldStatusCode)
	return u
}

// SetResponseTime sets the "response_time" field.
func (u *ActivityUpsert) SetResponseTime(v int) *ActivityUpsert {
	u.Set(activity.FieldResponseTime, v)
	return u
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateResponseTime() *ActivityUpsert {
	u.SetExcluded(activity.FieldResponseTime)
	return u
}

// AddResponseTime adds v to the "response_time" field.
func (u *ActivityUpsert) AddResponseTime(v int) *ActivityUpsert {
	u.Add(activity.FieldResponseTime, v)
	return u
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ActivityUpsert) ClearResponseTime() *ActivityUpsert {
	u.SetNull(activity.FieldResponseTime)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityUpsert) SetIPAddress(v string) *ActivityUpsert {
	u.Set(activity.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateIPAddress() *ActivityUpsert {
	u.SetExcluded(activity.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityUpsert) ClearIPAddress() *ActivityUpsert {
	u.SetNull(activity.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityUpsert) SetUserAgent(v string) *ActivityUpsert {
	u.Set(activity.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateUserAgent() *ActivityUpsert {
	u.SetExcluded(activity.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityUpsert) ClearUserAgent() *ActivityUpsert {
	u.SetNull(activity.FieldUserAgent)
	return u
}

// SetLocation sets the "location" field.
func (u *ActivityUpsert) SetLocation(v string) *ActivityUpsert {
	u.Set(activity.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateLocation() *ActivityUpsert {
	u.SetExcluded(activity.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *ActivityUpsert) ClearLocation() *ActivityUpsert {
	u.SetNull(activity.FieldLocation)
	return u
}

// SetSuccess sets the "success" field.
func (u *ActivityUpsert) SetSuccess(v bool) *ActivityUpsert {
	u.Set(activity.FieldSuccess, v)
	return u
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSuccess() *ActivityUpsert {
	u.SetExcluded(activity.FieldSuccess)
	return u
}

// SetError sets the "error" field.
func (u *ActivityUpsert) SetError(v string) *ActivityUpsert {
	u.Set(activity.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateError() *ActivityUpsert {
	u.SetExcluded(activity.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *ActivityUpsert) ClearError() *ActivityUpsert {
	u.SetNull(activity.FieldError)
	return u
}

// SetErrorCode sets the "error_code" field.
func (u *ActivityUpsert) SetErrorCode(v string) *ActivityUpsert {
	u.Set(activity.FieldErrorCode, v)
	return u
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateErrorCode() *ActivityUpsert {
	u.SetExcluded(activity.FieldErrorCode)
	return u
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *ActivityUpsert) ClearErrorCode() *ActivityUpsert {
	u.SetNull(activity.FieldErrorCode)
	return u
}

// SetSize sets the "size" field.
func (u *ActivityUpsert) SetSize(v int) *ActivityUpsert {
	u.Set(activity.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSize() *ActivityUpsert {
	u.SetExcluded(activity.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *ActivityUpsert) AddSize(v int) *ActivityUpsert {
	u.Add(activity.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *ActivityUpsert) ClearSize() *ActivityUpsert {
	u.SetNull(activity.FieldSize)
	return u
}

// SetCount sets the "count" field.
func (u *ActivityUpsert) SetCount(v int) *ActivityUpsert {
	u.Set(activity.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateCount() *ActivityUpsert {
	u.SetExcluded(activity.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *ActivityUpsert) AddCount(v int) *ActivityUpsert {
	u.Add(activity.FieldCount, v)
	return u
}

// ClearCount clears the value of the "count" field.
func (u *ActivityUpsert) ClearCount() *ActivityUpsert {
	u.SetNull(activity.FieldCount)
	return u
}

// SetValue sets the "value" field.
func (u *ActivityUpsert) SetValue(v float64) *ActivityUpsert {
	u.Set(activity.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateValue() *ActivityUpsert {
	u.SetExcluded(activity.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *ActivityUpsert) AddValue(v float64) *ActivityUpsert {
	u.Add(activity.FieldValue, v)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *ActivityUpsert) ClearValue() *ActivityUpsert {
	u.SetNull(activity.FieldValue)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *ActivityUpsert) SetTimestamp(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateTimestamp() *ActivityUpsert {
	u.SetExcluded(activity.FieldTimestamp)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *ActivityUpsert) SetExpiresAt(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateExpiresAt() *ActivityUpsert {
	u.SetExcluded(activity.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ActivityUpsert) ClearExpiresAt() *ActivityUpsert {
	u.SetNull(activity.FieldExpiresAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ActivityUpsert) SetMetadata(v map[string]interface{}) *ActivityUpsert {
	u.Set(activity.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateMetadata() *ActivityUpsert {
	u.SetExcluded(activity.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityUpsert) ClearMetadata() *ActivityUpsert {
	u.SetNull(activity.FieldMetadata)
	return u
}

// SetTags sets the "tags" field.
func (u *ActivityUpsert) SetTags(v []string) *ActivityUpsert {
	u.Set(activity.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateTags() *ActivityUpsert {
	u.SetExcluded(activity.FieldTags)
	return u
}

// ClearTags clears the value of the "tags" field.
func (u *ActivityUpsert) ClearTags() *ActivityUpsert {
	u.SetNull(activity.FieldTags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertOne) UpdateNewValues() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(activity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityUpsertOne) Ignore() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertOne) DoNothing() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreate.OnConflict
// documentation for more info.
func (u *ActivityUpsertOne) Update(set func(*ActivityUpsert)) *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *ActivityUpsertOne) SetResourceType(v model.ResourceType) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateResourceType() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *ActivityUpsertOne) SetResourceID(v xid.ID) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateResourceID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResourceID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ActivityUpsertOne) SetUserID(v xid.ID) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateUserID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ActivityUpsertOne) ClearUserID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *ActivityUpsertOne) SetOrganizationID(v xid.ID) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateOrganizationID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ActivityUpsertOne) ClearOrganizationID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearOrganizationID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *ActivityUpsertOne) SetSessionID(v xid.ID) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSessionID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ActivityUpsertOne) ClearSessionID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSessionID()
	})
}

// SetAction sets the "action" field.
func (u *ActivityUpsertOne) SetAction(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateAction() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateAction()
	})
}

// SetCategory sets the "category" field.
func (u *ActivityUpsertOne) SetCategory(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateCategory() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCategory()
	})
}

// SetSource sets the "source" field.
func (u *ActivityUpsertOne) SetSource(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSource() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ActivityUpsertOne) ClearSource() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSource()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *ActivityUpsertOne) SetEndpoint(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateEndpoint() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateEndpoint()
	})
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ActivityUpsertOne) ClearEndpoint() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearEndpoint()
	})
}

// SetMethod sets the "method" field.
func (u *ActivityUpsertOne) SetMethod(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateMethod() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ActivityUpsertOne) ClearMethod() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearMethod()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *ActivityUpsertOne) SetStatusCode(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *ActivityUpsertOne) AddStatusCode(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateStatusCode() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ActivityUpsertOne) ClearStatusCode() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseTime sets the "response_time" field.
func (u *ActivityUpsertOne) SetResponseTime(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResponseTime(v)
	})
}

// AddResponseTime adds v to the "response_time" field.
func (u *ActivityUpsertOne) AddResponseTime(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddResponseTime(v)
	})
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateResponseTime() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResponseTime()
	})
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ActivityUpsertOne) ClearResponseTime() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearResponseTime()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityUpsertOne) SetIPAddress(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateIPAddress() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityUpsertOne) ClearIPAddress() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityUpsertOne) SetUserAgent(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateUserAgent() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityUpsertOne) ClearUserAgent() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *ActivityUpsertOne) SetLocation(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateLocation() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *ActivityUpsertOne) ClearLocation() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearLocation()
	})
}

// SetSuccess sets the "success" field.
func (u *ActivityUpsertOne) SetSuccess(v bool) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSuccess() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSuccess()
	})
}

// SetError sets the "error" field.
func (u *ActivityUpsertOne) SetError(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateError() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ActivityUpsertOne) ClearError() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearError()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *ActivityUpsertOne) SetErrorCode(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateErrorCode() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *ActivityUpsertOne) ClearErrorCode() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearErrorCode()
	})
}

// SetSize sets the "size" field.
func (u *ActivityUpsertOne) SetSize(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *ActivityUpsertOne) AddSize(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSize() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *ActivityUpsertOne) ClearSize() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSize()
	})
}

// SetCount sets the "count" field.
func (u *ActivityUpsertOne) SetCount(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *ActivityUpsertOne) AddCount(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateCount() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *ActivityUpsertOne) ClearCount() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearCount()
	})
}

// SetValue sets the "value" field.
func (u *ActivityUpsertOne) SetValue(v float64) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *ActivityUpsertOne) AddValue(v float64) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateValue() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ActivityUpsertOne) ClearValue() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearValue()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *ActivityUpsertOne) SetTimestamp(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateTimestamp() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTimestamp()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ActivityUpsertOne) SetExpiresAt(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateExpiresAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ActivityUpsertOne) ClearExpiresAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearExpiresAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ActivityUpsertOne) SetMetadata(v map[string]interface{}) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateMetadata() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityUpsertOne) ClearMetadata() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearMetadata()
	})
}

// SetTags sets the "tags" field.
func (u *ActivityUpsertOne) SetTags(v []string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateTags() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *ActivityUpsertOne) ClearTags() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearTags()
	})
}

// Exec executes the query.
func (u *ActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ActivityUpsertOne.ID is not supported by MySQL driver. Use ActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetResourceType(v+v).
//		}).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertBulk {
	acb.conflict = opts
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflictColumns(columns ...string) *ActivityUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// ActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of Activity nodes.
type ActivityUpsertBulk struct {
	create *ActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertBulk) UpdateNewValues() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(activity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityUpsertBulk) Ignore() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertBulk) DoNothing() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityUpsertBulk) Update(set func(*ActivityUpsert)) *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *ActivityUpsertBulk) SetResourceType(v model.ResourceType) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateResourceType() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *ActivityUpsertBulk) SetResourceID(v xid.ID) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateResourceID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResourceID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ActivityUpsertBulk) SetUserID(v xid.ID) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateUserID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ActivityUpsertBulk) ClearUserID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *ActivityUpsertBulk) SetOrganizationID(v xid.ID) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateOrganizationID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ActivityUpsertBulk) ClearOrganizationID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearOrganizationID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *ActivityUpsertBulk) SetSessionID(v xid.ID) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSessionID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ActivityUpsertBulk) ClearSessionID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSessionID()
	})
}

// SetAction sets the "action" field.
func (u *ActivityUpsertBulk) SetAction(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateAction() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateAction()
	})
}

// SetCategory sets the "category" field.
func (u *ActivityUpsertBulk) SetCategory(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateCategory() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCategory()
	})
}

// SetSource sets the "source" field.
func (u *ActivityUpsertBulk) SetSource(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSource() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ActivityUpsertBulk) ClearSource() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSource()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *ActivityUpsertBulk) SetEndpoint(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateEndpoint() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateEndpoint()
	})
}

// ClearEndpoint clears the value of the "endpoint" field.
func (u *ActivityUpsertBulk) ClearEndpoint() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearEndpoint()
	})
}

// SetMethod sets the "method" field.
func (u *ActivityUpsertBulk) SetMethod(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateMethod() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *ActivityUpsertBulk) ClearMethod() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearMethod()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *ActivityUpsertBulk) SetStatusCode(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *ActivityUpsertBulk) AddStatusCode(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateStatusCode() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *ActivityUpsertBulk) ClearStatusCode() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseTime sets the "response_time" field.
func (u *ActivityUpsertBulk) SetResponseTime(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetResponseTime(v)
	})
}

// AddResponseTime adds v to the "response_time" field.
func (u *ActivityUpsertBulk) AddResponseTime(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddResponseTime(v)
	})
}

// UpdateResponseTime sets the "response_time" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateResponseTime() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateResponseTime()
	})
}

// ClearResponseTime clears the value of the "response_time" field.
func (u *ActivityUpsertBulk) ClearResponseTime() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearResponseTime()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityUpsertBulk) SetIPAddress(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateIPAddress() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityUpsertBulk) ClearIPAddress() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityUpsertBulk) SetUserAgent(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateUserAgent() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityUpsertBulk) ClearUserAgent() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *ActivityUpsertBulk) SetLocation(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateLocation() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *ActivityUpsertBulk) ClearLocation() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearLocation()
	})
}

// SetSuccess sets the "success" field.
func (u *ActivityUpsertBulk) SetSuccess(v bool) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSuccess() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSuccess()
	})
}

// SetError sets the "error" field.
func (u *ActivityUpsertBulk) SetError(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateError() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ActivityUpsertBulk) ClearError() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearError()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *ActivityUpsertBulk) SetErrorCode(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateErrorCode() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *ActivityUpsertBulk) ClearErrorCode() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearErrorCode()
	})
}

// SetSize sets the "size" field.
func (u *ActivityUpsertBulk) SetSize(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *ActivityUpsertBulk) AddSize(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSize() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *ActivityUpsertBulk) ClearSize() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearSize()
	})
}

// SetCount sets the "count" field.
func (u *ActivityUpsertBulk) SetCount(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *ActivityUpsertBulk) AddCount(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateCount() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *ActivityUpsertBulk) ClearCount() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearCount()
	})
}

// SetValue sets the "value" field.
func (u *ActivityUpsertBulk) SetValue(v float64) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *ActivityUpsertBulk) AddValue(v float64) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateValue() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ActivityUpsertBulk) ClearValue() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearValue()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *ActivityUpsertBulk) SetTimestamp(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateTimestamp() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTimestamp()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ActivityUpsertBulk) SetExpiresAt(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateExpiresAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ActivityUpsertBulk) ClearExpiresAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearExpiresAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ActivityUpsertBulk) SetMetadata(v map[string]interface{}) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateMetadata() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityUpsertBulk) ClearMetadata() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearMetadata()
	})
}

// SetTags sets the "tags" field.
func (u *ActivityUpsertBulk) SetTags(v []string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateTags() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *ActivityUpsertBulk) ClearTags() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearTags()
	})
}

// Exec executes the query.
func (u *ActivityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
