// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/featureflag"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/predicate"
)

// FeatureFlagUpdate is the builder for updating FeatureFlag entities.
type FeatureFlagUpdate struct {
	config
	hooks     []Hook
	mutation  *FeatureFlagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeatureFlagUpdate builder.
func (ffu *FeatureFlagUpdate) Where(ps ...predicate.FeatureFlag) *FeatureFlagUpdate {
	ffu.mutation.Where(ps...)
	return ffu
}

// SetUpdatedAt sets the "updated_at" field.
func (ffu *FeatureFlagUpdate) SetUpdatedAt(t time.Time) *FeatureFlagUpdate {
	ffu.mutation.SetUpdatedAt(t)
	return ffu
}

// SetDeletedAt sets the "deleted_at" field.
func (ffu *FeatureFlagUpdate) SetDeletedAt(t time.Time) *FeatureFlagUpdate {
	ffu.mutation.SetDeletedAt(t)
	return ffu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableDeletedAt(t *time.Time) *FeatureFlagUpdate {
	if t != nil {
		ffu.SetDeletedAt(*t)
	}
	return ffu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ffu *FeatureFlagUpdate) ClearDeletedAt() *FeatureFlagUpdate {
	ffu.mutation.ClearDeletedAt()
	return ffu
}

// SetName sets the "name" field.
func (ffu *FeatureFlagUpdate) SetName(s string) *FeatureFlagUpdate {
	ffu.mutation.SetName(s)
	return ffu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableName(s *string) *FeatureFlagUpdate {
	if s != nil {
		ffu.SetName(*s)
	}
	return ffu
}

// SetKey sets the "key" field.
func (ffu *FeatureFlagUpdate) SetKey(s string) *FeatureFlagUpdate {
	ffu.mutation.SetKey(s)
	return ffu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableKey(s *string) *FeatureFlagUpdate {
	if s != nil {
		ffu.SetKey(*s)
	}
	return ffu
}

// SetDescription sets the "description" field.
func (ffu *FeatureFlagUpdate) SetDescription(s string) *FeatureFlagUpdate {
	ffu.mutation.SetDescription(s)
	return ffu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableDescription(s *string) *FeatureFlagUpdate {
	if s != nil {
		ffu.SetDescription(*s)
	}
	return ffu
}

// ClearDescription clears the value of the "description" field.
func (ffu *FeatureFlagUpdate) ClearDescription() *FeatureFlagUpdate {
	ffu.mutation.ClearDescription()
	return ffu
}

// SetEnabled sets the "enabled" field.
func (ffu *FeatureFlagUpdate) SetEnabled(b bool) *FeatureFlagUpdate {
	ffu.mutation.SetEnabled(b)
	return ffu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableEnabled(b *bool) *FeatureFlagUpdate {
	if b != nil {
		ffu.SetEnabled(*b)
	}
	return ffu
}

// SetIsPremium sets the "is_premium" field.
func (ffu *FeatureFlagUpdate) SetIsPremium(b bool) *FeatureFlagUpdate {
	ffu.mutation.SetIsPremium(b)
	return ffu
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableIsPremium(b *bool) *FeatureFlagUpdate {
	if b != nil {
		ffu.SetIsPremium(*b)
	}
	return ffu
}

// SetComponent sets the "component" field.
func (ffu *FeatureFlagUpdate) SetComponent(f featureflag.Component) *FeatureFlagUpdate {
	ffu.mutation.SetComponent(f)
	return ffu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (ffu *FeatureFlagUpdate) SetNillableComponent(f *featureflag.Component) *FeatureFlagUpdate {
	if f != nil {
		ffu.SetComponent(*f)
	}
	return ffu
}

// AddOrganizationFeatureIDs adds the "organization_features" edge to the OrganizationFeature entity by IDs.
func (ffu *FeatureFlagUpdate) AddOrganizationFeatureIDs(ids ...xid.ID) *FeatureFlagUpdate {
	ffu.mutation.AddOrganizationFeatureIDs(ids...)
	return ffu
}

// AddOrganizationFeatures adds the "organization_features" edges to the OrganizationFeature entity.
func (ffu *FeatureFlagUpdate) AddOrganizationFeatures(o ...*OrganizationFeature) *FeatureFlagUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ffu.AddOrganizationFeatureIDs(ids...)
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (ffu *FeatureFlagUpdate) Mutation() *FeatureFlagMutation {
	return ffu.mutation
}

// ClearOrganizationFeatures clears all "organization_features" edges to the OrganizationFeature entity.
func (ffu *FeatureFlagUpdate) ClearOrganizationFeatures() *FeatureFlagUpdate {
	ffu.mutation.ClearOrganizationFeatures()
	return ffu
}

// RemoveOrganizationFeatureIDs removes the "organization_features" edge to OrganizationFeature entities by IDs.
func (ffu *FeatureFlagUpdate) RemoveOrganizationFeatureIDs(ids ...xid.ID) *FeatureFlagUpdate {
	ffu.mutation.RemoveOrganizationFeatureIDs(ids...)
	return ffu
}

// RemoveOrganizationFeatures removes "organization_features" edges to OrganizationFeature entities.
func (ffu *FeatureFlagUpdate) RemoveOrganizationFeatures(o ...*OrganizationFeature) *FeatureFlagUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ffu.RemoveOrganizationFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ffu *FeatureFlagUpdate) Save(ctx context.Context) (int, error) {
	ffu.defaults()
	return withHooks(ctx, ffu.sqlSave, ffu.mutation, ffu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffu *FeatureFlagUpdate) SaveX(ctx context.Context) int {
	affected, err := ffu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ffu *FeatureFlagUpdate) Exec(ctx context.Context) error {
	_, err := ffu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffu *FeatureFlagUpdate) ExecX(ctx context.Context) {
	if err := ffu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ffu *FeatureFlagUpdate) defaults() {
	if _, ok := ffu.mutation.UpdatedAt(); !ok {
		v := featureflag.UpdateDefaultUpdatedAt()
		ffu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffu *FeatureFlagUpdate) check() error {
	if v, ok := ffu.mutation.Name(); ok {
		if err := featureflag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.name": %w`, err)}
		}
	}
	if v, ok := ffu.mutation.Key(); ok {
		if err := featureflag.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.key": %w`, err)}
		}
	}
	if v, ok := ffu.mutation.Component(); ok {
		if err := featureflag.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.component": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ffu *FeatureFlagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeatureFlagUpdate {
	ffu.modifiers = append(ffu.modifiers, modifiers...)
	return ffu
}

func (ffu *FeatureFlagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ffu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(featureflag.Table, featureflag.Columns, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	if ps := ffu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffu.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ffu.mutation.DeletedAt(); ok {
		_spec.SetField(featureflag.FieldDeletedAt, field.TypeTime, value)
	}
	if ffu.mutation.DeletedAtCleared() {
		_spec.ClearField(featureflag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ffu.mutation.Name(); ok {
		_spec.SetField(featureflag.FieldName, field.TypeString, value)
	}
	if value, ok := ffu.mutation.Key(); ok {
		_spec.SetField(featureflag.FieldKey, field.TypeString, value)
	}
	if value, ok := ffu.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
	}
	if ffu.mutation.DescriptionCleared() {
		_spec.ClearField(featureflag.FieldDescription, field.TypeString)
	}
	if value, ok := ffu.mutation.Enabled(); ok {
		_spec.SetField(featureflag.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ffu.mutation.IsPremium(); ok {
		_spec.SetField(featureflag.FieldIsPremium, field.TypeBool, value)
	}
	if value, ok := ffu.mutation.Component(); ok {
		_spec.SetField(featureflag.FieldComponent, field.TypeEnum, value)
	}
	if ffu.mutation.OrganizationFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffu.mutation.RemovedOrganizationFeaturesIDs(); len(nodes) > 0 && !ffu.mutation.OrganizationFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffu.mutation.OrganizationFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ffu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ffu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ffu.mutation.done = true
	return n, nil
}

// FeatureFlagUpdateOne is the builder for updating a single FeatureFlag entity.
type FeatureFlagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeatureFlagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ffuo *FeatureFlagUpdateOne) SetUpdatedAt(t time.Time) *FeatureFlagUpdateOne {
	ffuo.mutation.SetUpdatedAt(t)
	return ffuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ffuo *FeatureFlagUpdateOne) SetDeletedAt(t time.Time) *FeatureFlagUpdateOne {
	ffuo.mutation.SetDeletedAt(t)
	return ffuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableDeletedAt(t *time.Time) *FeatureFlagUpdateOne {
	if t != nil {
		ffuo.SetDeletedAt(*t)
	}
	return ffuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ffuo *FeatureFlagUpdateOne) ClearDeletedAt() *FeatureFlagUpdateOne {
	ffuo.mutation.ClearDeletedAt()
	return ffuo
}

// SetName sets the "name" field.
func (ffuo *FeatureFlagUpdateOne) SetName(s string) *FeatureFlagUpdateOne {
	ffuo.mutation.SetName(s)
	return ffuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableName(s *string) *FeatureFlagUpdateOne {
	if s != nil {
		ffuo.SetName(*s)
	}
	return ffuo
}

// SetKey sets the "key" field.
func (ffuo *FeatureFlagUpdateOne) SetKey(s string) *FeatureFlagUpdateOne {
	ffuo.mutation.SetKey(s)
	return ffuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableKey(s *string) *FeatureFlagUpdateOne {
	if s != nil {
		ffuo.SetKey(*s)
	}
	return ffuo
}

// SetDescription sets the "description" field.
func (ffuo *FeatureFlagUpdateOne) SetDescription(s string) *FeatureFlagUpdateOne {
	ffuo.mutation.SetDescription(s)
	return ffuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableDescription(s *string) *FeatureFlagUpdateOne {
	if s != nil {
		ffuo.SetDescription(*s)
	}
	return ffuo
}

// ClearDescription clears the value of the "description" field.
func (ffuo *FeatureFlagUpdateOne) ClearDescription() *FeatureFlagUpdateOne {
	ffuo.mutation.ClearDescription()
	return ffuo
}

// SetEnabled sets the "enabled" field.
func (ffuo *FeatureFlagUpdateOne) SetEnabled(b bool) *FeatureFlagUpdateOne {
	ffuo.mutation.SetEnabled(b)
	return ffuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableEnabled(b *bool) *FeatureFlagUpdateOne {
	if b != nil {
		ffuo.SetEnabled(*b)
	}
	return ffuo
}

// SetIsPremium sets the "is_premium" field.
func (ffuo *FeatureFlagUpdateOne) SetIsPremium(b bool) *FeatureFlagUpdateOne {
	ffuo.mutation.SetIsPremium(b)
	return ffuo
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableIsPremium(b *bool) *FeatureFlagUpdateOne {
	if b != nil {
		ffuo.SetIsPremium(*b)
	}
	return ffuo
}

// SetComponent sets the "component" field.
func (ffuo *FeatureFlagUpdateOne) SetComponent(f featureflag.Component) *FeatureFlagUpdateOne {
	ffuo.mutation.SetComponent(f)
	return ffuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (ffuo *FeatureFlagUpdateOne) SetNillableComponent(f *featureflag.Component) *FeatureFlagUpdateOne {
	if f != nil {
		ffuo.SetComponent(*f)
	}
	return ffuo
}

// AddOrganizationFeatureIDs adds the "organization_features" edge to the OrganizationFeature entity by IDs.
func (ffuo *FeatureFlagUpdateOne) AddOrganizationFeatureIDs(ids ...xid.ID) *FeatureFlagUpdateOne {
	ffuo.mutation.AddOrganizationFeatureIDs(ids...)
	return ffuo
}

// AddOrganizationFeatures adds the "organization_features" edges to the OrganizationFeature entity.
func (ffuo *FeatureFlagUpdateOne) AddOrganizationFeatures(o ...*OrganizationFeature) *FeatureFlagUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ffuo.AddOrganizationFeatureIDs(ids...)
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (ffuo *FeatureFlagUpdateOne) Mutation() *FeatureFlagMutation {
	return ffuo.mutation
}

// ClearOrganizationFeatures clears all "organization_features" edges to the OrganizationFeature entity.
func (ffuo *FeatureFlagUpdateOne) ClearOrganizationFeatures() *FeatureFlagUpdateOne {
	ffuo.mutation.ClearOrganizationFeatures()
	return ffuo
}

// RemoveOrganizationFeatureIDs removes the "organization_features" edge to OrganizationFeature entities by IDs.
func (ffuo *FeatureFlagUpdateOne) RemoveOrganizationFeatureIDs(ids ...xid.ID) *FeatureFlagUpdateOne {
	ffuo.mutation.RemoveOrganizationFeatureIDs(ids...)
	return ffuo
}

// RemoveOrganizationFeatures removes "organization_features" edges to OrganizationFeature entities.
func (ffuo *FeatureFlagUpdateOne) RemoveOrganizationFeatures(o ...*OrganizationFeature) *FeatureFlagUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ffuo.RemoveOrganizationFeatureIDs(ids...)
}

// Where appends a list predicates to the FeatureFlagUpdate builder.
func (ffuo *FeatureFlagUpdateOne) Where(ps ...predicate.FeatureFlag) *FeatureFlagUpdateOne {
	ffuo.mutation.Where(ps...)
	return ffuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ffuo *FeatureFlagUpdateOne) Select(field string, fields ...string) *FeatureFlagUpdateOne {
	ffuo.fields = append([]string{field}, fields...)
	return ffuo
}

// Save executes the query and returns the updated FeatureFlag entity.
func (ffuo *FeatureFlagUpdateOne) Save(ctx context.Context) (*FeatureFlag, error) {
	ffuo.defaults()
	return withHooks(ctx, ffuo.sqlSave, ffuo.mutation, ffuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffuo *FeatureFlagUpdateOne) SaveX(ctx context.Context) *FeatureFlag {
	node, err := ffuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ffuo *FeatureFlagUpdateOne) Exec(ctx context.Context) error {
	_, err := ffuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffuo *FeatureFlagUpdateOne) ExecX(ctx context.Context) {
	if err := ffuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ffuo *FeatureFlagUpdateOne) defaults() {
	if _, ok := ffuo.mutation.UpdatedAt(); !ok {
		v := featureflag.UpdateDefaultUpdatedAt()
		ffuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffuo *FeatureFlagUpdateOne) check() error {
	if v, ok := ffuo.mutation.Name(); ok {
		if err := featureflag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.name": %w`, err)}
		}
	}
	if v, ok := ffuo.mutation.Key(); ok {
		if err := featureflag.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.key": %w`, err)}
		}
	}
	if v, ok := ffuo.mutation.Component(); ok {
		if err := featureflag.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.component": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ffuo *FeatureFlagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeatureFlagUpdateOne {
	ffuo.modifiers = append(ffuo.modifiers, modifiers...)
	return ffuo
}

func (ffuo *FeatureFlagUpdateOne) sqlSave(ctx context.Context) (_node *FeatureFlag, err error) {
	if err := ffuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(featureflag.Table, featureflag.Columns, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	id, ok := ffuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeatureFlag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ffuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featureflag.FieldID)
		for _, f := range fields {
			if !featureflag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featureflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ffuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffuo.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ffuo.mutation.DeletedAt(); ok {
		_spec.SetField(featureflag.FieldDeletedAt, field.TypeTime, value)
	}
	if ffuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featureflag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ffuo.mutation.Name(); ok {
		_spec.SetField(featureflag.FieldName, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.Key(); ok {
		_spec.SetField(featureflag.FieldKey, field.TypeString, value)
	}
	if value, ok := ffuo.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
	}
	if ffuo.mutation.DescriptionCleared() {
		_spec.ClearField(featureflag.FieldDescription, field.TypeString)
	}
	if value, ok := ffuo.mutation.Enabled(); ok {
		_spec.SetField(featureflag.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ffuo.mutation.IsPremium(); ok {
		_spec.SetField(featureflag.FieldIsPremium, field.TypeBool, value)
	}
	if value, ok := ffuo.mutation.Component(); ok {
		_spec.SetField(featureflag.FieldComponent, field.TypeEnum, value)
	}
	if ffuo.mutation.OrganizationFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffuo.mutation.RemovedOrganizationFeaturesIDs(); len(nodes) > 0 && !ffuo.mutation.OrganizationFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ffuo.mutation.OrganizationFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ffuo.modifiers...)
	_node = &FeatureFlag{config: ffuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ffuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ffuo.mutation.done = true
	return _node, nil
}
