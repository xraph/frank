// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/verification"
)

// VerificationUpdate is the builder for updating Verification entities.
type VerificationUpdate struct {
	config
	hooks     []Hook
	mutation  *VerificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vu *VerificationUpdate) Where(ps ...predicate.Verification) *VerificationUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VerificationUpdate) SetUpdatedAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VerificationUpdate) SetDeletedAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableDeletedAt(t *time.Time) *VerificationUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VerificationUpdate) ClearDeletedAt() *VerificationUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetUserID sets the "user_id" field.
func (vu *VerificationUpdate) SetUserID(x xid.ID) *VerificationUpdate {
	vu.mutation.SetUserID(x)
	return vu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableUserID(x *xid.ID) *VerificationUpdate {
	if x != nil {
		vu.SetUserID(*x)
	}
	return vu
}

// SetType sets the "type" field.
func (vu *VerificationUpdate) SetType(s string) *VerificationUpdate {
	vu.mutation.SetType(s)
	return vu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableType(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetType(*s)
	}
	return vu
}

// SetToken sets the "token" field.
func (vu *VerificationUpdate) SetToken(s string) *VerificationUpdate {
	vu.mutation.SetToken(s)
	return vu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableToken(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetToken(*s)
	}
	return vu
}

// SetEmail sets the "email" field.
func (vu *VerificationUpdate) SetEmail(s string) *VerificationUpdate {
	vu.mutation.SetEmail(s)
	return vu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableEmail(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetEmail(*s)
	}
	return vu
}

// ClearEmail clears the value of the "email" field.
func (vu *VerificationUpdate) ClearEmail() *VerificationUpdate {
	vu.mutation.ClearEmail()
	return vu
}

// SetPhoneNumber sets the "phone_number" field.
func (vu *VerificationUpdate) SetPhoneNumber(s string) *VerificationUpdate {
	vu.mutation.SetPhoneNumber(s)
	return vu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillablePhoneNumber(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetPhoneNumber(*s)
	}
	return vu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (vu *VerificationUpdate) ClearPhoneNumber() *VerificationUpdate {
	vu.mutation.ClearPhoneNumber()
	return vu
}

// SetRedirectURL sets the "redirect_url" field.
func (vu *VerificationUpdate) SetRedirectURL(s string) *VerificationUpdate {
	vu.mutation.SetRedirectURL(s)
	return vu
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableRedirectURL(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetRedirectURL(*s)
	}
	return vu
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (vu *VerificationUpdate) ClearRedirectURL() *VerificationUpdate {
	vu.mutation.ClearRedirectURL()
	return vu
}

// SetUsed sets the "used" field.
func (vu *VerificationUpdate) SetUsed(b bool) *VerificationUpdate {
	vu.mutation.SetUsed(b)
	return vu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableUsed(b *bool) *VerificationUpdate {
	if b != nil {
		vu.SetUsed(*b)
	}
	return vu
}

// SetUsedAt sets the "used_at" field.
func (vu *VerificationUpdate) SetUsedAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetUsedAt(t)
	return vu
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableUsedAt(t *time.Time) *VerificationUpdate {
	if t != nil {
		vu.SetUsedAt(*t)
	}
	return vu
}

// ClearUsedAt clears the value of the "used_at" field.
func (vu *VerificationUpdate) ClearUsedAt() *VerificationUpdate {
	vu.mutation.ClearUsedAt()
	return vu
}

// SetAttempts sets the "attempts" field.
func (vu *VerificationUpdate) SetAttempts(i int) *VerificationUpdate {
	vu.mutation.ResetAttempts()
	vu.mutation.SetAttempts(i)
	return vu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableAttempts(i *int) *VerificationUpdate {
	if i != nil {
		vu.SetAttempts(*i)
	}
	return vu
}

// AddAttempts adds i to the "attempts" field.
func (vu *VerificationUpdate) AddAttempts(i int) *VerificationUpdate {
	vu.mutation.AddAttempts(i)
	return vu
}

// SetExpiresAt sets the "expires_at" field.
func (vu *VerificationUpdate) SetExpiresAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetExpiresAt(t)
	return vu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableExpiresAt(t *time.Time) *VerificationUpdate {
	if t != nil {
		vu.SetExpiresAt(*t)
	}
	return vu
}

// SetIPAddress sets the "ip_address" field.
func (vu *VerificationUpdate) SetIPAddress(s string) *VerificationUpdate {
	vu.mutation.SetIPAddress(s)
	return vu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableIPAddress(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetIPAddress(*s)
	}
	return vu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (vu *VerificationUpdate) ClearIPAddress() *VerificationUpdate {
	vu.mutation.ClearIPAddress()
	return vu
}

// SetUserAgent sets the "user_agent" field.
func (vu *VerificationUpdate) SetUserAgent(s string) *VerificationUpdate {
	vu.mutation.SetUserAgent(s)
	return vu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableUserAgent(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetUserAgent(*s)
	}
	return vu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (vu *VerificationUpdate) ClearUserAgent() *VerificationUpdate {
	vu.mutation.ClearUserAgent()
	return vu
}

// SetAttestation sets the "attestation" field.
func (vu *VerificationUpdate) SetAttestation(m map[string]interface{}) *VerificationUpdate {
	vu.mutation.SetAttestation(m)
	return vu
}

// ClearAttestation clears the value of the "attestation" field.
func (vu *VerificationUpdate) ClearAttestation() *VerificationUpdate {
	vu.mutation.ClearAttestation()
	return vu
}

// SetMetadata sets the "metadata" field.
func (vu *VerificationUpdate) SetMetadata(m map[string]interface{}) *VerificationUpdate {
	vu.mutation.SetMetadata(m)
	return vu
}

// ClearMetadata clears the value of the "metadata" field.
func (vu *VerificationUpdate) ClearMetadata() *VerificationUpdate {
	vu.mutation.ClearMetadata()
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VerificationUpdate) SetUser(u *User) *VerificationUpdate {
	return vu.SetUserID(u.ID)
}

// Mutation returns the VerificationMutation object of the builder.
func (vu *VerificationUpdate) Mutation() *VerificationMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VerificationUpdate) ClearUser() *VerificationUpdate {
	vu.mutation.ClearUser()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VerificationUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VerificationUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VerificationUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VerificationUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VerificationUpdate) check() error {
	if v, ok := vu.mutation.UserID(); ok {
		if err := verification.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Verification.user_id": %w`, err)}
		}
	}
	if v, ok := vu.mutation.GetType(); ok {
		if err := verification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Verification.type": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Token(); ok {
		if err := verification.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Verification.token": %w`, err)}
		}
	}
	if vu.mutation.UserCleared() && len(vu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Verification.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VerificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VerificationUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(verification.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(verification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(verification.FieldType, field.TypeString, value)
	}
	if value, ok := vu.mutation.Token(); ok {
		_spec.SetField(verification.FieldToken, field.TypeString, value)
	}
	if value, ok := vu.mutation.Email(); ok {
		_spec.SetField(verification.FieldEmail, field.TypeString, value)
	}
	if vu.mutation.EmailCleared() {
		_spec.ClearField(verification.FieldEmail, field.TypeString)
	}
	if value, ok := vu.mutation.PhoneNumber(); ok {
		_spec.SetField(verification.FieldPhoneNumber, field.TypeString, value)
	}
	if vu.mutation.PhoneNumberCleared() {
		_spec.ClearField(verification.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := vu.mutation.RedirectURL(); ok {
		_spec.SetField(verification.FieldRedirectURL, field.TypeString, value)
	}
	if vu.mutation.RedirectURLCleared() {
		_spec.ClearField(verification.FieldRedirectURL, field.TypeString)
	}
	if value, ok := vu.mutation.Used(); ok {
		_spec.SetField(verification.FieldUsed, field.TypeBool, value)
	}
	if value, ok := vu.mutation.UsedAt(); ok {
		_spec.SetField(verification.FieldUsedAt, field.TypeTime, value)
	}
	if vu.mutation.UsedAtCleared() {
		_spec.ClearField(verification.FieldUsedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.Attempts(); ok {
		_spec.SetField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedAttempts(); ok {
		_spec.AddField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vu.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.IPAddress(); ok {
		_spec.SetField(verification.FieldIPAddress, field.TypeString, value)
	}
	if vu.mutation.IPAddressCleared() {
		_spec.ClearField(verification.FieldIPAddress, field.TypeString)
	}
	if value, ok := vu.mutation.UserAgent(); ok {
		_spec.SetField(verification.FieldUserAgent, field.TypeString, value)
	}
	if vu.mutation.UserAgentCleared() {
		_spec.ClearField(verification.FieldUserAgent, field.TypeString)
	}
	if value, ok := vu.mutation.Attestation(); ok {
		_spec.SetField(verification.FieldAttestation, field.TypeJSON, value)
	}
	if vu.mutation.AttestationCleared() {
		_spec.ClearField(verification.FieldAttestation, field.TypeJSON)
	}
	if value, ok := vu.mutation.Metadata(); ok {
		_spec.SetField(verification.FieldMetadata, field.TypeJSON, value)
	}
	if vu.mutation.MetadataCleared() {
		_spec.ClearField(verification.FieldMetadata, field.TypeJSON)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VerificationUpdateOne is the builder for updating a single Verification entity.
type VerificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VerificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VerificationUpdateOne) SetUpdatedAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VerificationUpdateOne) SetDeletedAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableDeletedAt(t *time.Time) *VerificationUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VerificationUpdateOne) ClearDeletedAt() *VerificationUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetUserID sets the "user_id" field.
func (vuo *VerificationUpdateOne) SetUserID(x xid.ID) *VerificationUpdateOne {
	vuo.mutation.SetUserID(x)
	return vuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableUserID(x *xid.ID) *VerificationUpdateOne {
	if x != nil {
		vuo.SetUserID(*x)
	}
	return vuo
}

// SetType sets the "type" field.
func (vuo *VerificationUpdateOne) SetType(s string) *VerificationUpdateOne {
	vuo.mutation.SetType(s)
	return vuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableType(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetType(*s)
	}
	return vuo
}

// SetToken sets the "token" field.
func (vuo *VerificationUpdateOne) SetToken(s string) *VerificationUpdateOne {
	vuo.mutation.SetToken(s)
	return vuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableToken(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetToken(*s)
	}
	return vuo
}

// SetEmail sets the "email" field.
func (vuo *VerificationUpdateOne) SetEmail(s string) *VerificationUpdateOne {
	vuo.mutation.SetEmail(s)
	return vuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableEmail(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetEmail(*s)
	}
	return vuo
}

// ClearEmail clears the value of the "email" field.
func (vuo *VerificationUpdateOne) ClearEmail() *VerificationUpdateOne {
	vuo.mutation.ClearEmail()
	return vuo
}

// SetPhoneNumber sets the "phone_number" field.
func (vuo *VerificationUpdateOne) SetPhoneNumber(s string) *VerificationUpdateOne {
	vuo.mutation.SetPhoneNumber(s)
	return vuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillablePhoneNumber(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetPhoneNumber(*s)
	}
	return vuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (vuo *VerificationUpdateOne) ClearPhoneNumber() *VerificationUpdateOne {
	vuo.mutation.ClearPhoneNumber()
	return vuo
}

// SetRedirectURL sets the "redirect_url" field.
func (vuo *VerificationUpdateOne) SetRedirectURL(s string) *VerificationUpdateOne {
	vuo.mutation.SetRedirectURL(s)
	return vuo
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableRedirectURL(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetRedirectURL(*s)
	}
	return vuo
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (vuo *VerificationUpdateOne) ClearRedirectURL() *VerificationUpdateOne {
	vuo.mutation.ClearRedirectURL()
	return vuo
}

// SetUsed sets the "used" field.
func (vuo *VerificationUpdateOne) SetUsed(b bool) *VerificationUpdateOne {
	vuo.mutation.SetUsed(b)
	return vuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableUsed(b *bool) *VerificationUpdateOne {
	if b != nil {
		vuo.SetUsed(*b)
	}
	return vuo
}

// SetUsedAt sets the "used_at" field.
func (vuo *VerificationUpdateOne) SetUsedAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetUsedAt(t)
	return vuo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableUsedAt(t *time.Time) *VerificationUpdateOne {
	if t != nil {
		vuo.SetUsedAt(*t)
	}
	return vuo
}

// ClearUsedAt clears the value of the "used_at" field.
func (vuo *VerificationUpdateOne) ClearUsedAt() *VerificationUpdateOne {
	vuo.mutation.ClearUsedAt()
	return vuo
}

// SetAttempts sets the "attempts" field.
func (vuo *VerificationUpdateOne) SetAttempts(i int) *VerificationUpdateOne {
	vuo.mutation.ResetAttempts()
	vuo.mutation.SetAttempts(i)
	return vuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableAttempts(i *int) *VerificationUpdateOne {
	if i != nil {
		vuo.SetAttempts(*i)
	}
	return vuo
}

// AddAttempts adds i to the "attempts" field.
func (vuo *VerificationUpdateOne) AddAttempts(i int) *VerificationUpdateOne {
	vuo.mutation.AddAttempts(i)
	return vuo
}

// SetExpiresAt sets the "expires_at" field.
func (vuo *VerificationUpdateOne) SetExpiresAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetExpiresAt(t)
	return vuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableExpiresAt(t *time.Time) *VerificationUpdateOne {
	if t != nil {
		vuo.SetExpiresAt(*t)
	}
	return vuo
}

// SetIPAddress sets the "ip_address" field.
func (vuo *VerificationUpdateOne) SetIPAddress(s string) *VerificationUpdateOne {
	vuo.mutation.SetIPAddress(s)
	return vuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableIPAddress(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetIPAddress(*s)
	}
	return vuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (vuo *VerificationUpdateOne) ClearIPAddress() *VerificationUpdateOne {
	vuo.mutation.ClearIPAddress()
	return vuo
}

// SetUserAgent sets the "user_agent" field.
func (vuo *VerificationUpdateOne) SetUserAgent(s string) *VerificationUpdateOne {
	vuo.mutation.SetUserAgent(s)
	return vuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableUserAgent(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetUserAgent(*s)
	}
	return vuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (vuo *VerificationUpdateOne) ClearUserAgent() *VerificationUpdateOne {
	vuo.mutation.ClearUserAgent()
	return vuo
}

// SetAttestation sets the "attestation" field.
func (vuo *VerificationUpdateOne) SetAttestation(m map[string]interface{}) *VerificationUpdateOne {
	vuo.mutation.SetAttestation(m)
	return vuo
}

// ClearAttestation clears the value of the "attestation" field.
func (vuo *VerificationUpdateOne) ClearAttestation() *VerificationUpdateOne {
	vuo.mutation.ClearAttestation()
	return vuo
}

// SetMetadata sets the "metadata" field.
func (vuo *VerificationUpdateOne) SetMetadata(m map[string]interface{}) *VerificationUpdateOne {
	vuo.mutation.SetMetadata(m)
	return vuo
}

// ClearMetadata clears the value of the "metadata" field.
func (vuo *VerificationUpdateOne) ClearMetadata() *VerificationUpdateOne {
	vuo.mutation.ClearMetadata()
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VerificationUpdateOne) SetUser(u *User) *VerificationUpdateOne {
	return vuo.SetUserID(u.ID)
}

// Mutation returns the VerificationMutation object of the builder.
func (vuo *VerificationUpdateOne) Mutation() *VerificationMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VerificationUpdateOne) ClearUser() *VerificationUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vuo *VerificationUpdateOne) Where(ps ...predicate.Verification) *VerificationUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VerificationUpdateOne) Select(field string, fields ...string) *VerificationUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Verification entity.
func (vuo *VerificationUpdateOne) Save(ctx context.Context) (*Verification, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VerificationUpdateOne) SaveX(ctx context.Context) *Verification {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VerificationUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VerificationUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VerificationUpdateOne) check() error {
	if v, ok := vuo.mutation.UserID(); ok {
		if err := verification.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Verification.user_id": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.GetType(); ok {
		if err := verification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Verification.type": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Token(); ok {
		if err := verification.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Verification.token": %w`, err)}
		}
	}
	if vuo.mutation.UserCleared() && len(vuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Verification.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VerificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VerificationUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VerificationUpdateOne) sqlSave(ctx context.Context) (_node *Verification, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Verification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verification.FieldID)
		for _, f := range fields {
			if !verification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(verification.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(verification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(verification.FieldType, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Token(); ok {
		_spec.SetField(verification.FieldToken, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Email(); ok {
		_spec.SetField(verification.FieldEmail, field.TypeString, value)
	}
	if vuo.mutation.EmailCleared() {
		_spec.ClearField(verification.FieldEmail, field.TypeString)
	}
	if value, ok := vuo.mutation.PhoneNumber(); ok {
		_spec.SetField(verification.FieldPhoneNumber, field.TypeString, value)
	}
	if vuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(verification.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := vuo.mutation.RedirectURL(); ok {
		_spec.SetField(verification.FieldRedirectURL, field.TypeString, value)
	}
	if vuo.mutation.RedirectURLCleared() {
		_spec.ClearField(verification.FieldRedirectURL, field.TypeString)
	}
	if value, ok := vuo.mutation.Used(); ok {
		_spec.SetField(verification.FieldUsed, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.UsedAt(); ok {
		_spec.SetField(verification.FieldUsedAt, field.TypeTime, value)
	}
	if vuo.mutation.UsedAtCleared() {
		_spec.ClearField(verification.FieldUsedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.Attempts(); ok {
		_spec.SetField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedAttempts(); ok {
		_spec.AddField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.IPAddress(); ok {
		_spec.SetField(verification.FieldIPAddress, field.TypeString, value)
	}
	if vuo.mutation.IPAddressCleared() {
		_spec.ClearField(verification.FieldIPAddress, field.TypeString)
	}
	if value, ok := vuo.mutation.UserAgent(); ok {
		_spec.SetField(verification.FieldUserAgent, field.TypeString, value)
	}
	if vuo.mutation.UserAgentCleared() {
		_spec.ClearField(verification.FieldUserAgent, field.TypeString)
	}
	if value, ok := vuo.mutation.Attestation(); ok {
		_spec.SetField(verification.FieldAttestation, field.TypeJSON, value)
	}
	if vuo.mutation.AttestationCleared() {
		_spec.ClearField(verification.FieldAttestation, field.TypeJSON)
	}
	if value, ok := vuo.mutation.Metadata(); ok {
		_spec.SetField(verification.FieldMetadata, field.TypeJSON, value)
	}
	if vuo.mutation.MetadataCleared() {
		_spec.ClearField(verification.FieldMetadata, field.TypeJSON)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Verification{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
