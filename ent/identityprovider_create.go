// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationprovider"
)

// IdentityProviderCreate is the builder for creating a IdentityProvider entity.
type IdentityProviderCreate struct {
	config
	mutation *IdentityProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ipc *IdentityProviderCreate) SetCreatedAt(t time.Time) *IdentityProviderCreate {
	ipc.mutation.SetCreatedAt(t)
	return ipc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableCreatedAt(t *time.Time) *IdentityProviderCreate {
	if t != nil {
		ipc.SetCreatedAt(*t)
	}
	return ipc
}

// SetUpdatedAt sets the "updated_at" field.
func (ipc *IdentityProviderCreate) SetUpdatedAt(t time.Time) *IdentityProviderCreate {
	ipc.mutation.SetUpdatedAt(t)
	return ipc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableUpdatedAt(t *time.Time) *IdentityProviderCreate {
	if t != nil {
		ipc.SetUpdatedAt(*t)
	}
	return ipc
}

// SetDeletedAt sets the "deleted_at" field.
func (ipc *IdentityProviderCreate) SetDeletedAt(t time.Time) *IdentityProviderCreate {
	ipc.mutation.SetDeletedAt(t)
	return ipc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableDeletedAt(t *time.Time) *IdentityProviderCreate {
	if t != nil {
		ipc.SetDeletedAt(*t)
	}
	return ipc
}

// SetName sets the "name" field.
func (ipc *IdentityProviderCreate) SetName(s string) *IdentityProviderCreate {
	ipc.mutation.SetName(s)
	return ipc
}

// SetOrganizationID sets the "organization_id" field.
func (ipc *IdentityProviderCreate) SetOrganizationID(x xid.ID) *IdentityProviderCreate {
	ipc.mutation.SetOrganizationID(x)
	return ipc
}

// SetProviderType sets the "provider_type" field.
func (ipc *IdentityProviderCreate) SetProviderType(s string) *IdentityProviderCreate {
	ipc.mutation.SetProviderType(s)
	return ipc
}

// SetClientID sets the "client_id" field.
func (ipc *IdentityProviderCreate) SetClientID(s string) *IdentityProviderCreate {
	ipc.mutation.SetClientID(s)
	return ipc
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableClientID(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetClientID(*s)
	}
	return ipc
}

// SetClientSecret sets the "client_secret" field.
func (ipc *IdentityProviderCreate) SetClientSecret(s string) *IdentityProviderCreate {
	ipc.mutation.SetClientSecret(s)
	return ipc
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableClientSecret(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetClientSecret(*s)
	}
	return ipc
}

// SetIssuer sets the "issuer" field.
func (ipc *IdentityProviderCreate) SetIssuer(s string) *IdentityProviderCreate {
	ipc.mutation.SetIssuer(s)
	return ipc
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableIssuer(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetIssuer(*s)
	}
	return ipc
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (ipc *IdentityProviderCreate) SetAuthorizationEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetAuthorizationEndpoint(s)
	return ipc
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableAuthorizationEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetAuthorizationEndpoint(*s)
	}
	return ipc
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (ipc *IdentityProviderCreate) SetTokenEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetTokenEndpoint(s)
	return ipc
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableTokenEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetTokenEndpoint(*s)
	}
	return ipc
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (ipc *IdentityProviderCreate) SetUserinfoEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetUserinfoEndpoint(s)
	return ipc
}

// SetNillableUserinfoEndpoint sets the "userinfo_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableUserinfoEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetUserinfoEndpoint(*s)
	}
	return ipc
}

// SetJwksURI sets the "jwks_uri" field.
func (ipc *IdentityProviderCreate) SetJwksURI(s string) *IdentityProviderCreate {
	ipc.mutation.SetJwksURI(s)
	return ipc
}

// SetNillableJwksURI sets the "jwks_uri" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableJwksURI(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetJwksURI(*s)
	}
	return ipc
}

// SetMetadataURL sets the "metadata_url" field.
func (ipc *IdentityProviderCreate) SetMetadataURL(s string) *IdentityProviderCreate {
	ipc.mutation.SetMetadataURL(s)
	return ipc
}

// SetNillableMetadataURL sets the "metadata_url" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableMetadataURL(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetMetadataURL(*s)
	}
	return ipc
}

// SetRedirectURI sets the "redirect_uri" field.
func (ipc *IdentityProviderCreate) SetRedirectURI(s string) *IdentityProviderCreate {
	ipc.mutation.SetRedirectURI(s)
	return ipc
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableRedirectURI(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetRedirectURI(*s)
	}
	return ipc
}

// SetCertificate sets the "certificate" field.
func (ipc *IdentityProviderCreate) SetCertificate(s string) *IdentityProviderCreate {
	ipc.mutation.SetCertificate(s)
	return ipc
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableCertificate(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetCertificate(*s)
	}
	return ipc
}

// SetPrivateKey sets the "private_key" field.
func (ipc *IdentityProviderCreate) SetPrivateKey(s string) *IdentityProviderCreate {
	ipc.mutation.SetPrivateKey(s)
	return ipc
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillablePrivateKey(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetPrivateKey(*s)
	}
	return ipc
}

// SetActive sets the "active" field.
func (ipc *IdentityProviderCreate) SetActive(b bool) *IdentityProviderCreate {
	ipc.mutation.SetActive(b)
	return ipc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableActive(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetActive(*b)
	}
	return ipc
}

// SetEnabled sets the "enabled" field.
func (ipc *IdentityProviderCreate) SetEnabled(b bool) *IdentityProviderCreate {
	ipc.mutation.SetEnabled(b)
	return ipc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableEnabled(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetEnabled(*b)
	}
	return ipc
}

// SetPrimary sets the "primary" field.
func (ipc *IdentityProviderCreate) SetPrimary(b bool) *IdentityProviderCreate {
	ipc.mutation.SetPrimary(b)
	return ipc
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillablePrimary(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetPrimary(*b)
	}
	return ipc
}

// SetAutoProvision sets the "auto_provision" field.
func (ipc *IdentityProviderCreate) SetAutoProvision(b bool) *IdentityProviderCreate {
	ipc.mutation.SetAutoProvision(b)
	return ipc
}

// SetNillableAutoProvision sets the "auto_provision" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableAutoProvision(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetAutoProvision(*b)
	}
	return ipc
}

// SetDefaultRole sets the "default_role" field.
func (ipc *IdentityProviderCreate) SetDefaultRole(s string) *IdentityProviderCreate {
	ipc.mutation.SetDefaultRole(s)
	return ipc
}

// SetNillableDefaultRole sets the "default_role" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableDefaultRole(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetDefaultRole(*s)
	}
	return ipc
}

// SetDomain sets the "domain" field.
func (ipc *IdentityProviderCreate) SetDomain(s string) *IdentityProviderCreate {
	ipc.mutation.SetDomain(s)
	return ipc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableDomain(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetDomain(*s)
	}
	return ipc
}

// SetIconURL sets the "icon_url" field.
func (ipc *IdentityProviderCreate) SetIconURL(s string) *IdentityProviderCreate {
	ipc.mutation.SetIconURL(s)
	return ipc
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableIconURL(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetIconURL(*s)
	}
	return ipc
}

// SetButtonText sets the "button_text" field.
func (ipc *IdentityProviderCreate) SetButtonText(s string) *IdentityProviderCreate {
	ipc.mutation.SetButtonText(s)
	return ipc
}

// SetNillableButtonText sets the "button_text" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableButtonText(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetButtonText(*s)
	}
	return ipc
}

// SetProtocol sets the "protocol" field.
func (ipc *IdentityProviderCreate) SetProtocol(s string) *IdentityProviderCreate {
	ipc.mutation.SetProtocol(s)
	return ipc
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableProtocol(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetProtocol(*s)
	}
	return ipc
}

// SetDomains sets the "domains" field.
func (ipc *IdentityProviderCreate) SetDomains(s []string) *IdentityProviderCreate {
	ipc.mutation.SetDomains(s)
	return ipc
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (ipc *IdentityProviderCreate) SetAttributesMapping(m map[string]string) *IdentityProviderCreate {
	ipc.mutation.SetAttributesMapping(m)
	return ipc
}

// SetMetadata sets the "metadata" field.
func (ipc *IdentityProviderCreate) SetMetadata(m map[string]interface{}) *IdentityProviderCreate {
	ipc.mutation.SetMetadata(m)
	return ipc
}

// SetID sets the "id" field.
func (ipc *IdentityProviderCreate) SetID(x xid.ID) *IdentityProviderCreate {
	ipc.mutation.SetID(x)
	return ipc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableID(x *xid.ID) *IdentityProviderCreate {
	if x != nil {
		ipc.SetID(*x)
	}
	return ipc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ipc *IdentityProviderCreate) SetOrganization(o *Organization) *IdentityProviderCreate {
	return ipc.SetOrganizationID(o.ID)
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ipc *IdentityProviderCreate) AddOrganizationProviderIDs(ids ...xid.ID) *IdentityProviderCreate {
	ipc.mutation.AddOrganizationProviderIDs(ids...)
	return ipc
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ipc *IdentityProviderCreate) AddOrganizationProviders(o ...*OrganizationProvider) *IdentityProviderCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ipc.AddOrganizationProviderIDs(ids...)
}

// Mutation returns the IdentityProviderMutation object of the builder.
func (ipc *IdentityProviderCreate) Mutation() *IdentityProviderMutation {
	return ipc.mutation
}

// Save creates the IdentityProvider in the database.
func (ipc *IdentityProviderCreate) Save(ctx context.Context) (*IdentityProvider, error) {
	ipc.defaults()
	return withHooks(ctx, ipc.sqlSave, ipc.mutation, ipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *IdentityProviderCreate) SaveX(ctx context.Context) *IdentityProvider {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipc *IdentityProviderCreate) Exec(ctx context.Context) error {
	_, err := ipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipc *IdentityProviderCreate) ExecX(ctx context.Context) {
	if err := ipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipc *IdentityProviderCreate) defaults() {
	if _, ok := ipc.mutation.CreatedAt(); !ok {
		v := identityprovider.DefaultCreatedAt()
		ipc.mutation.SetCreatedAt(v)
	}
	if _, ok := ipc.mutation.UpdatedAt(); !ok {
		v := identityprovider.DefaultUpdatedAt()
		ipc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ipc.mutation.Active(); !ok {
		v := identityprovider.DefaultActive
		ipc.mutation.SetActive(v)
	}
	if _, ok := ipc.mutation.Enabled(); !ok {
		v := identityprovider.DefaultEnabled
		ipc.mutation.SetEnabled(v)
	}
	if _, ok := ipc.mutation.Primary(); !ok {
		v := identityprovider.DefaultPrimary
		ipc.mutation.SetPrimary(v)
	}
	if _, ok := ipc.mutation.AutoProvision(); !ok {
		v := identityprovider.DefaultAutoProvision
		ipc.mutation.SetAutoProvision(v)
	}
	if _, ok := ipc.mutation.ID(); !ok {
		v := identityprovider.DefaultID()
		ipc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipc *IdentityProviderCreate) check() error {
	if _, ok := ipc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdentityProvider.created_at"`)}
	}
	if _, ok := ipc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IdentityProvider.updated_at"`)}
	}
	if _, ok := ipc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IdentityProvider.name"`)}
	}
	if v, ok := ipc.mutation.Name(); ok {
		if err := identityprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.name": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "IdentityProvider.organization_id"`)}
	}
	if v, ok := ipc.mutation.OrganizationID(); ok {
		if err := identityprovider.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.organization_id": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "IdentityProvider.provider_type"`)}
	}
	if v, ok := ipc.mutation.ProviderType(); ok {
		if err := identityprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.provider_type": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "IdentityProvider.active"`)}
	}
	if _, ok := ipc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "IdentityProvider.enabled"`)}
	}
	if _, ok := ipc.mutation.Primary(); !ok {
		return &ValidationError{Name: "primary", err: errors.New(`ent: missing required field "IdentityProvider.primary"`)}
	}
	if _, ok := ipc.mutation.AutoProvision(); !ok {
		return &ValidationError{Name: "auto_provision", err: errors.New(`ent: missing required field "IdentityProvider.auto_provision"`)}
	}
	if len(ipc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "IdentityProvider.organization"`)}
	}
	return nil
}

func (ipc *IdentityProviderCreate) sqlSave(ctx context.Context) (*IdentityProvider, error) {
	if err := ipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ipc.mutation.id = &_node.ID
	ipc.mutation.done = true
	return _node, nil
}

func (ipc *IdentityProviderCreate) createSpec() (*IdentityProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &IdentityProvider{config: ipc.config}
		_spec = sqlgraph.NewCreateSpec(identityprovider.Table, sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString))
	)
	_spec.OnConflict = ipc.conflict
	if id, ok := ipc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ipc.mutation.CreatedAt(); ok {
		_spec.SetField(identityprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ipc.mutation.UpdatedAt(); ok {
		_spec.SetField(identityprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ipc.mutation.DeletedAt(); ok {
		_spec.SetField(identityprovider.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ipc.mutation.Name(); ok {
		_spec.SetField(identityprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ipc.mutation.ProviderType(); ok {
		_spec.SetField(identityprovider.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := ipc.mutation.ClientID(); ok {
		_spec.SetField(identityprovider.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := ipc.mutation.ClientSecret(); ok {
		_spec.SetField(identityprovider.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := ipc.mutation.Issuer(); ok {
		_spec.SetField(identityprovider.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := ipc.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(identityprovider.FieldAuthorizationEndpoint, field.TypeString, value)
		_node.AuthorizationEndpoint = value
	}
	if value, ok := ipc.mutation.TokenEndpoint(); ok {
		_spec.SetField(identityprovider.FieldTokenEndpoint, field.TypeString, value)
		_node.TokenEndpoint = value
	}
	if value, ok := ipc.mutation.UserinfoEndpoint(); ok {
		_spec.SetField(identityprovider.FieldUserinfoEndpoint, field.TypeString, value)
		_node.UserinfoEndpoint = value
	}
	if value, ok := ipc.mutation.JwksURI(); ok {
		_spec.SetField(identityprovider.FieldJwksURI, field.TypeString, value)
		_node.JwksURI = value
	}
	if value, ok := ipc.mutation.MetadataURL(); ok {
		_spec.SetField(identityprovider.FieldMetadataURL, field.TypeString, value)
		_node.MetadataURL = value
	}
	if value, ok := ipc.mutation.RedirectURI(); ok {
		_spec.SetField(identityprovider.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := ipc.mutation.Certificate(); ok {
		_spec.SetField(identityprovider.FieldCertificate, field.TypeString, value)
		_node.Certificate = value
	}
	if value, ok := ipc.mutation.PrivateKey(); ok {
		_spec.SetField(identityprovider.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := ipc.mutation.Active(); ok {
		_spec.SetField(identityprovider.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ipc.mutation.Enabled(); ok {
		_spec.SetField(identityprovider.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ipc.mutation.Primary(); ok {
		_spec.SetField(identityprovider.FieldPrimary, field.TypeBool, value)
		_node.Primary = value
	}
	if value, ok := ipc.mutation.AutoProvision(); ok {
		_spec.SetField(identityprovider.FieldAutoProvision, field.TypeBool, value)
		_node.AutoProvision = value
	}
	if value, ok := ipc.mutation.DefaultRole(); ok {
		_spec.SetField(identityprovider.FieldDefaultRole, field.TypeString, value)
		_node.DefaultRole = value
	}
	if value, ok := ipc.mutation.Domain(); ok {
		_spec.SetField(identityprovider.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := ipc.mutation.IconURL(); ok {
		_spec.SetField(identityprovider.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := ipc.mutation.ButtonText(); ok {
		_spec.SetField(identityprovider.FieldButtonText, field.TypeString, value)
		_node.ButtonText = value
	}
	if value, ok := ipc.mutation.Protocol(); ok {
		_spec.SetField(identityprovider.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := ipc.mutation.Domains(); ok {
		_spec.SetField(identityprovider.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := ipc.mutation.AttributesMapping(); ok {
		_spec.SetField(identityprovider.FieldAttributesMapping, field.TypeJSON, value)
		_node.AttributesMapping = value
	}
	if value, ok := ipc.mutation.Metadata(); ok {
		_spec.SetField(identityprovider.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ipc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   identityprovider.OrganizationProvidersTable,
			Columns: []string{identityprovider.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IdentityProvider.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentityProviderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ipc *IdentityProviderCreate) OnConflict(opts ...sql.ConflictOption) *IdentityProviderUpsertOne {
	ipc.conflict = opts
	return &IdentityProviderUpsertOne{
		create: ipc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ipc *IdentityProviderCreate) OnConflictColumns(columns ...string) *IdentityProviderUpsertOne {
	ipc.conflict = append(ipc.conflict, sql.ConflictColumns(columns...))
	return &IdentityProviderUpsertOne{
		create: ipc,
	}
}

type (
	// IdentityProviderUpsertOne is the builder for "upsert"-ing
	//  one IdentityProvider node.
	IdentityProviderUpsertOne struct {
		create *IdentityProviderCreate
	}

	// IdentityProviderUpsert is the "OnConflict" setter.
	IdentityProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityProviderUpsert) SetUpdatedAt(v time.Time) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateUpdatedAt() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IdentityProviderUpsert) SetDeletedAt(v time.Time) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateDeletedAt() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IdentityProviderUpsert) ClearDeletedAt() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *IdentityProviderUpsert) SetName(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateName() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldName)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *IdentityProviderUpsert) SetOrganizationID(v xid.ID) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateOrganizationID() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldOrganizationID)
	return u
}

// SetProviderType sets the "provider_type" field.
func (u *IdentityProviderUpsert) SetProviderType(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldProviderType, v)
	return u
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateProviderType() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldProviderType)
	return u
}

// SetClientID sets the "client_id" field.
func (u *IdentityProviderUpsert) SetClientID(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateClientID() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldClientID)
	return u
}

// ClearClientID clears the value of the "client_id" field.
func (u *IdentityProviderUpsert) ClearClientID() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *IdentityProviderUpsert) SetClientSecret(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateClientSecret() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldClientSecret)
	return u
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *IdentityProviderUpsert) ClearClientSecret() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldClientSecret)
	return u
}

// SetIssuer sets the "issuer" field.
func (u *IdentityProviderUpsert) SetIssuer(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldIssuer, v)
	return u
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateIssuer() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldIssuer)
	return u
}

// ClearIssuer clears the value of the "issuer" field.
func (u *IdentityProviderUpsert) ClearIssuer() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldIssuer)
	return u
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (u *IdentityProviderUpsert) SetAuthorizationEndpoint(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldAuthorizationEndpoint, v)
	return u
}

// UpdateAuthorizationEndpoint sets the "authorization_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateAuthorizationEndpoint() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldAuthorizationEndpoint)
	return u
}

// ClearAuthorizationEndpoint clears the value of the "authorization_endpoint" field.
func (u *IdentityProviderUpsert) ClearAuthorizationEndpoint() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldAuthorizationEndpoint)
	return u
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (u *IdentityProviderUpsert) SetTokenEndpoint(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldTokenEndpoint, v)
	return u
}

// UpdateTokenEndpoint sets the "token_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateTokenEndpoint() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldTokenEndpoint)
	return u
}

// ClearTokenEndpoint clears the value of the "token_endpoint" field.
func (u *IdentityProviderUpsert) ClearTokenEndpoint() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldTokenEndpoint)
	return u
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (u *IdentityProviderUpsert) SetUserinfoEndpoint(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldUserinfoEndpoint, v)
	return u
}

// UpdateUserinfoEndpoint sets the "userinfo_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateUserinfoEndpoint() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldUserinfoEndpoint)
	return u
}

// ClearUserinfoEndpoint clears the value of the "userinfo_endpoint" field.
func (u *IdentityProviderUpsert) ClearUserinfoEndpoint() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldUserinfoEndpoint)
	return u
}

// SetJwksURI sets the "jwks_uri" field.
func (u *IdentityProviderUpsert) SetJwksURI(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldJwksURI, v)
	return u
}

// UpdateJwksURI sets the "jwks_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateJwksURI() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldJwksURI)
	return u
}

// ClearJwksURI clears the value of the "jwks_uri" field.
func (u *IdentityProviderUpsert) ClearJwksURI() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldJwksURI)
	return u
}

// SetMetadataURL sets the "metadata_url" field.
func (u *IdentityProviderUpsert) SetMetadataURL(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldMetadataURL, v)
	return u
}

// UpdateMetadataURL sets the "metadata_url" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateMetadataURL() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldMetadataURL)
	return u
}

// ClearMetadataURL clears the value of the "metadata_url" field.
func (u *IdentityProviderUpsert) ClearMetadataURL() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldMetadataURL)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *IdentityProviderUpsert) SetRedirectURI(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateRedirectURI() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldRedirectURI)
	return u
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *IdentityProviderUpsert) ClearRedirectURI() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldRedirectURI)
	return u
}

// SetCertificate sets the "certificate" field.
func (u *IdentityProviderUpsert) SetCertificate(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldCertificate, v)
	return u
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateCertificate() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldCertificate)
	return u
}

// ClearCertificate clears the value of the "certificate" field.
func (u *IdentityProviderUpsert) ClearCertificate() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldCertificate)
	return u
}

// SetPrivateKey sets the "private_key" field.
func (u *IdentityProviderUpsert) SetPrivateKey(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldPrivateKey, v)
	return u
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdatePrivateKey() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldPrivateKey)
	return u
}

// ClearPrivateKey clears the value of the "private_key" field.
func (u *IdentityProviderUpsert) ClearPrivateKey() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldPrivateKey)
	return u
}

// SetActive sets the "active" field.
func (u *IdentityProviderUpsert) SetActive(v bool) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateActive() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldActive)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *IdentityProviderUpsert) SetEnabled(v bool) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateEnabled() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldEnabled)
	return u
}

// SetPrimary sets the "primary" field.
func (u *IdentityProviderUpsert) SetPrimary(v bool) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldPrimary, v)
	return u
}

// UpdatePrimary sets the "primary" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdatePrimary() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldPrimary)
	return u
}

// SetAutoProvision sets the "auto_provision" field.
func (u *IdentityProviderUpsert) SetAutoProvision(v bool) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldAutoProvision, v)
	return u
}

// UpdateAutoProvision sets the "auto_provision" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateAutoProvision() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldAutoProvision)
	return u
}

// SetDefaultRole sets the "default_role" field.
func (u *IdentityProviderUpsert) SetDefaultRole(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldDefaultRole, v)
	return u
}

// UpdateDefaultRole sets the "default_role" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateDefaultRole() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldDefaultRole)
	return u
}

// ClearDefaultRole clears the value of the "default_role" field.
func (u *IdentityProviderUpsert) ClearDefaultRole() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldDefaultRole)
	return u
}

// SetDomain sets the "domain" field.
func (u *IdentityProviderUpsert) SetDomain(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateDomain() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *IdentityProviderUpsert) ClearDomain() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldDomain)
	return u
}

// SetIconURL sets the "icon_url" field.
func (u *IdentityProviderUpsert) SetIconURL(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldIconURL, v)
	return u
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateIconURL() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldIconURL)
	return u
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *IdentityProviderUpsert) ClearIconURL() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldIconURL)
	return u
}

// SetButtonText sets the "button_text" field.
func (u *IdentityProviderUpsert) SetButtonText(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldButtonText, v)
	return u
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateButtonText() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldButtonText)
	return u
}

// ClearButtonText clears the value of the "button_text" field.
func (u *IdentityProviderUpsert) ClearButtonText() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldButtonText)
	return u
}

// SetProtocol sets the "protocol" field.
func (u *IdentityProviderUpsert) SetProtocol(v string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldProtocol, v)
	return u
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateProtocol() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldProtocol)
	return u
}

// ClearProtocol clears the value of the "protocol" field.
func (u *IdentityProviderUpsert) ClearProtocol() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldProtocol)
	return u
}

// SetDomains sets the "domains" field.
func (u *IdentityProviderUpsert) SetDomains(v []string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldDomains, v)
	return u
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateDomains() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldDomains)
	return u
}

// ClearDomains clears the value of the "domains" field.
func (u *IdentityProviderUpsert) ClearDomains() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldDomains)
	return u
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (u *IdentityProviderUpsert) SetAttributesMapping(v map[string]string) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldAttributesMapping, v)
	return u
}

// UpdateAttributesMapping sets the "attributes_mapping" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateAttributesMapping() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldAttributesMapping)
	return u
}

// ClearAttributesMapping clears the value of the "attributes_mapping" field.
func (u *IdentityProviderUpsert) ClearAttributesMapping() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldAttributesMapping)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *IdentityProviderUpsert) SetMetadata(v map[string]interface{}) *IdentityProviderUpsert {
	u.Set(identityprovider.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *IdentityProviderUpsert) UpdateMetadata() *IdentityProviderUpsert {
	u.SetExcluded(identityprovider.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *IdentityProviderUpsert) ClearMetadata() *IdentityProviderUpsert {
	u.SetNull(identityprovider.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(identityprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IdentityProviderUpsertOne) UpdateNewValues() *IdentityProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(identityprovider.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(identityprovider.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IdentityProviderUpsertOne) Ignore() *IdentityProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentityProviderUpsertOne) DoNothing() *IdentityProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentityProviderCreate.OnConflict
// documentation for more info.
func (u *IdentityProviderUpsertOne) Update(set func(*IdentityProviderUpsert)) *IdentityProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentityProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityProviderUpsertOne) SetUpdatedAt(v time.Time) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateUpdatedAt() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IdentityProviderUpsertOne) SetDeletedAt(v time.Time) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateDeletedAt() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IdentityProviderUpsertOne) ClearDeletedAt() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *IdentityProviderUpsertOne) SetName(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateName() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateName()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *IdentityProviderUpsertOne) SetOrganizationID(v xid.ID) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateOrganizationID() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetProviderType sets the "provider_type" field.
func (u *IdentityProviderUpsertOne) SetProviderType(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetProviderType(v)
	})
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateProviderType() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateProviderType()
	})
}

// SetClientID sets the "client_id" field.
func (u *IdentityProviderUpsertOne) SetClientID(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateClientID() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *IdentityProviderUpsertOne) ClearClientID() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *IdentityProviderUpsertOne) SetClientSecret(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateClientSecret() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *IdentityProviderUpsertOne) ClearClientSecret() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearClientSecret()
	})
}

// SetIssuer sets the "issuer" field.
func (u *IdentityProviderUpsertOne) SetIssuer(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetIssuer(v)
	})
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateIssuer() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateIssuer()
	})
}

// ClearIssuer clears the value of the "issuer" field.
func (u *IdentityProviderUpsertOne) ClearIssuer() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearIssuer()
	})
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (u *IdentityProviderUpsertOne) SetAuthorizationEndpoint(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAuthorizationEndpoint(v)
	})
}

// UpdateAuthorizationEndpoint sets the "authorization_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateAuthorizationEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAuthorizationEndpoint()
	})
}

// ClearAuthorizationEndpoint clears the value of the "authorization_endpoint" field.
func (u *IdentityProviderUpsertOne) ClearAuthorizationEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearAuthorizationEndpoint()
	})
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (u *IdentityProviderUpsertOne) SetTokenEndpoint(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetTokenEndpoint(v)
	})
}

// UpdateTokenEndpoint sets the "token_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateTokenEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateTokenEndpoint()
	})
}

// ClearTokenEndpoint clears the value of the "token_endpoint" field.
func (u *IdentityProviderUpsertOne) ClearTokenEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearTokenEndpoint()
	})
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (u *IdentityProviderUpsertOne) SetUserinfoEndpoint(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetUserinfoEndpoint(v)
	})
}

// UpdateUserinfoEndpoint sets the "userinfo_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateUserinfoEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateUserinfoEndpoint()
	})
}

// ClearUserinfoEndpoint clears the value of the "userinfo_endpoint" field.
func (u *IdentityProviderUpsertOne) ClearUserinfoEndpoint() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearUserinfoEndpoint()
	})
}

// SetJwksURI sets the "jwks_uri" field.
func (u *IdentityProviderUpsertOne) SetJwksURI(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetJwksURI(v)
	})
}

// UpdateJwksURI sets the "jwks_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateJwksURI() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateJwksURI()
	})
}

// ClearJwksURI clears the value of the "jwks_uri" field.
func (u *IdentityProviderUpsertOne) ClearJwksURI() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearJwksURI()
	})
}

// SetMetadataURL sets the "metadata_url" field.
func (u *IdentityProviderUpsertOne) SetMetadataURL(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetMetadataURL(v)
	})
}

// UpdateMetadataURL sets the "metadata_url" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateMetadataURL() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateMetadataURL()
	})
}

// ClearMetadataURL clears the value of the "metadata_url" field.
func (u *IdentityProviderUpsertOne) ClearMetadataURL() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearMetadataURL()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *IdentityProviderUpsertOne) SetRedirectURI(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateRedirectURI() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *IdentityProviderUpsertOne) ClearRedirectURI() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearRedirectURI()
	})
}

// SetCertificate sets the "certificate" field.
func (u *IdentityProviderUpsertOne) SetCertificate(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetCertificate(v)
	})
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateCertificate() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateCertificate()
	})
}

// ClearCertificate clears the value of the "certificate" field.
func (u *IdentityProviderUpsertOne) ClearCertificate() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearCertificate()
	})
}

// SetPrivateKey sets the "private_key" field.
func (u *IdentityProviderUpsertOne) SetPrivateKey(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetPrivateKey(v)
	})
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdatePrivateKey() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdatePrivateKey()
	})
}

// ClearPrivateKey clears the value of the "private_key" field.
func (u *IdentityProviderUpsertOne) ClearPrivateKey() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearPrivateKey()
	})
}

// SetActive sets the "active" field.
func (u *IdentityProviderUpsertOne) SetActive(v bool) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateActive() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateActive()
	})
}

// SetEnabled sets the "enabled" field.
func (u *IdentityProviderUpsertOne) SetEnabled(v bool) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateEnabled() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetPrimary sets the "primary" field.
func (u *IdentityProviderUpsertOne) SetPrimary(v bool) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetPrimary(v)
	})
}

// UpdatePrimary sets the "primary" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdatePrimary() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdatePrimary()
	})
}

// SetAutoProvision sets the "auto_provision" field.
func (u *IdentityProviderUpsertOne) SetAutoProvision(v bool) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAutoProvision(v)
	})
}

// UpdateAutoProvision sets the "auto_provision" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateAutoProvision() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAutoProvision()
	})
}

// SetDefaultRole sets the "default_role" field.
func (u *IdentityProviderUpsertOne) SetDefaultRole(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDefaultRole(v)
	})
}

// UpdateDefaultRole sets the "default_role" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateDefaultRole() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDefaultRole()
	})
}

// ClearDefaultRole clears the value of the "default_role" field.
func (u *IdentityProviderUpsertOne) ClearDefaultRole() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDefaultRole()
	})
}

// SetDomain sets the "domain" field.
func (u *IdentityProviderUpsertOne) SetDomain(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateDomain() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *IdentityProviderUpsertOne) ClearDomain() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDomain()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *IdentityProviderUpsertOne) SetIconURL(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateIconURL() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *IdentityProviderUpsertOne) ClearIconURL() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearIconURL()
	})
}

// SetButtonText sets the "button_text" field.
func (u *IdentityProviderUpsertOne) SetButtonText(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetButtonText(v)
	})
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateButtonText() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateButtonText()
	})
}

// ClearButtonText clears the value of the "button_text" field.
func (u *IdentityProviderUpsertOne) ClearButtonText() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearButtonText()
	})
}

// SetProtocol sets the "protocol" field.
func (u *IdentityProviderUpsertOne) SetProtocol(v string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateProtocol() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *IdentityProviderUpsertOne) ClearProtocol() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearProtocol()
	})
}

// SetDomains sets the "domains" field.
func (u *IdentityProviderUpsertOne) SetDomains(v []string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateDomains() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *IdentityProviderUpsertOne) ClearDomains() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDomains()
	})
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (u *IdentityProviderUpsertOne) SetAttributesMapping(v map[string]string) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAttributesMapping(v)
	})
}

// UpdateAttributesMapping sets the "attributes_mapping" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateAttributesMapping() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAttributesMapping()
	})
}

// ClearAttributesMapping clears the value of the "attributes_mapping" field.
func (u *IdentityProviderUpsertOne) ClearAttributesMapping() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearAttributesMapping()
	})
}

// SetMetadata sets the "metadata" field.
func (u *IdentityProviderUpsertOne) SetMetadata(v map[string]interface{}) *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *IdentityProviderUpsertOne) UpdateMetadata() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *IdentityProviderUpsertOne) ClearMetadata() *IdentityProviderUpsertOne {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *IdentityProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentityProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentityProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IdentityProviderUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IdentityProviderUpsertOne.ID is not supported by MySQL driver. Use IdentityProviderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IdentityProviderUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IdentityProviderCreateBulk is the builder for creating many IdentityProvider entities in bulk.
type IdentityProviderCreateBulk struct {
	config
	err      error
	builders []*IdentityProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the IdentityProvider entities in the database.
func (ipcb *IdentityProviderCreateBulk) Save(ctx context.Context) ([]*IdentityProvider, error) {
	if ipcb.err != nil {
		return nil, ipcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*IdentityProvider, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentityProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ipcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *IdentityProviderCreateBulk) SaveX(ctx context.Context) []*IdentityProvider {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipcb *IdentityProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := ipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipcb *IdentityProviderCreateBulk) ExecX(ctx context.Context) {
	if err := ipcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IdentityProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentityProviderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ipcb *IdentityProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *IdentityProviderUpsertBulk {
	ipcb.conflict = opts
	return &IdentityProviderUpsertBulk{
		create: ipcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ipcb *IdentityProviderCreateBulk) OnConflictColumns(columns ...string) *IdentityProviderUpsertBulk {
	ipcb.conflict = append(ipcb.conflict, sql.ConflictColumns(columns...))
	return &IdentityProviderUpsertBulk{
		create: ipcb,
	}
}

// IdentityProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of IdentityProvider nodes.
type IdentityProviderUpsertBulk struct {
	create *IdentityProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(identityprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IdentityProviderUpsertBulk) UpdateNewValues() *IdentityProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(identityprovider.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(identityprovider.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IdentityProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IdentityProviderUpsertBulk) Ignore() *IdentityProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentityProviderUpsertBulk) DoNothing() *IdentityProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentityProviderCreateBulk.OnConflict
// documentation for more info.
func (u *IdentityProviderUpsertBulk) Update(set func(*IdentityProviderUpsert)) *IdentityProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentityProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityProviderUpsertBulk) SetUpdatedAt(v time.Time) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateUpdatedAt() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IdentityProviderUpsertBulk) SetDeletedAt(v time.Time) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateDeletedAt() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IdentityProviderUpsertBulk) ClearDeletedAt() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *IdentityProviderUpsertBulk) SetName(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateName() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateName()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *IdentityProviderUpsertBulk) SetOrganizationID(v xid.ID) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateOrganizationID() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetProviderType sets the "provider_type" field.
func (u *IdentityProviderUpsertBulk) SetProviderType(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetProviderType(v)
	})
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateProviderType() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateProviderType()
	})
}

// SetClientID sets the "client_id" field.
func (u *IdentityProviderUpsertBulk) SetClientID(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateClientID() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *IdentityProviderUpsertBulk) ClearClientID() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *IdentityProviderUpsertBulk) SetClientSecret(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateClientSecret() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *IdentityProviderUpsertBulk) ClearClientSecret() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearClientSecret()
	})
}

// SetIssuer sets the "issuer" field.
func (u *IdentityProviderUpsertBulk) SetIssuer(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetIssuer(v)
	})
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateIssuer() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateIssuer()
	})
}

// ClearIssuer clears the value of the "issuer" field.
func (u *IdentityProviderUpsertBulk) ClearIssuer() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearIssuer()
	})
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (u *IdentityProviderUpsertBulk) SetAuthorizationEndpoint(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAuthorizationEndpoint(v)
	})
}

// UpdateAuthorizationEndpoint sets the "authorization_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateAuthorizationEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAuthorizationEndpoint()
	})
}

// ClearAuthorizationEndpoint clears the value of the "authorization_endpoint" field.
func (u *IdentityProviderUpsertBulk) ClearAuthorizationEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearAuthorizationEndpoint()
	})
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (u *IdentityProviderUpsertBulk) SetTokenEndpoint(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetTokenEndpoint(v)
	})
}

// UpdateTokenEndpoint sets the "token_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateTokenEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateTokenEndpoint()
	})
}

// ClearTokenEndpoint clears the value of the "token_endpoint" field.
func (u *IdentityProviderUpsertBulk) ClearTokenEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearTokenEndpoint()
	})
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (u *IdentityProviderUpsertBulk) SetUserinfoEndpoint(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetUserinfoEndpoint(v)
	})
}

// UpdateUserinfoEndpoint sets the "userinfo_endpoint" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateUserinfoEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateUserinfoEndpoint()
	})
}

// ClearUserinfoEndpoint clears the value of the "userinfo_endpoint" field.
func (u *IdentityProviderUpsertBulk) ClearUserinfoEndpoint() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearUserinfoEndpoint()
	})
}

// SetJwksURI sets the "jwks_uri" field.
func (u *IdentityProviderUpsertBulk) SetJwksURI(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetJwksURI(v)
	})
}

// UpdateJwksURI sets the "jwks_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateJwksURI() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateJwksURI()
	})
}

// ClearJwksURI clears the value of the "jwks_uri" field.
func (u *IdentityProviderUpsertBulk) ClearJwksURI() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearJwksURI()
	})
}

// SetMetadataURL sets the "metadata_url" field.
func (u *IdentityProviderUpsertBulk) SetMetadataURL(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetMetadataURL(v)
	})
}

// UpdateMetadataURL sets the "metadata_url" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateMetadataURL() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateMetadataURL()
	})
}

// ClearMetadataURL clears the value of the "metadata_url" field.
func (u *IdentityProviderUpsertBulk) ClearMetadataURL() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearMetadataURL()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *IdentityProviderUpsertBulk) SetRedirectURI(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateRedirectURI() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *IdentityProviderUpsertBulk) ClearRedirectURI() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearRedirectURI()
	})
}

// SetCertificate sets the "certificate" field.
func (u *IdentityProviderUpsertBulk) SetCertificate(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetCertificate(v)
	})
}

// UpdateCertificate sets the "certificate" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateCertificate() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateCertificate()
	})
}

// ClearCertificate clears the value of the "certificate" field.
func (u *IdentityProviderUpsertBulk) ClearCertificate() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearCertificate()
	})
}

// SetPrivateKey sets the "private_key" field.
func (u *IdentityProviderUpsertBulk) SetPrivateKey(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetPrivateKey(v)
	})
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdatePrivateKey() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdatePrivateKey()
	})
}

// ClearPrivateKey clears the value of the "private_key" field.
func (u *IdentityProviderUpsertBulk) ClearPrivateKey() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearPrivateKey()
	})
}

// SetActive sets the "active" field.
func (u *IdentityProviderUpsertBulk) SetActive(v bool) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateActive() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateActive()
	})
}

// SetEnabled sets the "enabled" field.
func (u *IdentityProviderUpsertBulk) SetEnabled(v bool) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateEnabled() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetPrimary sets the "primary" field.
func (u *IdentityProviderUpsertBulk) SetPrimary(v bool) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetPrimary(v)
	})
}

// UpdatePrimary sets the "primary" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdatePrimary() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdatePrimary()
	})
}

// SetAutoProvision sets the "auto_provision" field.
func (u *IdentityProviderUpsertBulk) SetAutoProvision(v bool) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAutoProvision(v)
	})
}

// UpdateAutoProvision sets the "auto_provision" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateAutoProvision() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAutoProvision()
	})
}

// SetDefaultRole sets the "default_role" field.
func (u *IdentityProviderUpsertBulk) SetDefaultRole(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDefaultRole(v)
	})
}

// UpdateDefaultRole sets the "default_role" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateDefaultRole() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDefaultRole()
	})
}

// ClearDefaultRole clears the value of the "default_role" field.
func (u *IdentityProviderUpsertBulk) ClearDefaultRole() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDefaultRole()
	})
}

// SetDomain sets the "domain" field.
func (u *IdentityProviderUpsertBulk) SetDomain(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateDomain() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *IdentityProviderUpsertBulk) ClearDomain() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDomain()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *IdentityProviderUpsertBulk) SetIconURL(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateIconURL() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *IdentityProviderUpsertBulk) ClearIconURL() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearIconURL()
	})
}

// SetButtonText sets the "button_text" field.
func (u *IdentityProviderUpsertBulk) SetButtonText(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetButtonText(v)
	})
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateButtonText() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateButtonText()
	})
}

// ClearButtonText clears the value of the "button_text" field.
func (u *IdentityProviderUpsertBulk) ClearButtonText() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearButtonText()
	})
}

// SetProtocol sets the "protocol" field.
func (u *IdentityProviderUpsertBulk) SetProtocol(v string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateProtocol() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateProtocol()
	})
}

// ClearProtocol clears the value of the "protocol" field.
func (u *IdentityProviderUpsertBulk) ClearProtocol() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearProtocol()
	})
}

// SetDomains sets the "domains" field.
func (u *IdentityProviderUpsertBulk) SetDomains(v []string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateDomains() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *IdentityProviderUpsertBulk) ClearDomains() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearDomains()
	})
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (u *IdentityProviderUpsertBulk) SetAttributesMapping(v map[string]string) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetAttributesMapping(v)
	})
}

// UpdateAttributesMapping sets the "attributes_mapping" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateAttributesMapping() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateAttributesMapping()
	})
}

// ClearAttributesMapping clears the value of the "attributes_mapping" field.
func (u *IdentityProviderUpsertBulk) ClearAttributesMapping() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearAttributesMapping()
	})
}

// SetMetadata sets the "metadata" field.
func (u *IdentityProviderUpsertBulk) SetMetadata(v map[string]interface{}) *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *IdentityProviderUpsertBulk) UpdateMetadata() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *IdentityProviderUpsertBulk) ClearMetadata() *IdentityProviderUpsertBulk {
	return u.Update(func(s *IdentityProviderUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *IdentityProviderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IdentityProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentityProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentityProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
