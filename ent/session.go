// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID xid.ID `json:"user_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// LastActiveAt holds the value of the "last_active_at" field.
	LastActiveAt time.Time `json:"last_active_at,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges        SessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*Audit `json:"audit_logs,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes     [3]bool
	namedAuditLogs  map[string][]*Audit
	namedActivities map[string][]*Activity
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e SessionEdges) AuditLogsOrErr() ([]*Audit, error) {
	if e.loadedTypes[1] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e SessionEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[2] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldMetadata:
			values[i] = new([]byte)
		case session.FieldActive:
			values[i] = new(sql.NullBool)
		case session.FieldToken, session.FieldIPAddress, session.FieldUserAgent, session.FieldDeviceID, session.FieldLocation:
			values[i] = new(sql.NullString)
		case session.FieldCreatedAt, session.FieldUpdatedAt, session.FieldExpiresAt, session.FieldLastActiveAt:
			values[i] = new(sql.NullTime)
		case session.FieldID, session.FieldUserID, session.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case session.FieldUserID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				s.UserID = *value
			}
		case session.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				s.Token = value.String
			}
		case session.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				s.IPAddress = value.String
			}
		case session.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				s.UserAgent = value.String
			}
		case session.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				s.DeviceID = value.String
			}
		case session.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case session.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				s.OrganizationID = *value
			}
		case session.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				s.Active = value.Bool
			}
		case session.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				s.ExpiresAt = value.Time
			}
		case session.FieldLastActiveAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_active_at", values[i])
			} else if value.Valid {
				s.LastActiveAt = value.Time
			}
		case session.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Session entity.
func (s *Session) QueryUser() *UserQuery {
	return NewSessionClient(s.config).QueryUser(s)
}

// QueryAuditLogs queries the "audit_logs" edge of the Session entity.
func (s *Session) QueryAuditLogs() *AuditQuery {
	return NewSessionClient(s.config).QueryAuditLogs(s)
}

// QueryActivities queries the "activities" edge of the Session entity.
func (s *Session) QueryActivities() *ActivityQuery {
	return NewSessionClient(s.config).QueryActivities(s)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(s.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(s.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(s.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", s.Active))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(s.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_active_at=")
	builder.WriteString(s.LastActiveAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", s.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuditLogs returns the AuditLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Session) NamedAuditLogs(name string) ([]*Audit, error) {
	if s.Edges.namedAuditLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedAuditLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Session) appendNamedAuditLogs(name string, edges ...*Audit) {
	if s.Edges.namedAuditLogs == nil {
		s.Edges.namedAuditLogs = make(map[string][]*Audit)
	}
	if len(edges) == 0 {
		s.Edges.namedAuditLogs[name] = []*Audit{}
	} else {
		s.Edges.namedAuditLogs[name] = append(s.Edges.namedAuditLogs[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Session) NamedActivities(name string) ([]*Activity, error) {
	if s.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Session) appendNamedActivities(name string, edges ...*Activity) {
	if s.Edges.namedActivities == nil {
		s.Edges.namedActivities = make(map[string][]*Activity)
	}
	if len(edges) == 0 {
		s.Edges.namedActivities[name] = []*Activity{}
	} else {
		s.Edges.namedActivities[name] = append(s.Edges.namedActivities[name], edges...)
	}
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
