// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"
	"github.com/xraph/frank/pkg/model"
)

// WebhookUpdate is the builder for updating Webhook entities.
type WebhookUpdate struct {
	config
	hooks     []Hook
	mutation  *WebhookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wu *WebhookUpdate) Where(ps ...predicate.Webhook) *WebhookUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WebhookUpdate) SetUpdatedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WebhookUpdate) SetDeletedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableDeletedAt(t *time.Time) *WebhookUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wu *WebhookUpdate) ClearDeletedAt() *WebhookUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetName sets the "name" field.
func (wu *WebhookUpdate) SetName(s string) *WebhookUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableName(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetURL sets the "url" field.
func (wu *WebhookUpdate) SetURL(s string) *WebhookUpdate {
	wu.mutation.SetURL(s)
	return wu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableURL(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetURL(*s)
	}
	return wu
}

// SetOrganizationID sets the "organization_id" field.
func (wu *WebhookUpdate) SetOrganizationID(x xid.ID) *WebhookUpdate {
	wu.mutation.SetOrganizationID(x)
	return wu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableOrganizationID(x *xid.ID) *WebhookUpdate {
	if x != nil {
		wu.SetOrganizationID(*x)
	}
	return wu
}

// SetSecret sets the "secret" field.
func (wu *WebhookUpdate) SetSecret(s string) *WebhookUpdate {
	wu.mutation.SetSecret(s)
	return wu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableSecret(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetSecret(*s)
	}
	return wu
}

// SetActive sets the "active" field.
func (wu *WebhookUpdate) SetActive(b bool) *WebhookUpdate {
	wu.mutation.SetActive(b)
	return wu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableActive(b *bool) *WebhookUpdate {
	if b != nil {
		wu.SetActive(*b)
	}
	return wu
}

// SetEventTypes sets the "event_types" field.
func (wu *WebhookUpdate) SetEventTypes(s []string) *WebhookUpdate {
	wu.mutation.SetEventTypes(s)
	return wu
}

// AppendEventTypes appends s to the "event_types" field.
func (wu *WebhookUpdate) AppendEventTypes(s []string) *WebhookUpdate {
	wu.mutation.AppendEventTypes(s)
	return wu
}

// SetVersion sets the "version" field.
func (wu *WebhookUpdate) SetVersion(s string) *WebhookUpdate {
	wu.mutation.SetVersion(s)
	return wu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableVersion(s *string) *WebhookUpdate {
	if s != nil {
		wu.SetVersion(*s)
	}
	return wu
}

// SetRetryCount sets the "retry_count" field.
func (wu *WebhookUpdate) SetRetryCount(i int) *WebhookUpdate {
	wu.mutation.ResetRetryCount()
	wu.mutation.SetRetryCount(i)
	return wu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableRetryCount(i *int) *WebhookUpdate {
	if i != nil {
		wu.SetRetryCount(*i)
	}
	return wu
}

// AddRetryCount adds i to the "retry_count" field.
func (wu *WebhookUpdate) AddRetryCount(i int) *WebhookUpdate {
	wu.mutation.AddRetryCount(i)
	return wu
}

// SetTimeoutMs sets the "timeout_ms" field.
func (wu *WebhookUpdate) SetTimeoutMs(i int) *WebhookUpdate {
	wu.mutation.ResetTimeoutMs()
	wu.mutation.SetTimeoutMs(i)
	return wu
}

// SetNillableTimeoutMs sets the "timeout_ms" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableTimeoutMs(i *int) *WebhookUpdate {
	if i != nil {
		wu.SetTimeoutMs(*i)
	}
	return wu
}

// AddTimeoutMs adds i to the "timeout_ms" field.
func (wu *WebhookUpdate) AddTimeoutMs(i int) *WebhookUpdate {
	wu.mutation.AddTimeoutMs(i)
	return wu
}

// SetFormat sets the "format" field.
func (wu *WebhookUpdate) SetFormat(mf model.WebhookFormat) *WebhookUpdate {
	wu.mutation.SetFormat(mf)
	return wu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableFormat(mf *model.WebhookFormat) *WebhookUpdate {
	if mf != nil {
		wu.SetFormat(*mf)
	}
	return wu
}

// SetMetadata sets the "metadata" field.
func (wu *WebhookUpdate) SetMetadata(m map[string]interface{}) *WebhookUpdate {
	wu.mutation.SetMetadata(m)
	return wu
}

// ClearMetadata clears the value of the "metadata" field.
func (wu *WebhookUpdate) ClearMetadata() *WebhookUpdate {
	wu.mutation.ClearMetadata()
	return wu
}

// SetHeaders sets the "headers" field.
func (wu *WebhookUpdate) SetHeaders(m map[string]string) *WebhookUpdate {
	wu.mutation.SetHeaders(m)
	return wu
}

// ClearHeaders clears the value of the "headers" field.
func (wu *WebhookUpdate) ClearHeaders() *WebhookUpdate {
	wu.mutation.ClearHeaders()
	return wu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (wu *WebhookUpdate) SetOrganization(o *Organization) *WebhookUpdate {
	return wu.SetOrganizationID(o.ID)
}

// AddEventIDs adds the "events" edge to the WebhookEvent entity by IDs.
func (wu *WebhookUpdate) AddEventIDs(ids ...xid.ID) *WebhookUpdate {
	wu.mutation.AddEventIDs(ids...)
	return wu
}

// AddEvents adds the "events" edges to the WebhookEvent entity.
func (wu *WebhookUpdate) AddEvents(w ...*WebhookEvent) *WebhookUpdate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddEventIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wu *WebhookUpdate) Mutation() *WebhookMutation {
	return wu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (wu *WebhookUpdate) ClearOrganization() *WebhookUpdate {
	wu.mutation.ClearOrganization()
	return wu
}

// ClearEvents clears all "events" edges to the WebhookEvent entity.
func (wu *WebhookUpdate) ClearEvents() *WebhookUpdate {
	wu.mutation.ClearEvents()
	return wu
}

// RemoveEventIDs removes the "events" edge to WebhookEvent entities by IDs.
func (wu *WebhookUpdate) RemoveEventIDs(ids ...xid.ID) *WebhookUpdate {
	wu.mutation.RemoveEventIDs(ids...)
	return wu
}

// RemoveEvents removes "events" edges to WebhookEvent entities.
func (wu *WebhookUpdate) RemoveEvents(w ...*WebhookEvent) *WebhookUpdate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebhookUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebhookUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebhookUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WebhookUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := webhook.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WebhookUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if v, ok := wu.mutation.URL(); ok {
		if err := webhook.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Webhook.url": %w`, err)}
		}
	}
	if v, ok := wu.mutation.OrganizationID(); ok {
		if err := webhook.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Webhook.organization_id": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Secret(); ok {
		if err := webhook.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Webhook.secret": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Format(); ok {
		if err := webhook.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Webhook.format": %w`, err)}
		}
	}
	if wu.mutation.OrganizationCleared() && len(wu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Webhook.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WebhookUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(webhook.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(webhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.URL(); ok {
		_spec.SetField(webhook.FieldURL, field.TypeString, value)
	}
	if value, ok := wu.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeString, value)
	}
	if value, ok := wu.mutation.Active(); ok {
		_spec.SetField(webhook.FieldActive, field.TypeBool, value)
	}
	if value, ok := wu.mutation.EventTypes(); ok {
		_spec.SetField(webhook.FieldEventTypes, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedEventTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webhook.FieldEventTypes, value)
		})
	}
	if value, ok := wu.mutation.Version(); ok {
		_spec.SetField(webhook.FieldVersion, field.TypeString, value)
	}
	if value, ok := wu.mutation.RetryCount(); ok {
		_spec.SetField(webhook.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedRetryCount(); ok {
		_spec.AddField(webhook.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := wu.mutation.TimeoutMs(); ok {
		_spec.SetField(webhook.FieldTimeoutMs, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedTimeoutMs(); ok {
		_spec.AddField(webhook.FieldTimeoutMs, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Format(); ok {
		_spec.SetField(webhook.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.Metadata(); ok {
		_spec.SetField(webhook.FieldMetadata, field.TypeJSON, value)
	}
	if wu.mutation.MetadataCleared() {
		_spec.ClearField(webhook.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wu.mutation.Headers(); ok {
		_spec.SetField(webhook.FieldHeaders, field.TypeJSON, value)
	}
	if wu.mutation.HeadersCleared() {
		_spec.ClearField(webhook.FieldHeaders, field.TypeJSON)
	}
	if wu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !wu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebhookUpdateOne is the builder for updating a single Webhook entity.
type WebhookUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WebhookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WebhookUpdateOne) SetUpdatedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WebhookUpdateOne) SetDeletedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableDeletedAt(t *time.Time) *WebhookUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wuo *WebhookUpdateOne) ClearDeletedAt() *WebhookUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WebhookUpdateOne) SetName(s string) *WebhookUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableName(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetURL sets the "url" field.
func (wuo *WebhookUpdateOne) SetURL(s string) *WebhookUpdateOne {
	wuo.mutation.SetURL(s)
	return wuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableURL(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetURL(*s)
	}
	return wuo
}

// SetOrganizationID sets the "organization_id" field.
func (wuo *WebhookUpdateOne) SetOrganizationID(x xid.ID) *WebhookUpdateOne {
	wuo.mutation.SetOrganizationID(x)
	return wuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableOrganizationID(x *xid.ID) *WebhookUpdateOne {
	if x != nil {
		wuo.SetOrganizationID(*x)
	}
	return wuo
}

// SetSecret sets the "secret" field.
func (wuo *WebhookUpdateOne) SetSecret(s string) *WebhookUpdateOne {
	wuo.mutation.SetSecret(s)
	return wuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableSecret(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetSecret(*s)
	}
	return wuo
}

// SetActive sets the "active" field.
func (wuo *WebhookUpdateOne) SetActive(b bool) *WebhookUpdateOne {
	wuo.mutation.SetActive(b)
	return wuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableActive(b *bool) *WebhookUpdateOne {
	if b != nil {
		wuo.SetActive(*b)
	}
	return wuo
}

// SetEventTypes sets the "event_types" field.
func (wuo *WebhookUpdateOne) SetEventTypes(s []string) *WebhookUpdateOne {
	wuo.mutation.SetEventTypes(s)
	return wuo
}

// AppendEventTypes appends s to the "event_types" field.
func (wuo *WebhookUpdateOne) AppendEventTypes(s []string) *WebhookUpdateOne {
	wuo.mutation.AppendEventTypes(s)
	return wuo
}

// SetVersion sets the "version" field.
func (wuo *WebhookUpdateOne) SetVersion(s string) *WebhookUpdateOne {
	wuo.mutation.SetVersion(s)
	return wuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableVersion(s *string) *WebhookUpdateOne {
	if s != nil {
		wuo.SetVersion(*s)
	}
	return wuo
}

// SetRetryCount sets the "retry_count" field.
func (wuo *WebhookUpdateOne) SetRetryCount(i int) *WebhookUpdateOne {
	wuo.mutation.ResetRetryCount()
	wuo.mutation.SetRetryCount(i)
	return wuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableRetryCount(i *int) *WebhookUpdateOne {
	if i != nil {
		wuo.SetRetryCount(*i)
	}
	return wuo
}

// AddRetryCount adds i to the "retry_count" field.
func (wuo *WebhookUpdateOne) AddRetryCount(i int) *WebhookUpdateOne {
	wuo.mutation.AddRetryCount(i)
	return wuo
}

// SetTimeoutMs sets the "timeout_ms" field.
func (wuo *WebhookUpdateOne) SetTimeoutMs(i int) *WebhookUpdateOne {
	wuo.mutation.ResetTimeoutMs()
	wuo.mutation.SetTimeoutMs(i)
	return wuo
}

// SetNillableTimeoutMs sets the "timeout_ms" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableTimeoutMs(i *int) *WebhookUpdateOne {
	if i != nil {
		wuo.SetTimeoutMs(*i)
	}
	return wuo
}

// AddTimeoutMs adds i to the "timeout_ms" field.
func (wuo *WebhookUpdateOne) AddTimeoutMs(i int) *WebhookUpdateOne {
	wuo.mutation.AddTimeoutMs(i)
	return wuo
}

// SetFormat sets the "format" field.
func (wuo *WebhookUpdateOne) SetFormat(mf model.WebhookFormat) *WebhookUpdateOne {
	wuo.mutation.SetFormat(mf)
	return wuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableFormat(mf *model.WebhookFormat) *WebhookUpdateOne {
	if mf != nil {
		wuo.SetFormat(*mf)
	}
	return wuo
}

// SetMetadata sets the "metadata" field.
func (wuo *WebhookUpdateOne) SetMetadata(m map[string]interface{}) *WebhookUpdateOne {
	wuo.mutation.SetMetadata(m)
	return wuo
}

// ClearMetadata clears the value of the "metadata" field.
func (wuo *WebhookUpdateOne) ClearMetadata() *WebhookUpdateOne {
	wuo.mutation.ClearMetadata()
	return wuo
}

// SetHeaders sets the "headers" field.
func (wuo *WebhookUpdateOne) SetHeaders(m map[string]string) *WebhookUpdateOne {
	wuo.mutation.SetHeaders(m)
	return wuo
}

// ClearHeaders clears the value of the "headers" field.
func (wuo *WebhookUpdateOne) ClearHeaders() *WebhookUpdateOne {
	wuo.mutation.ClearHeaders()
	return wuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (wuo *WebhookUpdateOne) SetOrganization(o *Organization) *WebhookUpdateOne {
	return wuo.SetOrganizationID(o.ID)
}

// AddEventIDs adds the "events" edge to the WebhookEvent entity by IDs.
func (wuo *WebhookUpdateOne) AddEventIDs(ids ...xid.ID) *WebhookUpdateOne {
	wuo.mutation.AddEventIDs(ids...)
	return wuo
}

// AddEvents adds the "events" edges to the WebhookEvent entity.
func (wuo *WebhookUpdateOne) AddEvents(w ...*WebhookEvent) *WebhookUpdateOne {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddEventIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wuo *WebhookUpdateOne) Mutation() *WebhookMutation {
	return wuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (wuo *WebhookUpdateOne) ClearOrganization() *WebhookUpdateOne {
	wuo.mutation.ClearOrganization()
	return wuo
}

// ClearEvents clears all "events" edges to the WebhookEvent entity.
func (wuo *WebhookUpdateOne) ClearEvents() *WebhookUpdateOne {
	wuo.mutation.ClearEvents()
	return wuo
}

// RemoveEventIDs removes the "events" edge to WebhookEvent entities by IDs.
func (wuo *WebhookUpdateOne) RemoveEventIDs(ids ...xid.ID) *WebhookUpdateOne {
	wuo.mutation.RemoveEventIDs(ids...)
	return wuo
}

// RemoveEvents removes "events" edges to WebhookEvent entities.
func (wuo *WebhookUpdateOne) RemoveEvents(w ...*WebhookEvent) *WebhookUpdateOne {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wuo *WebhookUpdateOne) Where(ps ...predicate.Webhook) *WebhookUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebhookUpdateOne) Select(field string, fields ...string) *WebhookUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Webhook entity.
func (wuo *WebhookUpdateOne) Save(ctx context.Context) (*Webhook, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebhookUpdateOne) SaveX(ctx context.Context) *Webhook {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebhookUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WebhookUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := webhook.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WebhookUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.URL(); ok {
		if err := webhook.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Webhook.url": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.OrganizationID(); ok {
		if err := webhook.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Webhook.organization_id": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Secret(); ok {
		if err := webhook.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Webhook.secret": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Format(); ok {
		if err := webhook.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Webhook.format": %w`, err)}
		}
	}
	if wuo.mutation.OrganizationCleared() && len(wuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Webhook.organization"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WebhookUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebhookUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WebhookUpdateOne) sqlSave(ctx context.Context) (_node *Webhook, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Webhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webhook.FieldID)
		for _, f := range fields {
			if !webhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(webhook.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(webhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.URL(); ok {
		_spec.SetField(webhook.FieldURL, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Active(); ok {
		_spec.SetField(webhook.FieldActive, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.EventTypes(); ok {
		_spec.SetField(webhook.FieldEventTypes, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedEventTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webhook.FieldEventTypes, value)
		})
	}
	if value, ok := wuo.mutation.Version(); ok {
		_spec.SetField(webhook.FieldVersion, field.TypeString, value)
	}
	if value, ok := wuo.mutation.RetryCount(); ok {
		_spec.SetField(webhook.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(webhook.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.TimeoutMs(); ok {
		_spec.SetField(webhook.FieldTimeoutMs, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedTimeoutMs(); ok {
		_spec.AddField(webhook.FieldTimeoutMs, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Format(); ok {
		_spec.SetField(webhook.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.Metadata(); ok {
		_spec.SetField(webhook.FieldMetadata, field.TypeJSON, value)
	}
	if wuo.mutation.MetadataCleared() {
		_spec.ClearField(webhook.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wuo.mutation.Headers(); ok {
		_spec.SetField(webhook.FieldHeaders, field.TypeJSON, value)
	}
	if wuo.mutation.HeadersCleared() {
		_spec.ClearField(webhook.FieldHeaders, field.TypeJSON)
	}
	if wuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !wuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Webhook{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
