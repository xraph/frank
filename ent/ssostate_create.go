// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/ssostate"
)

// SSOStateCreate is the builder for creating a SSOState entity.
type SSOStateCreate struct {
	config
	mutation *SSOStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SSOStateCreate) SetCreatedAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableCreatedAt(t *time.Time) *SSOStateCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SSOStateCreate) SetUpdatedAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableUpdatedAt(t *time.Time) *SSOStateCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetDeletedAt sets the "deleted_at" field.
func (ssc *SSOStateCreate) SetDeletedAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetDeletedAt(t)
	return ssc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableDeletedAt(t *time.Time) *SSOStateCreate {
	if t != nil {
		ssc.SetDeletedAt(*t)
	}
	return ssc
}

// SetState sets the "state" field.
func (ssc *SSOStateCreate) SetState(s string) *SSOStateCreate {
	ssc.mutation.SetState(s)
	return ssc
}

// SetData sets the "data" field.
func (ssc *SSOStateCreate) SetData(s string) *SSOStateCreate {
	ssc.mutation.SetData(s)
	return ssc
}

// SetExpiresAt sets the "expires_at" field.
func (ssc *SSOStateCreate) SetExpiresAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetExpiresAt(t)
	return ssc
}

// SetRedirectURL sets the "redirect_url" field.
func (ssc *SSOStateCreate) SetRedirectURL(s string) *SSOStateCreate {
	ssc.mutation.SetRedirectURL(s)
	return ssc
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableRedirectURL(s *string) *SSOStateCreate {
	if s != nil {
		ssc.SetRedirectURL(*s)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *SSOStateCreate) SetID(x xid.ID) *SSOStateCreate {
	ssc.mutation.SetID(x)
	return ssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableID(x *xid.ID) *SSOStateCreate {
	if x != nil {
		ssc.SetID(*x)
	}
	return ssc
}

// Mutation returns the SSOStateMutation object of the builder.
func (ssc *SSOStateCreate) Mutation() *SSOStateMutation {
	return ssc.mutation
}

// Save creates the SSOState in the database.
func (ssc *SSOStateCreate) Save(ctx context.Context) (*SSOState, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SSOStateCreate) SaveX(ctx context.Context) *SSOState {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SSOStateCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SSOStateCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SSOStateCreate) defaults() {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := ssostate.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := ssostate.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssc.mutation.ID(); !ok {
		v := ssostate.DefaultID()
		ssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SSOStateCreate) check() error {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SSOState.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SSOState.updated_at"`)}
	}
	if _, ok := ssc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SSOState.state"`)}
	}
	if _, ok := ssc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "SSOState.data"`)}
	}
	if v, ok := ssc.mutation.Data(); ok {
		if err := ssostate.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "SSOState.data": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "SSOState.expires_at"`)}
	}
	return nil
}

func (ssc *SSOStateCreate) sqlSave(ctx context.Context) (*SSOState, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SSOStateCreate) createSpec() (*SSOState, *sqlgraph.CreateSpec) {
	var (
		_node = &SSOState{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(ssostate.Table, sqlgraph.NewFieldSpec(ssostate.FieldID, field.TypeString))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(ssostate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(ssostate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.DeletedAt(); ok {
		_spec.SetField(ssostate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ssc.mutation.State(); ok {
		_spec.SetField(ssostate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ssc.mutation.Data(); ok {
		_spec.SetField(ssostate.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := ssc.mutation.ExpiresAt(); ok {
		_spec.SetField(ssostate.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := ssc.mutation.RedirectURL(); ok {
		_spec.SetField(ssostate.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SSOState.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SSOStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ssc *SSOStateCreate) OnConflict(opts ...sql.ConflictOption) *SSOStateUpsertOne {
	ssc.conflict = opts
	return &SSOStateUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SSOState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SSOStateCreate) OnConflictColumns(columns ...string) *SSOStateUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SSOStateUpsertOne{
		create: ssc,
	}
}

type (
	// SSOStateUpsertOne is the builder for "upsert"-ing
	//  one SSOState node.
	SSOStateUpsertOne struct {
		create *SSOStateCreate
	}

	// SSOStateUpsert is the "OnConflict" setter.
	SSOStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SSOStateUpsert) SetUpdatedAt(v time.Time) *SSOStateUpsert {
	u.Set(ssostate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateUpdatedAt() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SSOStateUpsert) SetDeletedAt(v time.Time) *SSOStateUpsert {
	u.Set(ssostate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateDeletedAt() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SSOStateUpsert) ClearDeletedAt() *SSOStateUpsert {
	u.SetNull(ssostate.FieldDeletedAt)
	return u
}

// SetState sets the "state" field.
func (u *SSOStateUpsert) SetState(v string) *SSOStateUpsert {
	u.Set(ssostate.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateState() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldState)
	return u
}

// SetData sets the "data" field.
func (u *SSOStateUpsert) SetData(v string) *SSOStateUpsert {
	u.Set(ssostate.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateData() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldData)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *SSOStateUpsert) SetExpiresAt(v time.Time) *SSOStateUpsert {
	u.Set(ssostate.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateExpiresAt() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldExpiresAt)
	return u
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SSOStateUpsert) SetRedirectURL(v string) *SSOStateUpsert {
	u.Set(ssostate.FieldRedirectURL, v)
	return u
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SSOStateUpsert) UpdateRedirectURL() *SSOStateUpsert {
	u.SetExcluded(ssostate.FieldRedirectURL)
	return u
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *SSOStateUpsert) ClearRedirectURL() *SSOStateUpsert {
	u.SetNull(ssostate.FieldRedirectURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SSOState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ssostate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SSOStateUpsertOne) UpdateNewValues() *SSOStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ssostate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ssostate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SSOState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SSOStateUpsertOne) Ignore() *SSOStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SSOStateUpsertOne) DoNothing() *SSOStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SSOStateCreate.OnConflict
// documentation for more info.
func (u *SSOStateUpsertOne) Update(set func(*SSOStateUpsert)) *SSOStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SSOStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SSOStateUpsertOne) SetUpdatedAt(v time.Time) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateUpdatedAt() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SSOStateUpsertOne) SetDeletedAt(v time.Time) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateDeletedAt() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SSOStateUpsertOne) ClearDeletedAt() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetState sets the "state" field.
func (u *SSOStateUpsertOne) SetState(v string) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateState() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateState()
	})
}

// SetData sets the "data" field.
func (u *SSOStateUpsertOne) SetData(v string) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateData() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateData()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *SSOStateUpsertOne) SetExpiresAt(v time.Time) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateExpiresAt() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SSOStateUpsertOne) SetRedirectURL(v string) *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SSOStateUpsertOne) UpdateRedirectURL() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateRedirectURL()
	})
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *SSOStateUpsertOne) ClearRedirectURL() *SSOStateUpsertOne {
	return u.Update(func(s *SSOStateUpsert) {
		s.ClearRedirectURL()
	})
}

// Exec executes the query.
func (u *SSOStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SSOStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SSOStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SSOStateUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SSOStateUpsertOne.ID is not supported by MySQL driver. Use SSOStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SSOStateUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SSOStateCreateBulk is the builder for creating many SSOState entities in bulk.
type SSOStateCreateBulk struct {
	config
	err      error
	builders []*SSOStateCreate
	conflict []sql.ConflictOption
}

// Save creates the SSOState entities in the database.
func (sscb *SSOStateCreateBulk) Save(ctx context.Context) ([]*SSOState, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SSOState, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SSOStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SSOStateCreateBulk) SaveX(ctx context.Context) []*SSOState {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SSOStateCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SSOStateCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SSOState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SSOStateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sscb *SSOStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SSOStateUpsertBulk {
	sscb.conflict = opts
	return &SSOStateUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SSOState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SSOStateCreateBulk) OnConflictColumns(columns ...string) *SSOStateUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SSOStateUpsertBulk{
		create: sscb,
	}
}

// SSOStateUpsertBulk is the builder for "upsert"-ing
// a bulk of SSOState nodes.
type SSOStateUpsertBulk struct {
	create *SSOStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SSOState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ssostate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SSOStateUpsertBulk) UpdateNewValues() *SSOStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ssostate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ssostate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SSOState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SSOStateUpsertBulk) Ignore() *SSOStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SSOStateUpsertBulk) DoNothing() *SSOStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SSOStateCreateBulk.OnConflict
// documentation for more info.
func (u *SSOStateUpsertBulk) Update(set func(*SSOStateUpsert)) *SSOStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SSOStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SSOStateUpsertBulk) SetUpdatedAt(v time.Time) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateUpdatedAt() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SSOStateUpsertBulk) SetDeletedAt(v time.Time) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateDeletedAt() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SSOStateUpsertBulk) ClearDeletedAt() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetState sets the "state" field.
func (u *SSOStateUpsertBulk) SetState(v string) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateState() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateState()
	})
}

// SetData sets the "data" field.
func (u *SSOStateUpsertBulk) SetData(v string) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateData() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateData()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *SSOStateUpsertBulk) SetExpiresAt(v time.Time) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateExpiresAt() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SSOStateUpsertBulk) SetRedirectURL(v string) *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SSOStateUpsertBulk) UpdateRedirectURL() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.UpdateRedirectURL()
	})
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *SSOStateUpsertBulk) ClearRedirectURL() *SSOStateUpsertBulk {
	return u.Update(func(s *SSOStateUpsert) {
		s.ClearRedirectURL()
	})
}

// Exec executes the query.
func (u *SSOStateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SSOStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SSOStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SSOStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
