// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/pkg/model"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoleUpdate) SetDeletedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeletedAt(t *time.Time) *RoleUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RoleUpdate) ClearDeletedAt() *RoleUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDisplayName sets the "display_name" field.
func (ru *RoleUpdate) SetDisplayName(s string) *RoleUpdate {
	ru.mutation.SetDisplayName(s)
	return ru
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDisplayName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDisplayName(*s)
	}
	return ru
}

// ClearDisplayName clears the value of the "display_name" field.
func (ru *RoleUpdate) ClearDisplayName() *RoleUpdate {
	ru.mutation.ClearDisplayName()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoleUpdate) SetDescription(s string) *RoleUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDescription(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoleUpdate) ClearDescription() *RoleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetRoleType sets the "role_type" field.
func (ru *RoleUpdate) SetRoleType(mt model.RoleType) *RoleUpdate {
	ru.mutation.SetRoleType(mt)
	return ru
}

// SetNillableRoleType sets the "role_type" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRoleType(mt *model.RoleType) *RoleUpdate {
	if mt != nil {
		ru.SetRoleType(*mt)
	}
	return ru
}

// SetOrganizationID sets the "organization_id" field.
func (ru *RoleUpdate) SetOrganizationID(x xid.ID) *RoleUpdate {
	ru.mutation.SetOrganizationID(x)
	return ru
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableOrganizationID(x *xid.ID) *RoleUpdate {
	if x != nil {
		ru.SetOrganizationID(*x)
	}
	return ru
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (ru *RoleUpdate) ClearOrganizationID() *RoleUpdate {
	ru.mutation.ClearOrganizationID()
	return ru
}

// SetApplicationID sets the "application_id" field.
func (ru *RoleUpdate) SetApplicationID(x xid.ID) *RoleUpdate {
	ru.mutation.SetApplicationID(x)
	return ru
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableApplicationID(x *xid.ID) *RoleUpdate {
	if x != nil {
		ru.SetApplicationID(*x)
	}
	return ru
}

// ClearApplicationID clears the value of the "application_id" field.
func (ru *RoleUpdate) ClearApplicationID() *RoleUpdate {
	ru.mutation.ClearApplicationID()
	return ru
}

// SetSystem sets the "system" field.
func (ru *RoleUpdate) SetSystem(b bool) *RoleUpdate {
	ru.mutation.SetSystem(b)
	return ru
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableSystem(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetSystem(*b)
	}
	return ru
}

// SetIsDefault sets the "is_default" field.
func (ru *RoleUpdate) SetIsDefault(b bool) *RoleUpdate {
	ru.mutation.SetIsDefault(b)
	return ru
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableIsDefault(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetIsDefault(*b)
	}
	return ru
}

// SetPriority sets the "priority" field.
func (ru *RoleUpdate) SetPriority(i int) *RoleUpdate {
	ru.mutation.ResetPriority()
	ru.mutation.SetPriority(i)
	return ru
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ru *RoleUpdate) SetNillablePriority(i *int) *RoleUpdate {
	if i != nil {
		ru.SetPriority(*i)
	}
	return ru
}

// AddPriority adds i to the "priority" field.
func (ru *RoleUpdate) AddPriority(i int) *RoleUpdate {
	ru.mutation.AddPriority(i)
	return ru
}

// SetColor sets the "color" field.
func (ru *RoleUpdate) SetColor(s string) *RoleUpdate {
	ru.mutation.SetColor(s)
	return ru
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableColor(s *string) *RoleUpdate {
	if s != nil {
		ru.SetColor(*s)
	}
	return ru
}

// ClearColor clears the value of the "color" field.
func (ru *RoleUpdate) ClearColor() *RoleUpdate {
	ru.mutation.ClearColor()
	return ru
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (ru *RoleUpdate) SetApplicableUserTypes(mt []model.UserType) *RoleUpdate {
	ru.mutation.SetApplicableUserTypes(mt)
	return ru
}

// AppendApplicableUserTypes appends mt to the "applicable_user_types" field.
func (ru *RoleUpdate) AppendApplicableUserTypes(mt []model.UserType) *RoleUpdate {
	ru.mutation.AppendApplicableUserTypes(mt)
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RoleUpdate) SetCreatedBy(s string) *RoleUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableCreatedBy(s *string) *RoleUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *RoleUpdate) ClearCreatedBy() *RoleUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetActive sets the "active" field.
func (ru *RoleUpdate) SetActive(b bool) *RoleUpdate {
	ru.mutation.SetActive(b)
	return ru
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableActive(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetActive(*b)
	}
	return ru
}

// SetParentID sets the "parent_id" field.
func (ru *RoleUpdate) SetParentID(x xid.ID) *RoleUpdate {
	ru.mutation.SetParentID(x)
	return ru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableParentID(x *xid.ID) *RoleUpdate {
	if x != nil {
		ru.SetParentID(*x)
	}
	return ru
}

// ClearParentID clears the value of the "parent_id" field.
func (ru *RoleUpdate) ClearParentID() *RoleUpdate {
	ru.mutation.ClearParentID()
	return ru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ru *RoleUpdate) SetOrganization(o *Organization) *RoleUpdate {
	return ru.SetOrganizationID(o.ID)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserRole entity by IDs.
func (ru *RoleUpdate) AddUserAssignmentIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.AddUserAssignmentIDs(ids...)
	return ru
}

// AddUserAssignments adds the "user_assignments" edges to the UserRole entity.
func (ru *RoleUpdate) AddUserAssignments(u ...*UserRole) *RoleUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddUserAssignmentIDs(ids...)
}

// AddSystemUserIDs adds the "system_users" edge to the User entity by IDs.
func (ru *RoleUpdate) AddSystemUserIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.AddSystemUserIDs(ids...)
	return ru
}

// AddSystemUsers adds the "system_users" edges to the User entity.
func (ru *RoleUpdate) AddSystemUsers(u ...*User) *RoleUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddSystemUserIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ru *RoleUpdate) AddPermissionIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.AddPermissionIDs(ids...)
	return ru
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ru *RoleUpdate) AddPermissions(p ...*Permission) *RoleUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPermissionIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (ru *RoleUpdate) AddMembershipIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.AddMembershipIDs(ids...)
	return ru
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (ru *RoleUpdate) AddMemberships(m ...*Membership) *RoleUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMembershipIDs(ids...)
}

// SetParent sets the "parent" edge to the Role entity.
func (ru *RoleUpdate) SetParent(r *Role) *RoleUpdate {
	return ru.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (ru *RoleUpdate) AddChildIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.AddChildIDs(ids...)
	return ru
}

// AddChildren adds the "children" edges to the Role entity.
func (ru *RoleUpdate) AddChildren(r ...*Role) *RoleUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ru *RoleUpdate) ClearOrganization() *RoleUpdate {
	ru.mutation.ClearOrganization()
	return ru
}

// ClearUserAssignments clears all "user_assignments" edges to the UserRole entity.
func (ru *RoleUpdate) ClearUserAssignments() *RoleUpdate {
	ru.mutation.ClearUserAssignments()
	return ru
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to UserRole entities by IDs.
func (ru *RoleUpdate) RemoveUserAssignmentIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.RemoveUserAssignmentIDs(ids...)
	return ru
}

// RemoveUserAssignments removes "user_assignments" edges to UserRole entities.
func (ru *RoleUpdate) RemoveUserAssignments(u ...*UserRole) *RoleUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveUserAssignmentIDs(ids...)
}

// ClearSystemUsers clears all "system_users" edges to the User entity.
func (ru *RoleUpdate) ClearSystemUsers() *RoleUpdate {
	ru.mutation.ClearSystemUsers()
	return ru
}

// RemoveSystemUserIDs removes the "system_users" edge to User entities by IDs.
func (ru *RoleUpdate) RemoveSystemUserIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.RemoveSystemUserIDs(ids...)
	return ru
}

// RemoveSystemUsers removes "system_users" edges to User entities.
func (ru *RoleUpdate) RemoveSystemUsers(u ...*User) *RoleUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveSystemUserIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ru *RoleUpdate) ClearPermissions() *RoleUpdate {
	ru.mutation.ClearPermissions()
	return ru
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ru *RoleUpdate) RemovePermissionIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.RemovePermissionIDs(ids...)
	return ru
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ru *RoleUpdate) RemovePermissions(p ...*Permission) *RoleUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePermissionIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (ru *RoleUpdate) ClearMemberships() *RoleUpdate {
	ru.mutation.ClearMemberships()
	return ru
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (ru *RoleUpdate) RemoveMembershipIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.RemoveMembershipIDs(ids...)
	return ru
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (ru *RoleUpdate) RemoveMemberships(m ...*Membership) *RoleUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMembershipIDs(ids...)
}

// ClearParent clears the "parent" edge to the Role entity.
func (ru *RoleUpdate) ClearParent() *RoleUpdate {
	ru.mutation.ClearParent()
	return ru
}

// ClearChildren clears all "children" edges to the Role entity.
func (ru *RoleUpdate) ClearChildren() *RoleUpdate {
	ru.mutation.ClearChildren()
	return ru
}

// RemoveChildIDs removes the "children" edge to Role entities by IDs.
func (ru *RoleUpdate) RemoveChildIDs(ids ...xid.ID) *RoleUpdate {
	ru.mutation.RemoveChildIDs(ids...)
	return ru
}

// RemoveChildren removes "children" edges to Role entities.
func (ru *RoleUpdate) RemoveChildren(r ...*Role) *RoleUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RoleType(); ok {
		if err := role.RoleTypeValidator(v); err != nil {
			return &ValidationError{Name: "role_type", err: fmt.Errorf(`ent: validator failed for field "Role.role_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.DisplayName(); ok {
		_spec.SetField(role.FieldDisplayName, field.TypeString, value)
	}
	if ru.mutation.DisplayNameCleared() {
		_spec.ClearField(role.FieldDisplayName, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.RoleType(); ok {
		_spec.SetField(role.FieldRoleType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.ApplicationID(); ok {
		_spec.SetField(role.FieldApplicationID, field.TypeString, value)
	}
	if ru.mutation.ApplicationIDCleared() {
		_spec.ClearField(role.FieldApplicationID, field.TypeString)
	}
	if value, ok := ru.mutation.System(); ok {
		_spec.SetField(role.FieldSystem, field.TypeBool, value)
	}
	if value, ok := ru.mutation.IsDefault(); ok {
		_spec.SetField(role.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Priority(); ok {
		_spec.SetField(role.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPriority(); ok {
		_spec.AddField(role.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Color(); ok {
		_spec.SetField(role.FieldColor, field.TypeString, value)
	}
	if ru.mutation.ColorCleared() {
		_spec.ClearField(role.FieldColor, field.TypeString)
	}
	if value, ok := ru.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(role.FieldApplicableUserTypes, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedApplicableUserTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApplicableUserTypes, value)
		})
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.Active(); ok {
		_spec.SetField(role.FieldActive, field.TypeBool, value)
	}
	if ru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !ru.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SystemUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSystemUsersIDs(); len(nodes) > 0 && !ru.mutation.SystemUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SystemUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ru.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoleUpdateOne) SetDeletedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeletedAt(t *time.Time) *RoleUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RoleUpdateOne) ClearDeletedAt() *RoleUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDisplayName sets the "display_name" field.
func (ruo *RoleUpdateOne) SetDisplayName(s string) *RoleUpdateOne {
	ruo.mutation.SetDisplayName(s)
	return ruo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDisplayName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDisplayName(*s)
	}
	return ruo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ruo *RoleUpdateOne) ClearDisplayName() *RoleUpdateOne {
	ruo.mutation.ClearDisplayName()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoleUpdateOne) SetDescription(s string) *RoleUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDescription(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoleUpdateOne) ClearDescription() *RoleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetRoleType sets the "role_type" field.
func (ruo *RoleUpdateOne) SetRoleType(mt model.RoleType) *RoleUpdateOne {
	ruo.mutation.SetRoleType(mt)
	return ruo
}

// SetNillableRoleType sets the "role_type" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRoleType(mt *model.RoleType) *RoleUpdateOne {
	if mt != nil {
		ruo.SetRoleType(*mt)
	}
	return ruo
}

// SetOrganizationID sets the "organization_id" field.
func (ruo *RoleUpdateOne) SetOrganizationID(x xid.ID) *RoleUpdateOne {
	ruo.mutation.SetOrganizationID(x)
	return ruo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableOrganizationID(x *xid.ID) *RoleUpdateOne {
	if x != nil {
		ruo.SetOrganizationID(*x)
	}
	return ruo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (ruo *RoleUpdateOne) ClearOrganizationID() *RoleUpdateOne {
	ruo.mutation.ClearOrganizationID()
	return ruo
}

// SetApplicationID sets the "application_id" field.
func (ruo *RoleUpdateOne) SetApplicationID(x xid.ID) *RoleUpdateOne {
	ruo.mutation.SetApplicationID(x)
	return ruo
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableApplicationID(x *xid.ID) *RoleUpdateOne {
	if x != nil {
		ruo.SetApplicationID(*x)
	}
	return ruo
}

// ClearApplicationID clears the value of the "application_id" field.
func (ruo *RoleUpdateOne) ClearApplicationID() *RoleUpdateOne {
	ruo.mutation.ClearApplicationID()
	return ruo
}

// SetSystem sets the "system" field.
func (ruo *RoleUpdateOne) SetSystem(b bool) *RoleUpdateOne {
	ruo.mutation.SetSystem(b)
	return ruo
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableSystem(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetSystem(*b)
	}
	return ruo
}

// SetIsDefault sets the "is_default" field.
func (ruo *RoleUpdateOne) SetIsDefault(b bool) *RoleUpdateOne {
	ruo.mutation.SetIsDefault(b)
	return ruo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableIsDefault(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetIsDefault(*b)
	}
	return ruo
}

// SetPriority sets the "priority" field.
func (ruo *RoleUpdateOne) SetPriority(i int) *RoleUpdateOne {
	ruo.mutation.ResetPriority()
	ruo.mutation.SetPriority(i)
	return ruo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillablePriority(i *int) *RoleUpdateOne {
	if i != nil {
		ruo.SetPriority(*i)
	}
	return ruo
}

// AddPriority adds i to the "priority" field.
func (ruo *RoleUpdateOne) AddPriority(i int) *RoleUpdateOne {
	ruo.mutation.AddPriority(i)
	return ruo
}

// SetColor sets the "color" field.
func (ruo *RoleUpdateOne) SetColor(s string) *RoleUpdateOne {
	ruo.mutation.SetColor(s)
	return ruo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableColor(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetColor(*s)
	}
	return ruo
}

// ClearColor clears the value of the "color" field.
func (ruo *RoleUpdateOne) ClearColor() *RoleUpdateOne {
	ruo.mutation.ClearColor()
	return ruo
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (ruo *RoleUpdateOne) SetApplicableUserTypes(mt []model.UserType) *RoleUpdateOne {
	ruo.mutation.SetApplicableUserTypes(mt)
	return ruo
}

// AppendApplicableUserTypes appends mt to the "applicable_user_types" field.
func (ruo *RoleUpdateOne) AppendApplicableUserTypes(mt []model.UserType) *RoleUpdateOne {
	ruo.mutation.AppendApplicableUserTypes(mt)
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RoleUpdateOne) SetCreatedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableCreatedBy(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *RoleUpdateOne) ClearCreatedBy() *RoleUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetActive sets the "active" field.
func (ruo *RoleUpdateOne) SetActive(b bool) *RoleUpdateOne {
	ruo.mutation.SetActive(b)
	return ruo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableActive(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetActive(*b)
	}
	return ruo
}

// SetParentID sets the "parent_id" field.
func (ruo *RoleUpdateOne) SetParentID(x xid.ID) *RoleUpdateOne {
	ruo.mutation.SetParentID(x)
	return ruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableParentID(x *xid.ID) *RoleUpdateOne {
	if x != nil {
		ruo.SetParentID(*x)
	}
	return ruo
}

// ClearParentID clears the value of the "parent_id" field.
func (ruo *RoleUpdateOne) ClearParentID() *RoleUpdateOne {
	ruo.mutation.ClearParentID()
	return ruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ruo *RoleUpdateOne) SetOrganization(o *Organization) *RoleUpdateOne {
	return ruo.SetOrganizationID(o.ID)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserRole entity by IDs.
func (ruo *RoleUpdateOne) AddUserAssignmentIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.AddUserAssignmentIDs(ids...)
	return ruo
}

// AddUserAssignments adds the "user_assignments" edges to the UserRole entity.
func (ruo *RoleUpdateOne) AddUserAssignments(u ...*UserRole) *RoleUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddUserAssignmentIDs(ids...)
}

// AddSystemUserIDs adds the "system_users" edge to the User entity by IDs.
func (ruo *RoleUpdateOne) AddSystemUserIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.AddSystemUserIDs(ids...)
	return ruo
}

// AddSystemUsers adds the "system_users" edges to the User entity.
func (ruo *RoleUpdateOne) AddSystemUsers(u ...*User) *RoleUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddSystemUserIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ruo *RoleUpdateOne) AddPermissionIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.AddPermissionIDs(ids...)
	return ruo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ruo *RoleUpdateOne) AddPermissions(p ...*Permission) *RoleUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPermissionIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (ruo *RoleUpdateOne) AddMembershipIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.AddMembershipIDs(ids...)
	return ruo
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (ruo *RoleUpdateOne) AddMemberships(m ...*Membership) *RoleUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMembershipIDs(ids...)
}

// SetParent sets the "parent" edge to the Role entity.
func (ruo *RoleUpdateOne) SetParent(r *Role) *RoleUpdateOne {
	return ruo.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (ruo *RoleUpdateOne) AddChildIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.AddChildIDs(ids...)
	return ruo
}

// AddChildren adds the "children" edges to the Role entity.
func (ruo *RoleUpdateOne) AddChildren(r ...*Role) *RoleUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ruo *RoleUpdateOne) ClearOrganization() *RoleUpdateOne {
	ruo.mutation.ClearOrganization()
	return ruo
}

// ClearUserAssignments clears all "user_assignments" edges to the UserRole entity.
func (ruo *RoleUpdateOne) ClearUserAssignments() *RoleUpdateOne {
	ruo.mutation.ClearUserAssignments()
	return ruo
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to UserRole entities by IDs.
func (ruo *RoleUpdateOne) RemoveUserAssignmentIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.RemoveUserAssignmentIDs(ids...)
	return ruo
}

// RemoveUserAssignments removes "user_assignments" edges to UserRole entities.
func (ruo *RoleUpdateOne) RemoveUserAssignments(u ...*UserRole) *RoleUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveUserAssignmentIDs(ids...)
}

// ClearSystemUsers clears all "system_users" edges to the User entity.
func (ruo *RoleUpdateOne) ClearSystemUsers() *RoleUpdateOne {
	ruo.mutation.ClearSystemUsers()
	return ruo
}

// RemoveSystemUserIDs removes the "system_users" edge to User entities by IDs.
func (ruo *RoleUpdateOne) RemoveSystemUserIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.RemoveSystemUserIDs(ids...)
	return ruo
}

// RemoveSystemUsers removes "system_users" edges to User entities.
func (ruo *RoleUpdateOne) RemoveSystemUsers(u ...*User) *RoleUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveSystemUserIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ruo *RoleUpdateOne) ClearPermissions() *RoleUpdateOne {
	ruo.mutation.ClearPermissions()
	return ruo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ruo *RoleUpdateOne) RemovePermissionIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.RemovePermissionIDs(ids...)
	return ruo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ruo *RoleUpdateOne) RemovePermissions(p ...*Permission) *RoleUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePermissionIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (ruo *RoleUpdateOne) ClearMemberships() *RoleUpdateOne {
	ruo.mutation.ClearMemberships()
	return ruo
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (ruo *RoleUpdateOne) RemoveMembershipIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.RemoveMembershipIDs(ids...)
	return ruo
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (ruo *RoleUpdateOne) RemoveMemberships(m ...*Membership) *RoleUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMembershipIDs(ids...)
}

// ClearParent clears the "parent" edge to the Role entity.
func (ruo *RoleUpdateOne) ClearParent() *RoleUpdateOne {
	ruo.mutation.ClearParent()
	return ruo
}

// ClearChildren clears all "children" edges to the Role entity.
func (ruo *RoleUpdateOne) ClearChildren() *RoleUpdateOne {
	ruo.mutation.ClearChildren()
	return ruo
}

// RemoveChildIDs removes the "children" edge to Role entities by IDs.
func (ruo *RoleUpdateOne) RemoveChildIDs(ids ...xid.ID) *RoleUpdateOne {
	ruo.mutation.RemoveChildIDs(ids...)
	return ruo
}

// RemoveChildren removes "children" edges to Role entities.
func (ruo *RoleUpdateOne) RemoveChildren(r ...*Role) *RoleUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RoleType(); ok {
		if err := role.RoleTypeValidator(v); err != nil {
			return &ValidationError{Name: "role_type", err: fmt.Errorf(`ent: validator failed for field "Role.role_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DisplayName(); ok {
		_spec.SetField(role.FieldDisplayName, field.TypeString, value)
	}
	if ruo.mutation.DisplayNameCleared() {
		_spec.ClearField(role.FieldDisplayName, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.RoleType(); ok {
		_spec.SetField(role.FieldRoleType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.ApplicationID(); ok {
		_spec.SetField(role.FieldApplicationID, field.TypeString, value)
	}
	if ruo.mutation.ApplicationIDCleared() {
		_spec.ClearField(role.FieldApplicationID, field.TypeString)
	}
	if value, ok := ruo.mutation.System(); ok {
		_spec.SetField(role.FieldSystem, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.IsDefault(); ok {
		_spec.SetField(role.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Priority(); ok {
		_spec.SetField(role.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPriority(); ok {
		_spec.AddField(role.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Color(); ok {
		_spec.SetField(role.FieldColor, field.TypeString, value)
	}
	if ruo.mutation.ColorCleared() {
		_spec.ClearField(role.FieldColor, field.TypeString)
	}
	if value, ok := ruo.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(role.FieldApplicableUserTypes, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedApplicableUserTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldApplicableUserTypes, value)
		})
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.Active(); ok {
		_spec.SetField(role.FieldActive, field.TypeBool, value)
	}
	if ruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !ruo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SystemUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSystemUsersIDs(); len(nodes) > 0 && !ruo.mutation.SystemUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SystemUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ruo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
