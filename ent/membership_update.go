// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// MembershipUpdate is the builder for updating Membership entities.
type MembershipUpdate struct {
	config
	hooks     []Hook
	mutation  *MembershipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MembershipUpdate builder.
func (mu *MembershipUpdate) Where(ps ...predicate.Membership) *MembershipUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MembershipUpdate) SetUpdatedAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MembershipUpdate) SetDeletedAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableDeletedAt(t *time.Time) *MembershipUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MembershipUpdate) ClearDeletedAt() *MembershipUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MembershipUpdate) SetUserID(x xid.ID) *MembershipUpdate {
	mu.mutation.SetUserID(x)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableUserID(x *xid.ID) *MembershipUpdate {
	if x != nil {
		mu.SetUserID(*x)
	}
	return mu
}

// SetOrganizationID sets the "organization_id" field.
func (mu *MembershipUpdate) SetOrganizationID(x xid.ID) *MembershipUpdate {
	mu.mutation.SetOrganizationID(x)
	return mu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableOrganizationID(x *xid.ID) *MembershipUpdate {
	if x != nil {
		mu.SetOrganizationID(*x)
	}
	return mu
}

// SetRoleID sets the "role_id" field.
func (mu *MembershipUpdate) SetRoleID(x xid.ID) *MembershipUpdate {
	mu.mutation.SetRoleID(x)
	return mu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableRoleID(x *xid.ID) *MembershipUpdate {
	if x != nil {
		mu.SetRoleID(*x)
	}
	return mu
}

// SetEmail sets the "email" field.
func (mu *MembershipUpdate) SetEmail(s string) *MembershipUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableEmail(s *string) *MembershipUpdate {
	if s != nil {
		mu.SetEmail(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MembershipUpdate) SetStatus(ms model.MembershipStatus) *MembershipUpdate {
	mu.mutation.SetStatus(ms)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableStatus(ms *model.MembershipStatus) *MembershipUpdate {
	if ms != nil {
		mu.SetStatus(*ms)
	}
	return mu
}

// SetInvitedBy sets the "invited_by" field.
func (mu *MembershipUpdate) SetInvitedBy(x xid.ID) *MembershipUpdate {
	mu.mutation.SetInvitedBy(x)
	return mu
}

// SetNillableInvitedBy sets the "invited_by" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableInvitedBy(x *xid.ID) *MembershipUpdate {
	if x != nil {
		mu.SetInvitedBy(*x)
	}
	return mu
}

// ClearInvitedBy clears the value of the "invited_by" field.
func (mu *MembershipUpdate) ClearInvitedBy() *MembershipUpdate {
	mu.mutation.ClearInvitedBy()
	return mu
}

// SetInvitedAt sets the "invited_at" field.
func (mu *MembershipUpdate) SetInvitedAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetInvitedAt(t)
	return mu
}

// SetNillableInvitedAt sets the "invited_at" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableInvitedAt(t *time.Time) *MembershipUpdate {
	if t != nil {
		mu.SetInvitedAt(*t)
	}
	return mu
}

// SetJoinedAt sets the "joined_at" field.
func (mu *MembershipUpdate) SetJoinedAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetJoinedAt(t)
	return mu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableJoinedAt(t *time.Time) *MembershipUpdate {
	if t != nil {
		mu.SetJoinedAt(*t)
	}
	return mu
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (mu *MembershipUpdate) ClearJoinedAt() *MembershipUpdate {
	mu.mutation.ClearJoinedAt()
	return mu
}

// SetExpiresAt sets the "expires_at" field.
func (mu *MembershipUpdate) SetExpiresAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetExpiresAt(t)
	return mu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableExpiresAt(t *time.Time) *MembershipUpdate {
	if t != nil {
		mu.SetExpiresAt(*t)
	}
	return mu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (mu *MembershipUpdate) ClearExpiresAt() *MembershipUpdate {
	mu.mutation.ClearExpiresAt()
	return mu
}

// SetInvitationToken sets the "invitation_token" field.
func (mu *MembershipUpdate) SetInvitationToken(s string) *MembershipUpdate {
	mu.mutation.SetInvitationToken(s)
	return mu
}

// SetNillableInvitationToken sets the "invitation_token" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableInvitationToken(s *string) *MembershipUpdate {
	if s != nil {
		mu.SetInvitationToken(*s)
	}
	return mu
}

// ClearInvitationToken clears the value of the "invitation_token" field.
func (mu *MembershipUpdate) ClearInvitationToken() *MembershipUpdate {
	mu.mutation.ClearInvitationToken()
	return mu
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (mu *MembershipUpdate) SetIsBillingContact(b bool) *MembershipUpdate {
	mu.mutation.SetIsBillingContact(b)
	return mu
}

// SetNillableIsBillingContact sets the "is_billing_contact" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableIsBillingContact(b *bool) *MembershipUpdate {
	if b != nil {
		mu.SetIsBillingContact(*b)
	}
	return mu
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (mu *MembershipUpdate) SetIsPrimaryContact(b bool) *MembershipUpdate {
	mu.mutation.SetIsPrimaryContact(b)
	return mu
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableIsPrimaryContact(b *bool) *MembershipUpdate {
	if b != nil {
		mu.SetIsPrimaryContact(*b)
	}
	return mu
}

// SetLeftAt sets the "left_at" field.
func (mu *MembershipUpdate) SetLeftAt(t time.Time) *MembershipUpdate {
	mu.mutation.SetLeftAt(t)
	return mu
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (mu *MembershipUpdate) SetNillableLeftAt(t *time.Time) *MembershipUpdate {
	if t != nil {
		mu.SetLeftAt(*t)
	}
	return mu
}

// ClearLeftAt clears the value of the "left_at" field.
func (mu *MembershipUpdate) ClearLeftAt() *MembershipUpdate {
	mu.mutation.ClearLeftAt()
	return mu
}

// SetMetadata sets the "metadata" field.
func (mu *MembershipUpdate) SetMetadata(m map[string]interface{}) *MembershipUpdate {
	mu.mutation.SetMetadata(m)
	return mu
}

// ClearMetadata clears the value of the "metadata" field.
func (mu *MembershipUpdate) ClearMetadata() *MembershipUpdate {
	mu.mutation.ClearMetadata()
	return mu
}

// SetCustomFields sets the "custom_fields" field.
func (mu *MembershipUpdate) SetCustomFields(m map[string]interface{}) *MembershipUpdate {
	mu.mutation.SetCustomFields(m)
	return mu
}

// ClearCustomFields clears the value of the "custom_fields" field.
func (mu *MembershipUpdate) ClearCustomFields() *MembershipUpdate {
	mu.mutation.ClearCustomFields()
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MembershipUpdate) SetUser(u *User) *MembershipUpdate {
	return mu.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (mu *MembershipUpdate) SetOrganization(o *Organization) *MembershipUpdate {
	return mu.SetOrganizationID(o.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (mu *MembershipUpdate) SetRole(r *Role) *MembershipUpdate {
	return mu.SetRoleID(r.ID)
}

// SetInviterID sets the "inviter" edge to the User entity by ID.
func (mu *MembershipUpdate) SetInviterID(id xid.ID) *MembershipUpdate {
	mu.mutation.SetInviterID(id)
	return mu
}

// SetNillableInviterID sets the "inviter" edge to the User entity by ID if the given value is not nil.
func (mu *MembershipUpdate) SetNillableInviterID(id *xid.ID) *MembershipUpdate {
	if id != nil {
		mu = mu.SetInviterID(*id)
	}
	return mu
}

// SetInviter sets the "inviter" edge to the User entity.
func (mu *MembershipUpdate) SetInviter(u *User) *MembershipUpdate {
	return mu.SetInviterID(u.ID)
}

// Mutation returns the MembershipMutation object of the builder.
func (mu *MembershipUpdate) Mutation() *MembershipMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MembershipUpdate) ClearUser() *MembershipUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (mu *MembershipUpdate) ClearOrganization() *MembershipUpdate {
	mu.mutation.ClearOrganization()
	return mu
}

// ClearRole clears the "role" edge to the Role entity.
func (mu *MembershipUpdate) ClearRole() *MembershipUpdate {
	mu.mutation.ClearRole()
	return mu
}

// ClearInviter clears the "inviter" edge to the User entity.
func (mu *MembershipUpdate) ClearInviter() *MembershipUpdate {
	mu.mutation.ClearInviter()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MembershipUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MembershipUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MembershipUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MembershipUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := membership.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MembershipUpdate) check() error {
	if v, ok := mu.mutation.UserID(); ok {
		if err := membership.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Membership.user_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.OrganizationID(); ok {
		if err := membership.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Membership.organization_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.RoleID(); ok {
		if err := membership.RoleIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Membership.role_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Email(); ok {
		if err := membership.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Membership.email": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := membership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Membership.status": %w`, err)}
		}
	}
	if mu.mutation.UserCleared() && len(mu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.user"`)
	}
	if mu.mutation.OrganizationCleared() && len(mu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.organization"`)
	}
	if mu.mutation.RoleCleared() && len(mu.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MembershipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MembershipUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MembershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(membership.Table, membership.Columns, sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(membership.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(membership.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(membership.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.SetField(membership.FieldEmail, field.TypeString, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(membership.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.InvitedAt(); ok {
		_spec.SetField(membership.FieldInvitedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.JoinedAt(); ok {
		_spec.SetField(membership.FieldJoinedAt, field.TypeTime, value)
	}
	if mu.mutation.JoinedAtCleared() {
		_spec.ClearField(membership.FieldJoinedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.ExpiresAt(); ok {
		_spec.SetField(membership.FieldExpiresAt, field.TypeTime, value)
	}
	if mu.mutation.ExpiresAtCleared() {
		_spec.ClearField(membership.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := mu.mutation.InvitationToken(); ok {
		_spec.SetField(membership.FieldInvitationToken, field.TypeString, value)
	}
	if mu.mutation.InvitationTokenCleared() {
		_spec.ClearField(membership.FieldInvitationToken, field.TypeString)
	}
	if value, ok := mu.mutation.IsBillingContact(); ok {
		_spec.SetField(membership.FieldIsBillingContact, field.TypeBool, value)
	}
	if value, ok := mu.mutation.IsPrimaryContact(); ok {
		_spec.SetField(membership.FieldIsPrimaryContact, field.TypeBool, value)
	}
	if value, ok := mu.mutation.LeftAt(); ok {
		_spec.SetField(membership.FieldLeftAt, field.TypeTime, value)
	}
	if mu.mutation.LeftAtCleared() {
		_spec.ClearField(membership.FieldLeftAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Metadata(); ok {
		_spec.SetField(membership.FieldMetadata, field.TypeJSON, value)
	}
	if mu.mutation.MetadataCleared() {
		_spec.ClearField(membership.FieldMetadata, field.TypeJSON)
	}
	if value, ok := mu.mutation.CustomFields(); ok {
		_spec.SetField(membership.FieldCustomFields, field.TypeJSON, value)
	}
	if mu.mutation.CustomFieldsCleared() {
		_spec.ClearField(membership.FieldCustomFields, field.TypeJSON)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.InviterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MembershipUpdateOne is the builder for updating a single Membership entity.
type MembershipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MembershipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MembershipUpdateOne) SetUpdatedAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MembershipUpdateOne) SetDeletedAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableDeletedAt(t *time.Time) *MembershipUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MembershipUpdateOne) ClearDeletedAt() *MembershipUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MembershipUpdateOne) SetUserID(x xid.ID) *MembershipUpdateOne {
	muo.mutation.SetUserID(x)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableUserID(x *xid.ID) *MembershipUpdateOne {
	if x != nil {
		muo.SetUserID(*x)
	}
	return muo
}

// SetOrganizationID sets the "organization_id" field.
func (muo *MembershipUpdateOne) SetOrganizationID(x xid.ID) *MembershipUpdateOne {
	muo.mutation.SetOrganizationID(x)
	return muo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableOrganizationID(x *xid.ID) *MembershipUpdateOne {
	if x != nil {
		muo.SetOrganizationID(*x)
	}
	return muo
}

// SetRoleID sets the "role_id" field.
func (muo *MembershipUpdateOne) SetRoleID(x xid.ID) *MembershipUpdateOne {
	muo.mutation.SetRoleID(x)
	return muo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableRoleID(x *xid.ID) *MembershipUpdateOne {
	if x != nil {
		muo.SetRoleID(*x)
	}
	return muo
}

// SetEmail sets the "email" field.
func (muo *MembershipUpdateOne) SetEmail(s string) *MembershipUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableEmail(s *string) *MembershipUpdateOne {
	if s != nil {
		muo.SetEmail(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MembershipUpdateOne) SetStatus(ms model.MembershipStatus) *MembershipUpdateOne {
	muo.mutation.SetStatus(ms)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableStatus(ms *model.MembershipStatus) *MembershipUpdateOne {
	if ms != nil {
		muo.SetStatus(*ms)
	}
	return muo
}

// SetInvitedBy sets the "invited_by" field.
func (muo *MembershipUpdateOne) SetInvitedBy(x xid.ID) *MembershipUpdateOne {
	muo.mutation.SetInvitedBy(x)
	return muo
}

// SetNillableInvitedBy sets the "invited_by" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableInvitedBy(x *xid.ID) *MembershipUpdateOne {
	if x != nil {
		muo.SetInvitedBy(*x)
	}
	return muo
}

// ClearInvitedBy clears the value of the "invited_by" field.
func (muo *MembershipUpdateOne) ClearInvitedBy() *MembershipUpdateOne {
	muo.mutation.ClearInvitedBy()
	return muo
}

// SetInvitedAt sets the "invited_at" field.
func (muo *MembershipUpdateOne) SetInvitedAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetInvitedAt(t)
	return muo
}

// SetNillableInvitedAt sets the "invited_at" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableInvitedAt(t *time.Time) *MembershipUpdateOne {
	if t != nil {
		muo.SetInvitedAt(*t)
	}
	return muo
}

// SetJoinedAt sets the "joined_at" field.
func (muo *MembershipUpdateOne) SetJoinedAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetJoinedAt(t)
	return muo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableJoinedAt(t *time.Time) *MembershipUpdateOne {
	if t != nil {
		muo.SetJoinedAt(*t)
	}
	return muo
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (muo *MembershipUpdateOne) ClearJoinedAt() *MembershipUpdateOne {
	muo.mutation.ClearJoinedAt()
	return muo
}

// SetExpiresAt sets the "expires_at" field.
func (muo *MembershipUpdateOne) SetExpiresAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetExpiresAt(t)
	return muo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableExpiresAt(t *time.Time) *MembershipUpdateOne {
	if t != nil {
		muo.SetExpiresAt(*t)
	}
	return muo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (muo *MembershipUpdateOne) ClearExpiresAt() *MembershipUpdateOne {
	muo.mutation.ClearExpiresAt()
	return muo
}

// SetInvitationToken sets the "invitation_token" field.
func (muo *MembershipUpdateOne) SetInvitationToken(s string) *MembershipUpdateOne {
	muo.mutation.SetInvitationToken(s)
	return muo
}

// SetNillableInvitationToken sets the "invitation_token" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableInvitationToken(s *string) *MembershipUpdateOne {
	if s != nil {
		muo.SetInvitationToken(*s)
	}
	return muo
}

// ClearInvitationToken clears the value of the "invitation_token" field.
func (muo *MembershipUpdateOne) ClearInvitationToken() *MembershipUpdateOne {
	muo.mutation.ClearInvitationToken()
	return muo
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (muo *MembershipUpdateOne) SetIsBillingContact(b bool) *MembershipUpdateOne {
	muo.mutation.SetIsBillingContact(b)
	return muo
}

// SetNillableIsBillingContact sets the "is_billing_contact" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableIsBillingContact(b *bool) *MembershipUpdateOne {
	if b != nil {
		muo.SetIsBillingContact(*b)
	}
	return muo
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (muo *MembershipUpdateOne) SetIsPrimaryContact(b bool) *MembershipUpdateOne {
	muo.mutation.SetIsPrimaryContact(b)
	return muo
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableIsPrimaryContact(b *bool) *MembershipUpdateOne {
	if b != nil {
		muo.SetIsPrimaryContact(*b)
	}
	return muo
}

// SetLeftAt sets the "left_at" field.
func (muo *MembershipUpdateOne) SetLeftAt(t time.Time) *MembershipUpdateOne {
	muo.mutation.SetLeftAt(t)
	return muo
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableLeftAt(t *time.Time) *MembershipUpdateOne {
	if t != nil {
		muo.SetLeftAt(*t)
	}
	return muo
}

// ClearLeftAt clears the value of the "left_at" field.
func (muo *MembershipUpdateOne) ClearLeftAt() *MembershipUpdateOne {
	muo.mutation.ClearLeftAt()
	return muo
}

// SetMetadata sets the "metadata" field.
func (muo *MembershipUpdateOne) SetMetadata(m map[string]interface{}) *MembershipUpdateOne {
	muo.mutation.SetMetadata(m)
	return muo
}

// ClearMetadata clears the value of the "metadata" field.
func (muo *MembershipUpdateOne) ClearMetadata() *MembershipUpdateOne {
	muo.mutation.ClearMetadata()
	return muo
}

// SetCustomFields sets the "custom_fields" field.
func (muo *MembershipUpdateOne) SetCustomFields(m map[string]interface{}) *MembershipUpdateOne {
	muo.mutation.SetCustomFields(m)
	return muo
}

// ClearCustomFields clears the value of the "custom_fields" field.
func (muo *MembershipUpdateOne) ClearCustomFields() *MembershipUpdateOne {
	muo.mutation.ClearCustomFields()
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MembershipUpdateOne) SetUser(u *User) *MembershipUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (muo *MembershipUpdateOne) SetOrganization(o *Organization) *MembershipUpdateOne {
	return muo.SetOrganizationID(o.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (muo *MembershipUpdateOne) SetRole(r *Role) *MembershipUpdateOne {
	return muo.SetRoleID(r.ID)
}

// SetInviterID sets the "inviter" edge to the User entity by ID.
func (muo *MembershipUpdateOne) SetInviterID(id xid.ID) *MembershipUpdateOne {
	muo.mutation.SetInviterID(id)
	return muo
}

// SetNillableInviterID sets the "inviter" edge to the User entity by ID if the given value is not nil.
func (muo *MembershipUpdateOne) SetNillableInviterID(id *xid.ID) *MembershipUpdateOne {
	if id != nil {
		muo = muo.SetInviterID(*id)
	}
	return muo
}

// SetInviter sets the "inviter" edge to the User entity.
func (muo *MembershipUpdateOne) SetInviter(u *User) *MembershipUpdateOne {
	return muo.SetInviterID(u.ID)
}

// Mutation returns the MembershipMutation object of the builder.
func (muo *MembershipUpdateOne) Mutation() *MembershipMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MembershipUpdateOne) ClearUser() *MembershipUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (muo *MembershipUpdateOne) ClearOrganization() *MembershipUpdateOne {
	muo.mutation.ClearOrganization()
	return muo
}

// ClearRole clears the "role" edge to the Role entity.
func (muo *MembershipUpdateOne) ClearRole() *MembershipUpdateOne {
	muo.mutation.ClearRole()
	return muo
}

// ClearInviter clears the "inviter" edge to the User entity.
func (muo *MembershipUpdateOne) ClearInviter() *MembershipUpdateOne {
	muo.mutation.ClearInviter()
	return muo
}

// Where appends a list predicates to the MembershipUpdate builder.
func (muo *MembershipUpdateOne) Where(ps ...predicate.Membership) *MembershipUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MembershipUpdateOne) Select(field string, fields ...string) *MembershipUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Membership entity.
func (muo *MembershipUpdateOne) Save(ctx context.Context) (*Membership, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MembershipUpdateOne) SaveX(ctx context.Context) *Membership {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MembershipUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MembershipUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := membership.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MembershipUpdateOne) check() error {
	if v, ok := muo.mutation.UserID(); ok {
		if err := membership.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Membership.user_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.OrganizationID(); ok {
		if err := membership.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Membership.organization_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.RoleID(); ok {
		if err := membership.RoleIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Membership.role_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Email(); ok {
		if err := membership.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Membership.email": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := membership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Membership.status": %w`, err)}
		}
	}
	if muo.mutation.UserCleared() && len(muo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.user"`)
	}
	if muo.mutation.OrganizationCleared() && len(muo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.organization"`)
	}
	if muo.mutation.RoleCleared() && len(muo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Membership.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MembershipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MembershipUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MembershipUpdateOne) sqlSave(ctx context.Context) (_node *Membership, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(membership.Table, membership.Columns, sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Membership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membership.FieldID)
		for _, f := range fields {
			if !membership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(membership.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(membership.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(membership.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.SetField(membership.FieldEmail, field.TypeString, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(membership.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.InvitedAt(); ok {
		_spec.SetField(membership.FieldInvitedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.JoinedAt(); ok {
		_spec.SetField(membership.FieldJoinedAt, field.TypeTime, value)
	}
	if muo.mutation.JoinedAtCleared() {
		_spec.ClearField(membership.FieldJoinedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.ExpiresAt(); ok {
		_spec.SetField(membership.FieldExpiresAt, field.TypeTime, value)
	}
	if muo.mutation.ExpiresAtCleared() {
		_spec.ClearField(membership.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := muo.mutation.InvitationToken(); ok {
		_spec.SetField(membership.FieldInvitationToken, field.TypeString, value)
	}
	if muo.mutation.InvitationTokenCleared() {
		_spec.ClearField(membership.FieldInvitationToken, field.TypeString)
	}
	if value, ok := muo.mutation.IsBillingContact(); ok {
		_spec.SetField(membership.FieldIsBillingContact, field.TypeBool, value)
	}
	if value, ok := muo.mutation.IsPrimaryContact(); ok {
		_spec.SetField(membership.FieldIsPrimaryContact, field.TypeBool, value)
	}
	if value, ok := muo.mutation.LeftAt(); ok {
		_spec.SetField(membership.FieldLeftAt, field.TypeTime, value)
	}
	if muo.mutation.LeftAtCleared() {
		_spec.ClearField(membership.FieldLeftAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Metadata(); ok {
		_spec.SetField(membership.FieldMetadata, field.TypeJSON, value)
	}
	if muo.mutation.MetadataCleared() {
		_spec.ClearField(membership.FieldMetadata, field.TypeJSON)
	}
	if value, ok := muo.mutation.CustomFields(); ok {
		_spec.SetField(membership.FieldCustomFields, field.TypeJSON, value)
	}
	if muo.mutation.CustomFieldsCleared() {
		_spec.ClearField(membership.FieldCustomFields, field.TypeJSON)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.InviterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Membership{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
