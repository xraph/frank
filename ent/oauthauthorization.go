// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/user"
)

// OAuthAuthorization is the model entity for the OAuthAuthorization schema.
type OAuthAuthorization struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID xid.ID `json:"client_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID xid.ID `json:"user_id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"-"`
	// CodeChallenge holds the value of the "code_challenge" field.
	CodeChallenge string `json:"code_challenge,omitempty"`
	// CodeChallengeMethod holds the value of the "code_challenge_method" field.
	CodeChallengeMethod string `json:"code_challenge_method,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// Scope names as strings for quick access
	ScopeNames []string `json:"scope_names,omitempty"`
	// Used holds the value of the "used" field.
	Used bool `json:"used,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt *time.Time `json:"used_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthAuthorizationQuery when eager-loading is set.
	Edges        OAuthAuthorizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OAuthAuthorizationEdges holds the relations/edges for other nodes in the graph.
type OAuthAuthorizationEdges struct {
	// Client holds the value of the client edge.
	Client *OAuthClient `json:"client,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Scopes holds the value of the scopes edge.
	Scopes []*OAuthScope `json:"scopes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	namedScopes map[string][]*OAuthScope
}

// ClientOrErr returns the Client value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthAuthorizationEdges) ClientOrErr() (*OAuthClient, error) {
	if e.Client != nil {
		return e.Client, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthclient.Label}
	}
	return nil, &NotLoadedError{edge: "client"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthAuthorizationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ScopesOrErr returns the Scopes value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthAuthorizationEdges) ScopesOrErr() ([]*OAuthScope, error) {
	if e.loadedTypes[2] {
		return e.Scopes, nil
	}
	return nil, &NotLoadedError{edge: "scopes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthAuthorization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthauthorization.FieldScopeNames:
			values[i] = new([]byte)
		case oauthauthorization.FieldUsed:
			values[i] = new(sql.NullBool)
		case oauthauthorization.FieldCode, oauthauthorization.FieldCodeChallenge, oauthauthorization.FieldCodeChallengeMethod, oauthauthorization.FieldRedirectURI, oauthauthorization.FieldState, oauthauthorization.FieldNonce, oauthauthorization.FieldUserAgent, oauthauthorization.FieldIPAddress:
			values[i] = new(sql.NullString)
		case oauthauthorization.FieldCreatedAt, oauthauthorization.FieldUpdatedAt, oauthauthorization.FieldDeletedAt, oauthauthorization.FieldUsedAt, oauthauthorization.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case oauthauthorization.FieldID, oauthauthorization.FieldClientID, oauthauthorization.FieldUserID, oauthauthorization.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthAuthorization fields.
func (oa *OAuthAuthorization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthauthorization.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oa.ID = *value
			}
		case oauthauthorization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case oauthauthorization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case oauthauthorization.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				oa.DeletedAt = value.Time
			}
		case oauthauthorization.FieldClientID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value != nil {
				oa.ClientID = *value
			}
		case oauthauthorization.FieldUserID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				oa.UserID = *value
			}
		case oauthauthorization.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				oa.OrganizationID = *value
			}
		case oauthauthorization.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				oa.Code = value.String
			}
		case oauthauthorization.FieldCodeChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge", values[i])
			} else if value.Valid {
				oa.CodeChallenge = value.String
			}
		case oauthauthorization.FieldCodeChallengeMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge_method", values[i])
			} else if value.Valid {
				oa.CodeChallengeMethod = value.String
			}
		case oauthauthorization.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				oa.RedirectURI = value.String
			}
		case oauthauthorization.FieldScopeNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scope_names", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oa.ScopeNames); err != nil {
					return fmt.Errorf("unmarshal field scope_names: %w", err)
				}
			}
		case oauthauthorization.FieldUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				oa.Used = value.Bool
			}
		case oauthauthorization.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				oa.UsedAt = new(time.Time)
				*oa.UsedAt = value.Time
			}
		case oauthauthorization.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				oa.ExpiresAt = value.Time
			}
		case oauthauthorization.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				oa.State = value.String
			}
		case oauthauthorization.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				oa.Nonce = value.String
			}
		case oauthauthorization.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				oa.UserAgent = value.String
			}
		case oauthauthorization.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				oa.IPAddress = value.String
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthAuthorization.
// This includes values selected through modifiers, order, etc.
func (oa *OAuthAuthorization) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// QueryClient queries the "client" edge of the OAuthAuthorization entity.
func (oa *OAuthAuthorization) QueryClient() *OAuthClientQuery {
	return NewOAuthAuthorizationClient(oa.config).QueryClient(oa)
}

// QueryUser queries the "user" edge of the OAuthAuthorization entity.
func (oa *OAuthAuthorization) QueryUser() *UserQuery {
	return NewOAuthAuthorizationClient(oa.config).QueryUser(oa)
}

// QueryScopes queries the "scopes" edge of the OAuthAuthorization entity.
func (oa *OAuthAuthorization) QueryScopes() *OAuthScopeQuery {
	return NewOAuthAuthorizationClient(oa.config).QueryScopes(oa)
}

// Update returns a builder for updating this OAuthAuthorization.
// Note that you need to call OAuthAuthorization.Unwrap() before calling this method if this OAuthAuthorization
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OAuthAuthorization) Update() *OAuthAuthorizationUpdateOne {
	return NewOAuthAuthorizationClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OAuthAuthorization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OAuthAuthorization) Unwrap() *OAuthAuthorization {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthAuthorization is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OAuthAuthorization) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthAuthorization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(oa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ClientID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.UserID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("code=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("code_challenge=")
	builder.WriteString(oa.CodeChallenge)
	builder.WriteString(", ")
	builder.WriteString("code_challenge_method=")
	builder.WriteString(oa.CodeChallengeMethod)
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(oa.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("scope_names=")
	builder.WriteString(fmt.Sprintf("%v", oa.ScopeNames))
	builder.WriteString(", ")
	builder.WriteString("used=")
	builder.WriteString(fmt.Sprintf("%v", oa.Used))
	builder.WriteString(", ")
	if v := oa.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(oa.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(oa.State)
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(oa.Nonce)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(oa.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(oa.IPAddress)
	builder.WriteByte(')')
	return builder.String()
}

// NamedScopes returns the Scopes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (oa *OAuthAuthorization) NamedScopes(name string) ([]*OAuthScope, error) {
	if oa.Edges.namedScopes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := oa.Edges.namedScopes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (oa *OAuthAuthorization) appendNamedScopes(name string, edges ...*OAuthScope) {
	if oa.Edges.namedScopes == nil {
		oa.Edges.namedScopes = make(map[string][]*OAuthScope)
	}
	if len(edges) == 0 {
		oa.Edges.namedScopes[name] = []*OAuthScope{}
	} else {
		oa.Edges.namedScopes[name] = append(oa.Edges.namedScopes[name], edges...)
	}
}

// OAuthAuthorizations is a parsable slice of OAuthAuthorization.
type OAuthAuthorizations []*OAuthAuthorization
