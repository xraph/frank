// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/user"
)

// OAuthTokenCreate is the builder for creating a OAuthToken entity.
type OAuthTokenCreate struct {
	config
	mutation *OAuthTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (otc *OAuthTokenCreate) SetCreatedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetCreatedAt(t)
	return otc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableCreatedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetCreatedAt(*t)
	}
	return otc
}

// SetUpdatedAt sets the "updated_at" field.
func (otc *OAuthTokenCreate) SetUpdatedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetUpdatedAt(t)
	return otc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableUpdatedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetUpdatedAt(*t)
	}
	return otc
}

// SetDeletedAt sets the "deleted_at" field.
func (otc *OAuthTokenCreate) SetDeletedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetDeletedAt(t)
	return otc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableDeletedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetDeletedAt(*t)
	}
	return otc
}

// SetAccessToken sets the "access_token" field.
func (otc *OAuthTokenCreate) SetAccessToken(s string) *OAuthTokenCreate {
	otc.mutation.SetAccessToken(s)
	return otc
}

// SetRefreshToken sets the "refresh_token" field.
func (otc *OAuthTokenCreate) SetRefreshToken(s string) *OAuthTokenCreate {
	otc.mutation.SetRefreshToken(s)
	return otc
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRefreshToken(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetRefreshToken(*s)
	}
	return otc
}

// SetTokenType sets the "token_type" field.
func (otc *OAuthTokenCreate) SetTokenType(s string) *OAuthTokenCreate {
	otc.mutation.SetTokenType(s)
	return otc
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableTokenType(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetTokenType(*s)
	}
	return otc
}

// SetClientID sets the "client_id" field.
func (otc *OAuthTokenCreate) SetClientID(x xid.ID) *OAuthTokenCreate {
	otc.mutation.SetClientID(x)
	return otc
}

// SetUserID sets the "user_id" field.
func (otc *OAuthTokenCreate) SetUserID(x xid.ID) *OAuthTokenCreate {
	otc.mutation.SetUserID(x)
	return otc
}

// SetOrganizationID sets the "organization_id" field.
func (otc *OAuthTokenCreate) SetOrganizationID(x xid.ID) *OAuthTokenCreate {
	otc.mutation.SetOrganizationID(x)
	return otc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableOrganizationID(x *xid.ID) *OAuthTokenCreate {
	if x != nil {
		otc.SetOrganizationID(*x)
	}
	return otc
}

// SetScopeNames sets the "scope_names" field.
func (otc *OAuthTokenCreate) SetScopeNames(s []string) *OAuthTokenCreate {
	otc.mutation.SetScopeNames(s)
	return otc
}

// SetExpiresIn sets the "expires_in" field.
func (otc *OAuthTokenCreate) SetExpiresIn(i int) *OAuthTokenCreate {
	otc.mutation.SetExpiresIn(i)
	return otc
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableExpiresIn(i *int) *OAuthTokenCreate {
	if i != nil {
		otc.SetExpiresIn(*i)
	}
	return otc
}

// SetExpiresAt sets the "expires_at" field.
func (otc *OAuthTokenCreate) SetExpiresAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetExpiresAt(t)
	return otc
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (otc *OAuthTokenCreate) SetRefreshTokenExpiresAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetRefreshTokenExpiresAt(t)
	return otc
}

// SetNillableRefreshTokenExpiresAt sets the "refresh_token_expires_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRefreshTokenExpiresAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetRefreshTokenExpiresAt(*t)
	}
	return otc
}

// SetRevoked sets the "revoked" field.
func (otc *OAuthTokenCreate) SetRevoked(b bool) *OAuthTokenCreate {
	otc.mutation.SetRevoked(b)
	return otc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRevoked(b *bool) *OAuthTokenCreate {
	if b != nil {
		otc.SetRevoked(*b)
	}
	return otc
}

// SetRevokedAt sets the "revoked_at" field.
func (otc *OAuthTokenCreate) SetRevokedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetRevokedAt(t)
	return otc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRevokedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetRevokedAt(*t)
	}
	return otc
}

// SetIPAddress sets the "ip_address" field.
func (otc *OAuthTokenCreate) SetIPAddress(s string) *OAuthTokenCreate {
	otc.mutation.SetIPAddress(s)
	return otc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableIPAddress(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetIPAddress(*s)
	}
	return otc
}

// SetUserAgent sets the "user_agent" field.
func (otc *OAuthTokenCreate) SetUserAgent(s string) *OAuthTokenCreate {
	otc.mutation.SetUserAgent(s)
	return otc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableUserAgent(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetUserAgent(*s)
	}
	return otc
}

// SetID sets the "id" field.
func (otc *OAuthTokenCreate) SetID(x xid.ID) *OAuthTokenCreate {
	otc.mutation.SetID(x)
	return otc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableID(x *xid.ID) *OAuthTokenCreate {
	if x != nil {
		otc.SetID(*x)
	}
	return otc
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (otc *OAuthTokenCreate) SetClient(o *OAuthClient) *OAuthTokenCreate {
	return otc.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (otc *OAuthTokenCreate) SetUser(u *User) *OAuthTokenCreate {
	return otc.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (otc *OAuthTokenCreate) AddScopeIDs(ids ...xid.ID) *OAuthTokenCreate {
	otc.mutation.AddScopeIDs(ids...)
	return otc
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (otc *OAuthTokenCreate) AddScopes(o ...*OAuthScope) *OAuthTokenCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otc.AddScopeIDs(ids...)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otc *OAuthTokenCreate) Mutation() *OAuthTokenMutation {
	return otc.mutation
}

// Save creates the OAuthToken in the database.
func (otc *OAuthTokenCreate) Save(ctx context.Context) (*OAuthToken, error) {
	otc.defaults()
	return withHooks(ctx, otc.sqlSave, otc.mutation, otc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OAuthTokenCreate) SaveX(ctx context.Context) *OAuthToken {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OAuthTokenCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OAuthTokenCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OAuthTokenCreate) defaults() {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		v := oauthtoken.DefaultCreatedAt()
		otc.mutation.SetCreatedAt(v)
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		v := oauthtoken.DefaultUpdatedAt()
		otc.mutation.SetUpdatedAt(v)
	}
	if _, ok := otc.mutation.TokenType(); !ok {
		v := oauthtoken.DefaultTokenType
		otc.mutation.SetTokenType(v)
	}
	if _, ok := otc.mutation.ExpiresIn(); !ok {
		v := oauthtoken.DefaultExpiresIn
		otc.mutation.SetExpiresIn(v)
	}
	if _, ok := otc.mutation.Revoked(); !ok {
		v := oauthtoken.DefaultRevoked
		otc.mutation.SetRevoked(v)
	}
	if _, ok := otc.mutation.ID(); !ok {
		v := oauthtoken.DefaultID()
		otc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otc *OAuthTokenCreate) check() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthToken.created_at"`)}
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthToken.updated_at"`)}
	}
	if _, ok := otc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "OAuthToken.access_token"`)}
	}
	if v, ok := otc.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.access_token": %w`, err)}
		}
	}
	if _, ok := otc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "OAuthToken.token_type"`)}
	}
	if _, ok := otc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthToken.client_id"`)}
	}
	if v, ok := otc.mutation.ClientID(); ok {
		if err := oauthtoken.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.client_id": %w`, err)}
		}
	}
	if _, ok := otc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OAuthToken.user_id"`)}
	}
	if v, ok := otc.mutation.UserID(); ok {
		if err := oauthtoken.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.user_id": %w`, err)}
		}
	}
	if _, ok := otc.mutation.ExpiresIn(); !ok {
		return &ValidationError{Name: "expires_in", err: errors.New(`ent: missing required field "OAuthToken.expires_in"`)}
	}
	if _, ok := otc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OAuthToken.expires_at"`)}
	}
	if _, ok := otc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "OAuthToken.revoked"`)}
	}
	if len(otc.mutation.ClientIDs()) == 0 {
		return &ValidationError{Name: "client", err: errors.New(`ent: missing required edge "OAuthToken.client"`)}
	}
	if len(otc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OAuthToken.user"`)}
	}
	return nil
}

func (otc *OAuthTokenCreate) sqlSave(ctx context.Context) (*OAuthToken, error) {
	if err := otc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	otc.mutation.id = &_node.ID
	otc.mutation.done = true
	return _node, nil
}

func (otc *OAuthTokenCreate) createSpec() (*OAuthToken, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthToken{config: otc.config}
		_spec = sqlgraph.NewCreateSpec(oauthtoken.Table, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString))
	)
	_spec.OnConflict = otc.conflict
	if id, ok := otc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := otc.mutation.CreatedAt(); ok {
		_spec.SetField(oauthtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := otc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := otc.mutation.DeletedAt(); ok {
		_spec.SetField(oauthtoken.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := otc.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := otc.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := otc.mutation.TokenType(); ok {
		_spec.SetField(oauthtoken.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := otc.mutation.OrganizationID(); ok {
		_spec.SetField(oauthtoken.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := otc.mutation.ScopeNames(); ok {
		_spec.SetField(oauthtoken.FieldScopeNames, field.TypeJSON, value)
		_node.ScopeNames = value
	}
	if value, ok := otc.mutation.ExpiresIn(); ok {
		_spec.SetField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
		_node.ExpiresIn = value
	}
	if value, ok := otc.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := otc.mutation.RefreshTokenExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime, value)
		_node.RefreshTokenExpiresAt = &value
	}
	if value, ok := otc.mutation.Revoked(); ok {
		_spec.SetField(oauthtoken.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if value, ok := otc.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if value, ok := otc.mutation.IPAddress(); ok {
		_spec.SetField(oauthtoken.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := otc.mutation.UserAgent(); ok {
		_spec.SetField(oauthtoken.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if nodes := otc.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := otc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := otc.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthToken.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthTokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otc *OAuthTokenCreate) OnConflict(opts ...sql.ConflictOption) *OAuthTokenUpsertOne {
	otc.conflict = opts
	return &OAuthTokenUpsertOne{
		create: otc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otc *OAuthTokenCreate) OnConflictColumns(columns ...string) *OAuthTokenUpsertOne {
	otc.conflict = append(otc.conflict, sql.ConflictColumns(columns...))
	return &OAuthTokenUpsertOne{
		create: otc,
	}
}

type (
	// OAuthTokenUpsertOne is the builder for "upsert"-ing
	//  one OAuthToken node.
	OAuthTokenUpsertOne struct {
		create *OAuthTokenCreate
	}

	// OAuthTokenUpsert is the "OnConflict" setter.
	OAuthTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthTokenUpsert) SetUpdatedAt(v time.Time) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateUpdatedAt() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthTokenUpsert) SetDeletedAt(v time.Time) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateDeletedAt() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthTokenUpsert) ClearDeletedAt() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldDeletedAt)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthTokenUpsert) SetAccessToken(v string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateAccessToken() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthTokenUpsert) SetRefreshToken(v string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateRefreshToken() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldRefreshToken)
	return u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthTokenUpsert) ClearRefreshToken() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldRefreshToken)
	return u
}

// SetTokenType sets the "token_type" field.
func (u *OAuthTokenUpsert) SetTokenType(v string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateTokenType() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldTokenType)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OAuthTokenUpsert) SetClientID(v xid.ID) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateClientID() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldClientID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OAuthTokenUpsert) SetUserID(v xid.ID) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateUserID() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthTokenUpsert) SetOrganizationID(v xid.ID) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateOrganizationID() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthTokenUpsert) ClearOrganizationID() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldOrganizationID)
	return u
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthTokenUpsert) SetScopeNames(v []string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldScopeNames, v)
	return u
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateScopeNames() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldScopeNames)
	return u
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthTokenUpsert) ClearScopeNames() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldScopeNames)
	return u
}

// SetExpiresIn sets the "expires_in" field.
func (u *OAuthTokenUpsert) SetExpiresIn(v int) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldExpiresIn, v)
	return u
}

// UpdateExpiresIn sets the "expires_in" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateExpiresIn() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldExpiresIn)
	return u
}

// AddExpiresIn adds v to the "expires_in" field.
func (u *OAuthTokenUpsert) AddExpiresIn(v int) *OAuthTokenUpsert {
	u.Add(oauthtoken.FieldExpiresIn, v)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthTokenUpsert) SetExpiresAt(v time.Time) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateExpiresAt() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldExpiresAt)
	return u
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsert) SetRefreshTokenExpiresAt(v time.Time) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldRefreshTokenExpiresAt, v)
	return u
}

// UpdateRefreshTokenExpiresAt sets the "refresh_token_expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateRefreshTokenExpiresAt() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldRefreshTokenExpiresAt)
	return u
}

// ClearRefreshTokenExpiresAt clears the value of the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsert) ClearRefreshTokenExpiresAt() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldRefreshTokenExpiresAt)
	return u
}

// SetRevoked sets the "revoked" field.
func (u *OAuthTokenUpsert) SetRevoked(v bool) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldRevoked, v)
	return u
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateRevoked() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldRevoked)
	return u
}

// SetRevokedAt sets the "revoked_at" field.
func (u *OAuthTokenUpsert) SetRevokedAt(v time.Time) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldRevokedAt, v)
	return u
}

// UpdateRevokedAt sets the "revoked_at" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateRevokedAt() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldRevokedAt)
	return u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (u *OAuthTokenUpsert) ClearRevokedAt() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldRevokedAt)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthTokenUpsert) SetIPAddress(v string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateIPAddress() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthTokenUpsert) ClearIPAddress() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthTokenUpsert) SetUserAgent(v string) *OAuthTokenUpsert {
	u.Set(oauthtoken.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthTokenUpsert) UpdateUserAgent() *OAuthTokenUpsert {
	u.SetExcluded(oauthtoken.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthTokenUpsert) ClearUserAgent() *OAuthTokenUpsert {
	u.SetNull(oauthtoken.FieldUserAgent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthTokenUpsertOne) UpdateNewValues() *OAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauthtoken.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauthtoken.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthTokenUpsertOne) Ignore() *OAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthTokenUpsertOne) DoNothing() *OAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthTokenCreate.OnConflict
// documentation for more info.
func (u *OAuthTokenUpsertOne) Update(set func(*OAuthTokenUpsert)) *OAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthTokenUpsertOne) SetUpdatedAt(v time.Time) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateUpdatedAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthTokenUpsertOne) SetDeletedAt(v time.Time) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateDeletedAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthTokenUpsertOne) ClearDeletedAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthTokenUpsertOne) SetAccessToken(v string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateAccessToken() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthTokenUpsertOne) SetRefreshToken(v string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateRefreshToken() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthTokenUpsertOne) ClearRefreshToken() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRefreshToken()
	})
}

// SetTokenType sets the "token_type" field.
func (u *OAuthTokenUpsertOne) SetTokenType(v string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateTokenType() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthTokenUpsertOne) SetClientID(v xid.ID) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateClientID() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateClientID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OAuthTokenUpsertOne) SetUserID(v xid.ID) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateUserID() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthTokenUpsertOne) SetOrganizationID(v xid.ID) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateOrganizationID() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthTokenUpsertOne) ClearOrganizationID() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearOrganizationID()
	})
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthTokenUpsertOne) SetScopeNames(v []string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetScopeNames(v)
	})
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateScopeNames() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateScopeNames()
	})
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthTokenUpsertOne) ClearScopeNames() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearScopeNames()
	})
}

// SetExpiresIn sets the "expires_in" field.
func (u *OAuthTokenUpsertOne) SetExpiresIn(v int) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetExpiresIn(v)
	})
}

// AddExpiresIn adds v to the "expires_in" field.
func (u *OAuthTokenUpsertOne) AddExpiresIn(v int) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.AddExpiresIn(v)
	})
}

// UpdateExpiresIn sets the "expires_in" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateExpiresIn() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateExpiresIn()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthTokenUpsertOne) SetExpiresAt(v time.Time) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateExpiresAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsertOne) SetRefreshTokenExpiresAt(v time.Time) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRefreshTokenExpiresAt(v)
	})
}

// UpdateRefreshTokenExpiresAt sets the "refresh_token_expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateRefreshTokenExpiresAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRefreshTokenExpiresAt()
	})
}

// ClearRefreshTokenExpiresAt clears the value of the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsertOne) ClearRefreshTokenExpiresAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRefreshTokenExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *OAuthTokenUpsertOne) SetRevoked(v bool) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateRevoked() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRevoked()
	})
}

// SetRevokedAt sets the "revoked_at" field.
func (u *OAuthTokenUpsertOne) SetRevokedAt(v time.Time) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRevokedAt(v)
	})
}

// UpdateRevokedAt sets the "revoked_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateRevokedAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRevokedAt()
	})
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (u *OAuthTokenUpsertOne) ClearRevokedAt() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRevokedAt()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthTokenUpsertOne) SetIPAddress(v string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateIPAddress() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthTokenUpsertOne) ClearIPAddress() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthTokenUpsertOne) SetUserAgent(v string) *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthTokenUpsertOne) UpdateUserAgent() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthTokenUpsertOne) ClearUserAgent() *OAuthTokenUpsertOne {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearUserAgent()
	})
}

// Exec executes the query.
func (u *OAuthTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthTokenUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OAuthTokenUpsertOne.ID is not supported by MySQL driver. Use OAuthTokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthTokenUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthTokenCreateBulk is the builder for creating many OAuthToken entities in bulk.
type OAuthTokenCreateBulk struct {
	config
	err      error
	builders []*OAuthTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthToken entities in the database.
func (otcb *OAuthTokenCreateBulk) Save(ctx context.Context) ([]*OAuthToken, error) {
	if otcb.err != nil {
		return nil, otcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OAuthToken, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = otcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OAuthTokenCreateBulk) SaveX(ctx context.Context) []*OAuthToken {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OAuthTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OAuthTokenCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthTokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otcb *OAuthTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthTokenUpsertBulk {
	otcb.conflict = opts
	return &OAuthTokenUpsertBulk{
		create: otcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otcb *OAuthTokenCreateBulk) OnConflictColumns(columns ...string) *OAuthTokenUpsertBulk {
	otcb.conflict = append(otcb.conflict, sql.ConflictColumns(columns...))
	return &OAuthTokenUpsertBulk{
		create: otcb,
	}
}

// OAuthTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthToken nodes.
type OAuthTokenUpsertBulk struct {
	create *OAuthTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthTokenUpsertBulk) UpdateNewValues() *OAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauthtoken.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauthtoken.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthTokenUpsertBulk) Ignore() *OAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthTokenUpsertBulk) DoNothing() *OAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthTokenCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthTokenUpsertBulk) Update(set func(*OAuthTokenUpsert)) *OAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthTokenUpsertBulk) SetUpdatedAt(v time.Time) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateUpdatedAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthTokenUpsertBulk) SetDeletedAt(v time.Time) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateDeletedAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthTokenUpsertBulk) ClearDeletedAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthTokenUpsertBulk) SetAccessToken(v string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateAccessToken() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthTokenUpsertBulk) SetRefreshToken(v string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateRefreshToken() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthTokenUpsertBulk) ClearRefreshToken() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRefreshToken()
	})
}

// SetTokenType sets the "token_type" field.
func (u *OAuthTokenUpsertBulk) SetTokenType(v string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateTokenType() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthTokenUpsertBulk) SetClientID(v xid.ID) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateClientID() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateClientID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OAuthTokenUpsertBulk) SetUserID(v xid.ID) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateUserID() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthTokenUpsertBulk) SetOrganizationID(v xid.ID) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateOrganizationID() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthTokenUpsertBulk) ClearOrganizationID() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearOrganizationID()
	})
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthTokenUpsertBulk) SetScopeNames(v []string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetScopeNames(v)
	})
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateScopeNames() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateScopeNames()
	})
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthTokenUpsertBulk) ClearScopeNames() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearScopeNames()
	})
}

// SetExpiresIn sets the "expires_in" field.
func (u *OAuthTokenUpsertBulk) SetExpiresIn(v int) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetExpiresIn(v)
	})
}

// AddExpiresIn adds v to the "expires_in" field.
func (u *OAuthTokenUpsertBulk) AddExpiresIn(v int) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.AddExpiresIn(v)
	})
}

// UpdateExpiresIn sets the "expires_in" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateExpiresIn() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateExpiresIn()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthTokenUpsertBulk) SetExpiresAt(v time.Time) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateExpiresAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsertBulk) SetRefreshTokenExpiresAt(v time.Time) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRefreshTokenExpiresAt(v)
	})
}

// UpdateRefreshTokenExpiresAt sets the "refresh_token_expires_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateRefreshTokenExpiresAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRefreshTokenExpiresAt()
	})
}

// ClearRefreshTokenExpiresAt clears the value of the "refresh_token_expires_at" field.
func (u *OAuthTokenUpsertBulk) ClearRefreshTokenExpiresAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRefreshTokenExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *OAuthTokenUpsertBulk) SetRevoked(v bool) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateRevoked() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRevoked()
	})
}

// SetRevokedAt sets the "revoked_at" field.
func (u *OAuthTokenUpsertBulk) SetRevokedAt(v time.Time) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetRevokedAt(v)
	})
}

// UpdateRevokedAt sets the "revoked_at" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateRevokedAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateRevokedAt()
	})
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (u *OAuthTokenUpsertBulk) ClearRevokedAt() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearRevokedAt()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthTokenUpsertBulk) SetIPAddress(v string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateIPAddress() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthTokenUpsertBulk) ClearIPAddress() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthTokenUpsertBulk) SetUserAgent(v string) *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthTokenUpsertBulk) UpdateUserAgent() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthTokenUpsertBulk) ClearUserAgent() *OAuthTokenUpsertBulk {
	return u.Update(func(s *OAuthTokenUpsert) {
		s.ClearUserAgent()
	})
}

// Exec executes the query.
func (u *OAuthTokenUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
