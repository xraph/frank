// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/smstemplate"
)

// SMSTemplate is the model entity for the SMSTemplate schema.
type SMSTemplate struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Template name for identification
	Name string `json:"name,omitempty"`
	// SMS message content with template variables
	Content string `json:"content,omitempty"`
	// Template type: 'verification', 'mfa_code', 'password_reset', etc.
	Type string `json:"type,omitempty"`
	// Organization ID - null for system templates
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Whether template is active and available for use
	Active bool `json:"active,omitempty"`
	// System templates can be overridden but not deleted
	System bool `json:"system,omitempty"`
	// Template locale/language
	Locale string `json:"locale,omitempty"`
	// Maximum message length in characters
	MaxLength int `json:"max_length,omitempty"`
	// Message type: 'transactional', 'promotional', 'marketing'
	MessageType string `json:"message_type,omitempty"`
	// Estimated number of SMS segments
	EstimatedSegments int `json:"estimated_segments,omitempty"`
	// Estimated cost per message
	EstimatedCost float64 `json:"estimated_cost,omitempty"`
	// Cost currency
	Currency string `json:"currency,omitempty"`
	// List of available template variables
	Variables []string `json:"variables,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Last time template was used
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// Number of times template has been used
	UsageCount int `json:"usage_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SMSTemplateQuery when eager-loading is set.
	Edges        SMSTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SMSTemplateEdges holds the relations/edges for other nodes in the graph.
type SMSTemplateEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SMSTemplateEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SMSTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smstemplate.FieldVariables, smstemplate.FieldMetadata:
			values[i] = new([]byte)
		case smstemplate.FieldActive, smstemplate.FieldSystem:
			values[i] = new(sql.NullBool)
		case smstemplate.FieldEstimatedCost:
			values[i] = new(sql.NullFloat64)
		case smstemplate.FieldMaxLength, smstemplate.FieldEstimatedSegments, smstemplate.FieldUsageCount:
			values[i] = new(sql.NullInt64)
		case smstemplate.FieldName, smstemplate.FieldContent, smstemplate.FieldType, smstemplate.FieldLocale, smstemplate.FieldMessageType, smstemplate.FieldCurrency:
			values[i] = new(sql.NullString)
		case smstemplate.FieldCreatedAt, smstemplate.FieldUpdatedAt, smstemplate.FieldDeletedAt, smstemplate.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		case smstemplate.FieldID, smstemplate.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SMSTemplate fields.
func (st *SMSTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smstemplate.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case smstemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case smstemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		case smstemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = value.Time
			}
		case smstemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case smstemplate.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				st.Content = value.String
			}
		case smstemplate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				st.Type = value.String
			}
		case smstemplate.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				st.OrganizationID = *value
			}
		case smstemplate.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				st.Active = value.Bool
			}
		case smstemplate.FieldSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system", values[i])
			} else if value.Valid {
				st.System = value.Bool
			}
		case smstemplate.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				st.Locale = value.String
			}
		case smstemplate.FieldMaxLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_length", values[i])
			} else if value.Valid {
				st.MaxLength = int(value.Int64)
			}
		case smstemplate.FieldMessageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_type", values[i])
			} else if value.Valid {
				st.MessageType = value.String
			}
		case smstemplate.FieldEstimatedSegments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_segments", values[i])
			} else if value.Valid {
				st.EstimatedSegments = int(value.Int64)
			}
		case smstemplate.FieldEstimatedCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_cost", values[i])
			} else if value.Valid {
				st.EstimatedCost = value.Float64
			}
		case smstemplate.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				st.Currency = value.String
			}
		case smstemplate.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case smstemplate.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case smstemplate.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				st.LastUsedAt = value.Time
			}
		case smstemplate.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				st.UsageCount = int(value.Int64)
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SMSTemplate.
// This includes values selected through modifiers, order, etc.
func (st *SMSTemplate) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the SMSTemplate entity.
func (st *SMSTemplate) QueryOrganization() *OrganizationQuery {
	return NewSMSTemplateClient(st.config).QueryOrganization(st)
}

// Update returns a builder for updating this SMSTemplate.
// Note that you need to call SMSTemplate.Unwrap() before calling this method if this SMSTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SMSTemplate) Update() *SMSTemplateUpdateOne {
	return NewSMSTemplateClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SMSTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SMSTemplate) Unwrap() *SMSTemplate {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SMSTemplate is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SMSTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("SMSTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(st.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(st.Content)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(st.Type)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", st.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", st.Active))
	builder.WriteString(", ")
	builder.WriteString("system=")
	builder.WriteString(fmt.Sprintf("%v", st.System))
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(st.Locale)
	builder.WriteString(", ")
	builder.WriteString("max_length=")
	builder.WriteString(fmt.Sprintf("%v", st.MaxLength))
	builder.WriteString(", ")
	builder.WriteString("message_type=")
	builder.WriteString(st.MessageType)
	builder.WriteString(", ")
	builder.WriteString("estimated_segments=")
	builder.WriteString(fmt.Sprintf("%v", st.EstimatedSegments))
	builder.WriteString(", ")
	builder.WriteString("estimated_cost=")
	builder.WriteString(fmt.Sprintf("%v", st.EstimatedCost))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(st.Currency)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", st.Variables))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", st.Metadata))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(st.LastUsedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", st.UsageCount))
	builder.WriteByte(')')
	return builder.String()
}

// SMSTemplates is a parsable slice of SMSTemplate.
type SMSTemplates []*SMSTemplate
