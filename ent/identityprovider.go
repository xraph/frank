// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
)

// IdentityProvider is the model entity for the IdentityProvider schema.
type IdentityProvider struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Type of IdP: 'oauth2', 'oidc', 'saml'
	ProviderType string `json:"provider_type,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"-"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer,omitempty"`
	// AuthorizationEndpoint holds the value of the "authorization_endpoint" field.
	AuthorizationEndpoint string `json:"authorization_endpoint,omitempty"`
	// TokenEndpoint holds the value of the "token_endpoint" field.
	TokenEndpoint string `json:"token_endpoint,omitempty"`
	// UserinfoEndpoint holds the value of the "userinfo_endpoint" field.
	UserinfoEndpoint string `json:"userinfo_endpoint,omitempty"`
	// JwksURI holds the value of the "jwks_uri" field.
	JwksURI string `json:"jwks_uri,omitempty"`
	// MetadataURL holds the value of the "metadata_url" field.
	MetadataURL string `json:"metadata_url,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// Certificate holds the value of the "certificate" field.
	Certificate string `json:"-"`
	// PrivateKey holds the value of the "private_key" field.
	PrivateKey string `json:"-"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Primary holds the value of the "primary" field.
	Primary bool `json:"primary,omitempty"`
	// AutoProvision holds the value of the "auto_provision" field.
	AutoProvision bool `json:"auto_provision,omitempty"`
	// DefaultRole holds the value of the "default_role" field.
	DefaultRole string `json:"default_role,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// IconURL holds the value of the "icon_url" field.
	IconURL string `json:"icon_url,omitempty"`
	// ButtonText holds the value of the "button_text" field.
	ButtonText string `json:"button_text,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []string `json:"domains,omitempty"`
	// AttributesMapping holds the value of the "attributes_mapping" field.
	AttributesMapping map[string]string `json:"attributes_mapping,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdentityProviderQuery when eager-loading is set.
	Edges        IdentityProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdentityProviderEdges holds the relations/edges for other nodes in the graph.
type IdentityProviderEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// OrganizationProviders holds the value of the organization_providers edge.
	OrganizationProviders []*OrganizationProvider `json:"organization_providers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                [2]bool
	namedOrganizationProviders map[string][]*OrganizationProvider
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdentityProviderEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// OrganizationProvidersOrErr returns the OrganizationProviders value or an error if the edge
// was not loaded in eager-loading.
func (e IdentityProviderEdges) OrganizationProvidersOrErr() ([]*OrganizationProvider, error) {
	if e.loadedTypes[1] {
		return e.OrganizationProviders, nil
	}
	return nil, &NotLoadedError{edge: "organization_providers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentityProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identityprovider.FieldDomains, identityprovider.FieldAttributesMapping, identityprovider.FieldMetadata:
			values[i] = new([]byte)
		case identityprovider.FieldActive, identityprovider.FieldEnabled, identityprovider.FieldPrimary, identityprovider.FieldAutoProvision:
			values[i] = new(sql.NullBool)
		case identityprovider.FieldName, identityprovider.FieldProviderType, identityprovider.FieldClientID, identityprovider.FieldClientSecret, identityprovider.FieldIssuer, identityprovider.FieldAuthorizationEndpoint, identityprovider.FieldTokenEndpoint, identityprovider.FieldUserinfoEndpoint, identityprovider.FieldJwksURI, identityprovider.FieldMetadataURL, identityprovider.FieldRedirectURI, identityprovider.FieldCertificate, identityprovider.FieldPrivateKey, identityprovider.FieldDefaultRole, identityprovider.FieldDomain, identityprovider.FieldIconURL, identityprovider.FieldButtonText, identityprovider.FieldProtocol:
			values[i] = new(sql.NullString)
		case identityprovider.FieldCreatedAt, identityprovider.FieldUpdatedAt, identityprovider.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case identityprovider.FieldID, identityprovider.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentityProvider fields.
func (ip *IdentityProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identityprovider.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ip.ID = *value
			}
		case identityprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ip.CreatedAt = value.Time
			}
		case identityprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ip.UpdatedAt = value.Time
			}
		case identityprovider.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ip.DeletedAt = value.Time
			}
		case identityprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ip.Name = value.String
			}
		case identityprovider.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				ip.OrganizationID = *value
			}
		case identityprovider.FieldProviderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				ip.ProviderType = value.String
			}
		case identityprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				ip.ClientID = value.String
			}
		case identityprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				ip.ClientSecret = value.String
			}
		case identityprovider.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				ip.Issuer = value.String
			}
		case identityprovider.FieldAuthorizationEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authorization_endpoint", values[i])
			} else if value.Valid {
				ip.AuthorizationEndpoint = value.String
			}
		case identityprovider.FieldTokenEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_endpoint", values[i])
			} else if value.Valid {
				ip.TokenEndpoint = value.String
			}
		case identityprovider.FieldUserinfoEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userinfo_endpoint", values[i])
			} else if value.Valid {
				ip.UserinfoEndpoint = value.String
			}
		case identityprovider.FieldJwksURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jwks_uri", values[i])
			} else if value.Valid {
				ip.JwksURI = value.String
			}
		case identityprovider.FieldMetadataURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_url", values[i])
			} else if value.Valid {
				ip.MetadataURL = value.String
			}
		case identityprovider.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				ip.RedirectURI = value.String
			}
		case identityprovider.FieldCertificate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate", values[i])
			} else if value.Valid {
				ip.Certificate = value.String
			}
		case identityprovider.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				ip.PrivateKey = value.String
			}
		case identityprovider.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				ip.Active = value.Bool
			}
		case identityprovider.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				ip.Enabled = value.Bool
			}
		case identityprovider.FieldPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field primary", values[i])
			} else if value.Valid {
				ip.Primary = value.Bool
			}
		case identityprovider.FieldAutoProvision:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_provision", values[i])
			} else if value.Valid {
				ip.AutoProvision = value.Bool
			}
		case identityprovider.FieldDefaultRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_role", values[i])
			} else if value.Valid {
				ip.DefaultRole = value.String
			}
		case identityprovider.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				ip.Domain = value.String
			}
		case identityprovider.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				ip.IconURL = value.String
			}
		case identityprovider.FieldButtonText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field button_text", values[i])
			} else if value.Valid {
				ip.ButtonText = value.String
			}
		case identityprovider.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				ip.Protocol = value.String
			}
		case identityprovider.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case identityprovider.FieldAttributesMapping:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attributes_mapping", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.AttributesMapping); err != nil {
					return fmt.Errorf("unmarshal field attributes_mapping: %w", err)
				}
			}
		case identityprovider.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdentityProvider.
// This includes values selected through modifiers, order, etc.
func (ip *IdentityProvider) Value(name string) (ent.Value, error) {
	return ip.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the IdentityProvider entity.
func (ip *IdentityProvider) QueryOrganization() *OrganizationQuery {
	return NewIdentityProviderClient(ip.config).QueryOrganization(ip)
}

// QueryOrganizationProviders queries the "organization_providers" edge of the IdentityProvider entity.
func (ip *IdentityProvider) QueryOrganizationProviders() *OrganizationProviderQuery {
	return NewIdentityProviderClient(ip.config).QueryOrganizationProviders(ip)
}

// Update returns a builder for updating this IdentityProvider.
// Note that you need to call IdentityProvider.Unwrap() before calling this method if this IdentityProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *IdentityProvider) Update() *IdentityProviderUpdateOne {
	return NewIdentityProviderClient(ip.config).UpdateOne(ip)
}

// Unwrap unwraps the IdentityProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *IdentityProvider) Unwrap() *IdentityProvider {
	_tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdentityProvider is not a transactional entity")
	}
	ip.config.driver = _tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *IdentityProvider) String() string {
	var builder strings.Builder
	builder.WriteString("IdentityProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ip.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ip.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ip.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ip.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ip.Name)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", ip.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(ip.ProviderType)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(ip.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("issuer=")
	builder.WriteString(ip.Issuer)
	builder.WriteString(", ")
	builder.WriteString("authorization_endpoint=")
	builder.WriteString(ip.AuthorizationEndpoint)
	builder.WriteString(", ")
	builder.WriteString("token_endpoint=")
	builder.WriteString(ip.TokenEndpoint)
	builder.WriteString(", ")
	builder.WriteString("userinfo_endpoint=")
	builder.WriteString(ip.UserinfoEndpoint)
	builder.WriteString(", ")
	builder.WriteString("jwks_uri=")
	builder.WriteString(ip.JwksURI)
	builder.WriteString(", ")
	builder.WriteString("metadata_url=")
	builder.WriteString(ip.MetadataURL)
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(ip.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("certificate=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("private_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", ip.Active))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", ip.Enabled))
	builder.WriteString(", ")
	builder.WriteString("primary=")
	builder.WriteString(fmt.Sprintf("%v", ip.Primary))
	builder.WriteString(", ")
	builder.WriteString("auto_provision=")
	builder.WriteString(fmt.Sprintf("%v", ip.AutoProvision))
	builder.WriteString(", ")
	builder.WriteString("default_role=")
	builder.WriteString(ip.DefaultRole)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(ip.Domain)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(ip.IconURL)
	builder.WriteString(", ")
	builder.WriteString("button_text=")
	builder.WriteString(ip.ButtonText)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(ip.Protocol)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", ip.Domains))
	builder.WriteString(", ")
	builder.WriteString("attributes_mapping=")
	builder.WriteString(fmt.Sprintf("%v", ip.AttributesMapping))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ip.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrganizationProviders returns the OrganizationProviders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *IdentityProvider) NamedOrganizationProviders(name string) ([]*OrganizationProvider, error) {
	if ip.Edges.namedOrganizationProviders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedOrganizationProviders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *IdentityProvider) appendNamedOrganizationProviders(name string, edges ...*OrganizationProvider) {
	if ip.Edges.namedOrganizationProviders == nil {
		ip.Edges.namedOrganizationProviders = make(map[string][]*OrganizationProvider)
	}
	if len(edges) == 0 {
		ip.Edges.namedOrganizationProviders[name] = []*OrganizationProvider{}
	} else {
		ip.Edges.namedOrganizationProviders[name] = append(ip.Edges.namedOrganizationProviders[name], edges...)
	}
}

// IdentityProviders is a parsable slice of IdentityProvider.
type IdentityProviders []*IdentityProvider
