// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
	"github.com/xraph/frank/ent/predicate"
)

// ApiKeyActivityUpdate is the builder for updating ApiKeyActivity entities.
type ApiKeyActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *ApiKeyActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApiKeyActivityUpdate builder.
func (akau *ApiKeyActivityUpdate) Where(ps ...predicate.ApiKeyActivity) *ApiKeyActivityUpdate {
	akau.mutation.Where(ps...)
	return akau
}

// SetKeyID sets the "key_id" field.
func (akau *ApiKeyActivityUpdate) SetKeyID(x xid.ID) *ApiKeyActivityUpdate {
	akau.mutation.SetKeyID(x)
	return akau
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableKeyID(x *xid.ID) *ApiKeyActivityUpdate {
	if x != nil {
		akau.SetKeyID(*x)
	}
	return akau
}

// SetAction sets the "action" field.
func (akau *ApiKeyActivityUpdate) SetAction(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetAction(s)
	return akau
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableAction(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetAction(*s)
	}
	return akau
}

// SetEndpoint sets the "endpoint" field.
func (akau *ApiKeyActivityUpdate) SetEndpoint(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetEndpoint(s)
	return akau
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableEndpoint(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetEndpoint(*s)
	}
	return akau
}

// ClearEndpoint clears the value of the "endpoint" field.
func (akau *ApiKeyActivityUpdate) ClearEndpoint() *ApiKeyActivityUpdate {
	akau.mutation.ClearEndpoint()
	return akau
}

// SetMethod sets the "method" field.
func (akau *ApiKeyActivityUpdate) SetMethod(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetMethod(s)
	return akau
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableMethod(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetMethod(*s)
	}
	return akau
}

// ClearMethod clears the value of the "method" field.
func (akau *ApiKeyActivityUpdate) ClearMethod() *ApiKeyActivityUpdate {
	akau.mutation.ClearMethod()
	return akau
}

// SetStatusCode sets the "status_code" field.
func (akau *ApiKeyActivityUpdate) SetStatusCode(i int) *ApiKeyActivityUpdate {
	akau.mutation.ResetStatusCode()
	akau.mutation.SetStatusCode(i)
	return akau
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableStatusCode(i *int) *ApiKeyActivityUpdate {
	if i != nil {
		akau.SetStatusCode(*i)
	}
	return akau
}

// AddStatusCode adds i to the "status_code" field.
func (akau *ApiKeyActivityUpdate) AddStatusCode(i int) *ApiKeyActivityUpdate {
	akau.mutation.AddStatusCode(i)
	return akau
}

// ClearStatusCode clears the value of the "status_code" field.
func (akau *ApiKeyActivityUpdate) ClearStatusCode() *ApiKeyActivityUpdate {
	akau.mutation.ClearStatusCode()
	return akau
}

// SetResponseTime sets the "response_time" field.
func (akau *ApiKeyActivityUpdate) SetResponseTime(i int) *ApiKeyActivityUpdate {
	akau.mutation.ResetResponseTime()
	akau.mutation.SetResponseTime(i)
	return akau
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableResponseTime(i *int) *ApiKeyActivityUpdate {
	if i != nil {
		akau.SetResponseTime(*i)
	}
	return akau
}

// AddResponseTime adds i to the "response_time" field.
func (akau *ApiKeyActivityUpdate) AddResponseTime(i int) *ApiKeyActivityUpdate {
	akau.mutation.AddResponseTime(i)
	return akau
}

// ClearResponseTime clears the value of the "response_time" field.
func (akau *ApiKeyActivityUpdate) ClearResponseTime() *ApiKeyActivityUpdate {
	akau.mutation.ClearResponseTime()
	return akau
}

// SetIPAddress sets the "ip_address" field.
func (akau *ApiKeyActivityUpdate) SetIPAddress(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetIPAddress(s)
	return akau
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableIPAddress(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetIPAddress(*s)
	}
	return akau
}

// ClearIPAddress clears the value of the "ip_address" field.
func (akau *ApiKeyActivityUpdate) ClearIPAddress() *ApiKeyActivityUpdate {
	akau.mutation.ClearIPAddress()
	return akau
}

// SetUserAgent sets the "user_agent" field.
func (akau *ApiKeyActivityUpdate) SetUserAgent(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetUserAgent(s)
	return akau
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableUserAgent(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetUserAgent(*s)
	}
	return akau
}

// ClearUserAgent clears the value of the "user_agent" field.
func (akau *ApiKeyActivityUpdate) ClearUserAgent() *ApiKeyActivityUpdate {
	akau.mutation.ClearUserAgent()
	return akau
}

// SetSuccess sets the "success" field.
func (akau *ApiKeyActivityUpdate) SetSuccess(b bool) *ApiKeyActivityUpdate {
	akau.mutation.SetSuccess(b)
	return akau
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableSuccess(b *bool) *ApiKeyActivityUpdate {
	if b != nil {
		akau.SetSuccess(*b)
	}
	return akau
}

// SetError sets the "error" field.
func (akau *ApiKeyActivityUpdate) SetError(s string) *ApiKeyActivityUpdate {
	akau.mutation.SetError(s)
	return akau
}

// SetNillableError sets the "error" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableError(s *string) *ApiKeyActivityUpdate {
	if s != nil {
		akau.SetError(*s)
	}
	return akau
}

// ClearError clears the value of the "error" field.
func (akau *ApiKeyActivityUpdate) ClearError() *ApiKeyActivityUpdate {
	akau.mutation.ClearError()
	return akau
}

// SetTimestamp sets the "timestamp" field.
func (akau *ApiKeyActivityUpdate) SetTimestamp(t time.Time) *ApiKeyActivityUpdate {
	akau.mutation.SetTimestamp(t)
	return akau
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (akau *ApiKeyActivityUpdate) SetNillableTimestamp(t *time.Time) *ApiKeyActivityUpdate {
	if t != nil {
		akau.SetTimestamp(*t)
	}
	return akau
}

// SetMetadata sets the "metadata" field.
func (akau *ApiKeyActivityUpdate) SetMetadata(m map[string]interface{}) *ApiKeyActivityUpdate {
	akau.mutation.SetMetadata(m)
	return akau
}

// ClearMetadata clears the value of the "metadata" field.
func (akau *ApiKeyActivityUpdate) ClearMetadata() *ApiKeyActivityUpdate {
	akau.mutation.ClearMetadata()
	return akau
}

// SetKey sets the "key" edge to the ApiKey entity.
func (akau *ApiKeyActivityUpdate) SetKey(a *ApiKey) *ApiKeyActivityUpdate {
	return akau.SetKeyID(a.ID)
}

// Mutation returns the ApiKeyActivityMutation object of the builder.
func (akau *ApiKeyActivityUpdate) Mutation() *ApiKeyActivityMutation {
	return akau.mutation
}

// ClearKey clears the "key" edge to the ApiKey entity.
func (akau *ApiKeyActivityUpdate) ClearKey() *ApiKeyActivityUpdate {
	akau.mutation.ClearKey()
	return akau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (akau *ApiKeyActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, akau.sqlSave, akau.mutation, akau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akau *ApiKeyActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := akau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (akau *ApiKeyActivityUpdate) Exec(ctx context.Context) error {
	_, err := akau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akau *ApiKeyActivityUpdate) ExecX(ctx context.Context) {
	if err := akau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akau *ApiKeyActivityUpdate) check() error {
	if v, ok := akau.mutation.KeyID(); ok {
		if err := apikeyactivity.KeyIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "key_id", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.key_id": %w`, err)}
		}
	}
	if v, ok := akau.mutation.Action(); ok {
		if err := apikeyactivity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.action": %w`, err)}
		}
	}
	if akau.mutation.KeyCleared() && len(akau.mutation.KeyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApiKeyActivity.key"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (akau *ApiKeyActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiKeyActivityUpdate {
	akau.modifiers = append(akau.modifiers, modifiers...)
	return akau
}

func (akau *ApiKeyActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := akau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikeyactivity.Table, apikeyactivity.Columns, sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString))
	if ps := akau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akau.mutation.Action(); ok {
		_spec.SetField(apikeyactivity.FieldAction, field.TypeString, value)
	}
	if value, ok := akau.mutation.Endpoint(); ok {
		_spec.SetField(apikeyactivity.FieldEndpoint, field.TypeString, value)
	}
	if akau.mutation.EndpointCleared() {
		_spec.ClearField(apikeyactivity.FieldEndpoint, field.TypeString)
	}
	if value, ok := akau.mutation.Method(); ok {
		_spec.SetField(apikeyactivity.FieldMethod, field.TypeString, value)
	}
	if akau.mutation.MethodCleared() {
		_spec.ClearField(apikeyactivity.FieldMethod, field.TypeString)
	}
	if value, ok := akau.mutation.StatusCode(); ok {
		_spec.SetField(apikeyactivity.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := akau.mutation.AddedStatusCode(); ok {
		_spec.AddField(apikeyactivity.FieldStatusCode, field.TypeInt, value)
	}
	if akau.mutation.StatusCodeCleared() {
		_spec.ClearField(apikeyactivity.FieldStatusCode, field.TypeInt)
	}
	if value, ok := akau.mutation.ResponseTime(); ok {
		_spec.SetField(apikeyactivity.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := akau.mutation.AddedResponseTime(); ok {
		_spec.AddField(apikeyactivity.FieldResponseTime, field.TypeInt, value)
	}
	if akau.mutation.ResponseTimeCleared() {
		_spec.ClearField(apikeyactivity.FieldResponseTime, field.TypeInt)
	}
	if value, ok := akau.mutation.IPAddress(); ok {
		_spec.SetField(apikeyactivity.FieldIPAddress, field.TypeString, value)
	}
	if akau.mutation.IPAddressCleared() {
		_spec.ClearField(apikeyactivity.FieldIPAddress, field.TypeString)
	}
	if value, ok := akau.mutation.UserAgent(); ok {
		_spec.SetField(apikeyactivity.FieldUserAgent, field.TypeString, value)
	}
	if akau.mutation.UserAgentCleared() {
		_spec.ClearField(apikeyactivity.FieldUserAgent, field.TypeString)
	}
	if value, ok := akau.mutation.Success(); ok {
		_spec.SetField(apikeyactivity.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := akau.mutation.Error(); ok {
		_spec.SetField(apikeyactivity.FieldError, field.TypeString, value)
	}
	if akau.mutation.ErrorCleared() {
		_spec.ClearField(apikeyactivity.FieldError, field.TypeString)
	}
	if value, ok := akau.mutation.Timestamp(); ok {
		_spec.SetField(apikeyactivity.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := akau.mutation.Metadata(); ok {
		_spec.SetField(apikeyactivity.FieldMetadata, field.TypeJSON, value)
	}
	if akau.mutation.MetadataCleared() {
		_spec.ClearField(apikeyactivity.FieldMetadata, field.TypeJSON)
	}
	if akau.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akau.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(akau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, akau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeyactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	akau.mutation.done = true
	return n, nil
}

// ApiKeyActivityUpdateOne is the builder for updating a single ApiKeyActivity entity.
type ApiKeyActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApiKeyActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetKeyID sets the "key_id" field.
func (akauo *ApiKeyActivityUpdateOne) SetKeyID(x xid.ID) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetKeyID(x)
	return akauo
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableKeyID(x *xid.ID) *ApiKeyActivityUpdateOne {
	if x != nil {
		akauo.SetKeyID(*x)
	}
	return akauo
}

// SetAction sets the "action" field.
func (akauo *ApiKeyActivityUpdateOne) SetAction(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetAction(s)
	return akauo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableAction(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetAction(*s)
	}
	return akauo
}

// SetEndpoint sets the "endpoint" field.
func (akauo *ApiKeyActivityUpdateOne) SetEndpoint(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetEndpoint(s)
	return akauo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableEndpoint(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetEndpoint(*s)
	}
	return akauo
}

// ClearEndpoint clears the value of the "endpoint" field.
func (akauo *ApiKeyActivityUpdateOne) ClearEndpoint() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearEndpoint()
	return akauo
}

// SetMethod sets the "method" field.
func (akauo *ApiKeyActivityUpdateOne) SetMethod(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetMethod(s)
	return akauo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableMethod(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetMethod(*s)
	}
	return akauo
}

// ClearMethod clears the value of the "method" field.
func (akauo *ApiKeyActivityUpdateOne) ClearMethod() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearMethod()
	return akauo
}

// SetStatusCode sets the "status_code" field.
func (akauo *ApiKeyActivityUpdateOne) SetStatusCode(i int) *ApiKeyActivityUpdateOne {
	akauo.mutation.ResetStatusCode()
	akauo.mutation.SetStatusCode(i)
	return akauo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableStatusCode(i *int) *ApiKeyActivityUpdateOne {
	if i != nil {
		akauo.SetStatusCode(*i)
	}
	return akauo
}

// AddStatusCode adds i to the "status_code" field.
func (akauo *ApiKeyActivityUpdateOne) AddStatusCode(i int) *ApiKeyActivityUpdateOne {
	akauo.mutation.AddStatusCode(i)
	return akauo
}

// ClearStatusCode clears the value of the "status_code" field.
func (akauo *ApiKeyActivityUpdateOne) ClearStatusCode() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearStatusCode()
	return akauo
}

// SetResponseTime sets the "response_time" field.
func (akauo *ApiKeyActivityUpdateOne) SetResponseTime(i int) *ApiKeyActivityUpdateOne {
	akauo.mutation.ResetResponseTime()
	akauo.mutation.SetResponseTime(i)
	return akauo
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableResponseTime(i *int) *ApiKeyActivityUpdateOne {
	if i != nil {
		akauo.SetResponseTime(*i)
	}
	return akauo
}

// AddResponseTime adds i to the "response_time" field.
func (akauo *ApiKeyActivityUpdateOne) AddResponseTime(i int) *ApiKeyActivityUpdateOne {
	akauo.mutation.AddResponseTime(i)
	return akauo
}

// ClearResponseTime clears the value of the "response_time" field.
func (akauo *ApiKeyActivityUpdateOne) ClearResponseTime() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearResponseTime()
	return akauo
}

// SetIPAddress sets the "ip_address" field.
func (akauo *ApiKeyActivityUpdateOne) SetIPAddress(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetIPAddress(s)
	return akauo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableIPAddress(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetIPAddress(*s)
	}
	return akauo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (akauo *ApiKeyActivityUpdateOne) ClearIPAddress() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearIPAddress()
	return akauo
}

// SetUserAgent sets the "user_agent" field.
func (akauo *ApiKeyActivityUpdateOne) SetUserAgent(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetUserAgent(s)
	return akauo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableUserAgent(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetUserAgent(*s)
	}
	return akauo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (akauo *ApiKeyActivityUpdateOne) ClearUserAgent() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearUserAgent()
	return akauo
}

// SetSuccess sets the "success" field.
func (akauo *ApiKeyActivityUpdateOne) SetSuccess(b bool) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetSuccess(b)
	return akauo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableSuccess(b *bool) *ApiKeyActivityUpdateOne {
	if b != nil {
		akauo.SetSuccess(*b)
	}
	return akauo
}

// SetError sets the "error" field.
func (akauo *ApiKeyActivityUpdateOne) SetError(s string) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetError(s)
	return akauo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableError(s *string) *ApiKeyActivityUpdateOne {
	if s != nil {
		akauo.SetError(*s)
	}
	return akauo
}

// ClearError clears the value of the "error" field.
func (akauo *ApiKeyActivityUpdateOne) ClearError() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearError()
	return akauo
}

// SetTimestamp sets the "timestamp" field.
func (akauo *ApiKeyActivityUpdateOne) SetTimestamp(t time.Time) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetTimestamp(t)
	return akauo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (akauo *ApiKeyActivityUpdateOne) SetNillableTimestamp(t *time.Time) *ApiKeyActivityUpdateOne {
	if t != nil {
		akauo.SetTimestamp(*t)
	}
	return akauo
}

// SetMetadata sets the "metadata" field.
func (akauo *ApiKeyActivityUpdateOne) SetMetadata(m map[string]interface{}) *ApiKeyActivityUpdateOne {
	akauo.mutation.SetMetadata(m)
	return akauo
}

// ClearMetadata clears the value of the "metadata" field.
func (akauo *ApiKeyActivityUpdateOne) ClearMetadata() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearMetadata()
	return akauo
}

// SetKey sets the "key" edge to the ApiKey entity.
func (akauo *ApiKeyActivityUpdateOne) SetKey(a *ApiKey) *ApiKeyActivityUpdateOne {
	return akauo.SetKeyID(a.ID)
}

// Mutation returns the ApiKeyActivityMutation object of the builder.
func (akauo *ApiKeyActivityUpdateOne) Mutation() *ApiKeyActivityMutation {
	return akauo.mutation
}

// ClearKey clears the "key" edge to the ApiKey entity.
func (akauo *ApiKeyActivityUpdateOne) ClearKey() *ApiKeyActivityUpdateOne {
	akauo.mutation.ClearKey()
	return akauo
}

// Where appends a list predicates to the ApiKeyActivityUpdate builder.
func (akauo *ApiKeyActivityUpdateOne) Where(ps ...predicate.ApiKeyActivity) *ApiKeyActivityUpdateOne {
	akauo.mutation.Where(ps...)
	return akauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akauo *ApiKeyActivityUpdateOne) Select(field string, fields ...string) *ApiKeyActivityUpdateOne {
	akauo.fields = append([]string{field}, fields...)
	return akauo
}

// Save executes the query and returns the updated ApiKeyActivity entity.
func (akauo *ApiKeyActivityUpdateOne) Save(ctx context.Context) (*ApiKeyActivity, error) {
	return withHooks(ctx, akauo.sqlSave, akauo.mutation, akauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akauo *ApiKeyActivityUpdateOne) SaveX(ctx context.Context) *ApiKeyActivity {
	node, err := akauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akauo *ApiKeyActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := akauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akauo *ApiKeyActivityUpdateOne) ExecX(ctx context.Context) {
	if err := akauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akauo *ApiKeyActivityUpdateOne) check() error {
	if v, ok := akauo.mutation.KeyID(); ok {
		if err := apikeyactivity.KeyIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "key_id", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.key_id": %w`, err)}
		}
	}
	if v, ok := akauo.mutation.Action(); ok {
		if err := apikeyactivity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "ApiKeyActivity.action": %w`, err)}
		}
	}
	if akauo.mutation.KeyCleared() && len(akauo.mutation.KeyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApiKeyActivity.key"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (akauo *ApiKeyActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApiKeyActivityUpdateOne {
	akauo.modifiers = append(akauo.modifiers, modifiers...)
	return akauo
}

func (akauo *ApiKeyActivityUpdateOne) sqlSave(ctx context.Context) (_node *ApiKeyActivity, err error) {
	if err := akauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikeyactivity.Table, apikeyactivity.Columns, sqlgraph.NewFieldSpec(apikeyactivity.FieldID, field.TypeString))
	id, ok := akauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiKeyActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikeyactivity.FieldID)
		for _, f := range fields {
			if !apikeyactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikeyactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akauo.mutation.Action(); ok {
		_spec.SetField(apikeyactivity.FieldAction, field.TypeString, value)
	}
	if value, ok := akauo.mutation.Endpoint(); ok {
		_spec.SetField(apikeyactivity.FieldEndpoint, field.TypeString, value)
	}
	if akauo.mutation.EndpointCleared() {
		_spec.ClearField(apikeyactivity.FieldEndpoint, field.TypeString)
	}
	if value, ok := akauo.mutation.Method(); ok {
		_spec.SetField(apikeyactivity.FieldMethod, field.TypeString, value)
	}
	if akauo.mutation.MethodCleared() {
		_spec.ClearField(apikeyactivity.FieldMethod, field.TypeString)
	}
	if value, ok := akauo.mutation.StatusCode(); ok {
		_spec.SetField(apikeyactivity.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := akauo.mutation.AddedStatusCode(); ok {
		_spec.AddField(apikeyactivity.FieldStatusCode, field.TypeInt, value)
	}
	if akauo.mutation.StatusCodeCleared() {
		_spec.ClearField(apikeyactivity.FieldStatusCode, field.TypeInt)
	}
	if value, ok := akauo.mutation.ResponseTime(); ok {
		_spec.SetField(apikeyactivity.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := akauo.mutation.AddedResponseTime(); ok {
		_spec.AddField(apikeyactivity.FieldResponseTime, field.TypeInt, value)
	}
	if akauo.mutation.ResponseTimeCleared() {
		_spec.ClearField(apikeyactivity.FieldResponseTime, field.TypeInt)
	}
	if value, ok := akauo.mutation.IPAddress(); ok {
		_spec.SetField(apikeyactivity.FieldIPAddress, field.TypeString, value)
	}
	if akauo.mutation.IPAddressCleared() {
		_spec.ClearField(apikeyactivity.FieldIPAddress, field.TypeString)
	}
	if value, ok := akauo.mutation.UserAgent(); ok {
		_spec.SetField(apikeyactivity.FieldUserAgent, field.TypeString, value)
	}
	if akauo.mutation.UserAgentCleared() {
		_spec.ClearField(apikeyactivity.FieldUserAgent, field.TypeString)
	}
	if value, ok := akauo.mutation.Success(); ok {
		_spec.SetField(apikeyactivity.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := akauo.mutation.Error(); ok {
		_spec.SetField(apikeyactivity.FieldError, field.TypeString, value)
	}
	if akauo.mutation.ErrorCleared() {
		_spec.ClearField(apikeyactivity.FieldError, field.TypeString)
	}
	if value, ok := akauo.mutation.Timestamp(); ok {
		_spec.SetField(apikeyactivity.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := akauo.mutation.Metadata(); ok {
		_spec.SetField(apikeyactivity.FieldMetadata, field.TypeJSON, value)
	}
	if akauo.mutation.MetadataCleared() {
		_spec.ClearField(apikeyactivity.FieldMetadata, field.TypeJSON)
	}
	if akauo.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akauo.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(akauo.modifiers...)
	_node = &ApiKeyActivity{config: akauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeyactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akauo.mutation.done = true
	return _node, nil
}
