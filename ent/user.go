// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Used for end users who prefer username over email
	Username string `json:"username,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"-"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified bool `json:"email_verified,omitempty"`
	// PhoneVerified holds the value of the "phone_verified" field.
	PhoneVerified bool `json:"phone_verified,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Can be blocked by organization admin
	Blocked bool `json:"blocked,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin *time.Time `json:"last_login,omitempty"`
	// LastPasswordChange holds the value of the "last_password_change" field.
	LastPasswordChange *time.Time `json:"last_password_change,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// ProfileImageURL holds the value of the "profile_image_url" field.
	ProfileImageURL string `json:"profile_image_url,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// internal = platform staff, external = customer org members, end_user = auth service users
	UserType model.UserType `json:"user_type,omitempty"`
	// Which organization this user belongs to
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Primary organization for external users who belong to multiple orgs
	PrimaryOrganizationID xid.ID `json:"primary_organization_id,omitempty"`
	// Whether this user can manage the entire SaaS platform
	IsPlatformAdmin bool `json:"is_platform_admin,omitempty"`
	// Authentication provider: internal, google, github, saml, etc.
	AuthProvider string `json:"auth_provider,omitempty"`
	// External provider user ID
	ExternalID string `json:"external_id,omitempty"`
	// External ID from customer management system (Stripe, etc.)
	CustomerID string `json:"customer_id,omitempty"`
	// Custom user attributes defined by organization (for end users)
	CustomAttributes map[string]interface{} `json:"custom_attributes,omitempty"`
	// Which user created this user (for end users created by org admins)
	CreatedBy string `json:"created_by,omitempty"`
	// PasswordResetTokenExpires holds the value of the "password_reset_token_expires" field.
	PasswordResetTokenExpires *time.Time `json:"password_reset_token_expires,omitempty"`
	// PasswordResetToken holds the value of the "password_reset_token" field.
	PasswordResetToken string `json:"-"`
	// LoginCount holds the value of the "login_count" field.
	LoginCount int `json:"login_count,omitempty"`
	// LastLoginIP holds the value of the "last_login_ip" field.
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// For external users - their memberships in organizations
	Memberships []*Membership `json:"memberships,omitempty"`
	// SentInvitations holds the value of the sent_invitations edge.
	SentInvitations []*Membership `json:"sent_invitations,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*ApiKey `json:"api_keys,omitempty"`
	// MfaMethods holds the value of the mfa_methods edge.
	MfaMethods []*MFA `json:"mfa_methods,omitempty"`
	// Passkeys holds the value of the passkeys edge.
	Passkeys []*Passkey `json:"passkeys,omitempty"`
	// OauthTokens holds the value of the oauth_tokens edge.
	OauthTokens []*OAuthToken `json:"oauth_tokens,omitempty"`
	// OauthAuthorizations holds the value of the oauth_authorizations edge.
	OauthAuthorizations []*OAuthAuthorization `json:"oauth_authorizations,omitempty"`
	// Verifications holds the value of the verifications edge.
	Verifications []*Verification `json:"verifications,omitempty"`
	// UserRoles holds the value of the user_roles edge.
	UserRoles []*UserRole `json:"user_roles,omitempty"`
	// UserPermissions holds the value of the user_permissions edge.
	UserPermissions []*UserPermission `json:"user_permissions,omitempty"`
	// Direct system-level role assignments for internal users
	SystemRoles []*Role `json:"system_roles,omitempty"`
	// Role assignments made by this user
	AssignedUserRoles []*UserRole `json:"assigned_user_roles,omitempty"`
	// Permission assignments made by this user
	AssignedUserPermissions []*UserPermission `json:"assigned_user_permissions,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*Audit `json:"audit_logs,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                  [17]bool
	namedMemberships             map[string][]*Membership
	namedSentInvitations         map[string][]*Membership
	namedSessions                map[string][]*Session
	namedAPIKeys                 map[string][]*ApiKey
	namedMfaMethods              map[string][]*MFA
	namedPasskeys                map[string][]*Passkey
	namedOauthTokens             map[string][]*OAuthToken
	namedOauthAuthorizations     map[string][]*OAuthAuthorization
	namedVerifications           map[string][]*Verification
	namedUserRoles               map[string][]*UserRole
	namedUserPermissions         map[string][]*UserPermission
	namedSystemRoles             map[string][]*Role
	namedAssignedUserRoles       map[string][]*UserRole
	namedAssignedUserPermissions map[string][]*UserPermission
	namedAuditLogs               map[string][]*Audit
	namedActivities              map[string][]*Activity
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[1] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// SentInvitationsOrErr returns the SentInvitations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SentInvitationsOrErr() ([]*Membership, error) {
	if e.loadedTypes[2] {
		return e.SentInvitations, nil
	}
	return nil, &NotLoadedError{edge: "sent_invitations"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[3] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) APIKeysOrErr() ([]*ApiKey, error) {
	if e.loadedTypes[4] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// MfaMethodsOrErr returns the MfaMethods value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MfaMethodsOrErr() ([]*MFA, error) {
	if e.loadedTypes[5] {
		return e.MfaMethods, nil
	}
	return nil, &NotLoadedError{edge: "mfa_methods"}
}

// PasskeysOrErr returns the Passkeys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PasskeysOrErr() ([]*Passkey, error) {
	if e.loadedTypes[6] {
		return e.Passkeys, nil
	}
	return nil, &NotLoadedError{edge: "passkeys"}
}

// OauthTokensOrErr returns the OauthTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OauthTokensOrErr() ([]*OAuthToken, error) {
	if e.loadedTypes[7] {
		return e.OauthTokens, nil
	}
	return nil, &NotLoadedError{edge: "oauth_tokens"}
}

// OauthAuthorizationsOrErr returns the OauthAuthorizations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OauthAuthorizationsOrErr() ([]*OAuthAuthorization, error) {
	if e.loadedTypes[8] {
		return e.OauthAuthorizations, nil
	}
	return nil, &NotLoadedError{edge: "oauth_authorizations"}
}

// VerificationsOrErr returns the Verifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VerificationsOrErr() ([]*Verification, error) {
	if e.loadedTypes[9] {
		return e.Verifications, nil
	}
	return nil, &NotLoadedError{edge: "verifications"}
}

// UserRolesOrErr returns the UserRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserRolesOrErr() ([]*UserRole, error) {
	if e.loadedTypes[10] {
		return e.UserRoles, nil
	}
	return nil, &NotLoadedError{edge: "user_roles"}
}

// UserPermissionsOrErr returns the UserPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserPermissionsOrErr() ([]*UserPermission, error) {
	if e.loadedTypes[11] {
		return e.UserPermissions, nil
	}
	return nil, &NotLoadedError{edge: "user_permissions"}
}

// SystemRolesOrErr returns the SystemRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SystemRolesOrErr() ([]*Role, error) {
	if e.loadedTypes[12] {
		return e.SystemRoles, nil
	}
	return nil, &NotLoadedError{edge: "system_roles"}
}

// AssignedUserRolesOrErr returns the AssignedUserRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssignedUserRolesOrErr() ([]*UserRole, error) {
	if e.loadedTypes[13] {
		return e.AssignedUserRoles, nil
	}
	return nil, &NotLoadedError{edge: "assigned_user_roles"}
}

// AssignedUserPermissionsOrErr returns the AssignedUserPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssignedUserPermissionsOrErr() ([]*UserPermission, error) {
	if e.loadedTypes[14] {
		return e.AssignedUserPermissions, nil
	}
	return nil, &NotLoadedError{edge: "assigned_user_permissions"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuditLogsOrErr() ([]*Audit, error) {
	if e.loadedTypes[15] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[16] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldMetadata, user.FieldCustomAttributes:
			values[i] = new([]byte)
		case user.FieldEmailVerified, user.FieldPhoneVerified, user.FieldActive, user.FieldBlocked, user.FieldIsPlatformAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldLoginCount:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldPhoneNumber, user.FieldFirstName, user.FieldLastName, user.FieldUsername, user.FieldPasswordHash, user.FieldProfileImageURL, user.FieldLocale, user.FieldTimezone, user.FieldUserType, user.FieldAuthProvider, user.FieldExternalID, user.FieldCustomerID, user.FieldCreatedBy, user.FieldPasswordResetToken, user.FieldLastLoginIP:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastLogin, user.FieldLastPasswordChange, user.FieldPasswordResetTokenExpires:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldOrganizationID, user.FieldPrimaryOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				u.EmailVerified = value.Bool
			}
		case user.FieldPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field phone_verified", values[i])
			} else if value.Valid {
				u.PhoneVerified = value.Bool
			}
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.FieldBlocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field blocked", values[i])
			} else if value.Valid {
				u.Blocked = value.Bool
			}
		case user.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				u.LastLogin = new(time.Time)
				*u.LastLogin = value.Time
			}
		case user.FieldLastPasswordChange:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_password_change", values[i])
			} else if value.Valid {
				u.LastPasswordChange = new(time.Time)
				*u.LastPasswordChange = value.Time
			}
		case user.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case user.FieldProfileImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_image_url", values[i])
			} else if value.Valid {
				u.ProfileImageURL = value.String
			}
		case user.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				u.Locale = value.String
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				u.Timezone = value.String
			}
		case user.FieldUserType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_type", values[i])
			} else if value.Valid {
				u.UserType = model.UserType(value.String)
			}
		case user.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				u.OrganizationID = *value
			}
		case user.FieldPrimaryOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field primary_organization_id", values[i])
			} else if value != nil {
				u.PrimaryOrganizationID = *value
			}
		case user.FieldIsPlatformAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_platform_admin", values[i])
			} else if value.Valid {
				u.IsPlatformAdmin = value.Bool
			}
		case user.FieldAuthProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_provider", values[i])
			} else if value.Valid {
				u.AuthProvider = value.String
			}
		case user.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				u.ExternalID = value.String
			}
		case user.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				u.CustomerID = value.String
			}
		case user.FieldCustomAttributes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field custom_attributes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.CustomAttributes); err != nil {
					return fmt.Errorf("unmarshal field custom_attributes: %w", err)
				}
			}
		case user.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				u.CreatedBy = value.String
			}
		case user.FieldPasswordResetTokenExpires:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset_token_expires", values[i])
			} else if value.Valid {
				u.PasswordResetTokenExpires = new(time.Time)
				*u.PasswordResetTokenExpires = value.Time
			}
		case user.FieldPasswordResetToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset_token", values[i])
			} else if value.Valid {
				u.PasswordResetToken = value.String
			}
		case user.FieldLoginCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_count", values[i])
			} else if value.Valid {
				u.LoginCount = int(value.Int64)
			}
		case user.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				u.LastLoginIP = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the User entity.
func (u *User) QueryOrganization() *OrganizationQuery {
	return NewUserClient(u.config).QueryOrganization(u)
}

// QueryMemberships queries the "memberships" edge of the User entity.
func (u *User) QueryMemberships() *MembershipQuery {
	return NewUserClient(u.config).QueryMemberships(u)
}

// QuerySentInvitations queries the "sent_invitations" edge of the User entity.
func (u *User) QuerySentInvitations() *MembershipQuery {
	return NewUserClient(u.config).QuerySentInvitations(u)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (u *User) QuerySessions() *SessionQuery {
	return NewUserClient(u.config).QuerySessions(u)
}

// QueryAPIKeys queries the "api_keys" edge of the User entity.
func (u *User) QueryAPIKeys() *ApiKeyQuery {
	return NewUserClient(u.config).QueryAPIKeys(u)
}

// QueryMfaMethods queries the "mfa_methods" edge of the User entity.
func (u *User) QueryMfaMethods() *MFAQuery {
	return NewUserClient(u.config).QueryMfaMethods(u)
}

// QueryPasskeys queries the "passkeys" edge of the User entity.
func (u *User) QueryPasskeys() *PasskeyQuery {
	return NewUserClient(u.config).QueryPasskeys(u)
}

// QueryOauthTokens queries the "oauth_tokens" edge of the User entity.
func (u *User) QueryOauthTokens() *OAuthTokenQuery {
	return NewUserClient(u.config).QueryOauthTokens(u)
}

// QueryOauthAuthorizations queries the "oauth_authorizations" edge of the User entity.
func (u *User) QueryOauthAuthorizations() *OAuthAuthorizationQuery {
	return NewUserClient(u.config).QueryOauthAuthorizations(u)
}

// QueryVerifications queries the "verifications" edge of the User entity.
func (u *User) QueryVerifications() *VerificationQuery {
	return NewUserClient(u.config).QueryVerifications(u)
}

// QueryUserRoles queries the "user_roles" edge of the User entity.
func (u *User) QueryUserRoles() *UserRoleQuery {
	return NewUserClient(u.config).QueryUserRoles(u)
}

// QueryUserPermissions queries the "user_permissions" edge of the User entity.
func (u *User) QueryUserPermissions() *UserPermissionQuery {
	return NewUserClient(u.config).QueryUserPermissions(u)
}

// QuerySystemRoles queries the "system_roles" edge of the User entity.
func (u *User) QuerySystemRoles() *RoleQuery {
	return NewUserClient(u.config).QuerySystemRoles(u)
}

// QueryAssignedUserRoles queries the "assigned_user_roles" edge of the User entity.
func (u *User) QueryAssignedUserRoles() *UserRoleQuery {
	return NewUserClient(u.config).QueryAssignedUserRoles(u)
}

// QueryAssignedUserPermissions queries the "assigned_user_permissions" edge of the User entity.
func (u *User) QueryAssignedUserPermissions() *UserPermissionQuery {
	return NewUserClient(u.config).QueryAssignedUserPermissions(u)
}

// QueryAuditLogs queries the "audit_logs" edge of the User entity.
func (u *User) QueryAuditLogs() *AuditQuery {
	return NewUserClient(u.config).QueryAuditLogs(u)
}

// QueryActivities queries the "activities" edge of the User entity.
func (u *User) QueryActivities() *ActivityQuery {
	return NewUserClient(u.config).QueryActivities(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("password_hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.PhoneVerified))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteString(", ")
	builder.WriteString("blocked=")
	builder.WriteString(fmt.Sprintf("%v", u.Blocked))
	builder.WriteString(", ")
	if v := u.LastLogin; v != nil {
		builder.WriteString("last_login=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.LastPasswordChange; v != nil {
		builder.WriteString("last_password_change=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", u.Metadata))
	builder.WriteString(", ")
	builder.WriteString("profile_image_url=")
	builder.WriteString(u.ProfileImageURL)
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(u.Locale)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(u.Timezone)
	builder.WriteString(", ")
	builder.WriteString("user_type=")
	builder.WriteString(fmt.Sprintf("%v", u.UserType))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", u.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("primary_organization_id=")
	builder.WriteString(fmt.Sprintf("%v", u.PrimaryOrganizationID))
	builder.WriteString(", ")
	builder.WriteString("is_platform_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsPlatformAdmin))
	builder.WriteString(", ")
	builder.WriteString("auth_provider=")
	builder.WriteString(u.AuthProvider)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(u.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(u.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("custom_attributes=")
	builder.WriteString(fmt.Sprintf("%v", u.CustomAttributes))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(u.CreatedBy)
	builder.WriteString(", ")
	if v := u.PasswordResetTokenExpires; v != nil {
		builder.WriteString("password_reset_token_expires=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("password_reset_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("login_count=")
	builder.WriteString(fmt.Sprintf("%v", u.LoginCount))
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(u.LastLoginIP)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMemberships returns the Memberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedMemberships(name string) ([]*Membership, error) {
	if u.Edges.namedMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedMemberships(name string, edges ...*Membership) {
	if u.Edges.namedMemberships == nil {
		u.Edges.namedMemberships = make(map[string][]*Membership)
	}
	if len(edges) == 0 {
		u.Edges.namedMemberships[name] = []*Membership{}
	} else {
		u.Edges.namedMemberships[name] = append(u.Edges.namedMemberships[name], edges...)
	}
}

// NamedSentInvitations returns the SentInvitations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSentInvitations(name string) ([]*Membership, error) {
	if u.Edges.namedSentInvitations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSentInvitations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSentInvitations(name string, edges ...*Membership) {
	if u.Edges.namedSentInvitations == nil {
		u.Edges.namedSentInvitations = make(map[string][]*Membership)
	}
	if len(edges) == 0 {
		u.Edges.namedSentInvitations[name] = []*Membership{}
	} else {
		u.Edges.namedSentInvitations[name] = append(u.Edges.namedSentInvitations[name], edges...)
	}
}

// NamedSessions returns the Sessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSessions(name string) ([]*Session, error) {
	if u.Edges.namedSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSessions(name string, edges ...*Session) {
	if u.Edges.namedSessions == nil {
		u.Edges.namedSessions = make(map[string][]*Session)
	}
	if len(edges) == 0 {
		u.Edges.namedSessions[name] = []*Session{}
	} else {
		u.Edges.namedSessions[name] = append(u.Edges.namedSessions[name], edges...)
	}
}

// NamedAPIKeys returns the APIKeys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAPIKeys(name string) ([]*ApiKey, error) {
	if u.Edges.namedAPIKeys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAPIKeys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAPIKeys(name string, edges ...*ApiKey) {
	if u.Edges.namedAPIKeys == nil {
		u.Edges.namedAPIKeys = make(map[string][]*ApiKey)
	}
	if len(edges) == 0 {
		u.Edges.namedAPIKeys[name] = []*ApiKey{}
	} else {
		u.Edges.namedAPIKeys[name] = append(u.Edges.namedAPIKeys[name], edges...)
	}
}

// NamedMfaMethods returns the MfaMethods named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedMfaMethods(name string) ([]*MFA, error) {
	if u.Edges.namedMfaMethods == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedMfaMethods[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedMfaMethods(name string, edges ...*MFA) {
	if u.Edges.namedMfaMethods == nil {
		u.Edges.namedMfaMethods = make(map[string][]*MFA)
	}
	if len(edges) == 0 {
		u.Edges.namedMfaMethods[name] = []*MFA{}
	} else {
		u.Edges.namedMfaMethods[name] = append(u.Edges.namedMfaMethods[name], edges...)
	}
}

// NamedPasskeys returns the Passkeys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPasskeys(name string) ([]*Passkey, error) {
	if u.Edges.namedPasskeys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPasskeys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPasskeys(name string, edges ...*Passkey) {
	if u.Edges.namedPasskeys == nil {
		u.Edges.namedPasskeys = make(map[string][]*Passkey)
	}
	if len(edges) == 0 {
		u.Edges.namedPasskeys[name] = []*Passkey{}
	} else {
		u.Edges.namedPasskeys[name] = append(u.Edges.namedPasskeys[name], edges...)
	}
}

// NamedOauthTokens returns the OauthTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedOauthTokens(name string) ([]*OAuthToken, error) {
	if u.Edges.namedOauthTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedOauthTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedOauthTokens(name string, edges ...*OAuthToken) {
	if u.Edges.namedOauthTokens == nil {
		u.Edges.namedOauthTokens = make(map[string][]*OAuthToken)
	}
	if len(edges) == 0 {
		u.Edges.namedOauthTokens[name] = []*OAuthToken{}
	} else {
		u.Edges.namedOauthTokens[name] = append(u.Edges.namedOauthTokens[name], edges...)
	}
}

// NamedOauthAuthorizations returns the OauthAuthorizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedOauthAuthorizations(name string) ([]*OAuthAuthorization, error) {
	if u.Edges.namedOauthAuthorizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedOauthAuthorizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedOauthAuthorizations(name string, edges ...*OAuthAuthorization) {
	if u.Edges.namedOauthAuthorizations == nil {
		u.Edges.namedOauthAuthorizations = make(map[string][]*OAuthAuthorization)
	}
	if len(edges) == 0 {
		u.Edges.namedOauthAuthorizations[name] = []*OAuthAuthorization{}
	} else {
		u.Edges.namedOauthAuthorizations[name] = append(u.Edges.namedOauthAuthorizations[name], edges...)
	}
}

// NamedVerifications returns the Verifications named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedVerifications(name string) ([]*Verification, error) {
	if u.Edges.namedVerifications == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedVerifications[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedVerifications(name string, edges ...*Verification) {
	if u.Edges.namedVerifications == nil {
		u.Edges.namedVerifications = make(map[string][]*Verification)
	}
	if len(edges) == 0 {
		u.Edges.namedVerifications[name] = []*Verification{}
	} else {
		u.Edges.namedVerifications[name] = append(u.Edges.namedVerifications[name], edges...)
	}
}

// NamedUserRoles returns the UserRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserRoles(name string) ([]*UserRole, error) {
	if u.Edges.namedUserRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserRoles(name string, edges ...*UserRole) {
	if u.Edges.namedUserRoles == nil {
		u.Edges.namedUserRoles = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		u.Edges.namedUserRoles[name] = []*UserRole{}
	} else {
		u.Edges.namedUserRoles[name] = append(u.Edges.namedUserRoles[name], edges...)
	}
}

// NamedUserPermissions returns the UserPermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserPermissions(name string) ([]*UserPermission, error) {
	if u.Edges.namedUserPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserPermissions(name string, edges ...*UserPermission) {
	if u.Edges.namedUserPermissions == nil {
		u.Edges.namedUserPermissions = make(map[string][]*UserPermission)
	}
	if len(edges) == 0 {
		u.Edges.namedUserPermissions[name] = []*UserPermission{}
	} else {
		u.Edges.namedUserPermissions[name] = append(u.Edges.namedUserPermissions[name], edges...)
	}
}

// NamedSystemRoles returns the SystemRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSystemRoles(name string) ([]*Role, error) {
	if u.Edges.namedSystemRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSystemRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSystemRoles(name string, edges ...*Role) {
	if u.Edges.namedSystemRoles == nil {
		u.Edges.namedSystemRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		u.Edges.namedSystemRoles[name] = []*Role{}
	} else {
		u.Edges.namedSystemRoles[name] = append(u.Edges.namedSystemRoles[name], edges...)
	}
}

// NamedAssignedUserRoles returns the AssignedUserRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAssignedUserRoles(name string) ([]*UserRole, error) {
	if u.Edges.namedAssignedUserRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAssignedUserRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAssignedUserRoles(name string, edges ...*UserRole) {
	if u.Edges.namedAssignedUserRoles == nil {
		u.Edges.namedAssignedUserRoles = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		u.Edges.namedAssignedUserRoles[name] = []*UserRole{}
	} else {
		u.Edges.namedAssignedUserRoles[name] = append(u.Edges.namedAssignedUserRoles[name], edges...)
	}
}

// NamedAssignedUserPermissions returns the AssignedUserPermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAssignedUserPermissions(name string) ([]*UserPermission, error) {
	if u.Edges.namedAssignedUserPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAssignedUserPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAssignedUserPermissions(name string, edges ...*UserPermission) {
	if u.Edges.namedAssignedUserPermissions == nil {
		u.Edges.namedAssignedUserPermissions = make(map[string][]*UserPermission)
	}
	if len(edges) == 0 {
		u.Edges.namedAssignedUserPermissions[name] = []*UserPermission{}
	} else {
		u.Edges.namedAssignedUserPermissions[name] = append(u.Edges.namedAssignedUserPermissions[name], edges...)
	}
}

// NamedAuditLogs returns the AuditLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAuditLogs(name string) ([]*Audit, error) {
	if u.Edges.namedAuditLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAuditLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAuditLogs(name string, edges ...*Audit) {
	if u.Edges.namedAuditLogs == nil {
		u.Edges.namedAuditLogs = make(map[string][]*Audit)
	}
	if len(edges) == 0 {
		u.Edges.namedAuditLogs[name] = []*Audit{}
	} else {
		u.Edges.namedAuditLogs[name] = append(u.Edges.namedAuditLogs[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedActivities(name string) ([]*Activity, error) {
	if u.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedActivities(name string, edges ...*Activity) {
	if u.Edges.namedActivities == nil {
		u.Edges.namedActivities = make(map[string][]*Activity)
	}
	if len(edges) == 0 {
		u.Edges.namedActivities[name] = []*Activity{}
	} else {
		u.Edges.namedActivities[name] = append(u.Edges.namedActivities[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
