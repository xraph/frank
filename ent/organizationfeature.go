// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/featureflag"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
)

// OrganizationFeature is the model entity for the OrganizationFeature schema.
type OrganizationFeature struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// FeatureID holds the value of the "feature_id" field.
	FeatureID xid.ID `json:"feature_id,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Additional membership metadata
	Settings map[string]interface{} `json:"settings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationFeatureQuery when eager-loading is set.
	Edges        OrganizationFeatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationFeatureEdges holds the relations/edges for other nodes in the graph.
type OrganizationFeatureEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Feature holds the value of the feature edge.
	Feature *FeatureFlag `json:"feature,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationFeatureEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationFeatureEdges) FeatureOrErr() (*FeatureFlag, error) {
	if e.Feature != nil {
		return e.Feature, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: featureflag.Label}
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationfeature.FieldSettings:
			values[i] = new([]byte)
		case organizationfeature.FieldEnabled:
			values[i] = new(sql.NullBool)
		case organizationfeature.FieldCreatedAt, organizationfeature.FieldUpdatedAt, organizationfeature.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case organizationfeature.FieldID, organizationfeature.FieldOrganizationID, organizationfeature.FieldFeatureID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationFeature fields.
func (of *OrganizationFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationfeature.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				of.ID = *value
			}
		case organizationfeature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				of.CreatedAt = value.Time
			}
		case organizationfeature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				of.UpdatedAt = value.Time
			}
		case organizationfeature.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				of.DeletedAt = value.Time
			}
		case organizationfeature.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				of.OrganizationID = *value
			}
		case organizationfeature.FieldFeatureID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value != nil {
				of.FeatureID = *value
			}
		case organizationfeature.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				of.Enabled = value.Bool
			}
		case organizationfeature.FieldSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &of.Settings); err != nil {
					return fmt.Errorf("unmarshal field settings: %w", err)
				}
			}
		default:
			of.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationFeature.
// This includes values selected through modifiers, order, etc.
func (of *OrganizationFeature) Value(name string) (ent.Value, error) {
	return of.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the OrganizationFeature entity.
func (of *OrganizationFeature) QueryOrganization() *OrganizationQuery {
	return NewOrganizationFeatureClient(of.config).QueryOrganization(of)
}

// QueryFeature queries the "feature" edge of the OrganizationFeature entity.
func (of *OrganizationFeature) QueryFeature() *FeatureFlagQuery {
	return NewOrganizationFeatureClient(of.config).QueryFeature(of)
}

// Update returns a builder for updating this OrganizationFeature.
// Note that you need to call OrganizationFeature.Unwrap() before calling this method if this OrganizationFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (of *OrganizationFeature) Update() *OrganizationFeatureUpdateOne {
	return NewOrganizationFeatureClient(of.config).UpdateOne(of)
}

// Unwrap unwraps the OrganizationFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (of *OrganizationFeature) Unwrap() *OrganizationFeature {
	_tx, ok := of.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationFeature is not a transactional entity")
	}
	of.config.driver = _tx.drv
	return of
}

// String implements the fmt.Stringer.
func (of *OrganizationFeature) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationFeature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", of.ID))
	builder.WriteString("created_at=")
	builder.WriteString(of.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(of.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(of.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", of.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("feature_id=")
	builder.WriteString(fmt.Sprintf("%v", of.FeatureID))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", of.Enabled))
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", of.Settings))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationFeatures is a parsable slice of OrganizationFeature.
type OrganizationFeatures []*OrganizationFeature
