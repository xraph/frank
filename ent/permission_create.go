// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/pkg/model"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PermissionCreate) SetCreatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PermissionCreate) SetUpdatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableUpdatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PermissionCreate) SetDeletedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDeletedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PermissionCreate) SetName(s string) *PermissionCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDisplayName sets the "display_name" field.
func (pc *PermissionCreate) SetDisplayName(s string) *PermissionCreate {
	pc.mutation.SetDisplayName(s)
	return pc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDisplayName(s *string) *PermissionCreate {
	if s != nil {
		pc.SetDisplayName(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PermissionCreate) SetDescription(s string) *PermissionCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetResource sets the "resource" field.
func (pc *PermissionCreate) SetResource(s string) *PermissionCreate {
	pc.mutation.SetResource(s)
	return pc
}

// SetAction sets the "action" field.
func (pc *PermissionCreate) SetAction(s string) *PermissionCreate {
	pc.mutation.SetAction(s)
	return pc
}

// SetCategory sets the "category" field.
func (pc *PermissionCreate) SetCategory(mc model.PermissionCategory) *PermissionCreate {
	pc.mutation.SetCategory(mc)
	return pc
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (pc *PermissionCreate) SetApplicableUserTypes(mt []model.UserType) *PermissionCreate {
	pc.mutation.SetApplicableUserTypes(mt)
	return pc
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (pc *PermissionCreate) SetApplicableContexts(mt []model.ContextType) *PermissionCreate {
	pc.mutation.SetApplicableContexts(mt)
	return pc
}

// SetConditions sets the "conditions" field.
func (pc *PermissionCreate) SetConditions(s string) *PermissionCreate {
	pc.mutation.SetConditions(s)
	return pc
}

// SetNillableConditions sets the "conditions" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableConditions(s *string) *PermissionCreate {
	if s != nil {
		pc.SetConditions(*s)
	}
	return pc
}

// SetSystem sets the "system" field.
func (pc *PermissionCreate) SetSystem(b bool) *PermissionCreate {
	pc.mutation.SetSystem(b)
	return pc
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableSystem(b *bool) *PermissionCreate {
	if b != nil {
		pc.SetSystem(*b)
	}
	return pc
}

// SetDangerous sets the "dangerous" field.
func (pc *PermissionCreate) SetDangerous(b bool) *PermissionCreate {
	pc.mutation.SetDangerous(b)
	return pc
}

// SetNillableDangerous sets the "dangerous" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDangerous(b *bool) *PermissionCreate {
	if b != nil {
		pc.SetDangerous(*b)
	}
	return pc
}

// SetRiskLevel sets the "risk_level" field.
func (pc *PermissionCreate) SetRiskLevel(i int) *PermissionCreate {
	pc.mutation.SetRiskLevel(i)
	return pc
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableRiskLevel(i *int) *PermissionCreate {
	if i != nil {
		pc.SetRiskLevel(*i)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PermissionCreate) SetCreatedBy(s string) *PermissionCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreatedBy(s *string) *PermissionCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PermissionCreate) SetActive(b bool) *PermissionCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableActive(b *bool) *PermissionCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetPermissionGroup sets the "permission_group" field.
func (pc *PermissionCreate) SetPermissionGroup(mg model.PermissionGroup) *PermissionCreate {
	pc.mutation.SetPermissionGroup(mg)
	return pc
}

// SetNillablePermissionGroup sets the "permission_group" field if the given value is not nil.
func (pc *PermissionCreate) SetNillablePermissionGroup(mg *model.PermissionGroup) *PermissionCreate {
	if mg != nil {
		pc.SetPermissionGroup(*mg)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PermissionCreate) SetID(x xid.ID) *PermissionCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableID(x *xid.ID) *PermissionCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pc *PermissionCreate) AddRoleIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddRoleIDs(ids...)
	return pc
}

// AddRoles adds the "roles" edges to the Role entity.
func (pc *PermissionCreate) AddRoles(r ...*Role) *PermissionCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRoleIDs(ids...)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserPermission entity by IDs.
func (pc *PermissionCreate) AddUserAssignmentIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddUserAssignmentIDs(ids...)
	return pc
}

// AddUserAssignments adds the "user_assignments" edges to the UserPermission entity.
func (pc *PermissionCreate) AddUserAssignments(u ...*UserPermission) *PermissionCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserAssignmentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the PermissionDependency entity by IDs.
func (pc *PermissionCreate) AddDependencyIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddDependencyIDs(ids...)
	return pc
}

// AddDependencies adds the "dependencies" edges to the PermissionDependency entity.
func (pc *PermissionCreate) AddDependencies(p ...*PermissionDependency) *PermissionCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the PermissionDependency entity by IDs.
func (pc *PermissionCreate) AddDependentIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddDependentIDs(ids...)
	return pc
}

// AddDependents adds the "dependents" edges to the PermissionDependency entity.
func (pc *PermissionCreate) AddDependents(p ...*PermissionDependency) *PermissionCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddDependentIDs(ids...)
}

// AddDependentPermissionIDs adds the "dependent_permissions" edge to the Permission entity by IDs.
func (pc *PermissionCreate) AddDependentPermissionIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddDependentPermissionIDs(ids...)
	return pc
}

// AddDependentPermissions adds the "dependent_permissions" edges to the Permission entity.
func (pc *PermissionCreate) AddDependentPermissions(p ...*Permission) *PermissionCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddDependentPermissionIDs(ids...)
}

// AddRequiredPermissionIDs adds the "required_permissions" edge to the Permission entity by IDs.
func (pc *PermissionCreate) AddRequiredPermissionIDs(ids ...xid.ID) *PermissionCreate {
	pc.mutation.AddRequiredPermissionIDs(ids...)
	return pc
}

// AddRequiredPermissions adds the "required_permissions" edges to the Permission entity.
func (pc *PermissionCreate) AddRequiredPermissions(p ...*Permission) *PermissionCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddRequiredPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermissionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermissionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermissionCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := permission.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := permission.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.System(); !ok {
		v := permission.DefaultSystem
		pc.mutation.SetSystem(v)
	}
	if _, ok := pc.mutation.Dangerous(); !ok {
		v := permission.DefaultDangerous
		pc.mutation.SetDangerous(v)
	}
	if _, ok := pc.mutation.RiskLevel(); !ok {
		v := permission.DefaultRiskLevel
		pc.mutation.SetRiskLevel(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := permission.DefaultActive
		pc.mutation.SetActive(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := permission.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermissionCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Permission.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Permission.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Permission.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Permission.description"`)}
	}
	if v, ok := pc.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "Permission.resource"`)}
	}
	if v, ok := pc.mutation.Resource(); ok {
		if err := permission.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "Permission.resource": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Permission.action"`)}
	}
	if v, ok := pc.mutation.Action(); ok {
		if err := permission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Permission.action": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Permission.category"`)}
	}
	if v, ok := pc.mutation.Category(); ok {
		if err := permission.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Permission.category": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ApplicableUserTypes(); !ok {
		return &ValidationError{Name: "applicable_user_types", err: errors.New(`ent: missing required field "Permission.applicable_user_types"`)}
	}
	if _, ok := pc.mutation.ApplicableContexts(); !ok {
		return &ValidationError{Name: "applicable_contexts", err: errors.New(`ent: missing required field "Permission.applicable_contexts"`)}
	}
	if _, ok := pc.mutation.System(); !ok {
		return &ValidationError{Name: "system", err: errors.New(`ent: missing required field "Permission.system"`)}
	}
	if _, ok := pc.mutation.Dangerous(); !ok {
		return &ValidationError{Name: "dangerous", err: errors.New(`ent: missing required field "Permission.dangerous"`)}
	}
	if _, ok := pc.mutation.RiskLevel(); !ok {
		return &ValidationError{Name: "risk_level", err: errors.New(`ent: missing required field "Permission.risk_level"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Permission.active"`)}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(permission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(permission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.DisplayName(); ok {
		_spec.SetField(permission.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Resource(); ok {
		_spec.SetField(permission.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := pc.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(permission.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(permission.FieldApplicableUserTypes, field.TypeJSON, value)
		_node.ApplicableUserTypes = value
	}
	if value, ok := pc.mutation.ApplicableContexts(); ok {
		_spec.SetField(permission.FieldApplicableContexts, field.TypeJSON, value)
		_node.ApplicableContexts = value
	}
	if value, ok := pc.mutation.Conditions(); ok {
		_spec.SetField(permission.FieldConditions, field.TypeString, value)
		_node.Conditions = value
	}
	if value, ok := pc.mutation.System(); ok {
		_spec.SetField(permission.FieldSystem, field.TypeBool, value)
		_node.System = value
	}
	if value, ok := pc.mutation.Dangerous(); ok {
		_spec.SetField(permission.FieldDangerous, field.TypeBool, value)
		_node.Dangerous = value
	}
	if value, ok := pc.mutation.RiskLevel(); ok {
		_spec.SetField(permission.FieldRiskLevel, field.TypeInt, value)
		_node.RiskLevel = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(permission.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(permission.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.PermissionGroup(); ok {
		_spec.SetField(permission.FieldPermissionGroup, field.TypeString, value)
		_node.PermissionGroup = value
	}
	if nodes := pc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DependentPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RequiredPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertOne {
	pc.conflict = opts
	return &PermissionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflictColumns(columns ...string) *PermissionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertOne{
		create: pc,
	}
}

type (
	// PermissionUpsertOne is the builder for "upsert"-ing
	//  one Permission node.
	PermissionUpsertOne struct {
		create *PermissionCreate
	}

	// PermissionUpsert is the "OnConflict" setter.
	PermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsert) SetUpdatedAt(v time.Time) *PermissionUpsert {
	u.Set(permission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateUpdatedAt() *PermissionUpsert {
	u.SetExcluded(permission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionUpsert) SetDeletedAt(v time.Time) *PermissionUpsert {
	u.Set(permission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDeletedAt() *PermissionUpsert {
	u.SetExcluded(permission.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionUpsert) ClearDeletedAt() *PermissionUpsert {
	u.SetNull(permission.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *PermissionUpsert) SetName(v string) *PermissionUpsert {
	u.Set(permission.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateName() *PermissionUpsert {
	u.SetExcluded(permission.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *PermissionUpsert) SetDisplayName(v string) *PermissionUpsert {
	u.Set(permission.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDisplayName() *PermissionUpsert {
	u.SetExcluded(permission.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PermissionUpsert) ClearDisplayName() *PermissionUpsert {
	u.SetNull(permission.FieldDisplayName)
	return u
}

// SetDescription sets the "description" field.
func (u *PermissionUpsert) SetDescription(v string) *PermissionUpsert {
	u.Set(permission.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDescription() *PermissionUpsert {
	u.SetExcluded(permission.FieldDescription)
	return u
}

// SetResource sets the "resource" field.
func (u *PermissionUpsert) SetResource(v string) *PermissionUpsert {
	u.Set(permission.FieldResource, v)
	return u
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateResource() *PermissionUpsert {
	u.SetExcluded(permission.FieldResource)
	return u
}

// SetAction sets the "action" field.
func (u *PermissionUpsert) SetAction(v string) *PermissionUpsert {
	u.Set(permission.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateAction() *PermissionUpsert {
	u.SetExcluded(permission.FieldAction)
	return u
}

// SetCategory sets the "category" field.
func (u *PermissionUpsert) SetCategory(v model.PermissionCategory) *PermissionUpsert {
	u.Set(permission.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateCategory() *PermissionUpsert {
	u.SetExcluded(permission.FieldCategory)
	return u
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *PermissionUpsert) SetApplicableUserTypes(v []model.UserType) *PermissionUpsert {
	u.Set(permission.FieldApplicableUserTypes, v)
	return u
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateApplicableUserTypes() *PermissionUpsert {
	u.SetExcluded(permission.FieldApplicableUserTypes)
	return u
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (u *PermissionUpsert) SetApplicableContexts(v []model.ContextType) *PermissionUpsert {
	u.Set(permission.FieldApplicableContexts, v)
	return u
}

// UpdateApplicableContexts sets the "applicable_contexts" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateApplicableContexts() *PermissionUpsert {
	u.SetExcluded(permission.FieldApplicableContexts)
	return u
}

// SetConditions sets the "conditions" field.
func (u *PermissionUpsert) SetConditions(v string) *PermissionUpsert {
	u.Set(permission.FieldConditions, v)
	return u
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateConditions() *PermissionUpsert {
	u.SetExcluded(permission.FieldConditions)
	return u
}

// ClearConditions clears the value of the "conditions" field.
func (u *PermissionUpsert) ClearConditions() *PermissionUpsert {
	u.SetNull(permission.FieldConditions)
	return u
}

// SetSystem sets the "system" field.
func (u *PermissionUpsert) SetSystem(v bool) *PermissionUpsert {
	u.Set(permission.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateSystem() *PermissionUpsert {
	u.SetExcluded(permission.FieldSystem)
	return u
}

// SetDangerous sets the "dangerous" field.
func (u *PermissionUpsert) SetDangerous(v bool) *PermissionUpsert {
	u.Set(permission.FieldDangerous, v)
	return u
}

// UpdateDangerous sets the "dangerous" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDangerous() *PermissionUpsert {
	u.SetExcluded(permission.FieldDangerous)
	return u
}

// SetRiskLevel sets the "risk_level" field.
func (u *PermissionUpsert) SetRiskLevel(v int) *PermissionUpsert {
	u.Set(permission.FieldRiskLevel, v)
	return u
}

// UpdateRiskLevel sets the "risk_level" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateRiskLevel() *PermissionUpsert {
	u.SetExcluded(permission.FieldRiskLevel)
	return u
}

// AddRiskLevel adds v to the "risk_level" field.
func (u *PermissionUpsert) AddRiskLevel(v int) *PermissionUpsert {
	u.Add(permission.FieldRiskLevel, v)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionUpsert) SetCreatedBy(v string) *PermissionUpsert {
	u.Set(permission.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateCreatedBy() *PermissionUpsert {
	u.SetExcluded(permission.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionUpsert) ClearCreatedBy() *PermissionUpsert {
	u.SetNull(permission.FieldCreatedBy)
	return u
}

// SetActive sets the "active" field.
func (u *PermissionUpsert) SetActive(v bool) *PermissionUpsert {
	u.Set(permission.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateActive() *PermissionUpsert {
	u.SetExcluded(permission.FieldActive)
	return u
}

// SetPermissionGroup sets the "permission_group" field.
func (u *PermissionUpsert) SetPermissionGroup(v model.PermissionGroup) *PermissionUpsert {
	u.Set(permission.FieldPermissionGroup, v)
	return u
}

// UpdatePermissionGroup sets the "permission_group" field to the value that was provided on create.
func (u *PermissionUpsert) UpdatePermissionGroup() *PermissionUpsert {
	u.SetExcluded(permission.FieldPermissionGroup)
	return u
}

// ClearPermissionGroup clears the value of the "permission_group" field.
func (u *PermissionUpsert) ClearPermissionGroup() *PermissionUpsert {
	u.SetNull(permission.FieldPermissionGroup)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertOne) UpdateNewValues() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(permission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(permission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermissionUpsertOne) Ignore() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertOne) DoNothing() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreate.OnConflict
// documentation for more info.
func (u *PermissionUpsertOne) Update(set func(*PermissionUpsert)) *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertOne) SetUpdatedAt(v time.Time) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateUpdatedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionUpsertOne) SetDeletedAt(v time.Time) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDeletedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionUpsertOne) ClearDeletedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertOne) SetName(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *PermissionUpsertOne) SetDisplayName(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDisplayName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PermissionUpsertOne) ClearDisplayName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *PermissionUpsertOne) SetDescription(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDescription() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDescription()
	})
}

// SetResource sets the "resource" field.
func (u *PermissionUpsertOne) SetResource(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateResource() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResource()
	})
}

// SetAction sets the "action" field.
func (u *PermissionUpsertOne) SetAction(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateAction() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAction()
	})
}

// SetCategory sets the "category" field.
func (u *PermissionUpsertOne) SetCategory(v model.PermissionCategory) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateCategory() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateCategory()
	})
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *PermissionUpsertOne) SetApplicableUserTypes(v []model.UserType) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetApplicableUserTypes(v)
	})
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateApplicableUserTypes() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateApplicableUserTypes()
	})
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (u *PermissionUpsertOne) SetApplicableContexts(v []model.ContextType) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetApplicableContexts(v)
	})
}

// UpdateApplicableContexts sets the "applicable_contexts" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateApplicableContexts() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateApplicableContexts()
	})
}

// SetConditions sets the "conditions" field.
func (u *PermissionUpsertOne) SetConditions(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetConditions(v)
	})
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateConditions() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateConditions()
	})
}

// ClearConditions clears the value of the "conditions" field.
func (u *PermissionUpsertOne) ClearConditions() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearConditions()
	})
}

// SetSystem sets the "system" field.
func (u *PermissionUpsertOne) SetSystem(v bool) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateSystem() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateSystem()
	})
}

// SetDangerous sets the "dangerous" field.
func (u *PermissionUpsertOne) SetDangerous(v bool) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDangerous(v)
	})
}

// UpdateDangerous sets the "dangerous" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDangerous() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDangerous()
	})
}

// SetRiskLevel sets the "risk_level" field.
func (u *PermissionUpsertOne) SetRiskLevel(v int) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetRiskLevel(v)
	})
}

// AddRiskLevel adds v to the "risk_level" field.
func (u *PermissionUpsertOne) AddRiskLevel(v int) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.AddRiskLevel(v)
	})
}

// UpdateRiskLevel sets the "risk_level" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateRiskLevel() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateRiskLevel()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionUpsertOne) SetCreatedBy(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateCreatedBy() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionUpsertOne) ClearCreatedBy() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetActive sets the "active" field.
func (u *PermissionUpsertOne) SetActive(v bool) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateActive() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateActive()
	})
}

// SetPermissionGroup sets the "permission_group" field.
func (u *PermissionUpsertOne) SetPermissionGroup(v model.PermissionGroup) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetPermissionGroup(v)
	})
}

// UpdatePermissionGroup sets the "permission_group" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdatePermissionGroup() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdatePermissionGroup()
	})
}

// ClearPermissionGroup clears the value of the "permission_group" field.
func (u *PermissionUpsertOne) ClearPermissionGroup() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearPermissionGroup()
	})
}

// Exec executes the query.
func (u *PermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermissionUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PermissionUpsertOne.ID is not supported by MySQL driver. Use PermissionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermissionUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertBulk {
	pcb.conflict = opts
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflictColumns(columns ...string) *PermissionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// PermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Permission nodes.
type PermissionUpsertBulk struct {
	create *PermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertBulk) UpdateNewValues() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(permission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(permission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermissionUpsertBulk) Ignore() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertBulk) DoNothing() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreateBulk.OnConflict
// documentation for more info.
func (u *PermissionUpsertBulk) Update(set func(*PermissionUpsert)) *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertBulk) SetUpdatedAt(v time.Time) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateUpdatedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionUpsertBulk) SetDeletedAt(v time.Time) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDeletedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionUpsertBulk) ClearDeletedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertBulk) SetName(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *PermissionUpsertBulk) SetDisplayName(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDisplayName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *PermissionUpsertBulk) ClearDisplayName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *PermissionUpsertBulk) SetDescription(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDescription() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDescription()
	})
}

// SetResource sets the "resource" field.
func (u *PermissionUpsertBulk) SetResource(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateResource() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResource()
	})
}

// SetAction sets the "action" field.
func (u *PermissionUpsertBulk) SetAction(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateAction() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAction()
	})
}

// SetCategory sets the "category" field.
func (u *PermissionUpsertBulk) SetCategory(v model.PermissionCategory) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateCategory() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateCategory()
	})
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *PermissionUpsertBulk) SetApplicableUserTypes(v []model.UserType) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetApplicableUserTypes(v)
	})
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateApplicableUserTypes() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateApplicableUserTypes()
	})
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (u *PermissionUpsertBulk) SetApplicableContexts(v []model.ContextType) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetApplicableContexts(v)
	})
}

// UpdateApplicableContexts sets the "applicable_contexts" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateApplicableContexts() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateApplicableContexts()
	})
}

// SetConditions sets the "conditions" field.
func (u *PermissionUpsertBulk) SetConditions(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetConditions(v)
	})
}

// UpdateConditions sets the "conditions" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateConditions() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateConditions()
	})
}

// ClearConditions clears the value of the "conditions" field.
func (u *PermissionUpsertBulk) ClearConditions() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearConditions()
	})
}

// SetSystem sets the "system" field.
func (u *PermissionUpsertBulk) SetSystem(v bool) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateSystem() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateSystem()
	})
}

// SetDangerous sets the "dangerous" field.
func (u *PermissionUpsertBulk) SetDangerous(v bool) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDangerous(v)
	})
}

// UpdateDangerous sets the "dangerous" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDangerous() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDangerous()
	})
}

// SetRiskLevel sets the "risk_level" field.
func (u *PermissionUpsertBulk) SetRiskLevel(v int) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetRiskLevel(v)
	})
}

// AddRiskLevel adds v to the "risk_level" field.
func (u *PermissionUpsertBulk) AddRiskLevel(v int) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.AddRiskLevel(v)
	})
}

// UpdateRiskLevel sets the "risk_level" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateRiskLevel() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateRiskLevel()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionUpsertBulk) SetCreatedBy(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateCreatedBy() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionUpsertBulk) ClearCreatedBy() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetActive sets the "active" field.
func (u *PermissionUpsertBulk) SetActive(v bool) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateActive() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateActive()
	})
}

// SetPermissionGroup sets the "permission_group" field.
func (u *PermissionUpsertBulk) SetPermissionGroup(v model.PermissionGroup) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetPermissionGroup(v)
	})
}

// UpdatePermissionGroup sets the "permission_group" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdatePermissionGroup() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdatePermissionGroup()
	})
}

// ClearPermissionGroup clears the value of the "permission_group" field.
func (u *PermissionUpsertBulk) ClearPermissionGroup() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearPermissionGroup()
	})
}

// Exec executes the query.
func (u *PermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
