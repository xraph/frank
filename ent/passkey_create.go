// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/passkey"
	"github.com/xraph/frank/ent/user"
)

// PasskeyCreate is the builder for creating a Passkey entity.
type PasskeyCreate struct {
	config
	mutation *PasskeyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PasskeyCreate) SetCreatedAt(t time.Time) *PasskeyCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableCreatedAt(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PasskeyCreate) SetUpdatedAt(t time.Time) *PasskeyCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableUpdatedAt(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PasskeyCreate) SetDeletedAt(t time.Time) *PasskeyCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableDeletedAt(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PasskeyCreate) SetUserID(x xid.ID) *PasskeyCreate {
	pc.mutation.SetUserID(x)
	return pc
}

// SetName sets the "name" field.
func (pc *PasskeyCreate) SetName(s string) *PasskeyCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetCredentialID sets the "credential_id" field.
func (pc *PasskeyCreate) SetCredentialID(s string) *PasskeyCreate {
	pc.mutation.SetCredentialID(s)
	return pc
}

// SetPublicKey sets the "public_key" field.
func (pc *PasskeyCreate) SetPublicKey(b []byte) *PasskeyCreate {
	pc.mutation.SetPublicKey(b)
	return pc
}

// SetSignCount sets the "sign_count" field.
func (pc *PasskeyCreate) SetSignCount(i int) *PasskeyCreate {
	pc.mutation.SetSignCount(i)
	return pc
}

// SetNillableSignCount sets the "sign_count" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableSignCount(i *int) *PasskeyCreate {
	if i != nil {
		pc.SetSignCount(*i)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PasskeyCreate) SetActive(b bool) *PasskeyCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableActive(b *bool) *PasskeyCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetDeviceType sets the "device_type" field.
func (pc *PasskeyCreate) SetDeviceType(s string) *PasskeyCreate {
	pc.mutation.SetDeviceType(s)
	return pc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableDeviceType(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetDeviceType(*s)
	}
	return pc
}

// SetAaguid sets the "aaguid" field.
func (pc *PasskeyCreate) SetAaguid(s string) *PasskeyCreate {
	pc.mutation.SetAaguid(s)
	return pc
}

// SetNillableAaguid sets the "aaguid" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableAaguid(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetAaguid(*s)
	}
	return pc
}

// SetLastUsed sets the "last_used" field.
func (pc *PasskeyCreate) SetLastUsed(t time.Time) *PasskeyCreate {
	pc.mutation.SetLastUsed(t)
	return pc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableLastUsed(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetLastUsed(*t)
	}
	return pc
}

// SetTransports sets the "transports" field.
func (pc *PasskeyCreate) SetTransports(s []string) *PasskeyCreate {
	pc.mutation.SetTransports(s)
	return pc
}

// SetAttestation sets the "attestation" field.
func (pc *PasskeyCreate) SetAttestation(m map[string]interface{}) *PasskeyCreate {
	pc.mutation.SetAttestation(m)
	return pc
}

// SetBackupState sets the "backup_state" field.
func (pc *PasskeyCreate) SetBackupState(b bool) *PasskeyCreate {
	pc.mutation.SetBackupState(b)
	return pc
}

// SetNillableBackupState sets the "backup_state" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableBackupState(b *bool) *PasskeyCreate {
	if b != nil {
		pc.SetBackupState(*b)
	}
	return pc
}

// SetBackupEligible sets the "backup_eligible" field.
func (pc *PasskeyCreate) SetBackupEligible(b bool) *PasskeyCreate {
	pc.mutation.SetBackupEligible(b)
	return pc
}

// SetNillableBackupEligible sets the "backup_eligible" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableBackupEligible(b *bool) *PasskeyCreate {
	if b != nil {
		pc.SetBackupEligible(*b)
	}
	return pc
}

// SetUserAgent sets the "user_agent" field.
func (pc *PasskeyCreate) SetUserAgent(s string) *PasskeyCreate {
	pc.mutation.SetUserAgent(s)
	return pc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableUserAgent(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetUserAgent(*s)
	}
	return pc
}

// SetIPAddress sets the "ip_address" field.
func (pc *PasskeyCreate) SetIPAddress(s string) *PasskeyCreate {
	pc.mutation.SetIPAddress(s)
	return pc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableIPAddress(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetIPAddress(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PasskeyCreate) SetID(x xid.ID) *PasskeyCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableID(x *xid.ID) *PasskeyCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PasskeyCreate) SetUser(u *User) *PasskeyCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PasskeyMutation object of the builder.
func (pc *PasskeyCreate) Mutation() *PasskeyMutation {
	return pc.mutation
}

// Save creates the Passkey in the database.
func (pc *PasskeyCreate) Save(ctx context.Context) (*Passkey, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PasskeyCreate) SaveX(ctx context.Context) *Passkey {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PasskeyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PasskeyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PasskeyCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := passkey.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := passkey.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.SignCount(); !ok {
		v := passkey.DefaultSignCount
		pc.mutation.SetSignCount(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := passkey.DefaultActive
		pc.mutation.SetActive(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := passkey.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PasskeyCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Passkey.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Passkey.updated_at"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Passkey.user_id"`)}
	}
	if v, ok := pc.mutation.UserID(); ok {
		if err := passkey.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Passkey.user_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Passkey.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := passkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Passkey.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CredentialID(); !ok {
		return &ValidationError{Name: "credential_id", err: errors.New(`ent: missing required field "Passkey.credential_id"`)}
	}
	if v, ok := pc.mutation.CredentialID(); ok {
		if err := passkey.CredentialIDValidator(v); err != nil {
			return &ValidationError{Name: "credential_id", err: fmt.Errorf(`ent: validator failed for field "Passkey.credential_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "Passkey.public_key"`)}
	}
	if v, ok := pc.mutation.PublicKey(); ok {
		if err := passkey.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Passkey.public_key": %w`, err)}
		}
	}
	if _, ok := pc.mutation.SignCount(); !ok {
		return &ValidationError{Name: "sign_count", err: errors.New(`ent: missing required field "Passkey.sign_count"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Passkey.active"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Passkey.user"`)}
	}
	return nil
}

func (pc *PasskeyCreate) sqlSave(ctx context.Context) (*Passkey, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PasskeyCreate) createSpec() (*Passkey, *sqlgraph.CreateSpec) {
	var (
		_node = &Passkey{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(passkey.Table, sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(passkey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(passkey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(passkey.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(passkey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.CredentialID(); ok {
		_spec.SetField(passkey.FieldCredentialID, field.TypeString, value)
		_node.CredentialID = value
	}
	if value, ok := pc.mutation.PublicKey(); ok {
		_spec.SetField(passkey.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := pc.mutation.SignCount(); ok {
		_spec.SetField(passkey.FieldSignCount, field.TypeInt, value)
		_node.SignCount = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(passkey.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.DeviceType(); ok {
		_spec.SetField(passkey.FieldDeviceType, field.TypeString, value)
		_node.DeviceType = value
	}
	if value, ok := pc.mutation.Aaguid(); ok {
		_spec.SetField(passkey.FieldAaguid, field.TypeString, value)
		_node.Aaguid = value
	}
	if value, ok := pc.mutation.LastUsed(); ok {
		_spec.SetField(passkey.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = &value
	}
	if value, ok := pc.mutation.Transports(); ok {
		_spec.SetField(passkey.FieldTransports, field.TypeJSON, value)
		_node.Transports = value
	}
	if value, ok := pc.mutation.Attestation(); ok {
		_spec.SetField(passkey.FieldAttestation, field.TypeJSON, value)
		_node.Attestation = value
	}
	if value, ok := pc.mutation.BackupState(); ok {
		_spec.SetField(passkey.FieldBackupState, field.TypeBool, value)
		_node.BackupState = value
	}
	if value, ok := pc.mutation.BackupEligible(); ok {
		_spec.SetField(passkey.FieldBackupEligible, field.TypeBool, value)
		_node.BackupEligible = value
	}
	if value, ok := pc.mutation.UserAgent(); ok {
		_spec.SetField(passkey.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := pc.mutation.IPAddress(); ok {
		_spec.SetField(passkey.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passkey.UserTable,
			Columns: []string{passkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Passkey.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PasskeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PasskeyCreate) OnConflict(opts ...sql.ConflictOption) *PasskeyUpsertOne {
	pc.conflict = opts
	return &PasskeyUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Passkey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PasskeyCreate) OnConflictColumns(columns ...string) *PasskeyUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PasskeyUpsertOne{
		create: pc,
	}
}

type (
	// PasskeyUpsertOne is the builder for "upsert"-ing
	//  one Passkey node.
	PasskeyUpsertOne struct {
		create *PasskeyCreate
	}

	// PasskeyUpsert is the "OnConflict" setter.
	PasskeyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PasskeyUpsert) SetUpdatedAt(v time.Time) *PasskeyUpsert {
	u.Set(passkey.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateUpdatedAt() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PasskeyUpsert) SetDeletedAt(v time.Time) *PasskeyUpsert {
	u.Set(passkey.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateDeletedAt() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PasskeyUpsert) ClearDeletedAt() *PasskeyUpsert {
	u.SetNull(passkey.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PasskeyUpsert) SetUserID(v xid.ID) *PasskeyUpsert {
	u.Set(passkey.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateUserID() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *PasskeyUpsert) SetName(v string) *PasskeyUpsert {
	u.Set(passkey.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateName() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldName)
	return u
}

// SetCredentialID sets the "credential_id" field.
func (u *PasskeyUpsert) SetCredentialID(v string) *PasskeyUpsert {
	u.Set(passkey.FieldCredentialID, v)
	return u
}

// UpdateCredentialID sets the "credential_id" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateCredentialID() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldCredentialID)
	return u
}

// SetPublicKey sets the "public_key" field.
func (u *PasskeyUpsert) SetPublicKey(v []byte) *PasskeyUpsert {
	u.Set(passkey.FieldPublicKey, v)
	return u
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdatePublicKey() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldPublicKey)
	return u
}

// SetSignCount sets the "sign_count" field.
func (u *PasskeyUpsert) SetSignCount(v int) *PasskeyUpsert {
	u.Set(passkey.FieldSignCount, v)
	return u
}

// UpdateSignCount sets the "sign_count" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateSignCount() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldSignCount)
	return u
}

// AddSignCount adds v to the "sign_count" field.
func (u *PasskeyUpsert) AddSignCount(v int) *PasskeyUpsert {
	u.Add(passkey.FieldSignCount, v)
	return u
}

// SetActive sets the "active" field.
func (u *PasskeyUpsert) SetActive(v bool) *PasskeyUpsert {
	u.Set(passkey.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateActive() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldActive)
	return u
}

// SetDeviceType sets the "device_type" field.
func (u *PasskeyUpsert) SetDeviceType(v string) *PasskeyUpsert {
	u.Set(passkey.FieldDeviceType, v)
	return u
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateDeviceType() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldDeviceType)
	return u
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *PasskeyUpsert) ClearDeviceType() *PasskeyUpsert {
	u.SetNull(passkey.FieldDeviceType)
	return u
}

// SetAaguid sets the "aaguid" field.
func (u *PasskeyUpsert) SetAaguid(v string) *PasskeyUpsert {
	u.Set(passkey.FieldAaguid, v)
	return u
}

// UpdateAaguid sets the "aaguid" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateAaguid() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldAaguid)
	return u
}

// ClearAaguid clears the value of the "aaguid" field.
func (u *PasskeyUpsert) ClearAaguid() *PasskeyUpsert {
	u.SetNull(passkey.FieldAaguid)
	return u
}

// SetLastUsed sets the "last_used" field.
func (u *PasskeyUpsert) SetLastUsed(v time.Time) *PasskeyUpsert {
	u.Set(passkey.FieldLastUsed, v)
	return u
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateLastUsed() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldLastUsed)
	return u
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *PasskeyUpsert) ClearLastUsed() *PasskeyUpsert {
	u.SetNull(passkey.FieldLastUsed)
	return u
}

// SetTransports sets the "transports" field.
func (u *PasskeyUpsert) SetTransports(v []string) *PasskeyUpsert {
	u.Set(passkey.FieldTransports, v)
	return u
}

// UpdateTransports sets the "transports" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateTransports() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldTransports)
	return u
}

// ClearTransports clears the value of the "transports" field.
func (u *PasskeyUpsert) ClearTransports() *PasskeyUpsert {
	u.SetNull(passkey.FieldTransports)
	return u
}

// SetAttestation sets the "attestation" field.
func (u *PasskeyUpsert) SetAttestation(v map[string]interface{}) *PasskeyUpsert {
	u.Set(passkey.FieldAttestation, v)
	return u
}

// UpdateAttestation sets the "attestation" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateAttestation() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldAttestation)
	return u
}

// ClearAttestation clears the value of the "attestation" field.
func (u *PasskeyUpsert) ClearAttestation() *PasskeyUpsert {
	u.SetNull(passkey.FieldAttestation)
	return u
}

// SetBackupState sets the "backup_state" field.
func (u *PasskeyUpsert) SetBackupState(v bool) *PasskeyUpsert {
	u.Set(passkey.FieldBackupState, v)
	return u
}

// UpdateBackupState sets the "backup_state" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateBackupState() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldBackupState)
	return u
}

// ClearBackupState clears the value of the "backup_state" field.
func (u *PasskeyUpsert) ClearBackupState() *PasskeyUpsert {
	u.SetNull(passkey.FieldBackupState)
	return u
}

// SetBackupEligible sets the "backup_eligible" field.
func (u *PasskeyUpsert) SetBackupEligible(v bool) *PasskeyUpsert {
	u.Set(passkey.FieldBackupEligible, v)
	return u
}

// UpdateBackupEligible sets the "backup_eligible" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateBackupEligible() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldBackupEligible)
	return u
}

// ClearBackupEligible clears the value of the "backup_eligible" field.
func (u *PasskeyUpsert) ClearBackupEligible() *PasskeyUpsert {
	u.SetNull(passkey.FieldBackupEligible)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *PasskeyUpsert) SetUserAgent(v string) *PasskeyUpsert {
	u.Set(passkey.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateUserAgent() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *PasskeyUpsert) ClearUserAgent() *PasskeyUpsert {
	u.SetNull(passkey.FieldUserAgent)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *PasskeyUpsert) SetIPAddress(v string) *PasskeyUpsert {
	u.Set(passkey.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *PasskeyUpsert) UpdateIPAddress() *PasskeyUpsert {
	u.SetExcluded(passkey.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *PasskeyUpsert) ClearIPAddress() *PasskeyUpsert {
	u.SetNull(passkey.FieldIPAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Passkey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(passkey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PasskeyUpsertOne) UpdateNewValues() *PasskeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(passkey.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(passkey.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Passkey.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PasskeyUpsertOne) Ignore() *PasskeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PasskeyUpsertOne) DoNothing() *PasskeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PasskeyCreate.OnConflict
// documentation for more info.
func (u *PasskeyUpsertOne) Update(set func(*PasskeyUpsert)) *PasskeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PasskeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PasskeyUpsertOne) SetUpdatedAt(v time.Time) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateUpdatedAt() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PasskeyUpsertOne) SetDeletedAt(v time.Time) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateDeletedAt() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PasskeyUpsertOne) ClearDeletedAt() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *PasskeyUpsertOne) SetUserID(v xid.ID) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateUserID() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *PasskeyUpsertOne) SetName(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateName() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateName()
	})
}

// SetCredentialID sets the "credential_id" field.
func (u *PasskeyUpsertOne) SetCredentialID(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetCredentialID(v)
	})
}

// UpdateCredentialID sets the "credential_id" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateCredentialID() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateCredentialID()
	})
}

// SetPublicKey sets the "public_key" field.
func (u *PasskeyUpsertOne) SetPublicKey(v []byte) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetPublicKey(v)
	})
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdatePublicKey() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdatePublicKey()
	})
}

// SetSignCount sets the "sign_count" field.
func (u *PasskeyUpsertOne) SetSignCount(v int) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetSignCount(v)
	})
}

// AddSignCount adds v to the "sign_count" field.
func (u *PasskeyUpsertOne) AddSignCount(v int) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.AddSignCount(v)
	})
}

// UpdateSignCount sets the "sign_count" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateSignCount() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateSignCount()
	})
}

// SetActive sets the "active" field.
func (u *PasskeyUpsertOne) SetActive(v bool) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateActive() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateActive()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *PasskeyUpsertOne) SetDeviceType(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateDeviceType() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateDeviceType()
	})
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *PasskeyUpsertOne) ClearDeviceType() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearDeviceType()
	})
}

// SetAaguid sets the "aaguid" field.
func (u *PasskeyUpsertOne) SetAaguid(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetAaguid(v)
	})
}

// UpdateAaguid sets the "aaguid" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateAaguid() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateAaguid()
	})
}

// ClearAaguid clears the value of the "aaguid" field.
func (u *PasskeyUpsertOne) ClearAaguid() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearAaguid()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *PasskeyUpsertOne) SetLastUsed(v time.Time) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateLastUsed() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *PasskeyUpsertOne) ClearLastUsed() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearLastUsed()
	})
}

// SetTransports sets the "transports" field.
func (u *PasskeyUpsertOne) SetTransports(v []string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetTransports(v)
	})
}

// UpdateTransports sets the "transports" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateTransports() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateTransports()
	})
}

// ClearTransports clears the value of the "transports" field.
func (u *PasskeyUpsertOne) ClearTransports() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearTransports()
	})
}

// SetAttestation sets the "attestation" field.
func (u *PasskeyUpsertOne) SetAttestation(v map[string]interface{}) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetAttestation(v)
	})
}

// UpdateAttestation sets the "attestation" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateAttestation() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateAttestation()
	})
}

// ClearAttestation clears the value of the "attestation" field.
func (u *PasskeyUpsertOne) ClearAttestation() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearAttestation()
	})
}

// SetBackupState sets the "backup_state" field.
func (u *PasskeyUpsertOne) SetBackupState(v bool) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetBackupState(v)
	})
}

// UpdateBackupState sets the "backup_state" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateBackupState() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateBackupState()
	})
}

// ClearBackupState clears the value of the "backup_state" field.
func (u *PasskeyUpsertOne) ClearBackupState() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearBackupState()
	})
}

// SetBackupEligible sets the "backup_eligible" field.
func (u *PasskeyUpsertOne) SetBackupEligible(v bool) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetBackupEligible(v)
	})
}

// UpdateBackupEligible sets the "backup_eligible" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateBackupEligible() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateBackupEligible()
	})
}

// ClearBackupEligible clears the value of the "backup_eligible" field.
func (u *PasskeyUpsertOne) ClearBackupEligible() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearBackupEligible()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *PasskeyUpsertOne) SetUserAgent(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateUserAgent() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *PasskeyUpsertOne) ClearUserAgent() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *PasskeyUpsertOne) SetIPAddress(v string) *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *PasskeyUpsertOne) UpdateIPAddress() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *PasskeyUpsertOne) ClearIPAddress() *PasskeyUpsertOne {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearIPAddress()
	})
}

// Exec executes the query.
func (u *PasskeyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PasskeyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PasskeyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PasskeyUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PasskeyUpsertOne.ID is not supported by MySQL driver. Use PasskeyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PasskeyUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PasskeyCreateBulk is the builder for creating many Passkey entities in bulk.
type PasskeyCreateBulk struct {
	config
	err      error
	builders []*PasskeyCreate
	conflict []sql.ConflictOption
}

// Save creates the Passkey entities in the database.
func (pcb *PasskeyCreateBulk) Save(ctx context.Context) ([]*Passkey, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Passkey, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasskeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PasskeyCreateBulk) SaveX(ctx context.Context) []*Passkey {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PasskeyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PasskeyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Passkey.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PasskeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PasskeyCreateBulk) OnConflict(opts ...sql.ConflictOption) *PasskeyUpsertBulk {
	pcb.conflict = opts
	return &PasskeyUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Passkey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PasskeyCreateBulk) OnConflictColumns(columns ...string) *PasskeyUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PasskeyUpsertBulk{
		create: pcb,
	}
}

// PasskeyUpsertBulk is the builder for "upsert"-ing
// a bulk of Passkey nodes.
type PasskeyUpsertBulk struct {
	create *PasskeyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Passkey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(passkey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PasskeyUpsertBulk) UpdateNewValues() *PasskeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(passkey.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(passkey.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Passkey.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PasskeyUpsertBulk) Ignore() *PasskeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PasskeyUpsertBulk) DoNothing() *PasskeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PasskeyCreateBulk.OnConflict
// documentation for more info.
func (u *PasskeyUpsertBulk) Update(set func(*PasskeyUpsert)) *PasskeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PasskeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PasskeyUpsertBulk) SetUpdatedAt(v time.Time) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateUpdatedAt() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PasskeyUpsertBulk) SetDeletedAt(v time.Time) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateDeletedAt() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PasskeyUpsertBulk) ClearDeletedAt() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *PasskeyUpsertBulk) SetUserID(v xid.ID) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateUserID() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *PasskeyUpsertBulk) SetName(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateName() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateName()
	})
}

// SetCredentialID sets the "credential_id" field.
func (u *PasskeyUpsertBulk) SetCredentialID(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetCredentialID(v)
	})
}

// UpdateCredentialID sets the "credential_id" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateCredentialID() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateCredentialID()
	})
}

// SetPublicKey sets the "public_key" field.
func (u *PasskeyUpsertBulk) SetPublicKey(v []byte) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetPublicKey(v)
	})
}

// UpdatePublicKey sets the "public_key" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdatePublicKey() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdatePublicKey()
	})
}

// SetSignCount sets the "sign_count" field.
func (u *PasskeyUpsertBulk) SetSignCount(v int) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetSignCount(v)
	})
}

// AddSignCount adds v to the "sign_count" field.
func (u *PasskeyUpsertBulk) AddSignCount(v int) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.AddSignCount(v)
	})
}

// UpdateSignCount sets the "sign_count" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateSignCount() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateSignCount()
	})
}

// SetActive sets the "active" field.
func (u *PasskeyUpsertBulk) SetActive(v bool) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateActive() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateActive()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *PasskeyUpsertBulk) SetDeviceType(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateDeviceType() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateDeviceType()
	})
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *PasskeyUpsertBulk) ClearDeviceType() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearDeviceType()
	})
}

// SetAaguid sets the "aaguid" field.
func (u *PasskeyUpsertBulk) SetAaguid(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetAaguid(v)
	})
}

// UpdateAaguid sets the "aaguid" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateAaguid() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateAaguid()
	})
}

// ClearAaguid clears the value of the "aaguid" field.
func (u *PasskeyUpsertBulk) ClearAaguid() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearAaguid()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *PasskeyUpsertBulk) SetLastUsed(v time.Time) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateLastUsed() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *PasskeyUpsertBulk) ClearLastUsed() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearLastUsed()
	})
}

// SetTransports sets the "transports" field.
func (u *PasskeyUpsertBulk) SetTransports(v []string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetTransports(v)
	})
}

// UpdateTransports sets the "transports" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateTransports() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateTransports()
	})
}

// ClearTransports clears the value of the "transports" field.
func (u *PasskeyUpsertBulk) ClearTransports() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearTransports()
	})
}

// SetAttestation sets the "attestation" field.
func (u *PasskeyUpsertBulk) SetAttestation(v map[string]interface{}) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetAttestation(v)
	})
}

// UpdateAttestation sets the "attestation" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateAttestation() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateAttestation()
	})
}

// ClearAttestation clears the value of the "attestation" field.
func (u *PasskeyUpsertBulk) ClearAttestation() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearAttestation()
	})
}

// SetBackupState sets the "backup_state" field.
func (u *PasskeyUpsertBulk) SetBackupState(v bool) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetBackupState(v)
	})
}

// UpdateBackupState sets the "backup_state" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateBackupState() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateBackupState()
	})
}

// ClearBackupState clears the value of the "backup_state" field.
func (u *PasskeyUpsertBulk) ClearBackupState() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearBackupState()
	})
}

// SetBackupEligible sets the "backup_eligible" field.
func (u *PasskeyUpsertBulk) SetBackupEligible(v bool) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetBackupEligible(v)
	})
}

// UpdateBackupEligible sets the "backup_eligible" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateBackupEligible() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateBackupEligible()
	})
}

// ClearBackupEligible clears the value of the "backup_eligible" field.
func (u *PasskeyUpsertBulk) ClearBackupEligible() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearBackupEligible()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *PasskeyUpsertBulk) SetUserAgent(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateUserAgent() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *PasskeyUpsertBulk) ClearUserAgent() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *PasskeyUpsertBulk) SetIPAddress(v string) *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *PasskeyUpsertBulk) UpdateIPAddress() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *PasskeyUpsertBulk) ClearIPAddress() *PasskeyUpsertBulk {
	return u.Update(func(s *PasskeyUpsert) {
		s.ClearIPAddress()
	})
}

// Exec executes the query.
func (u *PasskeyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PasskeyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PasskeyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PasskeyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
