// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// Type of resource (api_key, user, organization, session, etc.)
	ResourceType model.ResourceType `json:"resource_type,omitempty"`
	// ID of the specific resource
	ResourceID xid.ID `json:"resource_id,omitempty"`
	// User who triggered this activity (if applicable)
	UserID xid.ID `json:"user_id,omitempty"`
	// Organization context
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Session context (if applicable)
	SessionID xid.ID `json:"session_id,omitempty"`
	// Action performed (request, login, create, update, etc.)
	Action string `json:"action,omitempty"`
	// Activity category (api, auth, admin, etc.)
	Category string `json:"category,omitempty"`
	// Source of activity (web, api, mobile, system)
	Source string `json:"source,omitempty"`
	// API endpoint (for API activities)
	Endpoint string `json:"endpoint,omitempty"`
	// HTTP method (for API activities)
	Method string `json:"method,omitempty"`
	// HTTP status code (for API activities)
	StatusCode int `json:"status_code,omitempty"`
	// Response time in milliseconds
	ResponseTime int `json:"response_time,omitempty"`
	// Client IP address
	IPAddress string `json:"ip_address,omitempty"`
	// Client user agent
	UserAgent string `json:"user_agent,omitempty"`
	// Geographic location
	Location string `json:"location,omitempty"`
	// Whether the activity was successful
	Success bool `json:"success,omitempty"`
	// Error message if failed
	Error string `json:"error,omitempty"`
	// Error code for categorization
	ErrorCode string `json:"error_code,omitempty"`
	// Size in bytes (for file operations, etc.)
	Size int `json:"size,omitempty"`
	// Count of items affected
	Count int `json:"count,omitempty"`
	// Numeric value associated with activity
	Value float64 `json:"value,omitempty"`
	// When the activity occurred
	Timestamp time.Time `json:"timestamp,omitempty"`
	// When this activity record expires (for cleanup)
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Tags for categorization and filtering
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityQuery when eager-loading is set.
	Edges        ActivityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActivityEdges holds the relations/edges for other nodes in the graph.
type ActivityEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Session holds the value of the session edge.
	Session *Session `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) SessionOrErr() (*Session, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: session.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldMetadata, activity.FieldTags:
			values[i] = new([]byte)
		case activity.FieldSuccess:
			values[i] = new(sql.NullBool)
		case activity.FieldValue:
			values[i] = new(sql.NullFloat64)
		case activity.FieldStatusCode, activity.FieldResponseTime, activity.FieldSize, activity.FieldCount:
			values[i] = new(sql.NullInt64)
		case activity.FieldResourceType, activity.FieldAction, activity.FieldCategory, activity.FieldSource, activity.FieldEndpoint, activity.FieldMethod, activity.FieldIPAddress, activity.FieldUserAgent, activity.FieldLocation, activity.FieldError, activity.FieldErrorCode:
			values[i] = new(sql.NullString)
		case activity.FieldTimestamp, activity.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case activity.FieldID, activity.FieldResourceID, activity.FieldUserID, activity.FieldOrganizationID, activity.FieldSessionID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case activity.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				a.ResourceType = model.ResourceType(value.String)
			}
		case activity.FieldResourceID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value != nil {
				a.ResourceID = *value
			}
		case activity.FieldUserID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				a.UserID = *value
			}
		case activity.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				a.OrganizationID = *value
			}
		case activity.FieldSessionID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value != nil {
				a.SessionID = *value
			}
		case activity.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				a.Action = value.String
			}
		case activity.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				a.Category = value.String
			}
		case activity.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				a.Source = value.String
			}
		case activity.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				a.Endpoint = value.String
			}
		case activity.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				a.Method = value.String
			}
		case activity.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				a.StatusCode = int(value.Int64)
			}
		case activity.FieldResponseTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_time", values[i])
			} else if value.Valid {
				a.ResponseTime = int(value.Int64)
			}
		case activity.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				a.IPAddress = value.String
			}
		case activity.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				a.UserAgent = value.String
			}
		case activity.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				a.Location = value.String
			}
		case activity.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				a.Success = value.Bool
			}
		case activity.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				a.Error = value.String
			}
		case activity.FieldErrorCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_code", values[i])
			} else if value.Valid {
				a.ErrorCode = value.String
			}
		case activity.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				a.Size = int(value.Int64)
			}
		case activity.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				a.Count = int(value.Int64)
			}
		case activity.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = value.Float64
			}
		case activity.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				a.Timestamp = value.Time
			}
		case activity.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				a.ExpiresAt = value.Time
			}
		case activity.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case activity.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Activity.
// This includes values selected through modifiers, order, etc.
func (a *Activity) GetValue(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Activity entity.
func (a *Activity) QueryUser() *UserQuery {
	return NewActivityClient(a.config).QueryUser(a)
}

// QueryOrganization queries the "organization" edge of the Activity entity.
func (a *Activity) QueryOrganization() *OrganizationQuery {
	return NewActivityClient(a.config).QueryOrganization(a)
}

// QuerySession queries the "session" edge of the Activity entity.
func (a *Activity) QuerySession() *SessionQuery {
	return NewActivityClient(a.config).QuerySession(a)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return NewActivityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("resource_type=")
	builder.WriteString(fmt.Sprintf("%v", a.ResourceType))
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ResourceID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", a.SessionID))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(a.Action)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(a.Category)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(a.Source)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(a.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(a.Method)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", a.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("response_time=")
	builder.WriteString(fmt.Sprintf("%v", a.ResponseTime))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(a.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(a.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(a.Location)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", a.Success))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(a.Error)
	builder.WriteString(", ")
	builder.WriteString("error_code=")
	builder.WriteString(a.ErrorCode)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", a.Size))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", a.Count))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", a.Value))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(a.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(a.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", a.Metadata))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", a.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity
