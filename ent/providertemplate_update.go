// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/providertemplate"
)

// ProviderTemplateUpdate is the builder for updating ProviderTemplate entities.
type ProviderTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *ProviderTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProviderTemplateUpdate builder.
func (ptu *ProviderTemplateUpdate) Where(ps ...predicate.ProviderTemplate) *ProviderTemplateUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *ProviderTemplateUpdate) SetUpdatedAt(t time.Time) *ProviderTemplateUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// SetDeletedAt sets the "deleted_at" field.
func (ptu *ProviderTemplateUpdate) SetDeletedAt(t time.Time) *ProviderTemplateUpdate {
	ptu.mutation.SetDeletedAt(t)
	return ptu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableDeletedAt(t *time.Time) *ProviderTemplateUpdate {
	if t != nil {
		ptu.SetDeletedAt(*t)
	}
	return ptu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptu *ProviderTemplateUpdate) ClearDeletedAt() *ProviderTemplateUpdate {
	ptu.mutation.ClearDeletedAt()
	return ptu
}

// SetKey sets the "key" field.
func (ptu *ProviderTemplateUpdate) SetKey(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetKey(s)
	return ptu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableKey(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetKey(*s)
	}
	return ptu
}

// SetName sets the "name" field.
func (ptu *ProviderTemplateUpdate) SetName(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableName(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetDisplayName sets the "display_name" field.
func (ptu *ProviderTemplateUpdate) SetDisplayName(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetDisplayName(s)
	return ptu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableDisplayName(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetDisplayName(*s)
	}
	return ptu
}

// SetType sets the "type" field.
func (ptu *ProviderTemplateUpdate) SetType(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableType(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetType(*s)
	}
	return ptu
}

// SetProtocol sets the "protocol" field.
func (ptu *ProviderTemplateUpdate) SetProtocol(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetProtocol(s)
	return ptu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableProtocol(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetProtocol(*s)
	}
	return ptu
}

// SetIconURL sets the "icon_url" field.
func (ptu *ProviderTemplateUpdate) SetIconURL(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetIconURL(s)
	return ptu
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableIconURL(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetIconURL(*s)
	}
	return ptu
}

// ClearIconURL clears the value of the "icon_url" field.
func (ptu *ProviderTemplateUpdate) ClearIconURL() *ProviderTemplateUpdate {
	ptu.mutation.ClearIconURL()
	return ptu
}

// SetCategory sets the "category" field.
func (ptu *ProviderTemplateUpdate) SetCategory(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetCategory(s)
	return ptu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableCategory(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetCategory(*s)
	}
	return ptu
}

// SetPopular sets the "popular" field.
func (ptu *ProviderTemplateUpdate) SetPopular(b bool) *ProviderTemplateUpdate {
	ptu.mutation.SetPopular(b)
	return ptu
}

// SetNillablePopular sets the "popular" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillablePopular(b *bool) *ProviderTemplateUpdate {
	if b != nil {
		ptu.SetPopular(*b)
	}
	return ptu
}

// SetActive sets the "active" field.
func (ptu *ProviderTemplateUpdate) SetActive(b bool) *ProviderTemplateUpdate {
	ptu.mutation.SetActive(b)
	return ptu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableActive(b *bool) *ProviderTemplateUpdate {
	if b != nil {
		ptu.SetActive(*b)
	}
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProviderTemplateUpdate) SetDescription(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableDescription(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProviderTemplateUpdate) ClearDescription() *ProviderTemplateUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetConfigTemplate sets the "config_template" field.
func (ptu *ProviderTemplateUpdate) SetConfigTemplate(m map[string]interface{}) *ProviderTemplateUpdate {
	ptu.mutation.SetConfigTemplate(m)
	return ptu
}

// SetRequiredFields sets the "required_fields" field.
func (ptu *ProviderTemplateUpdate) SetRequiredFields(s []string) *ProviderTemplateUpdate {
	ptu.mutation.SetRequiredFields(s)
	return ptu
}

// AppendRequiredFields appends s to the "required_fields" field.
func (ptu *ProviderTemplateUpdate) AppendRequiredFields(s []string) *ProviderTemplateUpdate {
	ptu.mutation.AppendRequiredFields(s)
	return ptu
}

// ClearRequiredFields clears the value of the "required_fields" field.
func (ptu *ProviderTemplateUpdate) ClearRequiredFields() *ProviderTemplateUpdate {
	ptu.mutation.ClearRequiredFields()
	return ptu
}

// SetSupportedFeatures sets the "supported_features" field.
func (ptu *ProviderTemplateUpdate) SetSupportedFeatures(s []string) *ProviderTemplateUpdate {
	ptu.mutation.SetSupportedFeatures(s)
	return ptu
}

// AppendSupportedFeatures appends s to the "supported_features" field.
func (ptu *ProviderTemplateUpdate) AppendSupportedFeatures(s []string) *ProviderTemplateUpdate {
	ptu.mutation.AppendSupportedFeatures(s)
	return ptu
}

// ClearSupportedFeatures clears the value of the "supported_features" field.
func (ptu *ProviderTemplateUpdate) ClearSupportedFeatures() *ProviderTemplateUpdate {
	ptu.mutation.ClearSupportedFeatures()
	return ptu
}

// SetDocumentationURL sets the "documentation_url" field.
func (ptu *ProviderTemplateUpdate) SetDocumentationURL(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetDocumentationURL(s)
	return ptu
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableDocumentationURL(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetDocumentationURL(*s)
	}
	return ptu
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (ptu *ProviderTemplateUpdate) ClearDocumentationURL() *ProviderTemplateUpdate {
	ptu.mutation.ClearDocumentationURL()
	return ptu
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (ptu *ProviderTemplateUpdate) SetSetupGuideURL(s string) *ProviderTemplateUpdate {
	ptu.mutation.SetSetupGuideURL(s)
	return ptu
}

// SetNillableSetupGuideURL sets the "setup_guide_url" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableSetupGuideURL(s *string) *ProviderTemplateUpdate {
	if s != nil {
		ptu.SetSetupGuideURL(*s)
	}
	return ptu
}

// ClearSetupGuideURL clears the value of the "setup_guide_url" field.
func (ptu *ProviderTemplateUpdate) ClearSetupGuideURL() *ProviderTemplateUpdate {
	ptu.mutation.ClearSetupGuideURL()
	return ptu
}

// SetUsageCount sets the "usage_count" field.
func (ptu *ProviderTemplateUpdate) SetUsageCount(i int) *ProviderTemplateUpdate {
	ptu.mutation.ResetUsageCount()
	ptu.mutation.SetUsageCount(i)
	return ptu
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableUsageCount(i *int) *ProviderTemplateUpdate {
	if i != nil {
		ptu.SetUsageCount(*i)
	}
	return ptu
}

// AddUsageCount adds i to the "usage_count" field.
func (ptu *ProviderTemplateUpdate) AddUsageCount(i int) *ProviderTemplateUpdate {
	ptu.mutation.AddUsageCount(i)
	return ptu
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (ptu *ProviderTemplateUpdate) SetAverageSetupTime(f float64) *ProviderTemplateUpdate {
	ptu.mutation.ResetAverageSetupTime()
	ptu.mutation.SetAverageSetupTime(f)
	return ptu
}

// SetNillableAverageSetupTime sets the "average_setup_time" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableAverageSetupTime(f *float64) *ProviderTemplateUpdate {
	if f != nil {
		ptu.SetAverageSetupTime(*f)
	}
	return ptu
}

// AddAverageSetupTime adds f to the "average_setup_time" field.
func (ptu *ProviderTemplateUpdate) AddAverageSetupTime(f float64) *ProviderTemplateUpdate {
	ptu.mutation.AddAverageSetupTime(f)
	return ptu
}

// ClearAverageSetupTime clears the value of the "average_setup_time" field.
func (ptu *ProviderTemplateUpdate) ClearAverageSetupTime() *ProviderTemplateUpdate {
	ptu.mutation.ClearAverageSetupTime()
	return ptu
}

// SetSuccessRate sets the "success_rate" field.
func (ptu *ProviderTemplateUpdate) SetSuccessRate(f float64) *ProviderTemplateUpdate {
	ptu.mutation.ResetSuccessRate()
	ptu.mutation.SetSuccessRate(f)
	return ptu
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillableSuccessRate(f *float64) *ProviderTemplateUpdate {
	if f != nil {
		ptu.SetSuccessRate(*f)
	}
	return ptu
}

// AddSuccessRate adds f to the "success_rate" field.
func (ptu *ProviderTemplateUpdate) AddSuccessRate(f float64) *ProviderTemplateUpdate {
	ptu.mutation.AddSuccessRate(f)
	return ptu
}

// SetPopularityRank sets the "popularity_rank" field.
func (ptu *ProviderTemplateUpdate) SetPopularityRank(i int) *ProviderTemplateUpdate {
	ptu.mutation.ResetPopularityRank()
	ptu.mutation.SetPopularityRank(i)
	return ptu
}

// SetNillablePopularityRank sets the "popularity_rank" field if the given value is not nil.
func (ptu *ProviderTemplateUpdate) SetNillablePopularityRank(i *int) *ProviderTemplateUpdate {
	if i != nil {
		ptu.SetPopularityRank(*i)
	}
	return ptu
}

// AddPopularityRank adds i to the "popularity_rank" field.
func (ptu *ProviderTemplateUpdate) AddPopularityRank(i int) *ProviderTemplateUpdate {
	ptu.mutation.AddPopularityRank(i)
	return ptu
}

// SetMetadata sets the "metadata" field.
func (ptu *ProviderTemplateUpdate) SetMetadata(m map[string]interface{}) *ProviderTemplateUpdate {
	ptu.mutation.SetMetadata(m)
	return ptu
}

// ClearMetadata clears the value of the "metadata" field.
func (ptu *ProviderTemplateUpdate) ClearMetadata() *ProviderTemplateUpdate {
	ptu.mutation.ClearMetadata()
	return ptu
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ptu *ProviderTemplateUpdate) AddOrganizationProviderIDs(ids ...xid.ID) *ProviderTemplateUpdate {
	ptu.mutation.AddOrganizationProviderIDs(ids...)
	return ptu
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ptu *ProviderTemplateUpdate) AddOrganizationProviders(o ...*OrganizationProvider) *ProviderTemplateUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptu.AddOrganizationProviderIDs(ids...)
}

// Mutation returns the ProviderTemplateMutation object of the builder.
func (ptu *ProviderTemplateUpdate) Mutation() *ProviderTemplateMutation {
	return ptu.mutation
}

// ClearOrganizationProviders clears all "organization_providers" edges to the OrganizationProvider entity.
func (ptu *ProviderTemplateUpdate) ClearOrganizationProviders() *ProviderTemplateUpdate {
	ptu.mutation.ClearOrganizationProviders()
	return ptu
}

// RemoveOrganizationProviderIDs removes the "organization_providers" edge to OrganizationProvider entities by IDs.
func (ptu *ProviderTemplateUpdate) RemoveOrganizationProviderIDs(ids ...xid.ID) *ProviderTemplateUpdate {
	ptu.mutation.RemoveOrganizationProviderIDs(ids...)
	return ptu
}

// RemoveOrganizationProviders removes "organization_providers" edges to OrganizationProvider entities.
func (ptu *ProviderTemplateUpdate) RemoveOrganizationProviders(o ...*OrganizationProvider) *ProviderTemplateUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptu.RemoveOrganizationProviderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProviderTemplateUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProviderTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProviderTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProviderTemplateUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProviderTemplateUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := providertemplate.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProviderTemplateUpdate) check() error {
	if v, ok := ptu.mutation.Key(); ok {
		if err := providertemplate.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.key": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Name(); ok {
		if err := providertemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.DisplayName(); ok {
		if err := providertemplate.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.display_name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.GetType(); ok {
		if err := providertemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.type": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Protocol(); ok {
		if err := providertemplate.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.protocol": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptu *ProviderTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderTemplateUpdate {
	ptu.modifiers = append(ptu.modifiers, modifiers...)
	return ptu
}

func (ptu *ProviderTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providertemplate.Table, providertemplate.Columns, sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(providertemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.DeletedAt(); ok {
		_spec.SetField(providertemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if ptu.mutation.DeletedAtCleared() {
		_spec.ClearField(providertemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.Key(); ok {
		_spec.SetField(providertemplate.FieldKey, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(providertemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.DisplayName(); ok {
		_spec.SetField(providertemplate.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.SetField(providertemplate.FieldType, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Protocol(); ok {
		_spec.SetField(providertemplate.FieldProtocol, field.TypeString, value)
	}
	if value, ok := ptu.mutation.IconURL(); ok {
		_spec.SetField(providertemplate.FieldIconURL, field.TypeString, value)
	}
	if ptu.mutation.IconURLCleared() {
		_spec.ClearField(providertemplate.FieldIconURL, field.TypeString)
	}
	if value, ok := ptu.mutation.Category(); ok {
		_spec.SetField(providertemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Popular(); ok {
		_spec.SetField(providertemplate.FieldPopular, field.TypeBool, value)
	}
	if value, ok := ptu.mutation.Active(); ok {
		_spec.SetField(providertemplate.FieldActive, field.TypeBool, value)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(providertemplate.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(providertemplate.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.ConfigTemplate(); ok {
		_spec.SetField(providertemplate.FieldConfigTemplate, field.TypeJSON, value)
	}
	if value, ok := ptu.mutation.RequiredFields(); ok {
		_spec.SetField(providertemplate.FieldRequiredFields, field.TypeJSON, value)
	}
	if value, ok := ptu.mutation.AppendedRequiredFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, providertemplate.FieldRequiredFields, value)
		})
	}
	if ptu.mutation.RequiredFieldsCleared() {
		_spec.ClearField(providertemplate.FieldRequiredFields, field.TypeJSON)
	}
	if value, ok := ptu.mutation.SupportedFeatures(); ok {
		_spec.SetField(providertemplate.FieldSupportedFeatures, field.TypeJSON, value)
	}
	if value, ok := ptu.mutation.AppendedSupportedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, providertemplate.FieldSupportedFeatures, value)
		})
	}
	if ptu.mutation.SupportedFeaturesCleared() {
		_spec.ClearField(providertemplate.FieldSupportedFeatures, field.TypeJSON)
	}
	if value, ok := ptu.mutation.DocumentationURL(); ok {
		_spec.SetField(providertemplate.FieldDocumentationURL, field.TypeString, value)
	}
	if ptu.mutation.DocumentationURLCleared() {
		_spec.ClearField(providertemplate.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := ptu.mutation.SetupGuideURL(); ok {
		_spec.SetField(providertemplate.FieldSetupGuideURL, field.TypeString, value)
	}
	if ptu.mutation.SetupGuideURLCleared() {
		_spec.ClearField(providertemplate.FieldSetupGuideURL, field.TypeString)
	}
	if value, ok := ptu.mutation.UsageCount(); ok {
		_spec.SetField(providertemplate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedUsageCount(); ok {
		_spec.AddField(providertemplate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AverageSetupTime(); ok {
		_spec.SetField(providertemplate.FieldAverageSetupTime, field.TypeFloat64, value)
	}
	if value, ok := ptu.mutation.AddedAverageSetupTime(); ok {
		_spec.AddField(providertemplate.FieldAverageSetupTime, field.TypeFloat64, value)
	}
	if ptu.mutation.AverageSetupTimeCleared() {
		_spec.ClearField(providertemplate.FieldAverageSetupTime, field.TypeFloat64)
	}
	if value, ok := ptu.mutation.SuccessRate(); ok {
		_spec.SetField(providertemplate.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := ptu.mutation.AddedSuccessRate(); ok {
		_spec.AddField(providertemplate.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := ptu.mutation.PopularityRank(); ok {
		_spec.SetField(providertemplate.FieldPopularityRank, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedPopularityRank(); ok {
		_spec.AddField(providertemplate.FieldPopularityRank, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.Metadata(); ok {
		_spec.SetField(providertemplate.FieldMetadata, field.TypeJSON, value)
	}
	if ptu.mutation.MetadataCleared() {
		_spec.ClearField(providertemplate.FieldMetadata, field.TypeJSON)
	}
	if ptu.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedOrganizationProvidersIDs(); len(nodes) > 0 && !ptu.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProviderTemplateUpdateOne is the builder for updating a single ProviderTemplate entity.
type ProviderTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProviderTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *ProviderTemplateUpdateOne) SetUpdatedAt(t time.Time) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ptuo *ProviderTemplateUpdateOne) SetDeletedAt(t time.Time) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetDeletedAt(t)
	return ptuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *ProviderTemplateUpdateOne {
	if t != nil {
		ptuo.SetDeletedAt(*t)
	}
	return ptuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptuo *ProviderTemplateUpdateOne) ClearDeletedAt() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearDeletedAt()
	return ptuo
}

// SetKey sets the "key" field.
func (ptuo *ProviderTemplateUpdateOne) SetKey(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetKey(s)
	return ptuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableKey(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetKey(*s)
	}
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *ProviderTemplateUpdateOne) SetName(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableName(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetDisplayName sets the "display_name" field.
func (ptuo *ProviderTemplateUpdateOne) SetDisplayName(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetDisplayName(s)
	return ptuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableDisplayName(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetDisplayName(*s)
	}
	return ptuo
}

// SetType sets the "type" field.
func (ptuo *ProviderTemplateUpdateOne) SetType(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableType(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetType(*s)
	}
	return ptuo
}

// SetProtocol sets the "protocol" field.
func (ptuo *ProviderTemplateUpdateOne) SetProtocol(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetProtocol(s)
	return ptuo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableProtocol(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetProtocol(*s)
	}
	return ptuo
}

// SetIconURL sets the "icon_url" field.
func (ptuo *ProviderTemplateUpdateOne) SetIconURL(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetIconURL(s)
	return ptuo
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableIconURL(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetIconURL(*s)
	}
	return ptuo
}

// ClearIconURL clears the value of the "icon_url" field.
func (ptuo *ProviderTemplateUpdateOne) ClearIconURL() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearIconURL()
	return ptuo
}

// SetCategory sets the "category" field.
func (ptuo *ProviderTemplateUpdateOne) SetCategory(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetCategory(s)
	return ptuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableCategory(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetCategory(*s)
	}
	return ptuo
}

// SetPopular sets the "popular" field.
func (ptuo *ProviderTemplateUpdateOne) SetPopular(b bool) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetPopular(b)
	return ptuo
}

// SetNillablePopular sets the "popular" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillablePopular(b *bool) *ProviderTemplateUpdateOne {
	if b != nil {
		ptuo.SetPopular(*b)
	}
	return ptuo
}

// SetActive sets the "active" field.
func (ptuo *ProviderTemplateUpdateOne) SetActive(b bool) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetActive(b)
	return ptuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableActive(b *bool) *ProviderTemplateUpdateOne {
	if b != nil {
		ptuo.SetActive(*b)
	}
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProviderTemplateUpdateOne) SetDescription(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableDescription(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProviderTemplateUpdateOne) ClearDescription() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetConfigTemplate sets the "config_template" field.
func (ptuo *ProviderTemplateUpdateOne) SetConfigTemplate(m map[string]interface{}) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetConfigTemplate(m)
	return ptuo
}

// SetRequiredFields sets the "required_fields" field.
func (ptuo *ProviderTemplateUpdateOne) SetRequiredFields(s []string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetRequiredFields(s)
	return ptuo
}

// AppendRequiredFields appends s to the "required_fields" field.
func (ptuo *ProviderTemplateUpdateOne) AppendRequiredFields(s []string) *ProviderTemplateUpdateOne {
	ptuo.mutation.AppendRequiredFields(s)
	return ptuo
}

// ClearRequiredFields clears the value of the "required_fields" field.
func (ptuo *ProviderTemplateUpdateOne) ClearRequiredFields() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearRequiredFields()
	return ptuo
}

// SetSupportedFeatures sets the "supported_features" field.
func (ptuo *ProviderTemplateUpdateOne) SetSupportedFeatures(s []string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetSupportedFeatures(s)
	return ptuo
}

// AppendSupportedFeatures appends s to the "supported_features" field.
func (ptuo *ProviderTemplateUpdateOne) AppendSupportedFeatures(s []string) *ProviderTemplateUpdateOne {
	ptuo.mutation.AppendSupportedFeatures(s)
	return ptuo
}

// ClearSupportedFeatures clears the value of the "supported_features" field.
func (ptuo *ProviderTemplateUpdateOne) ClearSupportedFeatures() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearSupportedFeatures()
	return ptuo
}

// SetDocumentationURL sets the "documentation_url" field.
func (ptuo *ProviderTemplateUpdateOne) SetDocumentationURL(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetDocumentationURL(s)
	return ptuo
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableDocumentationURL(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetDocumentationURL(*s)
	}
	return ptuo
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (ptuo *ProviderTemplateUpdateOne) ClearDocumentationURL() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearDocumentationURL()
	return ptuo
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (ptuo *ProviderTemplateUpdateOne) SetSetupGuideURL(s string) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetSetupGuideURL(s)
	return ptuo
}

// SetNillableSetupGuideURL sets the "setup_guide_url" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableSetupGuideURL(s *string) *ProviderTemplateUpdateOne {
	if s != nil {
		ptuo.SetSetupGuideURL(*s)
	}
	return ptuo
}

// ClearSetupGuideURL clears the value of the "setup_guide_url" field.
func (ptuo *ProviderTemplateUpdateOne) ClearSetupGuideURL() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearSetupGuideURL()
	return ptuo
}

// SetUsageCount sets the "usage_count" field.
func (ptuo *ProviderTemplateUpdateOne) SetUsageCount(i int) *ProviderTemplateUpdateOne {
	ptuo.mutation.ResetUsageCount()
	ptuo.mutation.SetUsageCount(i)
	return ptuo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableUsageCount(i *int) *ProviderTemplateUpdateOne {
	if i != nil {
		ptuo.SetUsageCount(*i)
	}
	return ptuo
}

// AddUsageCount adds i to the "usage_count" field.
func (ptuo *ProviderTemplateUpdateOne) AddUsageCount(i int) *ProviderTemplateUpdateOne {
	ptuo.mutation.AddUsageCount(i)
	return ptuo
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (ptuo *ProviderTemplateUpdateOne) SetAverageSetupTime(f float64) *ProviderTemplateUpdateOne {
	ptuo.mutation.ResetAverageSetupTime()
	ptuo.mutation.SetAverageSetupTime(f)
	return ptuo
}

// SetNillableAverageSetupTime sets the "average_setup_time" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableAverageSetupTime(f *float64) *ProviderTemplateUpdateOne {
	if f != nil {
		ptuo.SetAverageSetupTime(*f)
	}
	return ptuo
}

// AddAverageSetupTime adds f to the "average_setup_time" field.
func (ptuo *ProviderTemplateUpdateOne) AddAverageSetupTime(f float64) *ProviderTemplateUpdateOne {
	ptuo.mutation.AddAverageSetupTime(f)
	return ptuo
}

// ClearAverageSetupTime clears the value of the "average_setup_time" field.
func (ptuo *ProviderTemplateUpdateOne) ClearAverageSetupTime() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearAverageSetupTime()
	return ptuo
}

// SetSuccessRate sets the "success_rate" field.
func (ptuo *ProviderTemplateUpdateOne) SetSuccessRate(f float64) *ProviderTemplateUpdateOne {
	ptuo.mutation.ResetSuccessRate()
	ptuo.mutation.SetSuccessRate(f)
	return ptuo
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillableSuccessRate(f *float64) *ProviderTemplateUpdateOne {
	if f != nil {
		ptuo.SetSuccessRate(*f)
	}
	return ptuo
}

// AddSuccessRate adds f to the "success_rate" field.
func (ptuo *ProviderTemplateUpdateOne) AddSuccessRate(f float64) *ProviderTemplateUpdateOne {
	ptuo.mutation.AddSuccessRate(f)
	return ptuo
}

// SetPopularityRank sets the "popularity_rank" field.
func (ptuo *ProviderTemplateUpdateOne) SetPopularityRank(i int) *ProviderTemplateUpdateOne {
	ptuo.mutation.ResetPopularityRank()
	ptuo.mutation.SetPopularityRank(i)
	return ptuo
}

// SetNillablePopularityRank sets the "popularity_rank" field if the given value is not nil.
func (ptuo *ProviderTemplateUpdateOne) SetNillablePopularityRank(i *int) *ProviderTemplateUpdateOne {
	if i != nil {
		ptuo.SetPopularityRank(*i)
	}
	return ptuo
}

// AddPopularityRank adds i to the "popularity_rank" field.
func (ptuo *ProviderTemplateUpdateOne) AddPopularityRank(i int) *ProviderTemplateUpdateOne {
	ptuo.mutation.AddPopularityRank(i)
	return ptuo
}

// SetMetadata sets the "metadata" field.
func (ptuo *ProviderTemplateUpdateOne) SetMetadata(m map[string]interface{}) *ProviderTemplateUpdateOne {
	ptuo.mutation.SetMetadata(m)
	return ptuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ptuo *ProviderTemplateUpdateOne) ClearMetadata() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearMetadata()
	return ptuo
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ptuo *ProviderTemplateUpdateOne) AddOrganizationProviderIDs(ids ...xid.ID) *ProviderTemplateUpdateOne {
	ptuo.mutation.AddOrganizationProviderIDs(ids...)
	return ptuo
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ptuo *ProviderTemplateUpdateOne) AddOrganizationProviders(o ...*OrganizationProvider) *ProviderTemplateUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptuo.AddOrganizationProviderIDs(ids...)
}

// Mutation returns the ProviderTemplateMutation object of the builder.
func (ptuo *ProviderTemplateUpdateOne) Mutation() *ProviderTemplateMutation {
	return ptuo.mutation
}

// ClearOrganizationProviders clears all "organization_providers" edges to the OrganizationProvider entity.
func (ptuo *ProviderTemplateUpdateOne) ClearOrganizationProviders() *ProviderTemplateUpdateOne {
	ptuo.mutation.ClearOrganizationProviders()
	return ptuo
}

// RemoveOrganizationProviderIDs removes the "organization_providers" edge to OrganizationProvider entities by IDs.
func (ptuo *ProviderTemplateUpdateOne) RemoveOrganizationProviderIDs(ids ...xid.ID) *ProviderTemplateUpdateOne {
	ptuo.mutation.RemoveOrganizationProviderIDs(ids...)
	return ptuo
}

// RemoveOrganizationProviders removes "organization_providers" edges to OrganizationProvider entities.
func (ptuo *ProviderTemplateUpdateOne) RemoveOrganizationProviders(o ...*OrganizationProvider) *ProviderTemplateUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptuo.RemoveOrganizationProviderIDs(ids...)
}

// Where appends a list predicates to the ProviderTemplateUpdate builder.
func (ptuo *ProviderTemplateUpdateOne) Where(ps ...predicate.ProviderTemplate) *ProviderTemplateUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProviderTemplateUpdateOne) Select(field string, fields ...string) *ProviderTemplateUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProviderTemplate entity.
func (ptuo *ProviderTemplateUpdateOne) Save(ctx context.Context) (*ProviderTemplate, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProviderTemplateUpdateOne) SaveX(ctx context.Context) *ProviderTemplate {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProviderTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProviderTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProviderTemplateUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := providertemplate.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProviderTemplateUpdateOne) check() error {
	if v, ok := ptuo.mutation.Key(); ok {
		if err := providertemplate.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.key": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Name(); ok {
		if err := providertemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.DisplayName(); ok {
		if err := providertemplate.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.display_name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.GetType(); ok {
		if err := providertemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.type": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Protocol(); ok {
		if err := providertemplate.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.protocol": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptuo *ProviderTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderTemplateUpdateOne {
	ptuo.modifiers = append(ptuo.modifiers, modifiers...)
	return ptuo
}

func (ptuo *ProviderTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ProviderTemplate, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providertemplate.Table, providertemplate.Columns, sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providertemplate.FieldID)
		for _, f := range fields {
			if !providertemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(providertemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.DeletedAt(); ok {
		_spec.SetField(providertemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if ptuo.mutation.DeletedAtCleared() {
		_spec.ClearField(providertemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.Key(); ok {
		_spec.SetField(providertemplate.FieldKey, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(providertemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.DisplayName(); ok {
		_spec.SetField(providertemplate.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.SetField(providertemplate.FieldType, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Protocol(); ok {
		_spec.SetField(providertemplate.FieldProtocol, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.IconURL(); ok {
		_spec.SetField(providertemplate.FieldIconURL, field.TypeString, value)
	}
	if ptuo.mutation.IconURLCleared() {
		_spec.ClearField(providertemplate.FieldIconURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.Category(); ok {
		_spec.SetField(providertemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Popular(); ok {
		_spec.SetField(providertemplate.FieldPopular, field.TypeBool, value)
	}
	if value, ok := ptuo.mutation.Active(); ok {
		_spec.SetField(providertemplate.FieldActive, field.TypeBool, value)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(providertemplate.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(providertemplate.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.ConfigTemplate(); ok {
		_spec.SetField(providertemplate.FieldConfigTemplate, field.TypeJSON, value)
	}
	if value, ok := ptuo.mutation.RequiredFields(); ok {
		_spec.SetField(providertemplate.FieldRequiredFields, field.TypeJSON, value)
	}
	if value, ok := ptuo.mutation.AppendedRequiredFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, providertemplate.FieldRequiredFields, value)
		})
	}
	if ptuo.mutation.RequiredFieldsCleared() {
		_spec.ClearField(providertemplate.FieldRequiredFields, field.TypeJSON)
	}
	if value, ok := ptuo.mutation.SupportedFeatures(); ok {
		_spec.SetField(providertemplate.FieldSupportedFeatures, field.TypeJSON, value)
	}
	if value, ok := ptuo.mutation.AppendedSupportedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, providertemplate.FieldSupportedFeatures, value)
		})
	}
	if ptuo.mutation.SupportedFeaturesCleared() {
		_spec.ClearField(providertemplate.FieldSupportedFeatures, field.TypeJSON)
	}
	if value, ok := ptuo.mutation.DocumentationURL(); ok {
		_spec.SetField(providertemplate.FieldDocumentationURL, field.TypeString, value)
	}
	if ptuo.mutation.DocumentationURLCleared() {
		_spec.ClearField(providertemplate.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.SetupGuideURL(); ok {
		_spec.SetField(providertemplate.FieldSetupGuideURL, field.TypeString, value)
	}
	if ptuo.mutation.SetupGuideURLCleared() {
		_spec.ClearField(providertemplate.FieldSetupGuideURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.UsageCount(); ok {
		_spec.SetField(providertemplate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedUsageCount(); ok {
		_spec.AddField(providertemplate.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AverageSetupTime(); ok {
		_spec.SetField(providertemplate.FieldAverageSetupTime, field.TypeFloat64, value)
	}
	if value, ok := ptuo.mutation.AddedAverageSetupTime(); ok {
		_spec.AddField(providertemplate.FieldAverageSetupTime, field.TypeFloat64, value)
	}
	if ptuo.mutation.AverageSetupTimeCleared() {
		_spec.ClearField(providertemplate.FieldAverageSetupTime, field.TypeFloat64)
	}
	if value, ok := ptuo.mutation.SuccessRate(); ok {
		_spec.SetField(providertemplate.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := ptuo.mutation.AddedSuccessRate(); ok {
		_spec.AddField(providertemplate.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := ptuo.mutation.PopularityRank(); ok {
		_spec.SetField(providertemplate.FieldPopularityRank, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedPopularityRank(); ok {
		_spec.AddField(providertemplate.FieldPopularityRank, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.Metadata(); ok {
		_spec.SetField(providertemplate.FieldMetadata, field.TypeJSON, value)
	}
	if ptuo.mutation.MetadataCleared() {
		_spec.ClearField(providertemplate.FieldMetadata, field.TypeJSON)
	}
	if ptuo.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedOrganizationProvidersIDs(); len(nodes) > 0 && !ptuo.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptuo.modifiers...)
	_node = &ProviderTemplate{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
