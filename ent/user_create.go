// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/mfa"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/passkey"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/verification"
	"github.com/xraph/frank/pkg/model"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstName(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstName(*s)
	}
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastName(s *string) *UserCreate {
	if s != nil {
		uc.SetLastName(*s)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetUsername(*s)
	}
	return uc
}

// SetPasswordHash sets the "password_hash" field.
func (uc *UserCreate) SetPasswordHash(s string) *UserCreate {
	uc.mutation.SetPasswordHash(s)
	return uc
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uc *UserCreate) SetNillablePasswordHash(s *string) *UserCreate {
	if s != nil {
		uc.SetPasswordHash(*s)
	}
	return uc
}

// SetEmailVerified sets the "email_verified" field.
func (uc *UserCreate) SetEmailVerified(b bool) *UserCreate {
	uc.mutation.SetEmailVerified(b)
	return uc
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetEmailVerified(*b)
	}
	return uc
}

// SetPhoneVerified sets the "phone_verified" field.
func (uc *UserCreate) SetPhoneVerified(b bool) *UserCreate {
	uc.mutation.SetPhoneVerified(b)
	return uc
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetPhoneVerified(*b)
	}
	return uc
}

// SetActive sets the "active" field.
func (uc *UserCreate) SetActive(b bool) *UserCreate {
	uc.mutation.SetActive(b)
	return uc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uc *UserCreate) SetNillableActive(b *bool) *UserCreate {
	if b != nil {
		uc.SetActive(*b)
	}
	return uc
}

// SetBlocked sets the "blocked" field.
func (uc *UserCreate) SetBlocked(b bool) *UserCreate {
	uc.mutation.SetBlocked(b)
	return uc
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (uc *UserCreate) SetNillableBlocked(b *bool) *UserCreate {
	if b != nil {
		uc.SetBlocked(*b)
	}
	return uc
}

// SetLastLogin sets the "last_login" field.
func (uc *UserCreate) SetLastLogin(t time.Time) *UserCreate {
	uc.mutation.SetLastLogin(t)
	return uc
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLogin(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLogin(*t)
	}
	return uc
}

// SetLastPasswordChange sets the "last_password_change" field.
func (uc *UserCreate) SetLastPasswordChange(t time.Time) *UserCreate {
	uc.mutation.SetLastPasswordChange(t)
	return uc
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastPasswordChange(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastPasswordChange(*t)
	}
	return uc
}

// SetMetadata sets the "metadata" field.
func (uc *UserCreate) SetMetadata(m map[string]interface{}) *UserCreate {
	uc.mutation.SetMetadata(m)
	return uc
}

// SetProfileImageURL sets the "profile_image_url" field.
func (uc *UserCreate) SetProfileImageURL(s string) *UserCreate {
	uc.mutation.SetProfileImageURL(s)
	return uc
}

// SetNillableProfileImageURL sets the "profile_image_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableProfileImageURL(s *string) *UserCreate {
	if s != nil {
		uc.SetProfileImageURL(*s)
	}
	return uc
}

// SetLocale sets the "locale" field.
func (uc *UserCreate) SetLocale(s string) *UserCreate {
	uc.mutation.SetLocale(s)
	return uc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocale(s *string) *UserCreate {
	if s != nil {
		uc.SetLocale(*s)
	}
	return uc
}

// SetTimezone sets the "timezone" field.
func (uc *UserCreate) SetTimezone(s string) *UserCreate {
	uc.mutation.SetTimezone(s)
	return uc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uc *UserCreate) SetNillableTimezone(s *string) *UserCreate {
	if s != nil {
		uc.SetTimezone(*s)
	}
	return uc
}

// SetUserType sets the "user_type" field.
func (uc *UserCreate) SetUserType(mt model.UserType) *UserCreate {
	uc.mutation.SetUserType(mt)
	return uc
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uc *UserCreate) SetNillableUserType(mt *model.UserType) *UserCreate {
	if mt != nil {
		uc.SetUserType(*mt)
	}
	return uc
}

// SetOrganizationID sets the "organization_id" field.
func (uc *UserCreate) SetOrganizationID(x xid.ID) *UserCreate {
	uc.mutation.SetOrganizationID(x)
	return uc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableOrganizationID(x *xid.ID) *UserCreate {
	if x != nil {
		uc.SetOrganizationID(*x)
	}
	return uc
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (uc *UserCreate) SetPrimaryOrganizationID(x xid.ID) *UserCreate {
	uc.mutation.SetPrimaryOrganizationID(x)
	return uc
}

// SetNillablePrimaryOrganizationID sets the "primary_organization_id" field if the given value is not nil.
func (uc *UserCreate) SetNillablePrimaryOrganizationID(x *xid.ID) *UserCreate {
	if x != nil {
		uc.SetPrimaryOrganizationID(*x)
	}
	return uc
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (uc *UserCreate) SetIsPlatformAdmin(b bool) *UserCreate {
	uc.mutation.SetIsPlatformAdmin(b)
	return uc
}

// SetNillableIsPlatformAdmin sets the "is_platform_admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsPlatformAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsPlatformAdmin(*b)
	}
	return uc
}

// SetAuthProvider sets the "auth_provider" field.
func (uc *UserCreate) SetAuthProvider(s string) *UserCreate {
	uc.mutation.SetAuthProvider(s)
	return uc
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uc *UserCreate) SetNillableAuthProvider(s *string) *UserCreate {
	if s != nil {
		uc.SetAuthProvider(*s)
	}
	return uc
}

// SetExternalID sets the "external_id" field.
func (uc *UserCreate) SetExternalID(s string) *UserCreate {
	uc.mutation.SetExternalID(s)
	return uc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableExternalID(s *string) *UserCreate {
	if s != nil {
		uc.SetExternalID(*s)
	}
	return uc
}

// SetCustomerID sets the "customer_id" field.
func (uc *UserCreate) SetCustomerID(s string) *UserCreate {
	uc.mutation.SetCustomerID(s)
	return uc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCustomerID(s *string) *UserCreate {
	if s != nil {
		uc.SetCustomerID(*s)
	}
	return uc
}

// SetCustomAttributes sets the "custom_attributes" field.
func (uc *UserCreate) SetCustomAttributes(m map[string]interface{}) *UserCreate {
	uc.mutation.SetCustomAttributes(m)
	return uc
}

// SetCreatedBy sets the "created_by" field.
func (uc *UserCreate) SetCreatedBy(s string) *UserCreate {
	uc.mutation.SetCreatedBy(s)
	return uc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedBy(s *string) *UserCreate {
	if s != nil {
		uc.SetCreatedBy(*s)
	}
	return uc
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (uc *UserCreate) SetPasswordResetTokenExpires(t time.Time) *UserCreate {
	uc.mutation.SetPasswordResetTokenExpires(t)
	return uc
}

// SetNillablePasswordResetTokenExpires sets the "password_reset_token_expires" field if the given value is not nil.
func (uc *UserCreate) SetNillablePasswordResetTokenExpires(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetPasswordResetTokenExpires(*t)
	}
	return uc
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (uc *UserCreate) SetPasswordResetToken(s string) *UserCreate {
	uc.mutation.SetPasswordResetToken(s)
	return uc
}

// SetNillablePasswordResetToken sets the "password_reset_token" field if the given value is not nil.
func (uc *UserCreate) SetNillablePasswordResetToken(s *string) *UserCreate {
	if s != nil {
		uc.SetPasswordResetToken(*s)
	}
	return uc
}

// SetLoginCount sets the "login_count" field.
func (uc *UserCreate) SetLoginCount(i int) *UserCreate {
	uc.mutation.SetLoginCount(i)
	return uc
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (uc *UserCreate) SetNillableLoginCount(i *int) *UserCreate {
	if i != nil {
		uc.SetLoginCount(*i)
	}
	return uc
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uc *UserCreate) SetLastLoginIP(s string) *UserCreate {
	uc.mutation.SetLastLoginIP(s)
	return uc
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginIP(s *string) *UserCreate {
	if s != nil {
		uc.SetLastLoginIP(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(x xid.ID) *UserCreate {
	uc.mutation.SetID(x)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(x *xid.ID) *UserCreate {
	if x != nil {
		uc.SetID(*x)
	}
	return uc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uc *UserCreate) SetOrganization(o *Organization) *UserCreate {
	return uc.SetOrganizationID(o.ID)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (uc *UserCreate) AddMembershipIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddMembershipIDs(ids...)
	return uc
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (uc *UserCreate) AddMemberships(m ...*Membership) *UserCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMembershipIDs(ids...)
}

// AddSentInvitationIDs adds the "sent_invitations" edge to the Membership entity by IDs.
func (uc *UserCreate) AddSentInvitationIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddSentInvitationIDs(ids...)
	return uc
}

// AddSentInvitations adds the "sent_invitations" edges to the Membership entity.
func (uc *UserCreate) AddSentInvitations(m ...*Membership) *UserCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddSentInvitationIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uc *UserCreate) AddSessionIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddSessionIDs(ids...)
	return uc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uc *UserCreate) AddSessions(s ...*Session) *UserCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSessionIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uc *UserCreate) AddAPIKeyIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddAPIKeyIDs(ids...)
	return uc
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uc *UserCreate) AddAPIKeys(a ...*ApiKey) *UserCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAPIKeyIDs(ids...)
}

// AddMfaMethodIDs adds the "mfa_methods" edge to the MFA entity by IDs.
func (uc *UserCreate) AddMfaMethodIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddMfaMethodIDs(ids...)
	return uc
}

// AddMfaMethods adds the "mfa_methods" edges to the MFA entity.
func (uc *UserCreate) AddMfaMethods(m ...*MFA) *UserCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddMfaMethodIDs(ids...)
}

// AddPasskeyIDs adds the "passkeys" edge to the Passkey entity by IDs.
func (uc *UserCreate) AddPasskeyIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddPasskeyIDs(ids...)
	return uc
}

// AddPasskeys adds the "passkeys" edges to the Passkey entity.
func (uc *UserCreate) AddPasskeys(p ...*Passkey) *UserCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPasskeyIDs(ids...)
}

// AddOauthTokenIDs adds the "oauth_tokens" edge to the OAuthToken entity by IDs.
func (uc *UserCreate) AddOauthTokenIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddOauthTokenIDs(ids...)
	return uc
}

// AddOauthTokens adds the "oauth_tokens" edges to the OAuthToken entity.
func (uc *UserCreate) AddOauthTokens(o ...*OAuthToken) *UserCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOauthTokenIDs(ids...)
}

// AddOauthAuthorizationIDs adds the "oauth_authorizations" edge to the OAuthAuthorization entity by IDs.
func (uc *UserCreate) AddOauthAuthorizationIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddOauthAuthorizationIDs(ids...)
	return uc
}

// AddOauthAuthorizations adds the "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uc *UserCreate) AddOauthAuthorizations(o ...*OAuthAuthorization) *UserCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOauthAuthorizationIDs(ids...)
}

// AddVerificationIDs adds the "verifications" edge to the Verification entity by IDs.
func (uc *UserCreate) AddVerificationIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddVerificationIDs(ids...)
	return uc
}

// AddVerifications adds the "verifications" edges to the Verification entity.
func (uc *UserCreate) AddVerifications(v ...*Verification) *UserCreate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVerificationIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uc *UserCreate) AddUserRoleIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddUserRoleIDs(ids...)
	return uc
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uc *UserCreate) AddUserRoles(u ...*UserRole) *UserCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserRoleIDs(ids...)
}

// AddUserPermissionIDs adds the "user_permissions" edge to the UserPermission entity by IDs.
func (uc *UserCreate) AddUserPermissionIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddUserPermissionIDs(ids...)
	return uc
}

// AddUserPermissions adds the "user_permissions" edges to the UserPermission entity.
func (uc *UserCreate) AddUserPermissions(u ...*UserPermission) *UserCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserPermissionIDs(ids...)
}

// AddSystemRoleIDs adds the "system_roles" edge to the Role entity by IDs.
func (uc *UserCreate) AddSystemRoleIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddSystemRoleIDs(ids...)
	return uc
}

// AddSystemRoles adds the "system_roles" edges to the Role entity.
func (uc *UserCreate) AddSystemRoles(r ...*Role) *UserCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddSystemRoleIDs(ids...)
}

// AddAssignedUserRoleIDs adds the "assigned_user_roles" edge to the UserRole entity by IDs.
func (uc *UserCreate) AddAssignedUserRoleIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddAssignedUserRoleIDs(ids...)
	return uc
}

// AddAssignedUserRoles adds the "assigned_user_roles" edges to the UserRole entity.
func (uc *UserCreate) AddAssignedUserRoles(u ...*UserRole) *UserCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddAssignedUserRoleIDs(ids...)
}

// AddAssignedUserPermissionIDs adds the "assigned_user_permissions" edge to the UserPermission entity by IDs.
func (uc *UserCreate) AddAssignedUserPermissionIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddAssignedUserPermissionIDs(ids...)
	return uc
}

// AddAssignedUserPermissions adds the "assigned_user_permissions" edges to the UserPermission entity.
func (uc *UserCreate) AddAssignedUserPermissions(u ...*UserPermission) *UserCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddAssignedUserPermissionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (uc *UserCreate) AddAuditLogIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddAuditLogIDs(ids...)
	return uc
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (uc *UserCreate) AddAuditLogs(a ...*Audit) *UserCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAuditLogIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (uc *UserCreate) AddActivityIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddActivityIDs(ids...)
	return uc
}

// AddActivities adds the "activities" edges to the Activity entity.
func (uc *UserCreate) AddActivities(a ...*Activity) *UserCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddActivityIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		v := user.DefaultEmailVerified
		uc.mutation.SetEmailVerified(v)
	}
	if _, ok := uc.mutation.PhoneVerified(); !ok {
		v := user.DefaultPhoneVerified
		uc.mutation.SetPhoneVerified(v)
	}
	if _, ok := uc.mutation.Active(); !ok {
		v := user.DefaultActive
		uc.mutation.SetActive(v)
	}
	if _, ok := uc.mutation.Blocked(); !ok {
		v := user.DefaultBlocked
		uc.mutation.SetBlocked(v)
	}
	if _, ok := uc.mutation.Locale(); !ok {
		v := user.DefaultLocale
		uc.mutation.SetLocale(v)
	}
	if _, ok := uc.mutation.UserType(); !ok {
		v := user.DefaultUserType
		uc.mutation.SetUserType(v)
	}
	if _, ok := uc.mutation.IsPlatformAdmin(); !ok {
		v := user.DefaultIsPlatformAdmin
		uc.mutation.SetIsPlatformAdmin(v)
	}
	if _, ok := uc.mutation.AuthProvider(); !ok {
		v := user.DefaultAuthProvider
		uc.mutation.SetAuthProvider(v)
	}
	if _, ok := uc.mutation.LoginCount(); !ok {
		v := user.DefaultLoginCount
		uc.mutation.SetLoginCount(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		return &ValidationError{Name: "email_verified", err: errors.New(`ent: missing required field "User.email_verified"`)}
	}
	if _, ok := uc.mutation.PhoneVerified(); !ok {
		return &ValidationError{Name: "phone_verified", err: errors.New(`ent: missing required field "User.phone_verified"`)}
	}
	if _, ok := uc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "User.active"`)}
	}
	if _, ok := uc.mutation.Blocked(); !ok {
		return &ValidationError{Name: "blocked", err: errors.New(`ent: missing required field "User.blocked"`)}
	}
	if _, ok := uc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "User.locale"`)}
	}
	if _, ok := uc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "User.user_type"`)}
	}
	if v, ok := uc.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsPlatformAdmin(); !ok {
		return &ValidationError{Name: "is_platform_admin", err: errors.New(`ent: missing required field "User.is_platform_admin"`)}
	}
	if _, ok := uc.mutation.AuthProvider(); !ok {
		return &ValidationError{Name: "auth_provider", err: errors.New(`ent: missing required field "User.auth_provider"`)}
	}
	if _, ok := uc.mutation.LoginCount(); !ok {
		return &ValidationError{Name: "login_count", err: errors.New(`ent: missing required field "User.login_count"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := uc.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := uc.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
		_node.PhoneVerified = value
	}
	if value, ok := uc.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := uc.mutation.Blocked(); ok {
		_spec.SetField(user.FieldBlocked, field.TypeBool, value)
		_node.Blocked = value
	}
	if value, ok := uc.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
		_node.LastLogin = &value
	}
	if value, ok := uc.mutation.LastPasswordChange(); ok {
		_spec.SetField(user.FieldLastPasswordChange, field.TypeTime, value)
		_node.LastPasswordChange = &value
	}
	if value, ok := uc.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := uc.mutation.ProfileImageURL(); ok {
		_spec.SetField(user.FieldProfileImageURL, field.TypeString, value)
		_node.ProfileImageURL = value
	}
	if value, ok := uc.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := uc.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := uc.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
		_node.UserType = value
	}
	if value, ok := uc.mutation.PrimaryOrganizationID(); ok {
		_spec.SetField(user.FieldPrimaryOrganizationID, field.TypeString, value)
		_node.PrimaryOrganizationID = value
	}
	if value, ok := uc.mutation.IsPlatformAdmin(); ok {
		_spec.SetField(user.FieldIsPlatformAdmin, field.TypeBool, value)
		_node.IsPlatformAdmin = value
	}
	if value, ok := uc.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeString, value)
		_node.AuthProvider = value
	}
	if value, ok := uc.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := uc.mutation.CustomerID(); ok {
		_spec.SetField(user.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := uc.mutation.CustomAttributes(); ok {
		_spec.SetField(user.FieldCustomAttributes, field.TypeJSON, value)
		_node.CustomAttributes = value
	}
	if value, ok := uc.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := uc.mutation.PasswordResetTokenExpires(); ok {
		_spec.SetField(user.FieldPasswordResetTokenExpires, field.TypeTime, value)
		_node.PasswordResetTokenExpires = &value
	}
	if value, ok := uc.mutation.PasswordResetToken(); ok {
		_spec.SetField(user.FieldPasswordResetToken, field.TypeString, value)
		_node.PasswordResetToken = value
	}
	if value, ok := uc.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
		_node.LoginCount = value
	}
	if value, ok := uc.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = value
	}
	if nodes := uc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SentInvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MfaMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PasskeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OauthTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OauthAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.VerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SystemRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AssignedUserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AssignedUserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsert) SetPhoneNumber(v string) *UserUpsert {
	u.Set(user.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneNumber() *UserUpsert {
	u.SetExcluded(user.FieldPhoneNumber)
	return u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsert) ClearPhoneNumber() *UserUpsert {
	u.SetNull(user.FieldPhoneNumber)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsert) SetFirstName(v string) *UserUpsert {
	u.Set(user.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateFirstName() *UserUpsert {
	u.SetExcluded(user.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsert) ClearFirstName() *UserUpsert {
	u.SetNull(user.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *UserUpsert) SetLastName(v string) *UserUpsert {
	u.Set(user.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastName() *UserUpsert {
	u.SetExcluded(user.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsert) ClearLastName() *UserUpsert {
	u.SetNull(user.FieldLastName)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsert) ClearUsername() *UserUpsert {
	u.SetNull(user.FieldUsername)
	return u
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsert) SetPasswordHash(v string) *UserUpsert {
	u.Set(user.FieldPasswordHash, v)
	return u
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordHash() *UserUpsert {
	u.SetExcluded(user.FieldPasswordHash)
	return u
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsert) ClearPasswordHash() *UserUpsert {
	u.SetNull(user.FieldPasswordHash)
	return u
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsert) SetEmailVerified(v bool) *UserUpsert {
	u.Set(user.FieldEmailVerified, v)
	return u
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerified() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerified)
	return u
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsert) SetPhoneVerified(v bool) *UserUpsert {
	u.Set(user.FieldPhoneVerified, v)
	return u
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneVerified() *UserUpsert {
	u.SetExcluded(user.FieldPhoneVerified)
	return u
}

// SetActive sets the "active" field.
func (u *UserUpsert) SetActive(v bool) *UserUpsert {
	u.Set(user.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsert) UpdateActive() *UserUpsert {
	u.SetExcluded(user.FieldActive)
	return u
}

// SetBlocked sets the "blocked" field.
func (u *UserUpsert) SetBlocked(v bool) *UserUpsert {
	u.Set(user.FieldBlocked, v)
	return u
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *UserUpsert) UpdateBlocked() *UserUpsert {
	u.SetExcluded(user.FieldBlocked)
	return u
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsert) SetLastLogin(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLogin, v)
	return u
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLogin() *UserUpsert {
	u.SetExcluded(user.FieldLastLogin)
	return u
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsert) ClearLastLogin() *UserUpsert {
	u.SetNull(user.FieldLastLogin)
	return u
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *UserUpsert) SetLastPasswordChange(v time.Time) *UserUpsert {
	u.Set(user.FieldLastPasswordChange, v)
	return u
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastPasswordChange() *UserUpsert {
	u.SetExcluded(user.FieldLastPasswordChange)
	return u
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (u *UserUpsert) ClearLastPasswordChange() *UserUpsert {
	u.SetNull(user.FieldLastPasswordChange)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsert) SetMetadata(v map[string]interface{}) *UserUpsert {
	u.Set(user.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsert) UpdateMetadata() *UserUpsert {
	u.SetExcluded(user.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsert) ClearMetadata() *UserUpsert {
	u.SetNull(user.FieldMetadata)
	return u
}

// SetProfileImageURL sets the "profile_image_url" field.
func (u *UserUpsert) SetProfileImageURL(v string) *UserUpsert {
	u.Set(user.FieldProfileImageURL, v)
	return u
}

// UpdateProfileImageURL sets the "profile_image_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateProfileImageURL() *UserUpsert {
	u.SetExcluded(user.FieldProfileImageURL)
	return u
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (u *UserUpsert) ClearProfileImageURL() *UserUpsert {
	u.SetNull(user.FieldProfileImageURL)
	return u
}

// SetLocale sets the "locale" field.
func (u *UserUpsert) SetLocale(v string) *UserUpsert {
	u.Set(user.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsert) UpdateLocale() *UserUpsert {
	u.SetExcluded(user.FieldLocale)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *UserUpsert) SetTimezone(v string) *UserUpsert {
	u.Set(user.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UserUpsert) UpdateTimezone() *UserUpsert {
	u.SetExcluded(user.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *UserUpsert) ClearTimezone() *UserUpsert {
	u.SetNull(user.FieldTimezone)
	return u
}

// SetUserType sets the "user_type" field.
func (u *UserUpsert) SetUserType(v model.UserType) *UserUpsert {
	u.Set(user.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserType() *UserUpsert {
	u.SetExcluded(user.FieldUserType)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *UserUpsert) SetOrganizationID(v xid.ID) *UserUpsert {
	u.Set(user.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateOrganizationID() *UserUpsert {
	u.SetExcluded(user.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *UserUpsert) ClearOrganizationID() *UserUpsert {
	u.SetNull(user.FieldOrganizationID)
	return u
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (u *UserUpsert) SetPrimaryOrganizationID(v xid.ID) *UserUpsert {
	u.Set(user.FieldPrimaryOrganizationID, v)
	return u
}

// UpdatePrimaryOrganizationID sets the "primary_organization_id" field to the value that was provided on create.
func (u *UserUpsert) UpdatePrimaryOrganizationID() *UserUpsert {
	u.SetExcluded(user.FieldPrimaryOrganizationID)
	return u
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (u *UserUpsert) ClearPrimaryOrganizationID() *UserUpsert {
	u.SetNull(user.FieldPrimaryOrganizationID)
	return u
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (u *UserUpsert) SetIsPlatformAdmin(v bool) *UserUpsert {
	u.Set(user.FieldIsPlatformAdmin, v)
	return u
}

// UpdateIsPlatformAdmin sets the "is_platform_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsPlatformAdmin() *UserUpsert {
	u.SetExcluded(user.FieldIsPlatformAdmin)
	return u
}

// SetAuthProvider sets the "auth_provider" field.
func (u *UserUpsert) SetAuthProvider(v string) *UserUpsert {
	u.Set(user.FieldAuthProvider, v)
	return u
}

// UpdateAuthProvider sets the "auth_provider" field to the value that was provided on create.
func (u *UserUpsert) UpdateAuthProvider() *UserUpsert {
	u.SetExcluded(user.FieldAuthProvider)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsert) SetExternalID(v string) *UserUpsert {
	u.Set(user.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateExternalID() *UserUpsert {
	u.SetExcluded(user.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsert) ClearExternalID() *UserUpsert {
	u.SetNull(user.FieldExternalID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *UserUpsert) SetCustomerID(v string) *UserUpsert {
	u.Set(user.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateCustomerID() *UserUpsert {
	u.SetExcluded(user.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *UserUpsert) ClearCustomerID() *UserUpsert {
	u.SetNull(user.FieldCustomerID)
	return u
}

// SetCustomAttributes sets the "custom_attributes" field.
func (u *UserUpsert) SetCustomAttributes(v map[string]interface{}) *UserUpsert {
	u.Set(user.FieldCustomAttributes, v)
	return u
}

// UpdateCustomAttributes sets the "custom_attributes" field to the value that was provided on create.
func (u *UserUpsert) UpdateCustomAttributes() *UserUpsert {
	u.SetExcluded(user.FieldCustomAttributes)
	return u
}

// ClearCustomAttributes clears the value of the "custom_attributes" field.
func (u *UserUpsert) ClearCustomAttributes() *UserUpsert {
	u.SetNull(user.FieldCustomAttributes)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsert) SetCreatedBy(v string) *UserUpsert {
	u.Set(user.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedBy() *UserUpsert {
	u.SetExcluded(user.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsert) ClearCreatedBy() *UserUpsert {
	u.SetNull(user.FieldCreatedBy)
	return u
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (u *UserUpsert) SetPasswordResetTokenExpires(v time.Time) *UserUpsert {
	u.Set(user.FieldPasswordResetTokenExpires, v)
	return u
}

// UpdatePasswordResetTokenExpires sets the "password_reset_token_expires" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordResetTokenExpires() *UserUpsert {
	u.SetExcluded(user.FieldPasswordResetTokenExpires)
	return u
}

// ClearPasswordResetTokenExpires clears the value of the "password_reset_token_expires" field.
func (u *UserUpsert) ClearPasswordResetTokenExpires() *UserUpsert {
	u.SetNull(user.FieldPasswordResetTokenExpires)
	return u
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (u *UserUpsert) SetPasswordResetToken(v string) *UserUpsert {
	u.Set(user.FieldPasswordResetToken, v)
	return u
}

// UpdatePasswordResetToken sets the "password_reset_token" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordResetToken() *UserUpsert {
	u.SetExcluded(user.FieldPasswordResetToken)
	return u
}

// ClearPasswordResetToken clears the value of the "password_reset_token" field.
func (u *UserUpsert) ClearPasswordResetToken() *UserUpsert {
	u.SetNull(user.FieldPasswordResetToken)
	return u
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsert) SetLoginCount(v int) *UserUpsert {
	u.Set(user.FieldLoginCount, v)
	return u
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsert) UpdateLoginCount() *UserUpsert {
	u.SetExcluded(user.FieldLoginCount)
	return u
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsert) AddLoginCount(v int) *UserUpsert {
	u.Add(user.FieldLoginCount, v)
	return u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsert) SetLastLoginIP(v string) *UserUpsert {
	u.Set(user.FieldLastLoginIP, v)
	return u
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginIP() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginIP)
	return u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsert) ClearLastLoginIP() *UserUpsert {
	u.SetNull(user.FieldLastLoginIP)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertOne) SetPhoneNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertOne) ClearPhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertOne) SetFirstName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertOne) ClearFirstName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertOne) SetLastName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertOne) ClearLastName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsertOne) ClearUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsername()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsertOne) SetPasswordHash(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsertOne) ClearPasswordHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordHash()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertOne) SetEmailVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsertOne) SetPhoneVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneVerified()
	})
}

// SetActive sets the "active" field.
func (u *UserUpsertOne) SetActive(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateActive() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActive()
	})
}

// SetBlocked sets the "blocked" field.
func (u *UserUpsertOne) SetBlocked(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBlocked() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBlocked()
	})
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsertOne) SetLastLogin(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLogin(v)
	})
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLogin()
	})
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsertOne) ClearLastLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLogin()
	})
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *UserUpsertOne) SetLastPasswordChange(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastPasswordChange(v)
	})
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastPasswordChange() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastPasswordChange()
	})
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (u *UserUpsertOne) ClearLastPasswordChange() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastPasswordChange()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsertOne) SetMetadata(v map[string]interface{}) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMetadata() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsertOne) ClearMetadata() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMetadata()
	})
}

// SetProfileImageURL sets the "profile_image_url" field.
func (u *UserUpsertOne) SetProfileImageURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetProfileImageURL(v)
	})
}

// UpdateProfileImageURL sets the "profile_image_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateProfileImageURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProfileImageURL()
	})
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (u *UserUpsertOne) ClearProfileImageURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearProfileImageURL()
	})
}

// SetLocale sets the "locale" field.
func (u *UserUpsertOne) SetLocale(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLocale() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocale()
	})
}

// SetTimezone sets the "timezone" field.
func (u *UserUpsertOne) SetTimezone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTimezone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *UserUpsertOne) ClearTimezone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearTimezone()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertOne) SetUserType(v model.UserType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *UserUpsertOne) SetOrganizationID(v xid.ID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOrganizationID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *UserUpsertOne) ClearOrganizationID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOrganizationID()
	})
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (u *UserUpsertOne) SetPrimaryOrganizationID(v xid.ID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPrimaryOrganizationID(v)
	})
}

// UpdatePrimaryOrganizationID sets the "primary_organization_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePrimaryOrganizationID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrimaryOrganizationID()
	})
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (u *UserUpsertOne) ClearPrimaryOrganizationID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrimaryOrganizationID()
	})
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (u *UserUpsertOne) SetIsPlatformAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsPlatformAdmin(v)
	})
}

// UpdateIsPlatformAdmin sets the "is_platform_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsPlatformAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsPlatformAdmin()
	})
}

// SetAuthProvider sets the "auth_provider" field.
func (u *UserUpsertOne) SetAuthProvider(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAuthProvider(v)
	})
}

// UpdateAuthProvider sets the "auth_provider" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAuthProvider() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAuthProvider()
	})
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsertOne) SetExternalID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateExternalID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsertOne) ClearExternalID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearExternalID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *UserUpsertOne) SetCustomerID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCustomerID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *UserUpsertOne) ClearCustomerID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCustomerID()
	})
}

// SetCustomAttributes sets the "custom_attributes" field.
func (u *UserUpsertOne) SetCustomAttributes(v map[string]interface{}) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCustomAttributes(v)
	})
}

// UpdateCustomAttributes sets the "custom_attributes" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCustomAttributes() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCustomAttributes()
	})
}

// ClearCustomAttributes clears the value of the "custom_attributes" field.
func (u *UserUpsertOne) ClearCustomAttributes() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCustomAttributes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertOne) SetCreatedBy(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsertOne) ClearCreatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (u *UserUpsertOne) SetPasswordResetTokenExpires(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetTokenExpires(v)
	})
}

// UpdatePasswordResetTokenExpires sets the "password_reset_token_expires" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordResetTokenExpires() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetTokenExpires()
	})
}

// ClearPasswordResetTokenExpires clears the value of the "password_reset_token_expires" field.
func (u *UserUpsertOne) ClearPasswordResetTokenExpires() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordResetTokenExpires()
	})
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (u *UserUpsertOne) SetPasswordResetToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetToken(v)
	})
}

// UpdatePasswordResetToken sets the "password_reset_token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordResetToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetToken()
	})
}

// ClearPasswordResetToken clears the value of the "password_reset_token" field.
func (u *UserUpsertOne) ClearPasswordResetToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordResetToken()
	})
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsertOne) SetLoginCount(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLoginCount(v)
	})
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsertOne) AddLoginCount(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddLoginCount(v)
	})
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLoginCount() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoginCount()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertOne) SetLastLoginIP(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertOne) ClearLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertBulk) SetPhoneNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertBulk) ClearPhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetFirstName sets the "first_name" field.
func (u *UserUpsertBulk) SetFirstName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserUpsertBulk) ClearFirstName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserUpsertBulk) SetLastName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserUpsertBulk) ClearLastName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastName()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsertBulk) ClearUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsername()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserUpsertBulk) SetPasswordHash(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserUpsertBulk) ClearPasswordHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordHash()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertBulk) SetEmailVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *UserUpsertBulk) SetPhoneVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneVerified()
	})
}

// SetActive sets the "active" field.
func (u *UserUpsertBulk) SetActive(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateActive() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActive()
	})
}

// SetBlocked sets the "blocked" field.
func (u *UserUpsertBulk) SetBlocked(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBlocked() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBlocked()
	})
}

// SetLastLogin sets the "last_login" field.
func (u *UserUpsertBulk) SetLastLogin(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLogin(v)
	})
}

// UpdateLastLogin sets the "last_login" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLogin()
	})
}

// ClearLastLogin clears the value of the "last_login" field.
func (u *UserUpsertBulk) ClearLastLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLogin()
	})
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *UserUpsertBulk) SetLastPasswordChange(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastPasswordChange(v)
	})
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastPasswordChange() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastPasswordChange()
	})
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (u *UserUpsertBulk) ClearLastPasswordChange() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastPasswordChange()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsertBulk) SetMetadata(v map[string]interface{}) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMetadata() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsertBulk) ClearMetadata() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMetadata()
	})
}

// SetProfileImageURL sets the "profile_image_url" field.
func (u *UserUpsertBulk) SetProfileImageURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetProfileImageURL(v)
	})
}

// UpdateProfileImageURL sets the "profile_image_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateProfileImageURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProfileImageURL()
	})
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (u *UserUpsertBulk) ClearProfileImageURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearProfileImageURL()
	})
}

// SetLocale sets the "locale" field.
func (u *UserUpsertBulk) SetLocale(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLocale() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocale()
	})
}

// SetTimezone sets the "timezone" field.
func (u *UserUpsertBulk) SetTimezone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTimezone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *UserUpsertBulk) ClearTimezone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearTimezone()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertBulk) SetUserType(v model.UserType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *UserUpsertBulk) SetOrganizationID(v xid.ID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOrganizationID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *UserUpsertBulk) ClearOrganizationID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOrganizationID()
	})
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (u *UserUpsertBulk) SetPrimaryOrganizationID(v xid.ID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPrimaryOrganizationID(v)
	})
}

// UpdatePrimaryOrganizationID sets the "primary_organization_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePrimaryOrganizationID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrimaryOrganizationID()
	})
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (u *UserUpsertBulk) ClearPrimaryOrganizationID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPrimaryOrganizationID()
	})
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (u *UserUpsertBulk) SetIsPlatformAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsPlatformAdmin(v)
	})
}

// UpdateIsPlatformAdmin sets the "is_platform_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsPlatformAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsPlatformAdmin()
	})
}

// SetAuthProvider sets the "auth_provider" field.
func (u *UserUpsertBulk) SetAuthProvider(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAuthProvider(v)
	})
}

// UpdateAuthProvider sets the "auth_provider" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAuthProvider() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAuthProvider()
	})
}

// SetExternalID sets the "external_id" field.
func (u *UserUpsertBulk) SetExternalID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateExternalID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *UserUpsertBulk) ClearExternalID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearExternalID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *UserUpsertBulk) SetCustomerID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCustomerID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *UserUpsertBulk) ClearCustomerID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCustomerID()
	})
}

// SetCustomAttributes sets the "custom_attributes" field.
func (u *UserUpsertBulk) SetCustomAttributes(v map[string]interface{}) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCustomAttributes(v)
	})
}

// UpdateCustomAttributes sets the "custom_attributes" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCustomAttributes() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCustomAttributes()
	})
}

// ClearCustomAttributes clears the value of the "custom_attributes" field.
func (u *UserUpsertBulk) ClearCustomAttributes() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCustomAttributes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *UserUpsertBulk) SetCreatedBy(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *UserUpsertBulk) ClearCreatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (u *UserUpsertBulk) SetPasswordResetTokenExpires(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetTokenExpires(v)
	})
}

// UpdatePasswordResetTokenExpires sets the "password_reset_token_expires" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordResetTokenExpires() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetTokenExpires()
	})
}

// ClearPasswordResetTokenExpires clears the value of the "password_reset_token_expires" field.
func (u *UserUpsertBulk) ClearPasswordResetTokenExpires() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordResetTokenExpires()
	})
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (u *UserUpsertBulk) SetPasswordResetToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetToken(v)
	})
}

// UpdatePasswordResetToken sets the "password_reset_token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordResetToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetToken()
	})
}

// ClearPasswordResetToken clears the value of the "password_reset_token" field.
func (u *UserUpsertBulk) ClearPasswordResetToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordResetToken()
	})
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsertBulk) SetLoginCount(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLoginCount(v)
	})
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsertBulk) AddLoginCount(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddLoginCount(v)
	})
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLoginCount() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoginCount()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertBulk) SetLastLoginIP(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertBulk) ClearLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
