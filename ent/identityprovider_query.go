// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/predicate"
)

// IdentityProviderQuery is the builder for querying IdentityProvider entities.
type IdentityProviderQuery struct {
	config
	ctx                            *QueryContext
	order                          []identityprovider.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.IdentityProvider
	withOrganization               *OrganizationQuery
	withOrganizationProviders      *OrganizationProviderQuery
	modifiers                      []func(*sql.Selector)
	withNamedOrganizationProviders map[string]*OrganizationProviderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IdentityProviderQuery builder.
func (ipq *IdentityProviderQuery) Where(ps ...predicate.IdentityProvider) *IdentityProviderQuery {
	ipq.predicates = append(ipq.predicates, ps...)
	return ipq
}

// Limit the number of records to be returned by this query.
func (ipq *IdentityProviderQuery) Limit(limit int) *IdentityProviderQuery {
	ipq.ctx.Limit = &limit
	return ipq
}

// Offset to start from.
func (ipq *IdentityProviderQuery) Offset(offset int) *IdentityProviderQuery {
	ipq.ctx.Offset = &offset
	return ipq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ipq *IdentityProviderQuery) Unique(unique bool) *IdentityProviderQuery {
	ipq.ctx.Unique = &unique
	return ipq
}

// Order specifies how the records should be ordered.
func (ipq *IdentityProviderQuery) Order(o ...identityprovider.OrderOption) *IdentityProviderQuery {
	ipq.order = append(ipq.order, o...)
	return ipq
}

// QueryOrganization chains the current query on the "organization" edge.
func (ipq *IdentityProviderQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: ipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(identityprovider.Table, identityprovider.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, identityprovider.OrganizationTable, identityprovider.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizationProviders chains the current query on the "organization_providers" edge.
func (ipq *IdentityProviderQuery) QueryOrganizationProviders() *OrganizationProviderQuery {
	query := (&OrganizationProviderClient{config: ipq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ipq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ipq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(identityprovider.Table, identityprovider.FieldID, selector),
			sqlgraph.To(organizationprovider.Table, organizationprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, identityprovider.OrganizationProvidersTable, identityprovider.OrganizationProvidersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ipq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IdentityProvider entity from the query.
// Returns a *NotFoundError when no IdentityProvider was found.
func (ipq *IdentityProviderQuery) First(ctx context.Context) (*IdentityProvider, error) {
	nodes, err := ipq.Limit(1).All(setContextOp(ctx, ipq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{identityprovider.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ipq *IdentityProviderQuery) FirstX(ctx context.Context) *IdentityProvider {
	node, err := ipq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IdentityProvider ID from the query.
// Returns a *NotFoundError when no IdentityProvider ID was found.
func (ipq *IdentityProviderQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = ipq.Limit(1).IDs(setContextOp(ctx, ipq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{identityprovider.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ipq *IdentityProviderQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := ipq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IdentityProvider entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IdentityProvider entity is found.
// Returns a *NotFoundError when no IdentityProvider entities are found.
func (ipq *IdentityProviderQuery) Only(ctx context.Context) (*IdentityProvider, error) {
	nodes, err := ipq.Limit(2).All(setContextOp(ctx, ipq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{identityprovider.Label}
	default:
		return nil, &NotSingularError{identityprovider.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ipq *IdentityProviderQuery) OnlyX(ctx context.Context) *IdentityProvider {
	node, err := ipq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IdentityProvider ID in the query.
// Returns a *NotSingularError when more than one IdentityProvider ID is found.
// Returns a *NotFoundError when no entities are found.
func (ipq *IdentityProviderQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = ipq.Limit(2).IDs(setContextOp(ctx, ipq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{identityprovider.Label}
	default:
		err = &NotSingularError{identityprovider.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ipq *IdentityProviderQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := ipq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IdentityProviders.
func (ipq *IdentityProviderQuery) All(ctx context.Context) ([]*IdentityProvider, error) {
	ctx = setContextOp(ctx, ipq.ctx, ent.OpQueryAll)
	if err := ipq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IdentityProvider, *IdentityProviderQuery]()
	return withInterceptors[[]*IdentityProvider](ctx, ipq, qr, ipq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ipq *IdentityProviderQuery) AllX(ctx context.Context) []*IdentityProvider {
	nodes, err := ipq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IdentityProvider IDs.
func (ipq *IdentityProviderQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if ipq.ctx.Unique == nil && ipq.path != nil {
		ipq.Unique(true)
	}
	ctx = setContextOp(ctx, ipq.ctx, ent.OpQueryIDs)
	if err = ipq.Select(identityprovider.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ipq *IdentityProviderQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := ipq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ipq *IdentityProviderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ipq.ctx, ent.OpQueryCount)
	if err := ipq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ipq, querierCount[*IdentityProviderQuery](), ipq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ipq *IdentityProviderQuery) CountX(ctx context.Context) int {
	count, err := ipq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ipq *IdentityProviderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ipq.ctx, ent.OpQueryExist)
	switch _, err := ipq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ipq *IdentityProviderQuery) ExistX(ctx context.Context) bool {
	exist, err := ipq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IdentityProviderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ipq *IdentityProviderQuery) Clone() *IdentityProviderQuery {
	if ipq == nil {
		return nil
	}
	return &IdentityProviderQuery{
		config:                    ipq.config,
		ctx:                       ipq.ctx.Clone(),
		order:                     append([]identityprovider.OrderOption{}, ipq.order...),
		inters:                    append([]Interceptor{}, ipq.inters...),
		predicates:                append([]predicate.IdentityProvider{}, ipq.predicates...),
		withOrganization:          ipq.withOrganization.Clone(),
		withOrganizationProviders: ipq.withOrganizationProviders.Clone(),
		// clone intermediate query.
		sql:       ipq.sql.Clone(),
		path:      ipq.path,
		modifiers: append([]func(*sql.Selector){}, ipq.modifiers...),
	}
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (ipq *IdentityProviderQuery) WithOrganization(opts ...func(*OrganizationQuery)) *IdentityProviderQuery {
	query := (&OrganizationClient{config: ipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ipq.withOrganization = query
	return ipq
}

// WithOrganizationProviders tells the query-builder to eager-load the nodes that are connected to
// the "organization_providers" edge. The optional arguments are used to configure the query builder of the edge.
func (ipq *IdentityProviderQuery) WithOrganizationProviders(opts ...func(*OrganizationProviderQuery)) *IdentityProviderQuery {
	query := (&OrganizationProviderClient{config: ipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ipq.withOrganizationProviders = query
	return ipq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IdentityProvider.Query().
//		GroupBy(identityprovider.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ipq *IdentityProviderQuery) GroupBy(field string, fields ...string) *IdentityProviderGroupBy {
	ipq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IdentityProviderGroupBy{build: ipq}
	grbuild.flds = &ipq.ctx.Fields
	grbuild.label = identityprovider.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.IdentityProvider.Query().
//		Select(identityprovider.FieldCreatedAt).
//		Scan(ctx, &v)
func (ipq *IdentityProviderQuery) Select(fields ...string) *IdentityProviderSelect {
	ipq.ctx.Fields = append(ipq.ctx.Fields, fields...)
	sbuild := &IdentityProviderSelect{IdentityProviderQuery: ipq}
	sbuild.label = identityprovider.Label
	sbuild.flds, sbuild.scan = &ipq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IdentityProviderSelect configured with the given aggregations.
func (ipq *IdentityProviderQuery) Aggregate(fns ...AggregateFunc) *IdentityProviderSelect {
	return ipq.Select().Aggregate(fns...)
}

func (ipq *IdentityProviderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ipq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ipq); err != nil {
				return err
			}
		}
	}
	for _, f := range ipq.ctx.Fields {
		if !identityprovider.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ipq.path != nil {
		prev, err := ipq.path(ctx)
		if err != nil {
			return err
		}
		ipq.sql = prev
	}
	return nil
}

func (ipq *IdentityProviderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IdentityProvider, error) {
	var (
		nodes       = []*IdentityProvider{}
		_spec       = ipq.querySpec()
		loadedTypes = [2]bool{
			ipq.withOrganization != nil,
			ipq.withOrganizationProviders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IdentityProvider).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IdentityProvider{config: ipq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ipq.modifiers) > 0 {
		_spec.Modifiers = ipq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ipq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ipq.withOrganization; query != nil {
		if err := ipq.loadOrganization(ctx, query, nodes, nil,
			func(n *IdentityProvider, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := ipq.withOrganizationProviders; query != nil {
		if err := ipq.loadOrganizationProviders(ctx, query, nodes,
			func(n *IdentityProvider) { n.Edges.OrganizationProviders = []*OrganizationProvider{} },
			func(n *IdentityProvider, e *OrganizationProvider) {
				n.Edges.OrganizationProviders = append(n.Edges.OrganizationProviders, e)
				if !e.Edges.loadedTypes[1] {
					e.Edges.Provider = n
				}
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range ipq.withNamedOrganizationProviders {
		if err := ipq.loadOrganizationProviders(ctx, query, nodes,
			func(n *IdentityProvider) { n.appendNamedOrganizationProviders(name) },
			func(n *IdentityProvider, e *OrganizationProvider) {
				n.appendNamedOrganizationProviders(name, e)
				if !e.Edges.loadedTypes[1] {
					e.Edges.Provider = n
				}
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ipq *IdentityProviderQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*IdentityProvider, init func(*IdentityProvider), assign func(*IdentityProvider, *Organization)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*IdentityProvider)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ipq *IdentityProviderQuery) loadOrganizationProviders(ctx context.Context, query *OrganizationProviderQuery, nodes []*IdentityProvider, init func(*IdentityProvider), assign func(*IdentityProvider, *OrganizationProvider)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*IdentityProvider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organizationprovider.FieldProviderID)
	}
	query.Where(predicate.OrganizationProvider(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(identityprovider.OrganizationProvidersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProviderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "provider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ipq *IdentityProviderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ipq.querySpec()
	if len(ipq.modifiers) > 0 {
		_spec.Modifiers = ipq.modifiers
	}
	_spec.Node.Columns = ipq.ctx.Fields
	if len(ipq.ctx.Fields) > 0 {
		_spec.Unique = ipq.ctx.Unique != nil && *ipq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ipq.driver, _spec)
}

func (ipq *IdentityProviderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(identityprovider.Table, identityprovider.Columns, sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString))
	_spec.From = ipq.sql
	if unique := ipq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ipq.path != nil {
		_spec.Unique = true
	}
	if fields := ipq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identityprovider.FieldID)
		for i := range fields {
			if fields[i] != identityprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ipq.withOrganization != nil {
			_spec.Node.AddColumnOnce(identityprovider.FieldOrganizationID)
		}
	}
	if ps := ipq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ipq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ipq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ipq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ipq *IdentityProviderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ipq.driver.Dialect())
	t1 := builder.Table(identityprovider.Table)
	columns := ipq.ctx.Fields
	if len(columns) == 0 {
		columns = identityprovider.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ipq.sql != nil {
		selector = ipq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ipq.ctx.Unique != nil && *ipq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ipq.modifiers {
		m(selector)
	}
	for _, p := range ipq.predicates {
		p(selector)
	}
	for _, p := range ipq.order {
		p(selector)
	}
	if offset := ipq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ipq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ipq *IdentityProviderQuery) ForUpdate(opts ...sql.LockOption) *IdentityProviderQuery {
	if ipq.driver.Dialect() == dialect.Postgres {
		ipq.Unique(false)
	}
	ipq.modifiers = append(ipq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ipq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ipq *IdentityProviderQuery) ForShare(opts ...sql.LockOption) *IdentityProviderQuery {
	if ipq.driver.Dialect() == dialect.Postgres {
		ipq.Unique(false)
	}
	ipq.modifiers = append(ipq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ipq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ipq *IdentityProviderQuery) Modify(modifiers ...func(s *sql.Selector)) *IdentityProviderSelect {
	ipq.modifiers = append(ipq.modifiers, modifiers...)
	return ipq.Select()
}

// WithNamedOrganizationProviders tells the query-builder to eager-load the nodes that are connected to the "organization_providers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ipq *IdentityProviderQuery) WithNamedOrganizationProviders(name string, opts ...func(*OrganizationProviderQuery)) *IdentityProviderQuery {
	query := (&OrganizationProviderClient{config: ipq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ipq.withNamedOrganizationProviders == nil {
		ipq.withNamedOrganizationProviders = make(map[string]*OrganizationProviderQuery)
	}
	ipq.withNamedOrganizationProviders[name] = query
	return ipq
}

// IdentityProviderGroupBy is the group-by builder for IdentityProvider entities.
type IdentityProviderGroupBy struct {
	selector
	build *IdentityProviderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ipgb *IdentityProviderGroupBy) Aggregate(fns ...AggregateFunc) *IdentityProviderGroupBy {
	ipgb.fns = append(ipgb.fns, fns...)
	return ipgb
}

// Scan applies the selector query and scans the result into the given value.
func (ipgb *IdentityProviderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ipgb.build.ctx, ent.OpQueryGroupBy)
	if err := ipgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdentityProviderQuery, *IdentityProviderGroupBy](ctx, ipgb.build, ipgb, ipgb.build.inters, v)
}

func (ipgb *IdentityProviderGroupBy) sqlScan(ctx context.Context, root *IdentityProviderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ipgb.fns))
	for _, fn := range ipgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ipgb.flds)+len(ipgb.fns))
		for _, f := range *ipgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ipgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ipgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IdentityProviderSelect is the builder for selecting fields of IdentityProvider entities.
type IdentityProviderSelect struct {
	*IdentityProviderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ips *IdentityProviderSelect) Aggregate(fns ...AggregateFunc) *IdentityProviderSelect {
	ips.fns = append(ips.fns, fns...)
	return ips
}

// Scan applies the selector query and scans the result into the given value.
func (ips *IdentityProviderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ips.ctx, ent.OpQuerySelect)
	if err := ips.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdentityProviderQuery, *IdentityProviderSelect](ctx, ips.IdentityProviderQuery, ips, ips.inters, v)
}

func (ips *IdentityProviderSelect) sqlScan(ctx context.Context, root *IdentityProviderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ips.fns))
	for _, fn := range ips.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ips.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ips.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ips *IdentityProviderSelect) Modify(modifiers ...func(s *sql.Selector)) *IdentityProviderSelect {
	ips.modifiers = append(ips.modifiers, modifiers...)
	return ips
}
