// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/pkg/model"
)

// UserPermissionUpdate is the builder for updating UserPermission entities.
type UserPermissionUpdate struct {
	config
	hooks     []Hook
	mutation  *UserPermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserPermissionUpdate builder.
func (upu *UserPermissionUpdate) Where(ps ...predicate.UserPermission) *UserPermissionUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserPermissionUpdate) SetUpdatedAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// SetDeletedAt sets the "deleted_at" field.
func (upu *UserPermissionUpdate) SetDeletedAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetDeletedAt(t)
	return upu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableDeletedAt(t *time.Time) *UserPermissionUpdate {
	if t != nil {
		upu.SetDeletedAt(*t)
	}
	return upu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (upu *UserPermissionUpdate) ClearDeletedAt() *UserPermissionUpdate {
	upu.mutation.ClearDeletedAt()
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPermissionUpdate) SetUserID(x xid.ID) *UserPermissionUpdate {
	upu.mutation.SetUserID(x)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableUserID(x *xid.ID) *UserPermissionUpdate {
	if x != nil {
		upu.SetUserID(*x)
	}
	return upu
}

// SetPermissionID sets the "permission_id" field.
func (upu *UserPermissionUpdate) SetPermissionID(x xid.ID) *UserPermissionUpdate {
	upu.mutation.SetPermissionID(x)
	return upu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillablePermissionID(x *xid.ID) *UserPermissionUpdate {
	if x != nil {
		upu.SetPermissionID(*x)
	}
	return upu
}

// SetContextType sets the "context_type" field.
func (upu *UserPermissionUpdate) SetContextType(mt model.ContextType) *UserPermissionUpdate {
	upu.mutation.SetContextType(mt)
	return upu
}

// SetNillableContextType sets the "context_type" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableContextType(mt *model.ContextType) *UserPermissionUpdate {
	if mt != nil {
		upu.SetContextType(*mt)
	}
	return upu
}

// SetContextID sets the "context_id" field.
func (upu *UserPermissionUpdate) SetContextID(x xid.ID) *UserPermissionUpdate {
	upu.mutation.SetContextID(x)
	return upu
}

// SetNillableContextID sets the "context_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableContextID(x *xid.ID) *UserPermissionUpdate {
	if x != nil {
		upu.SetContextID(*x)
	}
	return upu
}

// ClearContextID clears the value of the "context_id" field.
func (upu *UserPermissionUpdate) ClearContextID() *UserPermissionUpdate {
	upu.mutation.ClearContextID()
	return upu
}

// SetResourceType sets the "resource_type" field.
func (upu *UserPermissionUpdate) SetResourceType(s string) *UserPermissionUpdate {
	upu.mutation.SetResourceType(s)
	return upu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableResourceType(s *string) *UserPermissionUpdate {
	if s != nil {
		upu.SetResourceType(*s)
	}
	return upu
}

// ClearResourceType clears the value of the "resource_type" field.
func (upu *UserPermissionUpdate) ClearResourceType() *UserPermissionUpdate {
	upu.mutation.ClearResourceType()
	return upu
}

// SetResourceID sets the "resource_id" field.
func (upu *UserPermissionUpdate) SetResourceID(x xid.ID) *UserPermissionUpdate {
	upu.mutation.SetResourceID(x)
	return upu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableResourceID(x *xid.ID) *UserPermissionUpdate {
	if x != nil {
		upu.SetResourceID(*x)
	}
	return upu
}

// ClearResourceID clears the value of the "resource_id" field.
func (upu *UserPermissionUpdate) ClearResourceID() *UserPermissionUpdate {
	upu.mutation.ClearResourceID()
	return upu
}

// SetPermissionType sets the "permission_type" field.
func (upu *UserPermissionUpdate) SetPermissionType(mt model.PermissionType) *UserPermissionUpdate {
	upu.mutation.SetPermissionType(mt)
	return upu
}

// SetNillablePermissionType sets the "permission_type" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillablePermissionType(mt *model.PermissionType) *UserPermissionUpdate {
	if mt != nil {
		upu.SetPermissionType(*mt)
	}
	return upu
}

// SetAssignedBy sets the "assigned_by" field.
func (upu *UserPermissionUpdate) SetAssignedBy(x xid.ID) *UserPermissionUpdate {
	upu.mutation.SetAssignedBy(x)
	return upu
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableAssignedBy(x *xid.ID) *UserPermissionUpdate {
	if x != nil {
		upu.SetAssignedBy(*x)
	}
	return upu
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (upu *UserPermissionUpdate) ClearAssignedBy() *UserPermissionUpdate {
	upu.mutation.ClearAssignedBy()
	return upu
}

// SetAssignedAt sets the "assigned_at" field.
func (upu *UserPermissionUpdate) SetAssignedAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetAssignedAt(t)
	return upu
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableAssignedAt(t *time.Time) *UserPermissionUpdate {
	if t != nil {
		upu.SetAssignedAt(*t)
	}
	return upu
}

// SetExpiresAt sets the "expires_at" field.
func (upu *UserPermissionUpdate) SetExpiresAt(t time.Time) *UserPermissionUpdate {
	upu.mutation.SetExpiresAt(t)
	return upu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableExpiresAt(t *time.Time) *UserPermissionUpdate {
	if t != nil {
		upu.SetExpiresAt(*t)
	}
	return upu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (upu *UserPermissionUpdate) ClearExpiresAt() *UserPermissionUpdate {
	upu.mutation.ClearExpiresAt()
	return upu
}

// SetActive sets the "active" field.
func (upu *UserPermissionUpdate) SetActive(b bool) *UserPermissionUpdate {
	upu.mutation.SetActive(b)
	return upu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableActive(b *bool) *UserPermissionUpdate {
	if b != nil {
		upu.SetActive(*b)
	}
	return upu
}

// SetConditions sets the "conditions" field.
func (upu *UserPermissionUpdate) SetConditions(m map[string]interface{}) *UserPermissionUpdate {
	upu.mutation.SetConditions(m)
	return upu
}

// ClearConditions clears the value of the "conditions" field.
func (upu *UserPermissionUpdate) ClearConditions() *UserPermissionUpdate {
	upu.mutation.ClearConditions()
	return upu
}

// SetReason sets the "reason" field.
func (upu *UserPermissionUpdate) SetReason(s string) *UserPermissionUpdate {
	upu.mutation.SetReason(s)
	return upu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableReason(s *string) *UserPermissionUpdate {
	if s != nil {
		upu.SetReason(*s)
	}
	return upu
}

// ClearReason clears the value of the "reason" field.
func (upu *UserPermissionUpdate) ClearReason() *UserPermissionUpdate {
	upu.mutation.ClearReason()
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPermissionUpdate) SetUser(u *User) *UserPermissionUpdate {
	return upu.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upu *UserPermissionUpdate) SetPermission(p *Permission) *UserPermissionUpdate {
	return upu.SetPermissionID(p.ID)
}

// SetAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID.
func (upu *UserPermissionUpdate) SetAssignedByUserID(id xid.ID) *UserPermissionUpdate {
	upu.mutation.SetAssignedByUserID(id)
	return upu
}

// SetNillableAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableAssignedByUserID(id *xid.ID) *UserPermissionUpdate {
	if id != nil {
		upu = upu.SetAssignedByUserID(*id)
	}
	return upu
}

// SetAssignedByUser sets the "assigned_by_user" edge to the User entity.
func (upu *UserPermissionUpdate) SetAssignedByUser(u *User) *UserPermissionUpdate {
	return upu.SetAssignedByUserID(u.ID)
}

// SetOrganizationContextID sets the "organization_context" edge to the Organization entity by ID.
func (upu *UserPermissionUpdate) SetOrganizationContextID(id xid.ID) *UserPermissionUpdate {
	upu.mutation.SetOrganizationContextID(id)
	return upu
}

// SetNillableOrganizationContextID sets the "organization_context" edge to the Organization entity by ID if the given value is not nil.
func (upu *UserPermissionUpdate) SetNillableOrganizationContextID(id *xid.ID) *UserPermissionUpdate {
	if id != nil {
		upu = upu.SetOrganizationContextID(*id)
	}
	return upu
}

// SetOrganizationContext sets the "organization_context" edge to the Organization entity.
func (upu *UserPermissionUpdate) SetOrganizationContext(o *Organization) *UserPermissionUpdate {
	return upu.SetOrganizationContextID(o.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upu *UserPermissionUpdate) Mutation() *UserPermissionMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPermissionUpdate) ClearUser() *UserPermissionUpdate {
	upu.mutation.ClearUser()
	return upu
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upu *UserPermissionUpdate) ClearPermission() *UserPermissionUpdate {
	upu.mutation.ClearPermission()
	return upu
}

// ClearAssignedByUser clears the "assigned_by_user" edge to the User entity.
func (upu *UserPermissionUpdate) ClearAssignedByUser() *UserPermissionUpdate {
	upu.mutation.ClearAssignedByUser()
	return upu
}

// ClearOrganizationContext clears the "organization_context" edge to the Organization entity.
func (upu *UserPermissionUpdate) ClearOrganizationContext() *UserPermissionUpdate {
	upu.mutation.ClearOrganizationContext()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPermissionUpdate) Save(ctx context.Context) (int, error) {
	upu.defaults()
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPermissionUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPermissionUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPermissionUpdate) defaults() {
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		v := userpermission.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPermissionUpdate) check() error {
	if v, ok := upu.mutation.UserID(); ok {
		if err := userpermission.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.user_id": %w`, err)}
		}
	}
	if v, ok := upu.mutation.PermissionID(); ok {
		if err := userpermission.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_id": %w`, err)}
		}
	}
	if v, ok := upu.mutation.ContextType(); ok {
		if err := userpermission.ContextTypeValidator(v); err != nil {
			return &ValidationError{Name: "context_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.context_type": %w`, err)}
		}
	}
	if v, ok := upu.mutation.PermissionType(); ok {
		if err := userpermission.PermissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "permission_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_type": %w`, err)}
		}
	}
	if upu.mutation.UserCleared() && len(upu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPermission.user"`)
	}
	if upu.mutation.PermissionCleared() && len(upu.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPermission.permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UserPermissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPermissionUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UserPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpermission.Table, userpermission.Columns, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userpermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := upu.mutation.DeletedAt(); ok {
		_spec.SetField(userpermission.FieldDeletedAt, field.TypeTime, value)
	}
	if upu.mutation.DeletedAtCleared() {
		_spec.ClearField(userpermission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := upu.mutation.ContextType(); ok {
		_spec.SetField(userpermission.FieldContextType, field.TypeEnum, value)
	}
	if value, ok := upu.mutation.ResourceType(); ok {
		_spec.SetField(userpermission.FieldResourceType, field.TypeString, value)
	}
	if upu.mutation.ResourceTypeCleared() {
		_spec.ClearField(userpermission.FieldResourceType, field.TypeString)
	}
	if value, ok := upu.mutation.ResourceID(); ok {
		_spec.SetField(userpermission.FieldResourceID, field.TypeString, value)
	}
	if upu.mutation.ResourceIDCleared() {
		_spec.ClearField(userpermission.FieldResourceID, field.TypeString)
	}
	if value, ok := upu.mutation.PermissionType(); ok {
		_spec.SetField(userpermission.FieldPermissionType, field.TypeEnum, value)
	}
	if value, ok := upu.mutation.AssignedAt(); ok {
		_spec.SetField(userpermission.FieldAssignedAt, field.TypeTime, value)
	}
	if value, ok := upu.mutation.ExpiresAt(); ok {
		_spec.SetField(userpermission.FieldExpiresAt, field.TypeTime, value)
	}
	if upu.mutation.ExpiresAtCleared() {
		_spec.ClearField(userpermission.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := upu.mutation.Active(); ok {
		_spec.SetField(userpermission.FieldActive, field.TypeBool, value)
	}
	if value, ok := upu.mutation.Conditions(); ok {
		_spec.SetField(userpermission.FieldConditions, field.TypeJSON, value)
	}
	if upu.mutation.ConditionsCleared() {
		_spec.ClearField(userpermission.FieldConditions, field.TypeJSON)
	}
	if value, ok := upu.mutation.Reason(); ok {
		_spec.SetField(userpermission.FieldReason, field.TypeString, value)
	}
	if upu.mutation.ReasonCleared() {
		_spec.ClearField(userpermission.FieldReason, field.TypeString)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.AssignedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.AssignedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.OrganizationContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.OrganizationContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPermissionUpdateOne is the builder for updating a single UserPermission entity.
type UserPermissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserPermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserPermissionUpdateOne) SetUpdatedAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// SetDeletedAt sets the "deleted_at" field.
func (upuo *UserPermissionUpdateOne) SetDeletedAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetDeletedAt(t)
	return upuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableDeletedAt(t *time.Time) *UserPermissionUpdateOne {
	if t != nil {
		upuo.SetDeletedAt(*t)
	}
	return upuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (upuo *UserPermissionUpdateOne) ClearDeletedAt() *UserPermissionUpdateOne {
	upuo.mutation.ClearDeletedAt()
	return upuo
}

// SetUserID sets the "user_id" field.
func (upuo *UserPermissionUpdateOne) SetUserID(x xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetUserID(x)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableUserID(x *xid.ID) *UserPermissionUpdateOne {
	if x != nil {
		upuo.SetUserID(*x)
	}
	return upuo
}

// SetPermissionID sets the "permission_id" field.
func (upuo *UserPermissionUpdateOne) SetPermissionID(x xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetPermissionID(x)
	return upuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillablePermissionID(x *xid.ID) *UserPermissionUpdateOne {
	if x != nil {
		upuo.SetPermissionID(*x)
	}
	return upuo
}

// SetContextType sets the "context_type" field.
func (upuo *UserPermissionUpdateOne) SetContextType(mt model.ContextType) *UserPermissionUpdateOne {
	upuo.mutation.SetContextType(mt)
	return upuo
}

// SetNillableContextType sets the "context_type" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableContextType(mt *model.ContextType) *UserPermissionUpdateOne {
	if mt != nil {
		upuo.SetContextType(*mt)
	}
	return upuo
}

// SetContextID sets the "context_id" field.
func (upuo *UserPermissionUpdateOne) SetContextID(x xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetContextID(x)
	return upuo
}

// SetNillableContextID sets the "context_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableContextID(x *xid.ID) *UserPermissionUpdateOne {
	if x != nil {
		upuo.SetContextID(*x)
	}
	return upuo
}

// ClearContextID clears the value of the "context_id" field.
func (upuo *UserPermissionUpdateOne) ClearContextID() *UserPermissionUpdateOne {
	upuo.mutation.ClearContextID()
	return upuo
}

// SetResourceType sets the "resource_type" field.
func (upuo *UserPermissionUpdateOne) SetResourceType(s string) *UserPermissionUpdateOne {
	upuo.mutation.SetResourceType(s)
	return upuo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableResourceType(s *string) *UserPermissionUpdateOne {
	if s != nil {
		upuo.SetResourceType(*s)
	}
	return upuo
}

// ClearResourceType clears the value of the "resource_type" field.
func (upuo *UserPermissionUpdateOne) ClearResourceType() *UserPermissionUpdateOne {
	upuo.mutation.ClearResourceType()
	return upuo
}

// SetResourceID sets the "resource_id" field.
func (upuo *UserPermissionUpdateOne) SetResourceID(x xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetResourceID(x)
	return upuo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableResourceID(x *xid.ID) *UserPermissionUpdateOne {
	if x != nil {
		upuo.SetResourceID(*x)
	}
	return upuo
}

// ClearResourceID clears the value of the "resource_id" field.
func (upuo *UserPermissionUpdateOne) ClearResourceID() *UserPermissionUpdateOne {
	upuo.mutation.ClearResourceID()
	return upuo
}

// SetPermissionType sets the "permission_type" field.
func (upuo *UserPermissionUpdateOne) SetPermissionType(mt model.PermissionType) *UserPermissionUpdateOne {
	upuo.mutation.SetPermissionType(mt)
	return upuo
}

// SetNillablePermissionType sets the "permission_type" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillablePermissionType(mt *model.PermissionType) *UserPermissionUpdateOne {
	if mt != nil {
		upuo.SetPermissionType(*mt)
	}
	return upuo
}

// SetAssignedBy sets the "assigned_by" field.
func (upuo *UserPermissionUpdateOne) SetAssignedBy(x xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetAssignedBy(x)
	return upuo
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableAssignedBy(x *xid.ID) *UserPermissionUpdateOne {
	if x != nil {
		upuo.SetAssignedBy(*x)
	}
	return upuo
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (upuo *UserPermissionUpdateOne) ClearAssignedBy() *UserPermissionUpdateOne {
	upuo.mutation.ClearAssignedBy()
	return upuo
}

// SetAssignedAt sets the "assigned_at" field.
func (upuo *UserPermissionUpdateOne) SetAssignedAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetAssignedAt(t)
	return upuo
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableAssignedAt(t *time.Time) *UserPermissionUpdateOne {
	if t != nil {
		upuo.SetAssignedAt(*t)
	}
	return upuo
}

// SetExpiresAt sets the "expires_at" field.
func (upuo *UserPermissionUpdateOne) SetExpiresAt(t time.Time) *UserPermissionUpdateOne {
	upuo.mutation.SetExpiresAt(t)
	return upuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableExpiresAt(t *time.Time) *UserPermissionUpdateOne {
	if t != nil {
		upuo.SetExpiresAt(*t)
	}
	return upuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (upuo *UserPermissionUpdateOne) ClearExpiresAt() *UserPermissionUpdateOne {
	upuo.mutation.ClearExpiresAt()
	return upuo
}

// SetActive sets the "active" field.
func (upuo *UserPermissionUpdateOne) SetActive(b bool) *UserPermissionUpdateOne {
	upuo.mutation.SetActive(b)
	return upuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableActive(b *bool) *UserPermissionUpdateOne {
	if b != nil {
		upuo.SetActive(*b)
	}
	return upuo
}

// SetConditions sets the "conditions" field.
func (upuo *UserPermissionUpdateOne) SetConditions(m map[string]interface{}) *UserPermissionUpdateOne {
	upuo.mutation.SetConditions(m)
	return upuo
}

// ClearConditions clears the value of the "conditions" field.
func (upuo *UserPermissionUpdateOne) ClearConditions() *UserPermissionUpdateOne {
	upuo.mutation.ClearConditions()
	return upuo
}

// SetReason sets the "reason" field.
func (upuo *UserPermissionUpdateOne) SetReason(s string) *UserPermissionUpdateOne {
	upuo.mutation.SetReason(s)
	return upuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableReason(s *string) *UserPermissionUpdateOne {
	if s != nil {
		upuo.SetReason(*s)
	}
	return upuo
}

// ClearReason clears the value of the "reason" field.
func (upuo *UserPermissionUpdateOne) ClearReason() *UserPermissionUpdateOne {
	upuo.mutation.ClearReason()
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) SetUser(u *User) *UserPermissionUpdateOne {
	return upuo.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upuo *UserPermissionUpdateOne) SetPermission(p *Permission) *UserPermissionUpdateOne {
	return upuo.SetPermissionID(p.ID)
}

// SetAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID.
func (upuo *UserPermissionUpdateOne) SetAssignedByUserID(id xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetAssignedByUserID(id)
	return upuo
}

// SetNillableAssignedByUserID sets the "assigned_by_user" edge to the User entity by ID if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableAssignedByUserID(id *xid.ID) *UserPermissionUpdateOne {
	if id != nil {
		upuo = upuo.SetAssignedByUserID(*id)
	}
	return upuo
}

// SetAssignedByUser sets the "assigned_by_user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) SetAssignedByUser(u *User) *UserPermissionUpdateOne {
	return upuo.SetAssignedByUserID(u.ID)
}

// SetOrganizationContextID sets the "organization_context" edge to the Organization entity by ID.
func (upuo *UserPermissionUpdateOne) SetOrganizationContextID(id xid.ID) *UserPermissionUpdateOne {
	upuo.mutation.SetOrganizationContextID(id)
	return upuo
}

// SetNillableOrganizationContextID sets the "organization_context" edge to the Organization entity by ID if the given value is not nil.
func (upuo *UserPermissionUpdateOne) SetNillableOrganizationContextID(id *xid.ID) *UserPermissionUpdateOne {
	if id != nil {
		upuo = upuo.SetOrganizationContextID(*id)
	}
	return upuo
}

// SetOrganizationContext sets the "organization_context" edge to the Organization entity.
func (upuo *UserPermissionUpdateOne) SetOrganizationContext(o *Organization) *UserPermissionUpdateOne {
	return upuo.SetOrganizationContextID(o.ID)
}

// Mutation returns the UserPermissionMutation object of the builder.
func (upuo *UserPermissionUpdateOne) Mutation() *UserPermissionMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) ClearUser() *UserPermissionUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upuo *UserPermissionUpdateOne) ClearPermission() *UserPermissionUpdateOne {
	upuo.mutation.ClearPermission()
	return upuo
}

// ClearAssignedByUser clears the "assigned_by_user" edge to the User entity.
func (upuo *UserPermissionUpdateOne) ClearAssignedByUser() *UserPermissionUpdateOne {
	upuo.mutation.ClearAssignedByUser()
	return upuo
}

// ClearOrganizationContext clears the "organization_context" edge to the Organization entity.
func (upuo *UserPermissionUpdateOne) ClearOrganizationContext() *UserPermissionUpdateOne {
	upuo.mutation.ClearOrganizationContext()
	return upuo
}

// Where appends a list predicates to the UserPermissionUpdate builder.
func (upuo *UserPermissionUpdateOne) Where(ps ...predicate.UserPermission) *UserPermissionUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPermissionUpdateOne) Select(field string, fields ...string) *UserPermissionUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPermission entity.
func (upuo *UserPermissionUpdateOne) Save(ctx context.Context) (*UserPermission, error) {
	upuo.defaults()
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPermissionUpdateOne) SaveX(ctx context.Context) *UserPermission {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPermissionUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		v := userpermission.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPermissionUpdateOne) check() error {
	if v, ok := upuo.mutation.UserID(); ok {
		if err := userpermission.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.user_id": %w`, err)}
		}
	}
	if v, ok := upuo.mutation.PermissionID(); ok {
		if err := userpermission.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_id": %w`, err)}
		}
	}
	if v, ok := upuo.mutation.ContextType(); ok {
		if err := userpermission.ContextTypeValidator(v); err != nil {
			return &ValidationError{Name: "context_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.context_type": %w`, err)}
		}
	}
	if v, ok := upuo.mutation.PermissionType(); ok {
		if err := userpermission.PermissionTypeValidator(v); err != nil {
			return &ValidationError{Name: "permission_type", err: fmt.Errorf(`ent: validator failed for field "UserPermission.permission_type": %w`, err)}
		}
	}
	if upuo.mutation.UserCleared() && len(upuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPermission.user"`)
	}
	if upuo.mutation.PermissionCleared() && len(upuo.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPermission.permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UserPermissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPermissionUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UserPermissionUpdateOne) sqlSave(ctx context.Context) (_node *UserPermission, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpermission.Table, userpermission.Columns, sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpermission.FieldID)
		for _, f := range fields {
			if !userpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userpermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := upuo.mutation.DeletedAt(); ok {
		_spec.SetField(userpermission.FieldDeletedAt, field.TypeTime, value)
	}
	if upuo.mutation.DeletedAtCleared() {
		_spec.ClearField(userpermission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.ContextType(); ok {
		_spec.SetField(userpermission.FieldContextType, field.TypeEnum, value)
	}
	if value, ok := upuo.mutation.ResourceType(); ok {
		_spec.SetField(userpermission.FieldResourceType, field.TypeString, value)
	}
	if upuo.mutation.ResourceTypeCleared() {
		_spec.ClearField(userpermission.FieldResourceType, field.TypeString)
	}
	if value, ok := upuo.mutation.ResourceID(); ok {
		_spec.SetField(userpermission.FieldResourceID, field.TypeString, value)
	}
	if upuo.mutation.ResourceIDCleared() {
		_spec.ClearField(userpermission.FieldResourceID, field.TypeString)
	}
	if value, ok := upuo.mutation.PermissionType(); ok {
		_spec.SetField(userpermission.FieldPermissionType, field.TypeEnum, value)
	}
	if value, ok := upuo.mutation.AssignedAt(); ok {
		_spec.SetField(userpermission.FieldAssignedAt, field.TypeTime, value)
	}
	if value, ok := upuo.mutation.ExpiresAt(); ok {
		_spec.SetField(userpermission.FieldExpiresAt, field.TypeTime, value)
	}
	if upuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(userpermission.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.Active(); ok {
		_spec.SetField(userpermission.FieldActive, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.Conditions(); ok {
		_spec.SetField(userpermission.FieldConditions, field.TypeJSON, value)
	}
	if upuo.mutation.ConditionsCleared() {
		_spec.ClearField(userpermission.FieldConditions, field.TypeJSON)
	}
	if value, ok := upuo.mutation.Reason(); ok {
		_spec.SetField(userpermission.FieldReason, field.TypeString, value)
	}
	if upuo.mutation.ReasonCleared() {
		_spec.ClearField(userpermission.FieldReason, field.TypeString)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.AssignedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.AssignedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.OrganizationContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.OrganizationContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UserPermission{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
