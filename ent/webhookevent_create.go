// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"
)

// WebhookEventCreate is the builder for creating a WebhookEvent entity.
type WebhookEventCreate struct {
	config
	mutation *WebhookEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wec *WebhookEventCreate) SetCreatedAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableCreatedAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetCreatedAt(*t)
	}
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WebhookEventCreate) SetUpdatedAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableUpdatedAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetUpdatedAt(*t)
	}
	return wec
}

// SetDeletedAt sets the "deleted_at" field.
func (wec *WebhookEventCreate) SetDeletedAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetDeletedAt(t)
	return wec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableDeletedAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetDeletedAt(*t)
	}
	return wec
}

// SetWebhookID sets the "webhook_id" field.
func (wec *WebhookEventCreate) SetWebhookID(x xid.ID) *WebhookEventCreate {
	wec.mutation.SetWebhookID(x)
	return wec
}

// SetEventType sets the "event_type" field.
func (wec *WebhookEventCreate) SetEventType(s string) *WebhookEventCreate {
	wec.mutation.SetEventType(s)
	return wec
}

// SetHeaders sets the "headers" field.
func (wec *WebhookEventCreate) SetHeaders(m map[string]string) *WebhookEventCreate {
	wec.mutation.SetHeaders(m)
	return wec
}

// SetPayload sets the "payload" field.
func (wec *WebhookEventCreate) SetPayload(m map[string]interface{}) *WebhookEventCreate {
	wec.mutation.SetPayload(m)
	return wec
}

// SetDelivered sets the "delivered" field.
func (wec *WebhookEventCreate) SetDelivered(b bool) *WebhookEventCreate {
	wec.mutation.SetDelivered(b)
	return wec
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableDelivered(b *bool) *WebhookEventCreate {
	if b != nil {
		wec.SetDelivered(*b)
	}
	return wec
}

// SetDeliveredAt sets the "delivered_at" field.
func (wec *WebhookEventCreate) SetDeliveredAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetDeliveredAt(t)
	return wec
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableDeliveredAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetDeliveredAt(*t)
	}
	return wec
}

// SetAttempts sets the "attempts" field.
func (wec *WebhookEventCreate) SetAttempts(i int) *WebhookEventCreate {
	wec.mutation.SetAttempts(i)
	return wec
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableAttempts(i *int) *WebhookEventCreate {
	if i != nil {
		wec.SetAttempts(*i)
	}
	return wec
}

// SetNextRetry sets the "next_retry" field.
func (wec *WebhookEventCreate) SetNextRetry(t time.Time) *WebhookEventCreate {
	wec.mutation.SetNextRetry(t)
	return wec
}

// SetNillableNextRetry sets the "next_retry" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableNextRetry(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetNextRetry(*t)
	}
	return wec
}

// SetStatusCode sets the "status_code" field.
func (wec *WebhookEventCreate) SetStatusCode(i int) *WebhookEventCreate {
	wec.mutation.SetStatusCode(i)
	return wec
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableStatusCode(i *int) *WebhookEventCreate {
	if i != nil {
		wec.SetStatusCode(*i)
	}
	return wec
}

// SetResponseBody sets the "response_body" field.
func (wec *WebhookEventCreate) SetResponseBody(s string) *WebhookEventCreate {
	wec.mutation.SetResponseBody(s)
	return wec
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableResponseBody(s *string) *WebhookEventCreate {
	if s != nil {
		wec.SetResponseBody(*s)
	}
	return wec
}

// SetError sets the "error" field.
func (wec *WebhookEventCreate) SetError(s string) *WebhookEventCreate {
	wec.mutation.SetError(s)
	return wec
}

// SetNillableError sets the "error" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableError(s *string) *WebhookEventCreate {
	if s != nil {
		wec.SetError(*s)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WebhookEventCreate) SetID(x xid.ID) *WebhookEventCreate {
	wec.mutation.SetID(x)
	return wec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableID(x *xid.ID) *WebhookEventCreate {
	if x != nil {
		wec.SetID(*x)
	}
	return wec
}

// SetWebhook sets the "webhook" edge to the Webhook entity.
func (wec *WebhookEventCreate) SetWebhook(w *Webhook) *WebhookEventCreate {
	return wec.SetWebhookID(w.ID)
}

// Mutation returns the WebhookEventMutation object of the builder.
func (wec *WebhookEventCreate) Mutation() *WebhookEventMutation {
	return wec.mutation
}

// Save creates the WebhookEvent in the database.
func (wec *WebhookEventCreate) Save(ctx context.Context) (*WebhookEvent, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WebhookEventCreate) SaveX(ctx context.Context) *WebhookEvent {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WebhookEventCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WebhookEventCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WebhookEventCreate) defaults() {
	if _, ok := wec.mutation.CreatedAt(); !ok {
		v := webhookevent.DefaultCreatedAt()
		wec.mutation.SetCreatedAt(v)
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		v := webhookevent.DefaultUpdatedAt()
		wec.mutation.SetUpdatedAt(v)
	}
	if _, ok := wec.mutation.Delivered(); !ok {
		v := webhookevent.DefaultDelivered
		wec.mutation.SetDelivered(v)
	}
	if _, ok := wec.mutation.Attempts(); !ok {
		v := webhookevent.DefaultAttempts
		wec.mutation.SetAttempts(v)
	}
	if _, ok := wec.mutation.ID(); !ok {
		v := webhookevent.DefaultID()
		wec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WebhookEventCreate) check() error {
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WebhookEvent.created_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WebhookEvent.updated_at"`)}
	}
	if _, ok := wec.mutation.WebhookID(); !ok {
		return &ValidationError{Name: "webhook_id", err: errors.New(`ent: missing required field "WebhookEvent.webhook_id"`)}
	}
	if v, ok := wec.mutation.WebhookID(); ok {
		if err := webhookevent.WebhookIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.webhook_id": %w`, err)}
		}
	}
	if _, ok := wec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "WebhookEvent.event_type"`)}
	}
	if v, ok := wec.mutation.EventType(); ok {
		if err := webhookevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.event_type": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Delivered(); !ok {
		return &ValidationError{Name: "delivered", err: errors.New(`ent: missing required field "WebhookEvent.delivered"`)}
	}
	if _, ok := wec.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "WebhookEvent.attempts"`)}
	}
	if len(wec.mutation.WebhookIDs()) == 0 {
		return &ValidationError{Name: "webhook", err: errors.New(`ent: missing required edge "WebhookEvent.webhook"`)}
	}
	return nil
}

func (wec *WebhookEventCreate) sqlSave(ctx context.Context) (*WebhookEvent, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WebhookEventCreate) createSpec() (*WebhookEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &WebhookEvent{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(webhookevent.Table, sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString))
	)
	_spec.OnConflict = wec.conflict
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(webhookevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(webhookevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wec.mutation.DeletedAt(); ok {
		_spec.SetField(webhookevent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wec.mutation.EventType(); ok {
		_spec.SetField(webhookevent.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := wec.mutation.Headers(); ok {
		_spec.SetField(webhookevent.FieldHeaders, field.TypeJSON, value)
		_node.Headers = value
	}
	if value, ok := wec.mutation.Payload(); ok {
		_spec.SetField(webhookevent.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := wec.mutation.Delivered(); ok {
		_spec.SetField(webhookevent.FieldDelivered, field.TypeBool, value)
		_node.Delivered = value
	}
	if value, ok := wec.mutation.DeliveredAt(); ok {
		_spec.SetField(webhookevent.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = &value
	}
	if value, ok := wec.mutation.Attempts(); ok {
		_spec.SetField(webhookevent.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := wec.mutation.NextRetry(); ok {
		_spec.SetField(webhookevent.FieldNextRetry, field.TypeTime, value)
		_node.NextRetry = &value
	}
	if value, ok := wec.mutation.StatusCode(); ok {
		_spec.SetField(webhookevent.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = &value
	}
	if value, ok := wec.mutation.ResponseBody(); ok {
		_spec.SetField(webhookevent.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := wec.mutation.Error(); ok {
		_spec.SetField(webhookevent.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if nodes := wec.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WebhookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WebhookEvent.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookEventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wec *WebhookEventCreate) OnConflict(opts ...sql.ConflictOption) *WebhookEventUpsertOne {
	wec.conflict = opts
	return &WebhookEventUpsertOne{
		create: wec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wec *WebhookEventCreate) OnConflictColumns(columns ...string) *WebhookEventUpsertOne {
	wec.conflict = append(wec.conflict, sql.ConflictColumns(columns...))
	return &WebhookEventUpsertOne{
		create: wec,
	}
}

type (
	// WebhookEventUpsertOne is the builder for "upsert"-ing
	//  one WebhookEvent node.
	WebhookEventUpsertOne struct {
		create *WebhookEventCreate
	}

	// WebhookEventUpsert is the "OnConflict" setter.
	WebhookEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookEventUpsert) SetUpdatedAt(v time.Time) *WebhookEventUpsert {
	u.Set(webhookevent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateUpdatedAt() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookEventUpsert) SetDeletedAt(v time.Time) *WebhookEventUpsert {
	u.Set(webhookevent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateDeletedAt() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookEventUpsert) ClearDeletedAt() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldDeletedAt)
	return u
}

// SetWebhookID sets the "webhook_id" field.
func (u *WebhookEventUpsert) SetWebhookID(v xid.ID) *WebhookEventUpsert {
	u.Set(webhookevent.FieldWebhookID, v)
	return u
}

// UpdateWebhookID sets the "webhook_id" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateWebhookID() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldWebhookID)
	return u
}

// SetEventType sets the "event_type" field.
func (u *WebhookEventUpsert) SetEventType(v string) *WebhookEventUpsert {
	u.Set(webhookevent.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateEventType() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldEventType)
	return u
}

// SetHeaders sets the "headers" field.
func (u *WebhookEventUpsert) SetHeaders(v map[string]string) *WebhookEventUpsert {
	u.Set(webhookevent.FieldHeaders, v)
	return u
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateHeaders() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldHeaders)
	return u
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookEventUpsert) ClearHeaders() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldHeaders)
	return u
}

// SetPayload sets the "payload" field.
func (u *WebhookEventUpsert) SetPayload(v map[string]interface{}) *WebhookEventUpsert {
	u.Set(webhookevent.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdatePayload() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldPayload)
	return u
}

// ClearPayload clears the value of the "payload" field.
func (u *WebhookEventUpsert) ClearPayload() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldPayload)
	return u
}

// SetDelivered sets the "delivered" field.
func (u *WebhookEventUpsert) SetDelivered(v bool) *WebhookEventUpsert {
	u.Set(webhookevent.FieldDelivered, v)
	return u
}

// UpdateDelivered sets the "delivered" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateDelivered() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldDelivered)
	return u
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *WebhookEventUpsert) SetDeliveredAt(v time.Time) *WebhookEventUpsert {
	u.Set(webhookevent.FieldDeliveredAt, v)
	return u
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateDeliveredAt() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldDeliveredAt)
	return u
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *WebhookEventUpsert) ClearDeliveredAt() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldDeliveredAt)
	return u
}

// SetAttempts sets the "attempts" field.
func (u *WebhookEventUpsert) SetAttempts(v int) *WebhookEventUpsert {
	u.Set(webhookevent.FieldAttempts, v)
	return u
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateAttempts() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldAttempts)
	return u
}

// AddAttempts adds v to the "attempts" field.
func (u *WebhookEventUpsert) AddAttempts(v int) *WebhookEventUpsert {
	u.Add(webhookevent.FieldAttempts, v)
	return u
}

// SetNextRetry sets the "next_retry" field.
func (u *WebhookEventUpsert) SetNextRetry(v time.Time) *WebhookEventUpsert {
	u.Set(webhookevent.FieldNextRetry, v)
	return u
}

// UpdateNextRetry sets the "next_retry" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateNextRetry() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldNextRetry)
	return u
}

// ClearNextRetry clears the value of the "next_retry" field.
func (u *WebhookEventUpsert) ClearNextRetry() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldNextRetry)
	return u
}

// SetStatusCode sets the "status_code" field.
func (u *WebhookEventUpsert) SetStatusCode(v int) *WebhookEventUpsert {
	u.Set(webhookevent.FieldStatusCode, v)
	return u
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateStatusCode() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldStatusCode)
	return u
}

// AddStatusCode adds v to the "status_code" field.
func (u *WebhookEventUpsert) AddStatusCode(v int) *WebhookEventUpsert {
	u.Add(webhookevent.FieldStatusCode, v)
	return u
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *WebhookEventUpsert) ClearStatusCode() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldStatusCode)
	return u
}

// SetResponseBody sets the "response_body" field.
func (u *WebhookEventUpsert) SetResponseBody(v string) *WebhookEventUpsert {
	u.Set(webhookevent.FieldResponseBody, v)
	return u
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateResponseBody() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldResponseBody)
	return u
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *WebhookEventUpsert) ClearResponseBody() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldResponseBody)
	return u
}

// SetError sets the "error" field.
func (u *WebhookEventUpsert) SetError(v string) *WebhookEventUpsert {
	u.Set(webhookevent.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *WebhookEventUpsert) UpdateError() *WebhookEventUpsert {
	u.SetExcluded(webhookevent.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *WebhookEventUpsert) ClearError() *WebhookEventUpsert {
	u.SetNull(webhookevent.FieldError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhookevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookEventUpsertOne) UpdateNewValues() *WebhookEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(webhookevent.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(webhookevent.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WebhookEventUpsertOne) Ignore() *WebhookEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookEventUpsertOne) DoNothing() *WebhookEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookEventCreate.OnConflict
// documentation for more info.
func (u *WebhookEventUpsertOne) Update(set func(*WebhookEventUpsert)) *WebhookEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookEventUpsertOne) SetUpdatedAt(v time.Time) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateUpdatedAt() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookEventUpsertOne) SetDeletedAt(v time.Time) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateDeletedAt() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookEventUpsertOne) ClearDeletedAt() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetWebhookID sets the "webhook_id" field.
func (u *WebhookEventUpsertOne) SetWebhookID(v xid.ID) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetWebhookID(v)
	})
}

// UpdateWebhookID sets the "webhook_id" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateWebhookID() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateWebhookID()
	})
}

// SetEventType sets the "event_type" field.
func (u *WebhookEventUpsertOne) SetEventType(v string) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateEventType() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateEventType()
	})
}

// SetHeaders sets the "headers" field.
func (u *WebhookEventUpsertOne) SetHeaders(v map[string]string) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateHeaders() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateHeaders()
	})
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookEventUpsertOne) ClearHeaders() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearHeaders()
	})
}

// SetPayload sets the "payload" field.
func (u *WebhookEventUpsertOne) SetPayload(v map[string]interface{}) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdatePayload() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *WebhookEventUpsertOne) ClearPayload() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearPayload()
	})
}

// SetDelivered sets the "delivered" field.
func (u *WebhookEventUpsertOne) SetDelivered(v bool) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDelivered(v)
	})
}

// UpdateDelivered sets the "delivered" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateDelivered() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDelivered()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *WebhookEventUpsertOne) SetDeliveredAt(v time.Time) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateDeliveredAt() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *WebhookEventUpsertOne) ClearDeliveredAt() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetAttempts sets the "attempts" field.
func (u *WebhookEventUpsertOne) SetAttempts(v int) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *WebhookEventUpsertOne) AddAttempts(v int) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateAttempts() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateAttempts()
	})
}

// SetNextRetry sets the "next_retry" field.
func (u *WebhookEventUpsertOne) SetNextRetry(v time.Time) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetNextRetry(v)
	})
}

// UpdateNextRetry sets the "next_retry" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateNextRetry() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateNextRetry()
	})
}

// ClearNextRetry clears the value of the "next_retry" field.
func (u *WebhookEventUpsertOne) ClearNextRetry() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearNextRetry()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *WebhookEventUpsertOne) SetStatusCode(v int) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *WebhookEventUpsertOne) AddStatusCode(v int) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateStatusCode() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *WebhookEventUpsertOne) ClearStatusCode() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *WebhookEventUpsertOne) SetResponseBody(v string) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateResponseBody() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *WebhookEventUpsertOne) ClearResponseBody() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearResponseBody()
	})
}

// SetError sets the "error" field.
func (u *WebhookEventUpsertOne) SetError(v string) *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *WebhookEventUpsertOne) UpdateError() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *WebhookEventUpsertOne) ClearError() *WebhookEventUpsertOne {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *WebhookEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WebhookEventUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WebhookEventUpsertOne.ID is not supported by MySQL driver. Use WebhookEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WebhookEventUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WebhookEventCreateBulk is the builder for creating many WebhookEvent entities in bulk.
type WebhookEventCreateBulk struct {
	config
	err      error
	builders []*WebhookEventCreate
	conflict []sql.ConflictOption
}

// Save creates the WebhookEvent entities in the database.
func (wecb *WebhookEventCreateBulk) Save(ctx context.Context) ([]*WebhookEvent, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WebhookEvent, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WebhookEventCreateBulk) SaveX(ctx context.Context) []*WebhookEvent {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WebhookEventCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WebhookEventCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WebhookEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookEventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wecb *WebhookEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *WebhookEventUpsertBulk {
	wecb.conflict = opts
	return &WebhookEventUpsertBulk{
		create: wecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wecb *WebhookEventCreateBulk) OnConflictColumns(columns ...string) *WebhookEventUpsertBulk {
	wecb.conflict = append(wecb.conflict, sql.ConflictColumns(columns...))
	return &WebhookEventUpsertBulk{
		create: wecb,
	}
}

// WebhookEventUpsertBulk is the builder for "upsert"-ing
// a bulk of WebhookEvent nodes.
type WebhookEventUpsertBulk struct {
	create *WebhookEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhookevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookEventUpsertBulk) UpdateNewValues() *WebhookEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(webhookevent.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(webhookevent.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WebhookEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WebhookEventUpsertBulk) Ignore() *WebhookEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookEventUpsertBulk) DoNothing() *WebhookEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookEventCreateBulk.OnConflict
// documentation for more info.
func (u *WebhookEventUpsertBulk) Update(set func(*WebhookEventUpsert)) *WebhookEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookEventUpsertBulk) SetUpdatedAt(v time.Time) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateUpdatedAt() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookEventUpsertBulk) SetDeletedAt(v time.Time) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateDeletedAt() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookEventUpsertBulk) ClearDeletedAt() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetWebhookID sets the "webhook_id" field.
func (u *WebhookEventUpsertBulk) SetWebhookID(v xid.ID) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetWebhookID(v)
	})
}

// UpdateWebhookID sets the "webhook_id" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateWebhookID() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateWebhookID()
	})
}

// SetEventType sets the "event_type" field.
func (u *WebhookEventUpsertBulk) SetEventType(v string) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateEventType() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateEventType()
	})
}

// SetHeaders sets the "headers" field.
func (u *WebhookEventUpsertBulk) SetHeaders(v map[string]string) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateHeaders() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateHeaders()
	})
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookEventUpsertBulk) ClearHeaders() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearHeaders()
	})
}

// SetPayload sets the "payload" field.
func (u *WebhookEventUpsertBulk) SetPayload(v map[string]interface{}) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdatePayload() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *WebhookEventUpsertBulk) ClearPayload() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearPayload()
	})
}

// SetDelivered sets the "delivered" field.
func (u *WebhookEventUpsertBulk) SetDelivered(v bool) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDelivered(v)
	})
}

// UpdateDelivered sets the "delivered" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateDelivered() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDelivered()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *WebhookEventUpsertBulk) SetDeliveredAt(v time.Time) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateDeliveredAt() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *WebhookEventUpsertBulk) ClearDeliveredAt() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetAttempts sets the "attempts" field.
func (u *WebhookEventUpsertBulk) SetAttempts(v int) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *WebhookEventUpsertBulk) AddAttempts(v int) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateAttempts() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateAttempts()
	})
}

// SetNextRetry sets the "next_retry" field.
func (u *WebhookEventUpsertBulk) SetNextRetry(v time.Time) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetNextRetry(v)
	})
}

// UpdateNextRetry sets the "next_retry" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateNextRetry() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateNextRetry()
	})
}

// ClearNextRetry clears the value of the "next_retry" field.
func (u *WebhookEventUpsertBulk) ClearNextRetry() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearNextRetry()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *WebhookEventUpsertBulk) SetStatusCode(v int) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetStatusCode(v)
	})
}

// AddStatusCode adds v to the "status_code" field.
func (u *WebhookEventUpsertBulk) AddStatusCode(v int) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.AddStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateStatusCode() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateStatusCode()
	})
}

// ClearStatusCode clears the value of the "status_code" field.
func (u *WebhookEventUpsertBulk) ClearStatusCode() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearStatusCode()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *WebhookEventUpsertBulk) SetResponseBody(v string) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateResponseBody() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *WebhookEventUpsertBulk) ClearResponseBody() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearResponseBody()
	})
}

// SetError sets the "error" field.
func (u *WebhookEventUpsertBulk) SetError(v string) *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *WebhookEventUpsertBulk) UpdateError() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *WebhookEventUpsertBulk) ClearError() *WebhookEventUpsertBulk {
	return u.Update(func(s *WebhookEventUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *WebhookEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WebhookEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
