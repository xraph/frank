// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/pkg/model"
)

// UserPermission is the model entity for the UserPermission schema.
type UserPermission struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID xid.ID `json:"user_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	PermissionID xid.ID `json:"permission_id,omitempty"`
	// Scope where this permission applies
	ContextType model.ContextType `json:"context_type,omitempty"`
	// ID of the context
	ContextID xid.ID `json:"context_id,omitempty"`
	// Specific resource type this permission applies to
	ResourceType string `json:"resource_type,omitempty"`
	// Specific resource instance this permission applies to
	ResourceID xid.ID `json:"resource_id,omitempty"`
	// Whether this grants or explicitly denies the permission
	PermissionType model.PermissionType `json:"permission_type,omitempty"`
	// Who assigned this permission (field-only, no edge)
	AssignedBy xid.ID `json:"assigned_by,omitempty"`
	// AssignedAt holds the value of the "assigned_at" field.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// When this permission expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Optional conditions for when this permission applies
	Conditions map[string]interface{} `json:"conditions,omitempty"`
	// Reason for granting/denying this permission
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPermissionQuery when eager-loading is set.
	Edges        UserPermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPermissionEdges holds the relations/edges for other nodes in the graph.
type UserPermissionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// AssignedByUser holds the value of the assigned_by_user edge.
	AssignedByUser *User `json:"assigned_by_user,omitempty"`
	// OrganizationContext holds the value of the organization_context edge.
	OrganizationContext *Organization `json:"organization_context,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) PermissionOrErr() (*Permission, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// AssignedByUserOrErr returns the AssignedByUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) AssignedByUserOrErr() (*User, error) {
	if e.AssignedByUser != nil {
		return e.AssignedByUser, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assigned_by_user"}
}

// OrganizationContextOrErr returns the OrganizationContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermissionEdges) OrganizationContextOrErr() (*Organization, error) {
	if e.OrganizationContext != nil {
		return e.OrganizationContext, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization_context"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpermission.FieldConditions:
			values[i] = new([]byte)
		case userpermission.FieldActive:
			values[i] = new(sql.NullBool)
		case userpermission.FieldContextType, userpermission.FieldResourceType, userpermission.FieldPermissionType, userpermission.FieldReason:
			values[i] = new(sql.NullString)
		case userpermission.FieldCreatedAt, userpermission.FieldUpdatedAt, userpermission.FieldDeletedAt, userpermission.FieldAssignedAt, userpermission.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case userpermission.FieldID, userpermission.FieldUserID, userpermission.FieldPermissionID, userpermission.FieldContextID, userpermission.FieldResourceID, userpermission.FieldAssignedBy:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPermission fields.
func (up *UserPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpermission.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case userpermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userpermission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		case userpermission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				up.DeletedAt = value.Time
			}
		case userpermission.FieldUserID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				up.UserID = *value
			}
		case userpermission.FieldPermissionID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value != nil {
				up.PermissionID = *value
			}
		case userpermission.FieldContextType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context_type", values[i])
			} else if value.Valid {
				up.ContextType = model.ContextType(value.String)
			}
		case userpermission.FieldContextID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field context_id", values[i])
			} else if value != nil {
				up.ContextID = *value
			}
		case userpermission.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				up.ResourceType = value.String
			}
		case userpermission.FieldResourceID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value != nil {
				up.ResourceID = *value
			}
		case userpermission.FieldPermissionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission_type", values[i])
			} else if value.Valid {
				up.PermissionType = model.PermissionType(value.String)
			}
		case userpermission.FieldAssignedBy:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_by", values[i])
			} else if value != nil {
				up.AssignedBy = *value
			}
		case userpermission.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				up.AssignedAt = value.Time
			}
		case userpermission.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				up.ExpiresAt = new(time.Time)
				*up.ExpiresAt = value.Time
			}
		case userpermission.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				up.Active = value.Bool
			}
		case userpermission.FieldConditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field conditions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Conditions); err != nil {
					return fmt.Errorf("unmarshal field conditions: %w", err)
				}
			}
		case userpermission.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				up.Reason = value.String
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPermission.
// This includes values selected through modifiers, order, etc.
func (up *UserPermission) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPermission entity.
func (up *UserPermission) QueryUser() *UserQuery {
	return NewUserPermissionClient(up.config).QueryUser(up)
}

// QueryPermission queries the "permission" edge of the UserPermission entity.
func (up *UserPermission) QueryPermission() *PermissionQuery {
	return NewUserPermissionClient(up.config).QueryPermission(up)
}

// QueryAssignedByUser queries the "assigned_by_user" edge of the UserPermission entity.
func (up *UserPermission) QueryAssignedByUser() *UserQuery {
	return NewUserPermissionClient(up.config).QueryAssignedByUser(up)
}

// QueryOrganizationContext queries the "organization_context" edge of the UserPermission entity.
func (up *UserPermission) QueryOrganizationContext() *OrganizationQuery {
	return NewUserPermissionClient(up.config).QueryOrganizationContext(up)
}

// Update returns a builder for updating this UserPermission.
// Note that you need to call UserPermission.Unwrap() before calling this method if this UserPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPermission) Update() *UserPermissionUpdateOne {
	return NewUserPermissionClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPermission) Unwrap() *UserPermission {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPermission is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPermission) String() string {
	var builder strings.Builder
	builder.WriteString("UserPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(up.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", up.PermissionID))
	builder.WriteString(", ")
	builder.WriteString("context_type=")
	builder.WriteString(fmt.Sprintf("%v", up.ContextType))
	builder.WriteString(", ")
	builder.WriteString("context_id=")
	builder.WriteString(fmt.Sprintf("%v", up.ContextID))
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(up.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(fmt.Sprintf("%v", up.ResourceID))
	builder.WriteString(", ")
	builder.WriteString("permission_type=")
	builder.WriteString(fmt.Sprintf("%v", up.PermissionType))
	builder.WriteString(", ")
	builder.WriteString("assigned_by=")
	builder.WriteString(fmt.Sprintf("%v", up.AssignedBy))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(up.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := up.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", up.Active))
	builder.WriteString(", ")
	builder.WriteString("conditions=")
	builder.WriteString(fmt.Sprintf("%v", up.Conditions))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(up.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// UserPermissions is a parsable slice of UserPermission.
type UserPermissions []*UserPermission
