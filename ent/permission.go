// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/pkg/model"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Permission identifier (e.g., 'create:user', 'view:billing')
	Name string `json:"name,omitempty"`
	// Human-readable permission name
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// The resource this permission applies to
	Resource string `json:"resource,omitempty"`
	// The action this permission allows (create, read, update, delete, etc.)
	Action string `json:"action,omitempty"`
	// Category helps organize permissions by scope
	Category model.PermissionCategory `json:"category,omitempty"`
	// Which user types this permission can apply to
	ApplicableUserTypes []model.UserType `json:"applicable_user_types,omitempty"`
	// Which contexts this permission can be used in
	ApplicableContexts []model.ContextType `json:"applicable_contexts,omitempty"`
	// JSON expression for conditional access
	Conditions string `json:"conditions,omitempty"`
	// System permissions cannot be modified
	System bool `json:"system,omitempty"`
	// Dangerous permissions require extra confirmation
	Dangerous bool `json:"dangerous,omitempty"`
	// Risk level 1-5 for auditing and approval workflows
	RiskLevel int `json:"risk_level,omitempty"`
	// User who created this permission
	CreatedBy string `json:"created_by,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Group permissions by feature (e.g., 'user_management', 'billing')
	PermissionGroup model.PermissionGroup `json:"permission_group,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges        PermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// UserAssignments holds the value of the user_assignments edge.
	UserAssignments []*UserPermission `json:"user_assignments,omitempty"`
	// Permissions this permission depends on
	Dependencies []*PermissionDependency `json:"dependencies,omitempty"`
	// Permissions that depend on this permission
	Dependents []*PermissionDependency `json:"dependents,omitempty"`
	// DependentPermissions holds the value of the dependent_permissions edge.
	DependentPermissions []*Permission `json:"dependent_permissions,omitempty"`
	// RequiredPermissions holds the value of the required_permissions edge.
	RequiredPermissions []*Permission `json:"required_permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes               [6]bool
	namedRoles                map[string][]*Role
	namedUserAssignments      map[string][]*UserPermission
	namedDependencies         map[string][]*PermissionDependency
	namedDependents           map[string][]*PermissionDependency
	namedDependentPermissions map[string][]*Permission
	namedRequiredPermissions  map[string][]*Permission
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UserAssignmentsOrErr returns the UserAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) UserAssignmentsOrErr() ([]*UserPermission, error) {
	if e.loadedTypes[1] {
		return e.UserAssignments, nil
	}
	return nil, &NotLoadedError{edge: "user_assignments"}
}

// DependenciesOrErr returns the Dependencies value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) DependenciesOrErr() ([]*PermissionDependency, error) {
	if e.loadedTypes[2] {
		return e.Dependencies, nil
	}
	return nil, &NotLoadedError{edge: "dependencies"}
}

// DependentsOrErr returns the Dependents value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) DependentsOrErr() ([]*PermissionDependency, error) {
	if e.loadedTypes[3] {
		return e.Dependents, nil
	}
	return nil, &NotLoadedError{edge: "dependents"}
}

// DependentPermissionsOrErr returns the DependentPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) DependentPermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[4] {
		return e.DependentPermissions, nil
	}
	return nil, &NotLoadedError{edge: "dependent_permissions"}
}

// RequiredPermissionsOrErr returns the RequiredPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) RequiredPermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[5] {
		return e.RequiredPermissions, nil
	}
	return nil, &NotLoadedError{edge: "required_permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permission.FieldApplicableUserTypes, permission.FieldApplicableContexts:
			values[i] = new([]byte)
		case permission.FieldSystem, permission.FieldDangerous, permission.FieldActive:
			values[i] = new(sql.NullBool)
		case permission.FieldRiskLevel:
			values[i] = new(sql.NullInt64)
		case permission.FieldName, permission.FieldDisplayName, permission.FieldDescription, permission.FieldResource, permission.FieldAction, permission.FieldCategory, permission.FieldConditions, permission.FieldCreatedBy, permission.FieldPermissionGroup:
			values[i] = new(sql.NullString)
		case permission.FieldCreatedAt, permission.FieldUpdatedAt, permission.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case permission.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case permission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case permission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case permission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pe.DeletedAt = value.Time
			}
		case permission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case permission.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pe.DisplayName = value.String
			}
		case permission.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pe.Description = value.String
			}
		case permission.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				pe.Resource = value.String
			}
		case permission.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				pe.Action = value.String
			}
		case permission.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pe.Category = model.PermissionCategory(value.String)
			}
		case permission.FieldApplicableUserTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field applicable_user_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.ApplicableUserTypes); err != nil {
					return fmt.Errorf("unmarshal field applicable_user_types: %w", err)
				}
			}
		case permission.FieldApplicableContexts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field applicable_contexts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.ApplicableContexts); err != nil {
					return fmt.Errorf("unmarshal field applicable_contexts: %w", err)
				}
			}
		case permission.FieldConditions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conditions", values[i])
			} else if value.Valid {
				pe.Conditions = value.String
			}
		case permission.FieldSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system", values[i])
			} else if value.Valid {
				pe.System = value.Bool
			}
		case permission.FieldDangerous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dangerous", values[i])
			} else if value.Valid {
				pe.Dangerous = value.Bool
			}
		case permission.FieldRiskLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field risk_level", values[i])
			} else if value.Valid {
				pe.RiskLevel = int(value.Int64)
			}
		case permission.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pe.CreatedBy = value.String
			}
		case permission.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				pe.Active = value.Bool
			}
		case permission.FieldPermissionGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission_group", values[i])
			} else if value.Valid {
				pe.PermissionGroup = model.PermissionGroup(value.String)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Permission.
// This includes values selected through modifiers, order, etc.
func (pe *Permission) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the Permission entity.
func (pe *Permission) QueryRoles() *RoleQuery {
	return NewPermissionClient(pe.config).QueryRoles(pe)
}

// QueryUserAssignments queries the "user_assignments" edge of the Permission entity.
func (pe *Permission) QueryUserAssignments() *UserPermissionQuery {
	return NewPermissionClient(pe.config).QueryUserAssignments(pe)
}

// QueryDependencies queries the "dependencies" edge of the Permission entity.
func (pe *Permission) QueryDependencies() *PermissionDependencyQuery {
	return NewPermissionClient(pe.config).QueryDependencies(pe)
}

// QueryDependents queries the "dependents" edge of the Permission entity.
func (pe *Permission) QueryDependents() *PermissionDependencyQuery {
	return NewPermissionClient(pe.config).QueryDependents(pe)
}

// QueryDependentPermissions queries the "dependent_permissions" edge of the Permission entity.
func (pe *Permission) QueryDependentPermissions() *PermissionQuery {
	return NewPermissionClient(pe.config).QueryDependentPermissions(pe)
}

// QueryRequiredPermissions queries the "required_permissions" edge of the Permission entity.
func (pe *Permission) QueryRequiredPermissions() *PermissionQuery {
	return NewPermissionClient(pe.config).QueryRequiredPermissions(pe)
}

// Update returns a builder for updating this Permission.
// Note that you need to call Permission.Unwrap() before calling this method if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return NewPermissionClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Permission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pe.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pe.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pe.Description)
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(pe.Resource)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(pe.Action)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", pe.Category))
	builder.WriteString(", ")
	builder.WriteString("applicable_user_types=")
	builder.WriteString(fmt.Sprintf("%v", pe.ApplicableUserTypes))
	builder.WriteString(", ")
	builder.WriteString("applicable_contexts=")
	builder.WriteString(fmt.Sprintf("%v", pe.ApplicableContexts))
	builder.WriteString(", ")
	builder.WriteString("conditions=")
	builder.WriteString(pe.Conditions)
	builder.WriteString(", ")
	builder.WriteString("system=")
	builder.WriteString(fmt.Sprintf("%v", pe.System))
	builder.WriteString(", ")
	builder.WriteString("dangerous=")
	builder.WriteString(fmt.Sprintf("%v", pe.Dangerous))
	builder.WriteString(", ")
	builder.WriteString("risk_level=")
	builder.WriteString(fmt.Sprintf("%v", pe.RiskLevel))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pe.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", pe.Active))
	builder.WriteString(", ")
	builder.WriteString("permission_group=")
	builder.WriteString(fmt.Sprintf("%v", pe.PermissionGroup))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedRoles(name string) ([]*Role, error) {
	if pe.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedRoles(name string, edges ...*Role) {
	if pe.Edges.namedRoles == nil {
		pe.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		pe.Edges.namedRoles[name] = []*Role{}
	} else {
		pe.Edges.namedRoles[name] = append(pe.Edges.namedRoles[name], edges...)
	}
}

// NamedUserAssignments returns the UserAssignments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedUserAssignments(name string) ([]*UserPermission, error) {
	if pe.Edges.namedUserAssignments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedUserAssignments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedUserAssignments(name string, edges ...*UserPermission) {
	if pe.Edges.namedUserAssignments == nil {
		pe.Edges.namedUserAssignments = make(map[string][]*UserPermission)
	}
	if len(edges) == 0 {
		pe.Edges.namedUserAssignments[name] = []*UserPermission{}
	} else {
		pe.Edges.namedUserAssignments[name] = append(pe.Edges.namedUserAssignments[name], edges...)
	}
}

// NamedDependencies returns the Dependencies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedDependencies(name string) ([]*PermissionDependency, error) {
	if pe.Edges.namedDependencies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedDependencies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedDependencies(name string, edges ...*PermissionDependency) {
	if pe.Edges.namedDependencies == nil {
		pe.Edges.namedDependencies = make(map[string][]*PermissionDependency)
	}
	if len(edges) == 0 {
		pe.Edges.namedDependencies[name] = []*PermissionDependency{}
	} else {
		pe.Edges.namedDependencies[name] = append(pe.Edges.namedDependencies[name], edges...)
	}
}

// NamedDependents returns the Dependents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedDependents(name string) ([]*PermissionDependency, error) {
	if pe.Edges.namedDependents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedDependents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedDependents(name string, edges ...*PermissionDependency) {
	if pe.Edges.namedDependents == nil {
		pe.Edges.namedDependents = make(map[string][]*PermissionDependency)
	}
	if len(edges) == 0 {
		pe.Edges.namedDependents[name] = []*PermissionDependency{}
	} else {
		pe.Edges.namedDependents[name] = append(pe.Edges.namedDependents[name], edges...)
	}
}

// NamedDependentPermissions returns the DependentPermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedDependentPermissions(name string) ([]*Permission, error) {
	if pe.Edges.namedDependentPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedDependentPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedDependentPermissions(name string, edges ...*Permission) {
	if pe.Edges.namedDependentPermissions == nil {
		pe.Edges.namedDependentPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		pe.Edges.namedDependentPermissions[name] = []*Permission{}
	} else {
		pe.Edges.namedDependentPermissions[name] = append(pe.Edges.namedDependentPermissions[name], edges...)
	}
}

// NamedRequiredPermissions returns the RequiredPermissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedRequiredPermissions(name string) ([]*Permission, error) {
	if pe.Edges.namedRequiredPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedRequiredPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedRequiredPermissions(name string, edges ...*Permission) {
	if pe.Edges.namedRequiredPermissions == nil {
		pe.Edges.namedRequiredPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		pe.Edges.namedRequiredPermissions[name] = []*Permission{}
	} else {
		pe.Edges.namedRequiredPermissions[name] = append(pe.Edges.namedRequiredPermissions[name], edges...)
	}
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission
