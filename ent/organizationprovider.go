// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/providertemplate"
)

// OrganizationProvider is the model entity for the OrganizationProvider schema.
type OrganizationProvider struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Organization ID
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Identity Provider ID
	ProviderID xid.ID `json:"provider_id,omitempty"`
	// Identity Provider ID
	TemplateID xid.ID `json:"template_id,omitempty"`
	// Template key used for this provider
	TemplateKey string `json:"template_key,omitempty"`
	// Additional membership metadata
	CustomConfig map[string]interface{} `json:"custom_config,omitempty"`
	// When provider was enabled
	EnabledAt time.Time `json:"enabled_at,omitempty"`
	// Last time provider was used for authentication
	LastUsed *time.Time `json:"last_used,omitempty"`
	// Number of times provider has been used
	UsageCount int `json:"usage_count,omitempty"`
	// Whether provider is currently enabled
	Enabled bool `json:"enabled,omitempty"`
	// Authentication success rate
	SuccessRate float64 `json:"success_rate,omitempty"`
	// Total number of login attempts
	TotalLogins int `json:"total_logins,omitempty"`
	// Number of successful logins
	SuccessfulLogins int `json:"successful_logins,omitempty"`
	// Number of failed login attempts
	FailedLogins int `json:"failed_logins,omitempty"`
	// Last successful authentication
	LastSuccess *time.Time `json:"last_success,omitempty"`
	// Last failed authentication
	LastFailure *time.Time `json:"last_failure,omitempty"`
	// Number of configuration errors
	ConfigErrors int `json:"config_errors,omitempty"`
	// Average response time in milliseconds
	AverageResponseTime float64 `json:"average_response_time,omitempty"`
	// Additional membership metadata
	AnalyticsData map[string]interface{} `json:"analytics_data,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationProviderQuery when eager-loading is set.
	Edges        OrganizationProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationProviderEdges holds the relations/edges for other nodes in the graph.
type OrganizationProviderEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *IdentityProvider `json:"provider,omitempty"`
	// Template holds the value of the template edge.
	Template *ProviderTemplate `json:"template,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationProviderEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationProviderEdges) ProviderOrErr() (*IdentityProvider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: identityprovider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationProviderEdges) TemplateOrErr() (*ProviderTemplate, error) {
	if e.Template != nil {
		return e.Template, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: providertemplate.Label}
	}
	return nil, &NotLoadedError{edge: "template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationprovider.FieldCustomConfig, organizationprovider.FieldAnalyticsData, organizationprovider.FieldMetadata:
			values[i] = new([]byte)
		case organizationprovider.FieldEnabled:
			values[i] = new(sql.NullBool)
		case organizationprovider.FieldSuccessRate, organizationprovider.FieldAverageResponseTime:
			values[i] = new(sql.NullFloat64)
		case organizationprovider.FieldUsageCount, organizationprovider.FieldTotalLogins, organizationprovider.FieldSuccessfulLogins, organizationprovider.FieldFailedLogins, organizationprovider.FieldConfigErrors:
			values[i] = new(sql.NullInt64)
		case organizationprovider.FieldTemplateKey:
			values[i] = new(sql.NullString)
		case organizationprovider.FieldCreatedAt, organizationprovider.FieldUpdatedAt, organizationprovider.FieldDeletedAt, organizationprovider.FieldEnabledAt, organizationprovider.FieldLastUsed, organizationprovider.FieldLastSuccess, organizationprovider.FieldLastFailure:
			values[i] = new(sql.NullTime)
		case organizationprovider.FieldID, organizationprovider.FieldOrganizationID, organizationprovider.FieldProviderID, organizationprovider.FieldTemplateID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationProvider fields.
func (op *OrganizationProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationprovider.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				op.ID = *value
			}
		case organizationprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				op.CreatedAt = value.Time
			}
		case organizationprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				op.UpdatedAt = value.Time
			}
		case organizationprovider.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				op.DeletedAt = value.Time
			}
		case organizationprovider.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				op.OrganizationID = *value
			}
		case organizationprovider.FieldProviderID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value != nil {
				op.ProviderID = *value
			}
		case organizationprovider.FieldTemplateID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value != nil {
				op.TemplateID = *value
			}
		case organizationprovider.FieldTemplateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_key", values[i])
			} else if value.Valid {
				op.TemplateKey = value.String
			}
		case organizationprovider.FieldCustomConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field custom_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.CustomConfig); err != nil {
					return fmt.Errorf("unmarshal field custom_config: %w", err)
				}
			}
		case organizationprovider.FieldEnabledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field enabled_at", values[i])
			} else if value.Valid {
				op.EnabledAt = value.Time
			}
		case organizationprovider.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				op.LastUsed = new(time.Time)
				*op.LastUsed = value.Time
			}
		case organizationprovider.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				op.UsageCount = int(value.Int64)
			}
		case organizationprovider.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				op.Enabled = value.Bool
			}
		case organizationprovider.FieldSuccessRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field success_rate", values[i])
			} else if value.Valid {
				op.SuccessRate = value.Float64
			}
		case organizationprovider.FieldTotalLogins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_logins", values[i])
			} else if value.Valid {
				op.TotalLogins = int(value.Int64)
			}
		case organizationprovider.FieldSuccessfulLogins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field successful_logins", values[i])
			} else if value.Valid {
				op.SuccessfulLogins = int(value.Int64)
			}
		case organizationprovider.FieldFailedLogins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_logins", values[i])
			} else if value.Valid {
				op.FailedLogins = int(value.Int64)
			}
		case organizationprovider.FieldLastSuccess:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_success", values[i])
			} else if value.Valid {
				op.LastSuccess = new(time.Time)
				*op.LastSuccess = value.Time
			}
		case organizationprovider.FieldLastFailure:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_failure", values[i])
			} else if value.Valid {
				op.LastFailure = new(time.Time)
				*op.LastFailure = value.Time
			}
		case organizationprovider.FieldConfigErrors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field config_errors", values[i])
			} else if value.Valid {
				op.ConfigErrors = int(value.Int64)
			}
		case organizationprovider.FieldAverageResponseTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field average_response_time", values[i])
			} else if value.Valid {
				op.AverageResponseTime = value.Float64
			}
		case organizationprovider.FieldAnalyticsData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field analytics_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.AnalyticsData); err != nil {
					return fmt.Errorf("unmarshal field analytics_data: %w", err)
				}
			}
		case organizationprovider.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			op.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationProvider.
// This includes values selected through modifiers, order, etc.
func (op *OrganizationProvider) Value(name string) (ent.Value, error) {
	return op.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the OrganizationProvider entity.
func (op *OrganizationProvider) QueryOrganization() *OrganizationQuery {
	return NewOrganizationProviderClient(op.config).QueryOrganization(op)
}

// QueryProvider queries the "provider" edge of the OrganizationProvider entity.
func (op *OrganizationProvider) QueryProvider() *IdentityProviderQuery {
	return NewOrganizationProviderClient(op.config).QueryProvider(op)
}

// QueryTemplate queries the "template" edge of the OrganizationProvider entity.
func (op *OrganizationProvider) QueryTemplate() *ProviderTemplateQuery {
	return NewOrganizationProviderClient(op.config).QueryTemplate(op)
}

// Update returns a builder for updating this OrganizationProvider.
// Note that you need to call OrganizationProvider.Unwrap() before calling this method if this OrganizationProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrganizationProvider) Update() *OrganizationProviderUpdateOne {
	return NewOrganizationProviderClient(op.config).UpdateOne(op)
}

// Unwrap unwraps the OrganizationProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrganizationProvider) Unwrap() *OrganizationProvider {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationProvider is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrganizationProvider) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("created_at=")
	builder.WriteString(op.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(op.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(op.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", op.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", op.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(fmt.Sprintf("%v", op.TemplateID))
	builder.WriteString(", ")
	builder.WriteString("template_key=")
	builder.WriteString(op.TemplateKey)
	builder.WriteString(", ")
	builder.WriteString("custom_config=")
	builder.WriteString(fmt.Sprintf("%v", op.CustomConfig))
	builder.WriteString(", ")
	builder.WriteString("enabled_at=")
	builder.WriteString(op.EnabledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := op.LastUsed; v != nil {
		builder.WriteString("last_used=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", op.UsageCount))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", op.Enabled))
	builder.WriteString(", ")
	builder.WriteString("success_rate=")
	builder.WriteString(fmt.Sprintf("%v", op.SuccessRate))
	builder.WriteString(", ")
	builder.WriteString("total_logins=")
	builder.WriteString(fmt.Sprintf("%v", op.TotalLogins))
	builder.WriteString(", ")
	builder.WriteString("successful_logins=")
	builder.WriteString(fmt.Sprintf("%v", op.SuccessfulLogins))
	builder.WriteString(", ")
	builder.WriteString("failed_logins=")
	builder.WriteString(fmt.Sprintf("%v", op.FailedLogins))
	builder.WriteString(", ")
	if v := op.LastSuccess; v != nil {
		builder.WriteString("last_success=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := op.LastFailure; v != nil {
		builder.WriteString("last_failure=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("config_errors=")
	builder.WriteString(fmt.Sprintf("%v", op.ConfigErrors))
	builder.WriteString(", ")
	builder.WriteString("average_response_time=")
	builder.WriteString(fmt.Sprintf("%v", op.AverageResponseTime))
	builder.WriteString(", ")
	builder.WriteString("analytics_data=")
	builder.WriteString(fmt.Sprintf("%v", op.AnalyticsData))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", op.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationProviders is a parsable slice of OrganizationProvider.
type OrganizationProviders []*OrganizationProvider
