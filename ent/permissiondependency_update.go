// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
	"github.com/xraph/frank/ent/predicate"
)

// PermissionDependencyUpdate is the builder for updating PermissionDependency entities.
type PermissionDependencyUpdate struct {
	config
	hooks     []Hook
	mutation  *PermissionDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PermissionDependencyUpdate builder.
func (pdu *PermissionDependencyUpdate) Where(ps ...predicate.PermissionDependency) *PermissionDependencyUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *PermissionDependencyUpdate) SetUpdatedAt(t time.Time) *PermissionDependencyUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// SetDeletedAt sets the "deleted_at" field.
func (pdu *PermissionDependencyUpdate) SetDeletedAt(t time.Time) *PermissionDependencyUpdate {
	pdu.mutation.SetDeletedAt(t)
	return pdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableDeletedAt(t *time.Time) *PermissionDependencyUpdate {
	if t != nil {
		pdu.SetDeletedAt(*t)
	}
	return pdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pdu *PermissionDependencyUpdate) ClearDeletedAt() *PermissionDependencyUpdate {
	pdu.mutation.ClearDeletedAt()
	return pdu
}

// SetPermissionID sets the "permission_id" field.
func (pdu *PermissionDependencyUpdate) SetPermissionID(x xid.ID) *PermissionDependencyUpdate {
	pdu.mutation.SetPermissionID(x)
	return pdu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillablePermissionID(x *xid.ID) *PermissionDependencyUpdate {
	if x != nil {
		pdu.SetPermissionID(*x)
	}
	return pdu
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (pdu *PermissionDependencyUpdate) SetRequiredPermissionID(x xid.ID) *PermissionDependencyUpdate {
	pdu.mutation.SetRequiredPermissionID(x)
	return pdu
}

// SetNillableRequiredPermissionID sets the "required_permission_id" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableRequiredPermissionID(x *xid.ID) *PermissionDependencyUpdate {
	if x != nil {
		pdu.SetRequiredPermissionID(*x)
	}
	return pdu
}

// SetDependencyType sets the "dependency_type" field.
func (pdu *PermissionDependencyUpdate) SetDependencyType(pt permissiondependency.DependencyType) *PermissionDependencyUpdate {
	pdu.mutation.SetDependencyType(pt)
	return pdu
}

// SetNillableDependencyType sets the "dependency_type" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableDependencyType(pt *permissiondependency.DependencyType) *PermissionDependencyUpdate {
	if pt != nil {
		pdu.SetDependencyType(*pt)
	}
	return pdu
}

// SetCondition sets the "condition" field.
func (pdu *PermissionDependencyUpdate) SetCondition(s string) *PermissionDependencyUpdate {
	pdu.mutation.SetCondition(s)
	return pdu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableCondition(s *string) *PermissionDependencyUpdate {
	if s != nil {
		pdu.SetCondition(*s)
	}
	return pdu
}

// ClearCondition clears the value of the "condition" field.
func (pdu *PermissionDependencyUpdate) ClearCondition() *PermissionDependencyUpdate {
	pdu.mutation.ClearCondition()
	return pdu
}

// SetActive sets the "active" field.
func (pdu *PermissionDependencyUpdate) SetActive(b bool) *PermissionDependencyUpdate {
	pdu.mutation.SetActive(b)
	return pdu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableActive(b *bool) *PermissionDependencyUpdate {
	if b != nil {
		pdu.SetActive(*b)
	}
	return pdu
}

// SetCreatedBy sets the "created_by" field.
func (pdu *PermissionDependencyUpdate) SetCreatedBy(s string) *PermissionDependencyUpdate {
	pdu.mutation.SetCreatedBy(s)
	return pdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pdu *PermissionDependencyUpdate) SetNillableCreatedBy(s *string) *PermissionDependencyUpdate {
	if s != nil {
		pdu.SetCreatedBy(*s)
	}
	return pdu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pdu *PermissionDependencyUpdate) ClearCreatedBy() *PermissionDependencyUpdate {
	pdu.mutation.ClearCreatedBy()
	return pdu
}

// SetPermission sets the "permission" edge to the Permission entity.
func (pdu *PermissionDependencyUpdate) SetPermission(p *Permission) *PermissionDependencyUpdate {
	return pdu.SetPermissionID(p.ID)
}

// SetRequiredPermission sets the "required_permission" edge to the Permission entity.
func (pdu *PermissionDependencyUpdate) SetRequiredPermission(p *Permission) *PermissionDependencyUpdate {
	return pdu.SetRequiredPermissionID(p.ID)
}

// Mutation returns the PermissionDependencyMutation object of the builder.
func (pdu *PermissionDependencyUpdate) Mutation() *PermissionDependencyMutation {
	return pdu.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (pdu *PermissionDependencyUpdate) ClearPermission() *PermissionDependencyUpdate {
	pdu.mutation.ClearPermission()
	return pdu
}

// ClearRequiredPermission clears the "required_permission" edge to the Permission entity.
func (pdu *PermissionDependencyUpdate) ClearRequiredPermission() *PermissionDependencyUpdate {
	pdu.mutation.ClearRequiredPermission()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PermissionDependencyUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PermissionDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PermissionDependencyUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PermissionDependencyUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *PermissionDependencyUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := permissiondependency.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *PermissionDependencyUpdate) check() error {
	if v, ok := pdu.mutation.PermissionID(); ok {
		if err := permissiondependency.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.permission_id": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.RequiredPermissionID(); ok {
		if err := permissiondependency.RequiredPermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "required_permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.required_permission_id": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.DependencyType(); ok {
		if err := permissiondependency.DependencyTypeValidator(v); err != nil {
			return &ValidationError{Name: "dependency_type", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.dependency_type": %w`, err)}
		}
	}
	if pdu.mutation.PermissionCleared() && len(pdu.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionDependency.permission"`)
	}
	if pdu.mutation.RequiredPermissionCleared() && len(pdu.mutation.RequiredPermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionDependency.required_permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pdu *PermissionDependencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionDependencyUpdate {
	pdu.modifiers = append(pdu.modifiers, modifiers...)
	return pdu
}

func (pdu *PermissionDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissiondependency.Table, permissiondependency.Columns, sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(permissiondependency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.DeletedAt(); ok {
		_spec.SetField(permissiondependency.FieldDeletedAt, field.TypeTime, value)
	}
	if pdu.mutation.DeletedAtCleared() {
		_spec.ClearField(permissiondependency.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pdu.mutation.DependencyType(); ok {
		_spec.SetField(permissiondependency.FieldDependencyType, field.TypeEnum, value)
	}
	if value, ok := pdu.mutation.Condition(); ok {
		_spec.SetField(permissiondependency.FieldCondition, field.TypeString, value)
	}
	if pdu.mutation.ConditionCleared() {
		_spec.ClearField(permissiondependency.FieldCondition, field.TypeString)
	}
	if value, ok := pdu.mutation.Active(); ok {
		_spec.SetField(permissiondependency.FieldActive, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.CreatedBy(); ok {
		_spec.SetField(permissiondependency.FieldCreatedBy, field.TypeString, value)
	}
	if pdu.mutation.CreatedByCleared() {
		_spec.ClearField(permissiondependency.FieldCreatedBy, field.TypeString)
	}
	if pdu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.RequiredPermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.RequiredPermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissiondependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PermissionDependencyUpdateOne is the builder for updating a single PermissionDependency entity.
type PermissionDependencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PermissionDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *PermissionDependencyUpdateOne) SetUpdatedAt(t time.Time) *PermissionDependencyUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// SetDeletedAt sets the "deleted_at" field.
func (pduo *PermissionDependencyUpdateOne) SetDeletedAt(t time.Time) *PermissionDependencyUpdateOne {
	pduo.mutation.SetDeletedAt(t)
	return pduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableDeletedAt(t *time.Time) *PermissionDependencyUpdateOne {
	if t != nil {
		pduo.SetDeletedAt(*t)
	}
	return pduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pduo *PermissionDependencyUpdateOne) ClearDeletedAt() *PermissionDependencyUpdateOne {
	pduo.mutation.ClearDeletedAt()
	return pduo
}

// SetPermissionID sets the "permission_id" field.
func (pduo *PermissionDependencyUpdateOne) SetPermissionID(x xid.ID) *PermissionDependencyUpdateOne {
	pduo.mutation.SetPermissionID(x)
	return pduo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillablePermissionID(x *xid.ID) *PermissionDependencyUpdateOne {
	if x != nil {
		pduo.SetPermissionID(*x)
	}
	return pduo
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (pduo *PermissionDependencyUpdateOne) SetRequiredPermissionID(x xid.ID) *PermissionDependencyUpdateOne {
	pduo.mutation.SetRequiredPermissionID(x)
	return pduo
}

// SetNillableRequiredPermissionID sets the "required_permission_id" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableRequiredPermissionID(x *xid.ID) *PermissionDependencyUpdateOne {
	if x != nil {
		pduo.SetRequiredPermissionID(*x)
	}
	return pduo
}

// SetDependencyType sets the "dependency_type" field.
func (pduo *PermissionDependencyUpdateOne) SetDependencyType(pt permissiondependency.DependencyType) *PermissionDependencyUpdateOne {
	pduo.mutation.SetDependencyType(pt)
	return pduo
}

// SetNillableDependencyType sets the "dependency_type" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableDependencyType(pt *permissiondependency.DependencyType) *PermissionDependencyUpdateOne {
	if pt != nil {
		pduo.SetDependencyType(*pt)
	}
	return pduo
}

// SetCondition sets the "condition" field.
func (pduo *PermissionDependencyUpdateOne) SetCondition(s string) *PermissionDependencyUpdateOne {
	pduo.mutation.SetCondition(s)
	return pduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableCondition(s *string) *PermissionDependencyUpdateOne {
	if s != nil {
		pduo.SetCondition(*s)
	}
	return pduo
}

// ClearCondition clears the value of the "condition" field.
func (pduo *PermissionDependencyUpdateOne) ClearCondition() *PermissionDependencyUpdateOne {
	pduo.mutation.ClearCondition()
	return pduo
}

// SetActive sets the "active" field.
func (pduo *PermissionDependencyUpdateOne) SetActive(b bool) *PermissionDependencyUpdateOne {
	pduo.mutation.SetActive(b)
	return pduo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableActive(b *bool) *PermissionDependencyUpdateOne {
	if b != nil {
		pduo.SetActive(*b)
	}
	return pduo
}

// SetCreatedBy sets the "created_by" field.
func (pduo *PermissionDependencyUpdateOne) SetCreatedBy(s string) *PermissionDependencyUpdateOne {
	pduo.mutation.SetCreatedBy(s)
	return pduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pduo *PermissionDependencyUpdateOne) SetNillableCreatedBy(s *string) *PermissionDependencyUpdateOne {
	if s != nil {
		pduo.SetCreatedBy(*s)
	}
	return pduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pduo *PermissionDependencyUpdateOne) ClearCreatedBy() *PermissionDependencyUpdateOne {
	pduo.mutation.ClearCreatedBy()
	return pduo
}

// SetPermission sets the "permission" edge to the Permission entity.
func (pduo *PermissionDependencyUpdateOne) SetPermission(p *Permission) *PermissionDependencyUpdateOne {
	return pduo.SetPermissionID(p.ID)
}

// SetRequiredPermission sets the "required_permission" edge to the Permission entity.
func (pduo *PermissionDependencyUpdateOne) SetRequiredPermission(p *Permission) *PermissionDependencyUpdateOne {
	return pduo.SetRequiredPermissionID(p.ID)
}

// Mutation returns the PermissionDependencyMutation object of the builder.
func (pduo *PermissionDependencyUpdateOne) Mutation() *PermissionDependencyMutation {
	return pduo.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (pduo *PermissionDependencyUpdateOne) ClearPermission() *PermissionDependencyUpdateOne {
	pduo.mutation.ClearPermission()
	return pduo
}

// ClearRequiredPermission clears the "required_permission" edge to the Permission entity.
func (pduo *PermissionDependencyUpdateOne) ClearRequiredPermission() *PermissionDependencyUpdateOne {
	pduo.mutation.ClearRequiredPermission()
	return pduo
}

// Where appends a list predicates to the PermissionDependencyUpdate builder.
func (pduo *PermissionDependencyUpdateOne) Where(ps ...predicate.PermissionDependency) *PermissionDependencyUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PermissionDependencyUpdateOne) Select(field string, fields ...string) *PermissionDependencyUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PermissionDependency entity.
func (pduo *PermissionDependencyUpdateOne) Save(ctx context.Context) (*PermissionDependency, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PermissionDependencyUpdateOne) SaveX(ctx context.Context) *PermissionDependency {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PermissionDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PermissionDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *PermissionDependencyUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := permissiondependency.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *PermissionDependencyUpdateOne) check() error {
	if v, ok := pduo.mutation.PermissionID(); ok {
		if err := permissiondependency.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.permission_id": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.RequiredPermissionID(); ok {
		if err := permissiondependency.RequiredPermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "required_permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.required_permission_id": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.DependencyType(); ok {
		if err := permissiondependency.DependencyTypeValidator(v); err != nil {
			return &ValidationError{Name: "dependency_type", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.dependency_type": %w`, err)}
		}
	}
	if pduo.mutation.PermissionCleared() && len(pduo.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionDependency.permission"`)
	}
	if pduo.mutation.RequiredPermissionCleared() && len(pduo.mutation.RequiredPermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PermissionDependency.required_permission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pduo *PermissionDependencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionDependencyUpdateOne {
	pduo.modifiers = append(pduo.modifiers, modifiers...)
	return pduo
}

func (pduo *PermissionDependencyUpdateOne) sqlSave(ctx context.Context) (_node *PermissionDependency, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissiondependency.Table, permissiondependency.Columns, sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermissionDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissiondependency.FieldID)
		for _, f := range fields {
			if !permissiondependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissiondependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(permissiondependency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.DeletedAt(); ok {
		_spec.SetField(permissiondependency.FieldDeletedAt, field.TypeTime, value)
	}
	if pduo.mutation.DeletedAtCleared() {
		_spec.ClearField(permissiondependency.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pduo.mutation.DependencyType(); ok {
		_spec.SetField(permissiondependency.FieldDependencyType, field.TypeEnum, value)
	}
	if value, ok := pduo.mutation.Condition(); ok {
		_spec.SetField(permissiondependency.FieldCondition, field.TypeString, value)
	}
	if pduo.mutation.ConditionCleared() {
		_spec.ClearField(permissiondependency.FieldCondition, field.TypeString)
	}
	if value, ok := pduo.mutation.Active(); ok {
		_spec.SetField(permissiondependency.FieldActive, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.CreatedBy(); ok {
		_spec.SetField(permissiondependency.FieldCreatedBy, field.TypeString, value)
	}
	if pduo.mutation.CreatedByCleared() {
		_spec.ClearField(permissiondependency.FieldCreatedBy, field.TypeString)
	}
	if pduo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.RequiredPermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.RequiredPermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pduo.modifiers...)
	_node = &PermissionDependency{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissiondependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
