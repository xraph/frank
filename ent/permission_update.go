// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/pkg/model"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks     []Hook
	mutation  *PermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PermissionUpdate) SetUpdatedAt(t time.Time) *PermissionUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PermissionUpdate) SetDeletedAt(t time.Time) *PermissionUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDeletedAt(t *time.Time) *PermissionUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PermissionUpdate) ClearDeletedAt() *PermissionUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PermissionUpdate) SetDisplayName(s string) *PermissionUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDisplayName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// ClearDisplayName clears the value of the "display_name" field.
func (pu *PermissionUpdate) ClearDisplayName() *PermissionUpdate {
	pu.mutation.ClearDisplayName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetResource sets the "resource" field.
func (pu *PermissionUpdate) SetResource(s string) *PermissionUpdate {
	pu.mutation.SetResource(s)
	return pu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableResource(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetResource(*s)
	}
	return pu
}

// SetAction sets the "action" field.
func (pu *PermissionUpdate) SetAction(s string) *PermissionUpdate {
	pu.mutation.SetAction(s)
	return pu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableAction(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetAction(*s)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *PermissionUpdate) SetCategory(mc model.PermissionCategory) *PermissionUpdate {
	pu.mutation.SetCategory(mc)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableCategory(mc *model.PermissionCategory) *PermissionUpdate {
	if mc != nil {
		pu.SetCategory(*mc)
	}
	return pu
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (pu *PermissionUpdate) SetApplicableUserTypes(mt []model.UserType) *PermissionUpdate {
	pu.mutation.SetApplicableUserTypes(mt)
	return pu
}

// AppendApplicableUserTypes appends mt to the "applicable_user_types" field.
func (pu *PermissionUpdate) AppendApplicableUserTypes(mt []model.UserType) *PermissionUpdate {
	pu.mutation.AppendApplicableUserTypes(mt)
	return pu
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (pu *PermissionUpdate) SetApplicableContexts(mt []model.ContextType) *PermissionUpdate {
	pu.mutation.SetApplicableContexts(mt)
	return pu
}

// AppendApplicableContexts appends mt to the "applicable_contexts" field.
func (pu *PermissionUpdate) AppendApplicableContexts(mt []model.ContextType) *PermissionUpdate {
	pu.mutation.AppendApplicableContexts(mt)
	return pu
}

// SetConditions sets the "conditions" field.
func (pu *PermissionUpdate) SetConditions(s string) *PermissionUpdate {
	pu.mutation.SetConditions(s)
	return pu
}

// SetNillableConditions sets the "conditions" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableConditions(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetConditions(*s)
	}
	return pu
}

// ClearConditions clears the value of the "conditions" field.
func (pu *PermissionUpdate) ClearConditions() *PermissionUpdate {
	pu.mutation.ClearConditions()
	return pu
}

// SetSystem sets the "system" field.
func (pu *PermissionUpdate) SetSystem(b bool) *PermissionUpdate {
	pu.mutation.SetSystem(b)
	return pu
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableSystem(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetSystem(*b)
	}
	return pu
}

// SetDangerous sets the "dangerous" field.
func (pu *PermissionUpdate) SetDangerous(b bool) *PermissionUpdate {
	pu.mutation.SetDangerous(b)
	return pu
}

// SetNillableDangerous sets the "dangerous" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDangerous(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetDangerous(*b)
	}
	return pu
}

// SetRiskLevel sets the "risk_level" field.
func (pu *PermissionUpdate) SetRiskLevel(i int) *PermissionUpdate {
	pu.mutation.ResetRiskLevel()
	pu.mutation.SetRiskLevel(i)
	return pu
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableRiskLevel(i *int) *PermissionUpdate {
	if i != nil {
		pu.SetRiskLevel(*i)
	}
	return pu
}

// AddRiskLevel adds i to the "risk_level" field.
func (pu *PermissionUpdate) AddRiskLevel(i int) *PermissionUpdate {
	pu.mutation.AddRiskLevel(i)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PermissionUpdate) SetCreatedBy(s string) *PermissionUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableCreatedBy(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PermissionUpdate) ClearCreatedBy() *PermissionUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetActive sets the "active" field.
func (pu *PermissionUpdate) SetActive(b bool) *PermissionUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableActive(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// SetPermissionGroup sets the "permission_group" field.
func (pu *PermissionUpdate) SetPermissionGroup(mg model.PermissionGroup) *PermissionUpdate {
	pu.mutation.SetPermissionGroup(mg)
	return pu
}

// SetNillablePermissionGroup sets the "permission_group" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillablePermissionGroup(mg *model.PermissionGroup) *PermissionUpdate {
	if mg != nil {
		pu.SetPermissionGroup(*mg)
	}
	return pu
}

// ClearPermissionGroup clears the value of the "permission_group" field.
func (pu *PermissionUpdate) ClearPermissionGroup() *PermissionUpdate {
	pu.mutation.ClearPermissionGroup()
	return pu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pu *PermissionUpdate) AddRoleIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddRoleIDs(ids...)
	return pu
}

// AddRoles adds the "roles" edges to the Role entity.
func (pu *PermissionUpdate) AddRoles(r ...*Role) *PermissionUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoleIDs(ids...)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserPermission entity by IDs.
func (pu *PermissionUpdate) AddUserAssignmentIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddUserAssignmentIDs(ids...)
	return pu
}

// AddUserAssignments adds the "user_assignments" edges to the UserPermission entity.
func (pu *PermissionUpdate) AddUserAssignments(u ...*UserPermission) *PermissionUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserAssignmentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the PermissionDependency entity by IDs.
func (pu *PermissionUpdate) AddDependencyIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddDependencyIDs(ids...)
	return pu
}

// AddDependencies adds the "dependencies" edges to the PermissionDependency entity.
func (pu *PermissionUpdate) AddDependencies(p ...*PermissionDependency) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the PermissionDependency entity by IDs.
func (pu *PermissionUpdate) AddDependentIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddDependentIDs(ids...)
	return pu
}

// AddDependents adds the "dependents" edges to the PermissionDependency entity.
func (pu *PermissionUpdate) AddDependents(p ...*PermissionDependency) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddDependentIDs(ids...)
}

// AddDependentPermissionIDs adds the "dependent_permissions" edge to the Permission entity by IDs.
func (pu *PermissionUpdate) AddDependentPermissionIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddDependentPermissionIDs(ids...)
	return pu
}

// AddDependentPermissions adds the "dependent_permissions" edges to the Permission entity.
func (pu *PermissionUpdate) AddDependentPermissions(p ...*Permission) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddDependentPermissionIDs(ids...)
}

// AddRequiredPermissionIDs adds the "required_permissions" edge to the Permission entity by IDs.
func (pu *PermissionUpdate) AddRequiredPermissionIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.AddRequiredPermissionIDs(ids...)
	return pu
}

// AddRequiredPermissions adds the "required_permissions" edges to the Permission entity.
func (pu *PermissionUpdate) AddRequiredPermissions(p ...*Permission) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddRequiredPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (pu *PermissionUpdate) ClearRoles() *PermissionUpdate {
	pu.mutation.ClearRoles()
	return pu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (pu *PermissionUpdate) RemoveRoleIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveRoleIDs(ids...)
	return pu
}

// RemoveRoles removes "roles" edges to Role entities.
func (pu *PermissionUpdate) RemoveRoles(r ...*Role) *PermissionUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoleIDs(ids...)
}

// ClearUserAssignments clears all "user_assignments" edges to the UserPermission entity.
func (pu *PermissionUpdate) ClearUserAssignments() *PermissionUpdate {
	pu.mutation.ClearUserAssignments()
	return pu
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to UserPermission entities by IDs.
func (pu *PermissionUpdate) RemoveUserAssignmentIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveUserAssignmentIDs(ids...)
	return pu
}

// RemoveUserAssignments removes "user_assignments" edges to UserPermission entities.
func (pu *PermissionUpdate) RemoveUserAssignments(u ...*UserPermission) *PermissionUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserAssignmentIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the PermissionDependency entity.
func (pu *PermissionUpdate) ClearDependencies() *PermissionUpdate {
	pu.mutation.ClearDependencies()
	return pu
}

// RemoveDependencyIDs removes the "dependencies" edge to PermissionDependency entities by IDs.
func (pu *PermissionUpdate) RemoveDependencyIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveDependencyIDs(ids...)
	return pu
}

// RemoveDependencies removes "dependencies" edges to PermissionDependency entities.
func (pu *PermissionUpdate) RemoveDependencies(p ...*PermissionDependency) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveDependencyIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the PermissionDependency entity.
func (pu *PermissionUpdate) ClearDependents() *PermissionUpdate {
	pu.mutation.ClearDependents()
	return pu
}

// RemoveDependentIDs removes the "dependents" edge to PermissionDependency entities by IDs.
func (pu *PermissionUpdate) RemoveDependentIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveDependentIDs(ids...)
	return pu
}

// RemoveDependents removes "dependents" edges to PermissionDependency entities.
func (pu *PermissionUpdate) RemoveDependents(p ...*PermissionDependency) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveDependentIDs(ids...)
}

// ClearDependentPermissions clears all "dependent_permissions" edges to the Permission entity.
func (pu *PermissionUpdate) ClearDependentPermissions() *PermissionUpdate {
	pu.mutation.ClearDependentPermissions()
	return pu
}

// RemoveDependentPermissionIDs removes the "dependent_permissions" edge to Permission entities by IDs.
func (pu *PermissionUpdate) RemoveDependentPermissionIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveDependentPermissionIDs(ids...)
	return pu
}

// RemoveDependentPermissions removes "dependent_permissions" edges to Permission entities.
func (pu *PermissionUpdate) RemoveDependentPermissions(p ...*Permission) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveDependentPermissionIDs(ids...)
}

// ClearRequiredPermissions clears all "required_permissions" edges to the Permission entity.
func (pu *PermissionUpdate) ClearRequiredPermissions() *PermissionUpdate {
	pu.mutation.ClearRequiredPermissions()
	return pu
}

// RemoveRequiredPermissionIDs removes the "required_permissions" edge to Permission entities by IDs.
func (pu *PermissionUpdate) RemoveRequiredPermissionIDs(ids ...xid.ID) *PermissionUpdate {
	pu.mutation.RemoveRequiredPermissionIDs(ids...)
	return pu
}

// RemoveRequiredPermissions removes "required_permissions" edges to Permission entities.
func (pu *PermissionUpdate) RemoveRequiredPermissions(p ...*Permission) *PermissionUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveRequiredPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := permission.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Resource(); ok {
		if err := permission.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "Permission.resource": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Action(); ok {
		if err := permission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Permission.action": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Category(); ok {
		if err := permission.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Permission.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PermissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(permission.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(permission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(permission.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.DisplayNameCleared() {
		_spec.ClearField(permission.FieldDisplayName, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Resource(); ok {
		_spec.SetField(permission.FieldResource, field.TypeString, value)
	}
	if value, ok := pu.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(permission.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(permission.FieldApplicableUserTypes, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedApplicableUserTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldApplicableUserTypes, value)
		})
	}
	if value, ok := pu.mutation.ApplicableContexts(); ok {
		_spec.SetField(permission.FieldApplicableContexts, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedApplicableContexts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldApplicableContexts, value)
		})
	}
	if value, ok := pu.mutation.Conditions(); ok {
		_spec.SetField(permission.FieldConditions, field.TypeString, value)
	}
	if pu.mutation.ConditionsCleared() {
		_spec.ClearField(permission.FieldConditions, field.TypeString)
	}
	if value, ok := pu.mutation.System(); ok {
		_spec.SetField(permission.FieldSystem, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Dangerous(); ok {
		_spec.SetField(permission.FieldDangerous, field.TypeBool, value)
	}
	if value, ok := pu.mutation.RiskLevel(); ok {
		_spec.SetField(permission.FieldRiskLevel, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRiskLevel(); ok {
		_spec.AddField(permission.FieldRiskLevel, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(permission.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(permission.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(permission.FieldActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PermissionGroup(); ok {
		_spec.SetField(permission.FieldPermissionGroup, field.TypeString, value)
	}
	if pu.mutation.PermissionGroupCleared() {
		_spec.ClearField(permission.FieldPermissionGroup, field.TypeString)
	}
	if pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !pu.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !pu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !pu.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DependentPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDependentPermissionsIDs(); len(nodes) > 0 && !pu.mutation.DependentPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DependentPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RequiredPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRequiredPermissionsIDs(); len(nodes) > 0 && !pu.mutation.RequiredPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RequiredPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PermissionUpdateOne) SetUpdatedAt(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PermissionUpdateOne) SetDeletedAt(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDeletedAt(t *time.Time) *PermissionUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PermissionUpdateOne) ClearDeletedAt() *PermissionUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *PermissionUpdateOne) SetDisplayName(s string) *PermissionUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDisplayName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puo *PermissionUpdateOne) ClearDisplayName() *PermissionUpdateOne {
	puo.mutation.ClearDisplayName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetResource sets the "resource" field.
func (puo *PermissionUpdateOne) SetResource(s string) *PermissionUpdateOne {
	puo.mutation.SetResource(s)
	return puo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableResource(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetResource(*s)
	}
	return puo
}

// SetAction sets the "action" field.
func (puo *PermissionUpdateOne) SetAction(s string) *PermissionUpdateOne {
	puo.mutation.SetAction(s)
	return puo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableAction(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetAction(*s)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *PermissionUpdateOne) SetCategory(mc model.PermissionCategory) *PermissionUpdateOne {
	puo.mutation.SetCategory(mc)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableCategory(mc *model.PermissionCategory) *PermissionUpdateOne {
	if mc != nil {
		puo.SetCategory(*mc)
	}
	return puo
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (puo *PermissionUpdateOne) SetApplicableUserTypes(mt []model.UserType) *PermissionUpdateOne {
	puo.mutation.SetApplicableUserTypes(mt)
	return puo
}

// AppendApplicableUserTypes appends mt to the "applicable_user_types" field.
func (puo *PermissionUpdateOne) AppendApplicableUserTypes(mt []model.UserType) *PermissionUpdateOne {
	puo.mutation.AppendApplicableUserTypes(mt)
	return puo
}

// SetApplicableContexts sets the "applicable_contexts" field.
func (puo *PermissionUpdateOne) SetApplicableContexts(mt []model.ContextType) *PermissionUpdateOne {
	puo.mutation.SetApplicableContexts(mt)
	return puo
}

// AppendApplicableContexts appends mt to the "applicable_contexts" field.
func (puo *PermissionUpdateOne) AppendApplicableContexts(mt []model.ContextType) *PermissionUpdateOne {
	puo.mutation.AppendApplicableContexts(mt)
	return puo
}

// SetConditions sets the "conditions" field.
func (puo *PermissionUpdateOne) SetConditions(s string) *PermissionUpdateOne {
	puo.mutation.SetConditions(s)
	return puo
}

// SetNillableConditions sets the "conditions" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableConditions(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetConditions(*s)
	}
	return puo
}

// ClearConditions clears the value of the "conditions" field.
func (puo *PermissionUpdateOne) ClearConditions() *PermissionUpdateOne {
	puo.mutation.ClearConditions()
	return puo
}

// SetSystem sets the "system" field.
func (puo *PermissionUpdateOne) SetSystem(b bool) *PermissionUpdateOne {
	puo.mutation.SetSystem(b)
	return puo
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableSystem(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetSystem(*b)
	}
	return puo
}

// SetDangerous sets the "dangerous" field.
func (puo *PermissionUpdateOne) SetDangerous(b bool) *PermissionUpdateOne {
	puo.mutation.SetDangerous(b)
	return puo
}

// SetNillableDangerous sets the "dangerous" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDangerous(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetDangerous(*b)
	}
	return puo
}

// SetRiskLevel sets the "risk_level" field.
func (puo *PermissionUpdateOne) SetRiskLevel(i int) *PermissionUpdateOne {
	puo.mutation.ResetRiskLevel()
	puo.mutation.SetRiskLevel(i)
	return puo
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableRiskLevel(i *int) *PermissionUpdateOne {
	if i != nil {
		puo.SetRiskLevel(*i)
	}
	return puo
}

// AddRiskLevel adds i to the "risk_level" field.
func (puo *PermissionUpdateOne) AddRiskLevel(i int) *PermissionUpdateOne {
	puo.mutation.AddRiskLevel(i)
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *PermissionUpdateOne) SetCreatedBy(s string) *PermissionUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableCreatedBy(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PermissionUpdateOne) ClearCreatedBy() *PermissionUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetActive sets the "active" field.
func (puo *PermissionUpdateOne) SetActive(b bool) *PermissionUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableActive(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// SetPermissionGroup sets the "permission_group" field.
func (puo *PermissionUpdateOne) SetPermissionGroup(mg model.PermissionGroup) *PermissionUpdateOne {
	puo.mutation.SetPermissionGroup(mg)
	return puo
}

// SetNillablePermissionGroup sets the "permission_group" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillablePermissionGroup(mg *model.PermissionGroup) *PermissionUpdateOne {
	if mg != nil {
		puo.SetPermissionGroup(*mg)
	}
	return puo
}

// ClearPermissionGroup clears the value of the "permission_group" field.
func (puo *PermissionUpdateOne) ClearPermissionGroup() *PermissionUpdateOne {
	puo.mutation.ClearPermissionGroup()
	return puo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (puo *PermissionUpdateOne) AddRoleIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddRoleIDs(ids...)
	return puo
}

// AddRoles adds the "roles" edges to the Role entity.
func (puo *PermissionUpdateOne) AddRoles(r ...*Role) *PermissionUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoleIDs(ids...)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserPermission entity by IDs.
func (puo *PermissionUpdateOne) AddUserAssignmentIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddUserAssignmentIDs(ids...)
	return puo
}

// AddUserAssignments adds the "user_assignments" edges to the UserPermission entity.
func (puo *PermissionUpdateOne) AddUserAssignments(u ...*UserPermission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserAssignmentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the PermissionDependency entity by IDs.
func (puo *PermissionUpdateOne) AddDependencyIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddDependencyIDs(ids...)
	return puo
}

// AddDependencies adds the "dependencies" edges to the PermissionDependency entity.
func (puo *PermissionUpdateOne) AddDependencies(p ...*PermissionDependency) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the PermissionDependency entity by IDs.
func (puo *PermissionUpdateOne) AddDependentIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddDependentIDs(ids...)
	return puo
}

// AddDependents adds the "dependents" edges to the PermissionDependency entity.
func (puo *PermissionUpdateOne) AddDependents(p ...*PermissionDependency) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddDependentIDs(ids...)
}

// AddDependentPermissionIDs adds the "dependent_permissions" edge to the Permission entity by IDs.
func (puo *PermissionUpdateOne) AddDependentPermissionIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddDependentPermissionIDs(ids...)
	return puo
}

// AddDependentPermissions adds the "dependent_permissions" edges to the Permission entity.
func (puo *PermissionUpdateOne) AddDependentPermissions(p ...*Permission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddDependentPermissionIDs(ids...)
}

// AddRequiredPermissionIDs adds the "required_permissions" edge to the Permission entity by IDs.
func (puo *PermissionUpdateOne) AddRequiredPermissionIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.AddRequiredPermissionIDs(ids...)
	return puo
}

// AddRequiredPermissions adds the "required_permissions" edges to the Permission entity.
func (puo *PermissionUpdateOne) AddRequiredPermissions(p ...*Permission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddRequiredPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (puo *PermissionUpdateOne) ClearRoles() *PermissionUpdateOne {
	puo.mutation.ClearRoles()
	return puo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (puo *PermissionUpdateOne) RemoveRoleIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveRoleIDs(ids...)
	return puo
}

// RemoveRoles removes "roles" edges to Role entities.
func (puo *PermissionUpdateOne) RemoveRoles(r ...*Role) *PermissionUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoleIDs(ids...)
}

// ClearUserAssignments clears all "user_assignments" edges to the UserPermission entity.
func (puo *PermissionUpdateOne) ClearUserAssignments() *PermissionUpdateOne {
	puo.mutation.ClearUserAssignments()
	return puo
}

// RemoveUserAssignmentIDs removes the "user_assignments" edge to UserPermission entities by IDs.
func (puo *PermissionUpdateOne) RemoveUserAssignmentIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveUserAssignmentIDs(ids...)
	return puo
}

// RemoveUserAssignments removes "user_assignments" edges to UserPermission entities.
func (puo *PermissionUpdateOne) RemoveUserAssignments(u ...*UserPermission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserAssignmentIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the PermissionDependency entity.
func (puo *PermissionUpdateOne) ClearDependencies() *PermissionUpdateOne {
	puo.mutation.ClearDependencies()
	return puo
}

// RemoveDependencyIDs removes the "dependencies" edge to PermissionDependency entities by IDs.
func (puo *PermissionUpdateOne) RemoveDependencyIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveDependencyIDs(ids...)
	return puo
}

// RemoveDependencies removes "dependencies" edges to PermissionDependency entities.
func (puo *PermissionUpdateOne) RemoveDependencies(p ...*PermissionDependency) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveDependencyIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the PermissionDependency entity.
func (puo *PermissionUpdateOne) ClearDependents() *PermissionUpdateOne {
	puo.mutation.ClearDependents()
	return puo
}

// RemoveDependentIDs removes the "dependents" edge to PermissionDependency entities by IDs.
func (puo *PermissionUpdateOne) RemoveDependentIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveDependentIDs(ids...)
	return puo
}

// RemoveDependents removes "dependents" edges to PermissionDependency entities.
func (puo *PermissionUpdateOne) RemoveDependents(p ...*PermissionDependency) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveDependentIDs(ids...)
}

// ClearDependentPermissions clears all "dependent_permissions" edges to the Permission entity.
func (puo *PermissionUpdateOne) ClearDependentPermissions() *PermissionUpdateOne {
	puo.mutation.ClearDependentPermissions()
	return puo
}

// RemoveDependentPermissionIDs removes the "dependent_permissions" edge to Permission entities by IDs.
func (puo *PermissionUpdateOne) RemoveDependentPermissionIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveDependentPermissionIDs(ids...)
	return puo
}

// RemoveDependentPermissions removes "dependent_permissions" edges to Permission entities.
func (puo *PermissionUpdateOne) RemoveDependentPermissions(p ...*Permission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveDependentPermissionIDs(ids...)
}

// ClearRequiredPermissions clears all "required_permissions" edges to the Permission entity.
func (puo *PermissionUpdateOne) ClearRequiredPermissions() *PermissionUpdateOne {
	puo.mutation.ClearRequiredPermissions()
	return puo
}

// RemoveRequiredPermissionIDs removes the "required_permissions" edge to Permission entities by IDs.
func (puo *PermissionUpdateOne) RemoveRequiredPermissionIDs(ids ...xid.ID) *PermissionUpdateOne {
	puo.mutation.RemoveRequiredPermissionIDs(ids...)
	return puo
}

// RemoveRequiredPermissions removes "required_permissions" edges to Permission entities.
func (puo *PermissionUpdateOne) RemoveRequiredPermissions(p ...*Permission) *PermissionUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveRequiredPermissionIDs(ids...)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := permission.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Resource(); ok {
		if err := permission.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "Permission.resource": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Action(); ok {
		if err := permission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Permission.action": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Category(); ok {
		if err := permission.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Permission.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PermissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(permission.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(permission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(permission.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.DisplayNameCleared() {
		_spec.ClearField(permission.FieldDisplayName, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Resource(); ok {
		_spec.SetField(permission.FieldResource, field.TypeString, value)
	}
	if value, ok := puo.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(permission.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(permission.FieldApplicableUserTypes, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedApplicableUserTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldApplicableUserTypes, value)
		})
	}
	if value, ok := puo.mutation.ApplicableContexts(); ok {
		_spec.SetField(permission.FieldApplicableContexts, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedApplicableContexts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, permission.FieldApplicableContexts, value)
		})
	}
	if value, ok := puo.mutation.Conditions(); ok {
		_spec.SetField(permission.FieldConditions, field.TypeString, value)
	}
	if puo.mutation.ConditionsCleared() {
		_spec.ClearField(permission.FieldConditions, field.TypeString)
	}
	if value, ok := puo.mutation.System(); ok {
		_spec.SetField(permission.FieldSystem, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Dangerous(); ok {
		_spec.SetField(permission.FieldDangerous, field.TypeBool, value)
	}
	if value, ok := puo.mutation.RiskLevel(); ok {
		_spec.SetField(permission.FieldRiskLevel, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRiskLevel(); ok {
		_spec.AddField(permission.FieldRiskLevel, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(permission.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(permission.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(permission.FieldActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PermissionGroup(); ok {
		_spec.SetField(permission.FieldPermissionGroup, field.TypeString, value)
	}
	if puo.mutation.PermissionGroupCleared() {
		_spec.ClearField(permission.FieldPermissionGroup, field.TypeString)
	}
	if puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUserAssignmentsIDs(); len(nodes) > 0 && !puo.mutation.UserAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !puo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !puo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DependentPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDependentPermissionsIDs(); len(nodes) > 0 && !puo.mutation.DependentPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DependentPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RequiredPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRequiredPermissionsIDs(); len(nodes) > 0 && !puo.mutation.RequiredPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RequiredPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
