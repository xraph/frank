// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// MembershipCreate is the builder for creating a Membership entity.
type MembershipCreate struct {
	config
	mutation *MembershipMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MembershipCreate) SetCreatedAt(t time.Time) *MembershipCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableCreatedAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MembershipCreate) SetUpdatedAt(t time.Time) *MembershipCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableUpdatedAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MembershipCreate) SetDeletedAt(t time.Time) *MembershipCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableDeletedAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetUserID sets the "user_id" field.
func (mc *MembershipCreate) SetUserID(x xid.ID) *MembershipCreate {
	mc.mutation.SetUserID(x)
	return mc
}

// SetOrganizationID sets the "organization_id" field.
func (mc *MembershipCreate) SetOrganizationID(x xid.ID) *MembershipCreate {
	mc.mutation.SetOrganizationID(x)
	return mc
}

// SetRoleID sets the "role_id" field.
func (mc *MembershipCreate) SetRoleID(x xid.ID) *MembershipCreate {
	mc.mutation.SetRoleID(x)
	return mc
}

// SetEmail sets the "email" field.
func (mc *MembershipCreate) SetEmail(s string) *MembershipCreate {
	mc.mutation.SetEmail(s)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MembershipCreate) SetStatus(ms model.MembershipStatus) *MembershipCreate {
	mc.mutation.SetStatus(ms)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableStatus(ms *model.MembershipStatus) *MembershipCreate {
	if ms != nil {
		mc.SetStatus(*ms)
	}
	return mc
}

// SetInvitedBy sets the "invited_by" field.
func (mc *MembershipCreate) SetInvitedBy(x xid.ID) *MembershipCreate {
	mc.mutation.SetInvitedBy(x)
	return mc
}

// SetNillableInvitedBy sets the "invited_by" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableInvitedBy(x *xid.ID) *MembershipCreate {
	if x != nil {
		mc.SetInvitedBy(*x)
	}
	return mc
}

// SetInvitedAt sets the "invited_at" field.
func (mc *MembershipCreate) SetInvitedAt(t time.Time) *MembershipCreate {
	mc.mutation.SetInvitedAt(t)
	return mc
}

// SetNillableInvitedAt sets the "invited_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableInvitedAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetInvitedAt(*t)
	}
	return mc
}

// SetJoinedAt sets the "joined_at" field.
func (mc *MembershipCreate) SetJoinedAt(t time.Time) *MembershipCreate {
	mc.mutation.SetJoinedAt(t)
	return mc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableJoinedAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetJoinedAt(*t)
	}
	return mc
}

// SetExpiresAt sets the "expires_at" field.
func (mc *MembershipCreate) SetExpiresAt(t time.Time) *MembershipCreate {
	mc.mutation.SetExpiresAt(t)
	return mc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableExpiresAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetExpiresAt(*t)
	}
	return mc
}

// SetInvitationToken sets the "invitation_token" field.
func (mc *MembershipCreate) SetInvitationToken(s string) *MembershipCreate {
	mc.mutation.SetInvitationToken(s)
	return mc
}

// SetNillableInvitationToken sets the "invitation_token" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableInvitationToken(s *string) *MembershipCreate {
	if s != nil {
		mc.SetInvitationToken(*s)
	}
	return mc
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (mc *MembershipCreate) SetIsBillingContact(b bool) *MembershipCreate {
	mc.mutation.SetIsBillingContact(b)
	return mc
}

// SetNillableIsBillingContact sets the "is_billing_contact" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableIsBillingContact(b *bool) *MembershipCreate {
	if b != nil {
		mc.SetIsBillingContact(*b)
	}
	return mc
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (mc *MembershipCreate) SetIsPrimaryContact(b bool) *MembershipCreate {
	mc.mutation.SetIsPrimaryContact(b)
	return mc
}

// SetNillableIsPrimaryContact sets the "is_primary_contact" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableIsPrimaryContact(b *bool) *MembershipCreate {
	if b != nil {
		mc.SetIsPrimaryContact(*b)
	}
	return mc
}

// SetLeftAt sets the "left_at" field.
func (mc *MembershipCreate) SetLeftAt(t time.Time) *MembershipCreate {
	mc.mutation.SetLeftAt(t)
	return mc
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableLeftAt(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetLeftAt(*t)
	}
	return mc
}

// SetMetadata sets the "metadata" field.
func (mc *MembershipCreate) SetMetadata(m map[string]interface{}) *MembershipCreate {
	mc.mutation.SetMetadata(m)
	return mc
}

// SetCustomFields sets the "custom_fields" field.
func (mc *MembershipCreate) SetCustomFields(m map[string]interface{}) *MembershipCreate {
	mc.mutation.SetCustomFields(m)
	return mc
}

// SetID sets the "id" field.
func (mc *MembershipCreate) SetID(x xid.ID) *MembershipCreate {
	mc.mutation.SetID(x)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableID(x *xid.ID) *MembershipCreate {
	if x != nil {
		mc.SetID(*x)
	}
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MembershipCreate) SetUser(u *User) *MembershipCreate {
	return mc.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (mc *MembershipCreate) SetOrganization(o *Organization) *MembershipCreate {
	return mc.SetOrganizationID(o.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (mc *MembershipCreate) SetRole(r *Role) *MembershipCreate {
	return mc.SetRoleID(r.ID)
}

// SetInviterID sets the "inviter" edge to the User entity by ID.
func (mc *MembershipCreate) SetInviterID(id xid.ID) *MembershipCreate {
	mc.mutation.SetInviterID(id)
	return mc
}

// SetNillableInviterID sets the "inviter" edge to the User entity by ID if the given value is not nil.
func (mc *MembershipCreate) SetNillableInviterID(id *xid.ID) *MembershipCreate {
	if id != nil {
		mc = mc.SetInviterID(*id)
	}
	return mc
}

// SetInviter sets the "inviter" edge to the User entity.
func (mc *MembershipCreate) SetInviter(u *User) *MembershipCreate {
	return mc.SetInviterID(u.ID)
}

// Mutation returns the MembershipMutation object of the builder.
func (mc *MembershipCreate) Mutation() *MembershipMutation {
	return mc.mutation
}

// Save creates the Membership in the database.
func (mc *MembershipCreate) Save(ctx context.Context) (*Membership, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MembershipCreate) SaveX(ctx context.Context) *Membership {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MembershipCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MembershipCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MembershipCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := membership.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := membership.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := membership.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.InvitedAt(); !ok {
		v := membership.DefaultInvitedAt()
		mc.mutation.SetInvitedAt(v)
	}
	if _, ok := mc.mutation.IsBillingContact(); !ok {
		v := membership.DefaultIsBillingContact
		mc.mutation.SetIsBillingContact(v)
	}
	if _, ok := mc.mutation.IsPrimaryContact(); !ok {
		v := membership.DefaultIsPrimaryContact
		mc.mutation.SetIsPrimaryContact(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := membership.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MembershipCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Membership.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Membership.updated_at"`)}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Membership.user_id"`)}
	}
	if v, ok := mc.mutation.UserID(); ok {
		if err := membership.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Membership.user_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Membership.organization_id"`)}
	}
	if v, ok := mc.mutation.OrganizationID(); ok {
		if err := membership.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Membership.organization_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "Membership.role_id"`)}
	}
	if v, ok := mc.mutation.RoleID(); ok {
		if err := membership.RoleIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Membership.role_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Membership.email"`)}
	}
	if v, ok := mc.mutation.Email(); ok {
		if err := membership.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Membership.email": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Membership.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := membership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Membership.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.InvitedAt(); !ok {
		return &ValidationError{Name: "invited_at", err: errors.New(`ent: missing required field "Membership.invited_at"`)}
	}
	if _, ok := mc.mutation.IsBillingContact(); !ok {
		return &ValidationError{Name: "is_billing_contact", err: errors.New(`ent: missing required field "Membership.is_billing_contact"`)}
	}
	if _, ok := mc.mutation.IsPrimaryContact(); !ok {
		return &ValidationError{Name: "is_primary_contact", err: errors.New(`ent: missing required field "Membership.is_primary_contact"`)}
	}
	if len(mc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Membership.user"`)}
	}
	if len(mc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Membership.organization"`)}
	}
	if len(mc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "Membership.role"`)}
	}
	return nil
}

func (mc *MembershipCreate) sqlSave(ctx context.Context) (*Membership, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MembershipCreate) createSpec() (*Membership, *sqlgraph.CreateSpec) {
	var (
		_node = &Membership{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(membership.Table, sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(membership.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(membership.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(membership.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Email(); ok {
		_spec.SetField(membership.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(membership.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.InvitedAt(); ok {
		_spec.SetField(membership.FieldInvitedAt, field.TypeTime, value)
		_node.InvitedAt = value
	}
	if value, ok := mc.mutation.JoinedAt(); ok {
		_spec.SetField(membership.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = &value
	}
	if value, ok := mc.mutation.ExpiresAt(); ok {
		_spec.SetField(membership.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := mc.mutation.InvitationToken(); ok {
		_spec.SetField(membership.FieldInvitationToken, field.TypeString, value)
		_node.InvitationToken = value
	}
	if value, ok := mc.mutation.IsBillingContact(); ok {
		_spec.SetField(membership.FieldIsBillingContact, field.TypeBool, value)
		_node.IsBillingContact = value
	}
	if value, ok := mc.mutation.IsPrimaryContact(); ok {
		_spec.SetField(membership.FieldIsPrimaryContact, field.TypeBool, value)
		_node.IsPrimaryContact = value
	}
	if value, ok := mc.mutation.LeftAt(); ok {
		_spec.SetField(membership.FieldLeftAt, field.TypeTime, value)
		_node.LeftAt = &value
	}
	if value, ok := mc.mutation.Metadata(); ok {
		_spec.SetField(membership.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := mc.mutation.CustomFields(); ok {
		_spec.SetField(membership.FieldCustomFields, field.TypeJSON, value)
		_node.CustomFields = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvitedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Membership.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MembershipUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MembershipCreate) OnConflict(opts ...sql.ConflictOption) *MembershipUpsertOne {
	mc.conflict = opts
	return &MembershipUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Membership.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MembershipCreate) OnConflictColumns(columns ...string) *MembershipUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MembershipUpsertOne{
		create: mc,
	}
}

type (
	// MembershipUpsertOne is the builder for "upsert"-ing
	//  one Membership node.
	MembershipUpsertOne struct {
		create *MembershipCreate
	}

	// MembershipUpsert is the "OnConflict" setter.
	MembershipUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MembershipUpsert) SetUpdatedAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateUpdatedAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MembershipUpsert) SetDeletedAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateDeletedAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MembershipUpsert) ClearDeletedAt() *MembershipUpsert {
	u.SetNull(membership.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MembershipUpsert) SetUserID(v xid.ID) *MembershipUpsert {
	u.Set(membership.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateUserID() *MembershipUpsert {
	u.SetExcluded(membership.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *MembershipUpsert) SetOrganizationID(v xid.ID) *MembershipUpsert {
	u.Set(membership.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateOrganizationID() *MembershipUpsert {
	u.SetExcluded(membership.FieldOrganizationID)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *MembershipUpsert) SetRoleID(v xid.ID) *MembershipUpsert {
	u.Set(membership.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateRoleID() *MembershipUpsert {
	u.SetExcluded(membership.FieldRoleID)
	return u
}

// SetEmail sets the "email" field.
func (u *MembershipUpsert) SetEmail(v string) *MembershipUpsert {
	u.Set(membership.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateEmail() *MembershipUpsert {
	u.SetExcluded(membership.FieldEmail)
	return u
}

// SetStatus sets the "status" field.
func (u *MembershipUpsert) SetStatus(v model.MembershipStatus) *MembershipUpsert {
	u.Set(membership.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateStatus() *MembershipUpsert {
	u.SetExcluded(membership.FieldStatus)
	return u
}

// SetInvitedBy sets the "invited_by" field.
func (u *MembershipUpsert) SetInvitedBy(v xid.ID) *MembershipUpsert {
	u.Set(membership.FieldInvitedBy, v)
	return u
}

// UpdateInvitedBy sets the "invited_by" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateInvitedBy() *MembershipUpsert {
	u.SetExcluded(membership.FieldInvitedBy)
	return u
}

// ClearInvitedBy clears the value of the "invited_by" field.
func (u *MembershipUpsert) ClearInvitedBy() *MembershipUpsert {
	u.SetNull(membership.FieldInvitedBy)
	return u
}

// SetInvitedAt sets the "invited_at" field.
func (u *MembershipUpsert) SetInvitedAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldInvitedAt, v)
	return u
}

// UpdateInvitedAt sets the "invited_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateInvitedAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldInvitedAt)
	return u
}

// SetJoinedAt sets the "joined_at" field.
func (u *MembershipUpsert) SetJoinedAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldJoinedAt, v)
	return u
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateJoinedAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldJoinedAt)
	return u
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *MembershipUpsert) ClearJoinedAt() *MembershipUpsert {
	u.SetNull(membership.FieldJoinedAt)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *MembershipUpsert) SetExpiresAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateExpiresAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *MembershipUpsert) ClearExpiresAt() *MembershipUpsert {
	u.SetNull(membership.FieldExpiresAt)
	return u
}

// SetInvitationToken sets the "invitation_token" field.
func (u *MembershipUpsert) SetInvitationToken(v string) *MembershipUpsert {
	u.Set(membership.FieldInvitationToken, v)
	return u
}

// UpdateInvitationToken sets the "invitation_token" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateInvitationToken() *MembershipUpsert {
	u.SetExcluded(membership.FieldInvitationToken)
	return u
}

// ClearInvitationToken clears the value of the "invitation_token" field.
func (u *MembershipUpsert) ClearInvitationToken() *MembershipUpsert {
	u.SetNull(membership.FieldInvitationToken)
	return u
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (u *MembershipUpsert) SetIsBillingContact(v bool) *MembershipUpsert {
	u.Set(membership.FieldIsBillingContact, v)
	return u
}

// UpdateIsBillingContact sets the "is_billing_contact" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateIsBillingContact() *MembershipUpsert {
	u.SetExcluded(membership.FieldIsBillingContact)
	return u
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *MembershipUpsert) SetIsPrimaryContact(v bool) *MembershipUpsert {
	u.Set(membership.FieldIsPrimaryContact, v)
	return u
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateIsPrimaryContact() *MembershipUpsert {
	u.SetExcluded(membership.FieldIsPrimaryContact)
	return u
}

// SetLeftAt sets the "left_at" field.
func (u *MembershipUpsert) SetLeftAt(v time.Time) *MembershipUpsert {
	u.Set(membership.FieldLeftAt, v)
	return u
}

// UpdateLeftAt sets the "left_at" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateLeftAt() *MembershipUpsert {
	u.SetExcluded(membership.FieldLeftAt)
	return u
}

// ClearLeftAt clears the value of the "left_at" field.
func (u *MembershipUpsert) ClearLeftAt() *MembershipUpsert {
	u.SetNull(membership.FieldLeftAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *MembershipUpsert) SetMetadata(v map[string]interface{}) *MembershipUpsert {
	u.Set(membership.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateMetadata() *MembershipUpsert {
	u.SetExcluded(membership.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MembershipUpsert) ClearMetadata() *MembershipUpsert {
	u.SetNull(membership.FieldMetadata)
	return u
}

// SetCustomFields sets the "custom_fields" field.
func (u *MembershipUpsert) SetCustomFields(v map[string]interface{}) *MembershipUpsert {
	u.Set(membership.FieldCustomFields, v)
	return u
}

// UpdateCustomFields sets the "custom_fields" field to the value that was provided on create.
func (u *MembershipUpsert) UpdateCustomFields() *MembershipUpsert {
	u.SetExcluded(membership.FieldCustomFields)
	return u
}

// ClearCustomFields clears the value of the "custom_fields" field.
func (u *MembershipUpsert) ClearCustomFields() *MembershipUpsert {
	u.SetNull(membership.FieldCustomFields)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Membership.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(membership.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MembershipUpsertOne) UpdateNewValues() *MembershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(membership.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(membership.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Membership.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MembershipUpsertOne) Ignore() *MembershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MembershipUpsertOne) DoNothing() *MembershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MembershipCreate.OnConflict
// documentation for more info.
func (u *MembershipUpsertOne) Update(set func(*MembershipUpsert)) *MembershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MembershipUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MembershipUpsertOne) SetUpdatedAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateUpdatedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MembershipUpsertOne) SetDeletedAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateDeletedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MembershipUpsertOne) ClearDeletedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MembershipUpsertOne) SetUserID(v xid.ID) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateUserID() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *MembershipUpsertOne) SetOrganizationID(v xid.ID) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateOrganizationID() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *MembershipUpsertOne) SetRoleID(v xid.ID) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateRoleID() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateRoleID()
	})
}

// SetEmail sets the "email" field.
func (u *MembershipUpsertOne) SetEmail(v string) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateEmail() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateEmail()
	})
}

// SetStatus sets the "status" field.
func (u *MembershipUpsertOne) SetStatus(v model.MembershipStatus) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateStatus() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateStatus()
	})
}

// SetInvitedBy sets the "invited_by" field.
func (u *MembershipUpsertOne) SetInvitedBy(v xid.ID) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitedBy(v)
	})
}

// UpdateInvitedBy sets the "invited_by" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateInvitedBy() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitedBy()
	})
}

// ClearInvitedBy clears the value of the "invited_by" field.
func (u *MembershipUpsertOne) ClearInvitedBy() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearInvitedBy()
	})
}

// SetInvitedAt sets the "invited_at" field.
func (u *MembershipUpsertOne) SetInvitedAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitedAt(v)
	})
}

// UpdateInvitedAt sets the "invited_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateInvitedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitedAt()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *MembershipUpsertOne) SetJoinedAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateJoinedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateJoinedAt()
	})
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *MembershipUpsertOne) ClearJoinedAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearJoinedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *MembershipUpsertOne) SetExpiresAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateExpiresAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *MembershipUpsertOne) ClearExpiresAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearExpiresAt()
	})
}

// SetInvitationToken sets the "invitation_token" field.
func (u *MembershipUpsertOne) SetInvitationToken(v string) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitationToken(v)
	})
}

// UpdateInvitationToken sets the "invitation_token" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateInvitationToken() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitationToken()
	})
}

// ClearInvitationToken clears the value of the "invitation_token" field.
func (u *MembershipUpsertOne) ClearInvitationToken() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearInvitationToken()
	})
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (u *MembershipUpsertOne) SetIsBillingContact(v bool) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetIsBillingContact(v)
	})
}

// UpdateIsBillingContact sets the "is_billing_contact" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateIsBillingContact() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateIsBillingContact()
	})
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *MembershipUpsertOne) SetIsPrimaryContact(v bool) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetIsPrimaryContact(v)
	})
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateIsPrimaryContact() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateIsPrimaryContact()
	})
}

// SetLeftAt sets the "left_at" field.
func (u *MembershipUpsertOne) SetLeftAt(v time.Time) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetLeftAt(v)
	})
}

// UpdateLeftAt sets the "left_at" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateLeftAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateLeftAt()
	})
}

// ClearLeftAt clears the value of the "left_at" field.
func (u *MembershipUpsertOne) ClearLeftAt() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearLeftAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *MembershipUpsertOne) SetMetadata(v map[string]interface{}) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateMetadata() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MembershipUpsertOne) ClearMetadata() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearMetadata()
	})
}

// SetCustomFields sets the "custom_fields" field.
func (u *MembershipUpsertOne) SetCustomFields(v map[string]interface{}) *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.SetCustomFields(v)
	})
}

// UpdateCustomFields sets the "custom_fields" field to the value that was provided on create.
func (u *MembershipUpsertOne) UpdateCustomFields() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateCustomFields()
	})
}

// ClearCustomFields clears the value of the "custom_fields" field.
func (u *MembershipUpsertOne) ClearCustomFields() *MembershipUpsertOne {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearCustomFields()
	})
}

// Exec executes the query.
func (u *MembershipUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MembershipCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MembershipUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MembershipUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MembershipUpsertOne.ID is not supported by MySQL driver. Use MembershipUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MembershipUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MembershipCreateBulk is the builder for creating many Membership entities in bulk.
type MembershipCreateBulk struct {
	config
	err      error
	builders []*MembershipCreate
	conflict []sql.ConflictOption
}

// Save creates the Membership entities in the database.
func (mcb *MembershipCreateBulk) Save(ctx context.Context) ([]*Membership, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Membership, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MembershipCreateBulk) SaveX(ctx context.Context) []*Membership {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MembershipCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Membership.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MembershipUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MembershipCreateBulk) OnConflict(opts ...sql.ConflictOption) *MembershipUpsertBulk {
	mcb.conflict = opts
	return &MembershipUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Membership.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MembershipCreateBulk) OnConflictColumns(columns ...string) *MembershipUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MembershipUpsertBulk{
		create: mcb,
	}
}

// MembershipUpsertBulk is the builder for "upsert"-ing
// a bulk of Membership nodes.
type MembershipUpsertBulk struct {
	create *MembershipCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Membership.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(membership.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MembershipUpsertBulk) UpdateNewValues() *MembershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(membership.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(membership.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Membership.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MembershipUpsertBulk) Ignore() *MembershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MembershipUpsertBulk) DoNothing() *MembershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MembershipCreateBulk.OnConflict
// documentation for more info.
func (u *MembershipUpsertBulk) Update(set func(*MembershipUpsert)) *MembershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MembershipUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MembershipUpsertBulk) SetUpdatedAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateUpdatedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MembershipUpsertBulk) SetDeletedAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateDeletedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MembershipUpsertBulk) ClearDeletedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *MembershipUpsertBulk) SetUserID(v xid.ID) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateUserID() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *MembershipUpsertBulk) SetOrganizationID(v xid.ID) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateOrganizationID() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *MembershipUpsertBulk) SetRoleID(v xid.ID) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateRoleID() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateRoleID()
	})
}

// SetEmail sets the "email" field.
func (u *MembershipUpsertBulk) SetEmail(v string) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateEmail() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateEmail()
	})
}

// SetStatus sets the "status" field.
func (u *MembershipUpsertBulk) SetStatus(v model.MembershipStatus) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateStatus() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateStatus()
	})
}

// SetInvitedBy sets the "invited_by" field.
func (u *MembershipUpsertBulk) SetInvitedBy(v xid.ID) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitedBy(v)
	})
}

// UpdateInvitedBy sets the "invited_by" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateInvitedBy() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitedBy()
	})
}

// ClearInvitedBy clears the value of the "invited_by" field.
func (u *MembershipUpsertBulk) ClearInvitedBy() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearInvitedBy()
	})
}

// SetInvitedAt sets the "invited_at" field.
func (u *MembershipUpsertBulk) SetInvitedAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitedAt(v)
	})
}

// UpdateInvitedAt sets the "invited_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateInvitedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitedAt()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *MembershipUpsertBulk) SetJoinedAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateJoinedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateJoinedAt()
	})
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *MembershipUpsertBulk) ClearJoinedAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearJoinedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *MembershipUpsertBulk) SetExpiresAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateExpiresAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *MembershipUpsertBulk) ClearExpiresAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearExpiresAt()
	})
}

// SetInvitationToken sets the "invitation_token" field.
func (u *MembershipUpsertBulk) SetInvitationToken(v string) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetInvitationToken(v)
	})
}

// UpdateInvitationToken sets the "invitation_token" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateInvitationToken() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateInvitationToken()
	})
}

// ClearInvitationToken clears the value of the "invitation_token" field.
func (u *MembershipUpsertBulk) ClearInvitationToken() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearInvitationToken()
	})
}

// SetIsBillingContact sets the "is_billing_contact" field.
func (u *MembershipUpsertBulk) SetIsBillingContact(v bool) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetIsBillingContact(v)
	})
}

// UpdateIsBillingContact sets the "is_billing_contact" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateIsBillingContact() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateIsBillingContact()
	})
}

// SetIsPrimaryContact sets the "is_primary_contact" field.
func (u *MembershipUpsertBulk) SetIsPrimaryContact(v bool) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetIsPrimaryContact(v)
	})
}

// UpdateIsPrimaryContact sets the "is_primary_contact" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateIsPrimaryContact() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateIsPrimaryContact()
	})
}

// SetLeftAt sets the "left_at" field.
func (u *MembershipUpsertBulk) SetLeftAt(v time.Time) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetLeftAt(v)
	})
}

// UpdateLeftAt sets the "left_at" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateLeftAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateLeftAt()
	})
}

// ClearLeftAt clears the value of the "left_at" field.
func (u *MembershipUpsertBulk) ClearLeftAt() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearLeftAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *MembershipUpsertBulk) SetMetadata(v map[string]interface{}) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateMetadata() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MembershipUpsertBulk) ClearMetadata() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearMetadata()
	})
}

// SetCustomFields sets the "custom_fields" field.
func (u *MembershipUpsertBulk) SetCustomFields(v map[string]interface{}) *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.SetCustomFields(v)
	})
}

// UpdateCustomFields sets the "custom_fields" field to the value that was provided on create.
func (u *MembershipUpsertBulk) UpdateCustomFields() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.UpdateCustomFields()
	})
}

// ClearCustomFields clears the value of the "custom_fields" field.
func (u *MembershipUpsertBulk) ClearCustomFields() *MembershipUpsertBulk {
	return u.Update(func(s *MembershipUpsert) {
		s.ClearCustomFields()
	})
}

// Exec executes the query.
func (u *MembershipUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MembershipCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MembershipCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MembershipUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
