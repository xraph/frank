// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/providertemplate"
)

// ProviderTemplate is the model entity for the ProviderTemplate schema.
type ProviderTemplate struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Unique template key (e.g., 'google', 'microsoft')
	Key string `json:"key,omitempty"`
	// Provider name (e.g., 'Google', 'Microsoft')
	Name string `json:"name,omitempty"`
	// Display name for UI (e.g., 'Sign in with Google')
	DisplayName string `json:"display_name,omitempty"`
	// Provider type (oidc, oauth2, saml)
	Type string `json:"type,omitempty"`
	// Authentication protocol
	Protocol string `json:"protocol,omitempty"`
	// URL to provider icon
	IconURL string `json:"icon_url,omitempty"`
	// Provider category (social, enterprise, developer, etc.)
	Category string `json:"category,omitempty"`
	// Whether this is a popular provider
	Popular bool `json:"popular,omitempty"`
	// Whether template is active
	Active bool `json:"active,omitempty"`
	// Provider description
	Description string `json:"description,omitempty"`
	// Additional membership metadata
	ConfigTemplate map[string]interface{} `json:"config_template,omitempty"`
	// Required configuration fields
	RequiredFields []string `json:"required_fields,omitempty"`
	// Supported features list
	SupportedFeatures []string `json:"supported_features,omitempty"`
	// Link to provider documentation
	DocumentationURL string `json:"documentation_url,omitempty"`
	// Link to setup guide
	SetupGuideURL string `json:"setup_guide_url,omitempty"`
	// Number of organizations using this template
	UsageCount int `json:"usage_count,omitempty"`
	// Average setup time in minutes
	AverageSetupTime float64 `json:"average_setup_time,omitempty"`
	// Setup success rate percentage
	SuccessRate float64 `json:"success_rate,omitempty"`
	// Popularity ranking
	PopularityRank int `json:"popularity_rank,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderTemplateQuery when eager-loading is set.
	Edges        ProviderTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProviderTemplateEdges holds the relations/edges for other nodes in the graph.
type ProviderTemplateEdges struct {
	// OrganizationProviders holds the value of the organization_providers edge.
	OrganizationProviders []*OrganizationProvider `json:"organization_providers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                [1]bool
	namedOrganizationProviders map[string][]*OrganizationProvider
}

// OrganizationProvidersOrErr returns the OrganizationProviders value or an error if the edge
// was not loaded in eager-loading.
func (e ProviderTemplateEdges) OrganizationProvidersOrErr() ([]*OrganizationProvider, error) {
	if e.loadedTypes[0] {
		return e.OrganizationProviders, nil
	}
	return nil, &NotLoadedError{edge: "organization_providers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providertemplate.FieldConfigTemplate, providertemplate.FieldRequiredFields, providertemplate.FieldSupportedFeatures, providertemplate.FieldMetadata:
			values[i] = new([]byte)
		case providertemplate.FieldPopular, providertemplate.FieldActive:
			values[i] = new(sql.NullBool)
		case providertemplate.FieldAverageSetupTime, providertemplate.FieldSuccessRate:
			values[i] = new(sql.NullFloat64)
		case providertemplate.FieldUsageCount, providertemplate.FieldPopularityRank:
			values[i] = new(sql.NullInt64)
		case providertemplate.FieldKey, providertemplate.FieldName, providertemplate.FieldDisplayName, providertemplate.FieldType, providertemplate.FieldProtocol, providertemplate.FieldIconURL, providertemplate.FieldCategory, providertemplate.FieldDescription, providertemplate.FieldDocumentationURL, providertemplate.FieldSetupGuideURL:
			values[i] = new(sql.NullString)
		case providertemplate.FieldCreatedAt, providertemplate.FieldUpdatedAt, providertemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case providertemplate.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderTemplate fields.
func (pt *ProviderTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providertemplate.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case providertemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case providertemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case providertemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pt.DeletedAt = value.Time
			}
		case providertemplate.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				pt.Key = value.String
			}
		case providertemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case providertemplate.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pt.DisplayName = value.String
			}
		case providertemplate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = value.String
			}
		case providertemplate.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				pt.Protocol = value.String
			}
		case providertemplate.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				pt.IconURL = value.String
			}
		case providertemplate.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pt.Category = value.String
			}
		case providertemplate.FieldPopular:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field popular", values[i])
			} else if value.Valid {
				pt.Popular = value.Bool
			}
		case providertemplate.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				pt.Active = value.Bool
			}
		case providertemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case providertemplate.FieldConfigTemplate:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config_template", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.ConfigTemplate); err != nil {
					return fmt.Errorf("unmarshal field config_template: %w", err)
				}
			}
		case providertemplate.FieldRequiredFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field required_fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.RequiredFields); err != nil {
					return fmt.Errorf("unmarshal field required_fields: %w", err)
				}
			}
		case providertemplate.FieldSupportedFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field supported_features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.SupportedFeatures); err != nil {
					return fmt.Errorf("unmarshal field supported_features: %w", err)
				}
			}
		case providertemplate.FieldDocumentationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field documentation_url", values[i])
			} else if value.Valid {
				pt.DocumentationURL = value.String
			}
		case providertemplate.FieldSetupGuideURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setup_guide_url", values[i])
			} else if value.Valid {
				pt.SetupGuideURL = value.String
			}
		case providertemplate.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				pt.UsageCount = int(value.Int64)
			}
		case providertemplate.FieldAverageSetupTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field average_setup_time", values[i])
			} else if value.Valid {
				pt.AverageSetupTime = value.Float64
			}
		case providertemplate.FieldSuccessRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field success_rate", values[i])
			} else if value.Valid {
				pt.SuccessRate = value.Float64
			}
		case providertemplate.FieldPopularityRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field popularity_rank", values[i])
			} else if value.Valid {
				pt.PopularityRank = int(value.Int64)
			}
		case providertemplate.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderTemplate.
// This includes values selected through modifiers, order, etc.
func (pt *ProviderTemplate) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryOrganizationProviders queries the "organization_providers" edge of the ProviderTemplate entity.
func (pt *ProviderTemplate) QueryOrganizationProviders() *OrganizationProviderQuery {
	return NewProviderTemplateClient(pt.config).QueryOrganizationProviders(pt)
}

// Update returns a builder for updating this ProviderTemplate.
// Note that you need to call ProviderTemplate.Unwrap() before calling this method if this ProviderTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProviderTemplate) Update() *ProviderTemplateUpdateOne {
	return NewProviderTemplateClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProviderTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProviderTemplate) Unwrap() *ProviderTemplate {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderTemplate is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProviderTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(pt.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pt.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pt.Type)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(pt.Protocol)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(pt.IconURL)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pt.Category)
	builder.WriteString(", ")
	builder.WriteString("popular=")
	builder.WriteString(fmt.Sprintf("%v", pt.Popular))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", pt.Active))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("config_template=")
	builder.WriteString(fmt.Sprintf("%v", pt.ConfigTemplate))
	builder.WriteString(", ")
	builder.WriteString("required_fields=")
	builder.WriteString(fmt.Sprintf("%v", pt.RequiredFields))
	builder.WriteString(", ")
	builder.WriteString("supported_features=")
	builder.WriteString(fmt.Sprintf("%v", pt.SupportedFeatures))
	builder.WriteString(", ")
	builder.WriteString("documentation_url=")
	builder.WriteString(pt.DocumentationURL)
	builder.WriteString(", ")
	builder.WriteString("setup_guide_url=")
	builder.WriteString(pt.SetupGuideURL)
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", pt.UsageCount))
	builder.WriteString(", ")
	builder.WriteString("average_setup_time=")
	builder.WriteString(fmt.Sprintf("%v", pt.AverageSetupTime))
	builder.WriteString(", ")
	builder.WriteString("success_rate=")
	builder.WriteString(fmt.Sprintf("%v", pt.SuccessRate))
	builder.WriteString(", ")
	builder.WriteString("popularity_rank=")
	builder.WriteString(fmt.Sprintf("%v", pt.PopularityRank))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pt.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrganizationProviders returns the OrganizationProviders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pt *ProviderTemplate) NamedOrganizationProviders(name string) ([]*OrganizationProvider, error) {
	if pt.Edges.namedOrganizationProviders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pt.Edges.namedOrganizationProviders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pt *ProviderTemplate) appendNamedOrganizationProviders(name string, edges ...*OrganizationProvider) {
	if pt.Edges.namedOrganizationProviders == nil {
		pt.Edges.namedOrganizationProviders = make(map[string][]*OrganizationProvider)
	}
	if len(edges) == 0 {
		pt.Edges.namedOrganizationProviders[name] = []*OrganizationProvider{}
	} else {
		pt.Edges.namedOrganizationProviders[name] = append(pt.Edges.namedOrganizationProviders[name], edges...)
	}
}

// ProviderTemplates is a parsable slice of ProviderTemplate.
type ProviderTemplates []*ProviderTemplate
