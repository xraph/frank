// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
)

// AuditUpdate is the builder for updating Audit entities.
type AuditUpdate struct {
	config
	hooks     []Hook
	mutation  *AuditMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuditUpdate builder.
func (au *AuditUpdate) Where(ps ...predicate.Audit) *AuditUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AuditUpdate) SetDeletedAt(t time.Time) *AuditUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AuditUpdate) SetNillableDeletedAt(t *time.Time) *AuditUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AuditUpdate) ClearDeletedAt() *AuditUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AuditUpdate) SetUpdatedAt(t time.Time) *AuditUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AuditUpdate) SetUserID(x xid.ID) *AuditUpdate {
	au.mutation.SetUserID(x)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableUserID(x *xid.ID) *AuditUpdate {
	if x != nil {
		au.SetUserID(*x)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AuditUpdate) ClearUserID() *AuditUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetOrganizationID sets the "organization_id" field.
func (au *AuditUpdate) SetOrganizationID(x xid.ID) *AuditUpdate {
	au.mutation.SetOrganizationID(x)
	return au
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableOrganizationID(x *xid.ID) *AuditUpdate {
	if x != nil {
		au.SetOrganizationID(*x)
	}
	return au
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (au *AuditUpdate) ClearOrganizationID() *AuditUpdate {
	au.mutation.ClearOrganizationID()
	return au
}

// SetSessionID sets the "session_id" field.
func (au *AuditUpdate) SetSessionID(x xid.ID) *AuditUpdate {
	au.mutation.SetSessionID(x)
	return au
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableSessionID(x *xid.ID) *AuditUpdate {
	if x != nil {
		au.SetSessionID(*x)
	}
	return au
}

// ClearSessionID clears the value of the "session_id" field.
func (au *AuditUpdate) ClearSessionID() *AuditUpdate {
	au.mutation.ClearSessionID()
	return au
}

// SetAction sets the "action" field.
func (au *AuditUpdate) SetAction(s string) *AuditUpdate {
	au.mutation.SetAction(s)
	return au
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (au *AuditUpdate) SetNillableAction(s *string) *AuditUpdate {
	if s != nil {
		au.SetAction(*s)
	}
	return au
}

// SetResourceType sets the "resource_type" field.
func (au *AuditUpdate) SetResourceType(s string) *AuditUpdate {
	au.mutation.SetResourceType(s)
	return au
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (au *AuditUpdate) SetNillableResourceType(s *string) *AuditUpdate {
	if s != nil {
		au.SetResourceType(*s)
	}
	return au
}

// SetResourceID sets the "resource_id" field.
func (au *AuditUpdate) SetResourceID(x xid.ID) *AuditUpdate {
	au.mutation.SetResourceID(x)
	return au
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableResourceID(x *xid.ID) *AuditUpdate {
	if x != nil {
		au.SetResourceID(*x)
	}
	return au
}

// ClearResourceID clears the value of the "resource_id" field.
func (au *AuditUpdate) ClearResourceID() *AuditUpdate {
	au.mutation.ClearResourceID()
	return au
}

// SetStatus sets the "status" field.
func (au *AuditUpdate) SetStatus(s string) *AuditUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AuditUpdate) SetNillableStatus(s *string) *AuditUpdate {
	if s != nil {
		au.SetStatus(*s)
	}
	return au
}

// SetIPAddress sets the "ip_address" field.
func (au *AuditUpdate) SetIPAddress(s string) *AuditUpdate {
	au.mutation.SetIPAddress(s)
	return au
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (au *AuditUpdate) SetNillableIPAddress(s *string) *AuditUpdate {
	if s != nil {
		au.SetIPAddress(*s)
	}
	return au
}

// ClearIPAddress clears the value of the "ip_address" field.
func (au *AuditUpdate) ClearIPAddress() *AuditUpdate {
	au.mutation.ClearIPAddress()
	return au
}

// SetUserAgent sets the "user_agent" field.
func (au *AuditUpdate) SetUserAgent(s string) *AuditUpdate {
	au.mutation.SetUserAgent(s)
	return au
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (au *AuditUpdate) SetNillableUserAgent(s *string) *AuditUpdate {
	if s != nil {
		au.SetUserAgent(*s)
	}
	return au
}

// ClearUserAgent clears the value of the "user_agent" field.
func (au *AuditUpdate) ClearUserAgent() *AuditUpdate {
	au.mutation.ClearUserAgent()
	return au
}

// SetLocation sets the "location" field.
func (au *AuditUpdate) SetLocation(s string) *AuditUpdate {
	au.mutation.SetLocation(s)
	return au
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (au *AuditUpdate) SetNillableLocation(s *string) *AuditUpdate {
	if s != nil {
		au.SetLocation(*s)
	}
	return au
}

// ClearLocation clears the value of the "location" field.
func (au *AuditUpdate) ClearLocation() *AuditUpdate {
	au.mutation.ClearLocation()
	return au
}

// SetDeviceID sets the "device_id" field.
func (au *AuditUpdate) SetDeviceID(s string) *AuditUpdate {
	au.mutation.SetDeviceID(s)
	return au
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableDeviceID(s *string) *AuditUpdate {
	if s != nil {
		au.SetDeviceID(*s)
	}
	return au
}

// ClearDeviceID clears the value of the "device_id" field.
func (au *AuditUpdate) ClearDeviceID() *AuditUpdate {
	au.mutation.ClearDeviceID()
	return au
}

// SetRequestID sets the "request_id" field.
func (au *AuditUpdate) SetRequestID(s string) *AuditUpdate {
	au.mutation.SetRequestID(s)
	return au
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (au *AuditUpdate) SetNillableRequestID(s *string) *AuditUpdate {
	if s != nil {
		au.SetRequestID(*s)
	}
	return au
}

// ClearRequestID clears the value of the "request_id" field.
func (au *AuditUpdate) ClearRequestID() *AuditUpdate {
	au.mutation.ClearRequestID()
	return au
}

// SetErrorCode sets the "error_code" field.
func (au *AuditUpdate) SetErrorCode(s string) *AuditUpdate {
	au.mutation.SetErrorCode(s)
	return au
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (au *AuditUpdate) SetNillableErrorCode(s *string) *AuditUpdate {
	if s != nil {
		au.SetErrorCode(*s)
	}
	return au
}

// ClearErrorCode clears the value of the "error_code" field.
func (au *AuditUpdate) ClearErrorCode() *AuditUpdate {
	au.mutation.ClearErrorCode()
	return au
}

// SetErrorMessage sets the "error_message" field.
func (au *AuditUpdate) SetErrorMessage(s string) *AuditUpdate {
	au.mutation.SetErrorMessage(s)
	return au
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (au *AuditUpdate) SetNillableErrorMessage(s *string) *AuditUpdate {
	if s != nil {
		au.SetErrorMessage(*s)
	}
	return au
}

// ClearErrorMessage clears the value of the "error_message" field.
func (au *AuditUpdate) ClearErrorMessage() *AuditUpdate {
	au.mutation.ClearErrorMessage()
	return au
}

// SetDescription sets the "description" field.
func (au *AuditUpdate) SetDescription(s string) *AuditUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AuditUpdate) SetNillableDescription(s *string) *AuditUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AuditUpdate) ClearDescription() *AuditUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AuditUpdate) SetMetadata(m map[string]interface{}) *AuditUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AuditUpdate) ClearMetadata() *AuditUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetOldValues sets the "old_values" field.
func (au *AuditUpdate) SetOldValues(m map[string]interface{}) *AuditUpdate {
	au.mutation.SetOldValues(m)
	return au
}

// ClearOldValues clears the value of the "old_values" field.
func (au *AuditUpdate) ClearOldValues() *AuditUpdate {
	au.mutation.ClearOldValues()
	return au
}

// SetCurrentValues sets the "current_values" field.
func (au *AuditUpdate) SetCurrentValues(m map[string]interface{}) *AuditUpdate {
	au.mutation.SetCurrentValues(m)
	return au
}

// ClearCurrentValues clears the value of the "current_values" field.
func (au *AuditUpdate) ClearCurrentValues() *AuditUpdate {
	au.mutation.ClearCurrentValues()
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AuditUpdate) SetUser(u *User) *AuditUpdate {
	return au.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (au *AuditUpdate) SetOrganization(o *Organization) *AuditUpdate {
	return au.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (au *AuditUpdate) SetSession(s *Session) *AuditUpdate {
	return au.SetSessionID(s.ID)
}

// Mutation returns the AuditMutation object of the builder.
func (au *AuditUpdate) Mutation() *AuditMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AuditUpdate) ClearUser() *AuditUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (au *AuditUpdate) ClearOrganization() *AuditUpdate {
	au.mutation.ClearOrganization()
	return au
}

// ClearSession clears the "session" edge to the Session entity.
func (au *AuditUpdate) ClearSession() *AuditUpdate {
	au.mutation.ClearSession()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuditUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuditUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuditUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuditUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AuditUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := audit.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuditUpdate) check() error {
	if v, ok := au.mutation.Action(); ok {
		if err := audit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Audit.action": %w`, err)}
		}
	}
	if v, ok := au.mutation.ResourceType(); ok {
		if err := audit.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Audit.resource_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := audit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Audit.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AuditUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AuditUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(audit.Table, audit.Columns, sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(audit.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(audit.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(audit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Action(); ok {
		_spec.SetField(audit.FieldAction, field.TypeString, value)
	}
	if value, ok := au.mutation.ResourceType(); ok {
		_spec.SetField(audit.FieldResourceType, field.TypeString, value)
	}
	if value, ok := au.mutation.ResourceID(); ok {
		_spec.SetField(audit.FieldResourceID, field.TypeString, value)
	}
	if au.mutation.ResourceIDCleared() {
		_spec.ClearField(audit.FieldResourceID, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(audit.FieldStatus, field.TypeString, value)
	}
	if value, ok := au.mutation.IPAddress(); ok {
		_spec.SetField(audit.FieldIPAddress, field.TypeString, value)
	}
	if au.mutation.IPAddressCleared() {
		_spec.ClearField(audit.FieldIPAddress, field.TypeString)
	}
	if value, ok := au.mutation.UserAgent(); ok {
		_spec.SetField(audit.FieldUserAgent, field.TypeString, value)
	}
	if au.mutation.UserAgentCleared() {
		_spec.ClearField(audit.FieldUserAgent, field.TypeString)
	}
	if value, ok := au.mutation.Location(); ok {
		_spec.SetField(audit.FieldLocation, field.TypeString, value)
	}
	if au.mutation.LocationCleared() {
		_spec.ClearField(audit.FieldLocation, field.TypeString)
	}
	if value, ok := au.mutation.DeviceID(); ok {
		_spec.SetField(audit.FieldDeviceID, field.TypeString, value)
	}
	if au.mutation.DeviceIDCleared() {
		_spec.ClearField(audit.FieldDeviceID, field.TypeString)
	}
	if value, ok := au.mutation.RequestID(); ok {
		_spec.SetField(audit.FieldRequestID, field.TypeString, value)
	}
	if au.mutation.RequestIDCleared() {
		_spec.ClearField(audit.FieldRequestID, field.TypeString)
	}
	if value, ok := au.mutation.ErrorCode(); ok {
		_spec.SetField(audit.FieldErrorCode, field.TypeString, value)
	}
	if au.mutation.ErrorCodeCleared() {
		_spec.ClearField(audit.FieldErrorCode, field.TypeString)
	}
	if value, ok := au.mutation.ErrorMessage(); ok {
		_spec.SetField(audit.FieldErrorMessage, field.TypeString, value)
	}
	if au.mutation.ErrorMessageCleared() {
		_spec.ClearField(audit.FieldErrorMessage, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(audit.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(audit.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(audit.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(audit.FieldMetadata, field.TypeJSON)
	}
	if value, ok := au.mutation.OldValues(); ok {
		_spec.SetField(audit.FieldOldValues, field.TypeJSON, value)
	}
	if au.mutation.OldValuesCleared() {
		_spec.ClearField(audit.FieldOldValues, field.TypeJSON)
	}
	if value, ok := au.mutation.CurrentValues(); ok {
		_spec.SetField(audit.FieldCurrentValues, field.TypeJSON, value)
	}
	if au.mutation.CurrentValuesCleared() {
		_spec.ClearField(audit.FieldCurrentValues, field.TypeJSON)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuditUpdateOne is the builder for updating a single Audit entity.
type AuditUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuditMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AuditUpdateOne) SetDeletedAt(t time.Time) *AuditUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableDeletedAt(t *time.Time) *AuditUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AuditUpdateOne) ClearDeletedAt() *AuditUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AuditUpdateOne) SetUpdatedAt(t time.Time) *AuditUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AuditUpdateOne) SetUserID(x xid.ID) *AuditUpdateOne {
	auo.mutation.SetUserID(x)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableUserID(x *xid.ID) *AuditUpdateOne {
	if x != nil {
		auo.SetUserID(*x)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AuditUpdateOne) ClearUserID() *AuditUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetOrganizationID sets the "organization_id" field.
func (auo *AuditUpdateOne) SetOrganizationID(x xid.ID) *AuditUpdateOne {
	auo.mutation.SetOrganizationID(x)
	return auo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableOrganizationID(x *xid.ID) *AuditUpdateOne {
	if x != nil {
		auo.SetOrganizationID(*x)
	}
	return auo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (auo *AuditUpdateOne) ClearOrganizationID() *AuditUpdateOne {
	auo.mutation.ClearOrganizationID()
	return auo
}

// SetSessionID sets the "session_id" field.
func (auo *AuditUpdateOne) SetSessionID(x xid.ID) *AuditUpdateOne {
	auo.mutation.SetSessionID(x)
	return auo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableSessionID(x *xid.ID) *AuditUpdateOne {
	if x != nil {
		auo.SetSessionID(*x)
	}
	return auo
}

// ClearSessionID clears the value of the "session_id" field.
func (auo *AuditUpdateOne) ClearSessionID() *AuditUpdateOne {
	auo.mutation.ClearSessionID()
	return auo
}

// SetAction sets the "action" field.
func (auo *AuditUpdateOne) SetAction(s string) *AuditUpdateOne {
	auo.mutation.SetAction(s)
	return auo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableAction(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetAction(*s)
	}
	return auo
}

// SetResourceType sets the "resource_type" field.
func (auo *AuditUpdateOne) SetResourceType(s string) *AuditUpdateOne {
	auo.mutation.SetResourceType(s)
	return auo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableResourceType(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetResourceType(*s)
	}
	return auo
}

// SetResourceID sets the "resource_id" field.
func (auo *AuditUpdateOne) SetResourceID(x xid.ID) *AuditUpdateOne {
	auo.mutation.SetResourceID(x)
	return auo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableResourceID(x *xid.ID) *AuditUpdateOne {
	if x != nil {
		auo.SetResourceID(*x)
	}
	return auo
}

// ClearResourceID clears the value of the "resource_id" field.
func (auo *AuditUpdateOne) ClearResourceID() *AuditUpdateOne {
	auo.mutation.ClearResourceID()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AuditUpdateOne) SetStatus(s string) *AuditUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableStatus(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetStatus(*s)
	}
	return auo
}

// SetIPAddress sets the "ip_address" field.
func (auo *AuditUpdateOne) SetIPAddress(s string) *AuditUpdateOne {
	auo.mutation.SetIPAddress(s)
	return auo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableIPAddress(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetIPAddress(*s)
	}
	return auo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (auo *AuditUpdateOne) ClearIPAddress() *AuditUpdateOne {
	auo.mutation.ClearIPAddress()
	return auo
}

// SetUserAgent sets the "user_agent" field.
func (auo *AuditUpdateOne) SetUserAgent(s string) *AuditUpdateOne {
	auo.mutation.SetUserAgent(s)
	return auo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableUserAgent(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetUserAgent(*s)
	}
	return auo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (auo *AuditUpdateOne) ClearUserAgent() *AuditUpdateOne {
	auo.mutation.ClearUserAgent()
	return auo
}

// SetLocation sets the "location" field.
func (auo *AuditUpdateOne) SetLocation(s string) *AuditUpdateOne {
	auo.mutation.SetLocation(s)
	return auo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableLocation(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetLocation(*s)
	}
	return auo
}

// ClearLocation clears the value of the "location" field.
func (auo *AuditUpdateOne) ClearLocation() *AuditUpdateOne {
	auo.mutation.ClearLocation()
	return auo
}

// SetDeviceID sets the "device_id" field.
func (auo *AuditUpdateOne) SetDeviceID(s string) *AuditUpdateOne {
	auo.mutation.SetDeviceID(s)
	return auo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableDeviceID(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetDeviceID(*s)
	}
	return auo
}

// ClearDeviceID clears the value of the "device_id" field.
func (auo *AuditUpdateOne) ClearDeviceID() *AuditUpdateOne {
	auo.mutation.ClearDeviceID()
	return auo
}

// SetRequestID sets the "request_id" field.
func (auo *AuditUpdateOne) SetRequestID(s string) *AuditUpdateOne {
	auo.mutation.SetRequestID(s)
	return auo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableRequestID(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetRequestID(*s)
	}
	return auo
}

// ClearRequestID clears the value of the "request_id" field.
func (auo *AuditUpdateOne) ClearRequestID() *AuditUpdateOne {
	auo.mutation.ClearRequestID()
	return auo
}

// SetErrorCode sets the "error_code" field.
func (auo *AuditUpdateOne) SetErrorCode(s string) *AuditUpdateOne {
	auo.mutation.SetErrorCode(s)
	return auo
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableErrorCode(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetErrorCode(*s)
	}
	return auo
}

// ClearErrorCode clears the value of the "error_code" field.
func (auo *AuditUpdateOne) ClearErrorCode() *AuditUpdateOne {
	auo.mutation.ClearErrorCode()
	return auo
}

// SetErrorMessage sets the "error_message" field.
func (auo *AuditUpdateOne) SetErrorMessage(s string) *AuditUpdateOne {
	auo.mutation.SetErrorMessage(s)
	return auo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableErrorMessage(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetErrorMessage(*s)
	}
	return auo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (auo *AuditUpdateOne) ClearErrorMessage() *AuditUpdateOne {
	auo.mutation.ClearErrorMessage()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AuditUpdateOne) SetDescription(s string) *AuditUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AuditUpdateOne) SetNillableDescription(s *string) *AuditUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AuditUpdateOne) ClearDescription() *AuditUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *AuditUpdateOne) SetMetadata(m map[string]interface{}) *AuditUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AuditUpdateOne) ClearMetadata() *AuditUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetOldValues sets the "old_values" field.
func (auo *AuditUpdateOne) SetOldValues(m map[string]interface{}) *AuditUpdateOne {
	auo.mutation.SetOldValues(m)
	return auo
}

// ClearOldValues clears the value of the "old_values" field.
func (auo *AuditUpdateOne) ClearOldValues() *AuditUpdateOne {
	auo.mutation.ClearOldValues()
	return auo
}

// SetCurrentValues sets the "current_values" field.
func (auo *AuditUpdateOne) SetCurrentValues(m map[string]interface{}) *AuditUpdateOne {
	auo.mutation.SetCurrentValues(m)
	return auo
}

// ClearCurrentValues clears the value of the "current_values" field.
func (auo *AuditUpdateOne) ClearCurrentValues() *AuditUpdateOne {
	auo.mutation.ClearCurrentValues()
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AuditUpdateOne) SetUser(u *User) *AuditUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (auo *AuditUpdateOne) SetOrganization(o *Organization) *AuditUpdateOne {
	return auo.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (auo *AuditUpdateOne) SetSession(s *Session) *AuditUpdateOne {
	return auo.SetSessionID(s.ID)
}

// Mutation returns the AuditMutation object of the builder.
func (auo *AuditUpdateOne) Mutation() *AuditMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AuditUpdateOne) ClearUser() *AuditUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (auo *AuditUpdateOne) ClearOrganization() *AuditUpdateOne {
	auo.mutation.ClearOrganization()
	return auo
}

// ClearSession clears the "session" edge to the Session entity.
func (auo *AuditUpdateOne) ClearSession() *AuditUpdateOne {
	auo.mutation.ClearSession()
	return auo
}

// Where appends a list predicates to the AuditUpdate builder.
func (auo *AuditUpdateOne) Where(ps ...predicate.Audit) *AuditUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuditUpdateOne) Select(field string, fields ...string) *AuditUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Audit entity.
func (auo *AuditUpdateOne) Save(ctx context.Context) (*Audit, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuditUpdateOne) SaveX(ctx context.Context) *Audit {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuditUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuditUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AuditUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := audit.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuditUpdateOne) check() error {
	if v, ok := auo.mutation.Action(); ok {
		if err := audit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Audit.action": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ResourceType(); ok {
		if err := audit.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Audit.resource_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := audit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Audit.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AuditUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AuditUpdateOne) sqlSave(ctx context.Context) (_node *Audit, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(audit.Table, audit.Columns, sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Audit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, audit.FieldID)
		for _, f := range fields {
			if !audit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != audit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(audit.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(audit.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(audit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Action(); ok {
		_spec.SetField(audit.FieldAction, field.TypeString, value)
	}
	if value, ok := auo.mutation.ResourceType(); ok {
		_spec.SetField(audit.FieldResourceType, field.TypeString, value)
	}
	if value, ok := auo.mutation.ResourceID(); ok {
		_spec.SetField(audit.FieldResourceID, field.TypeString, value)
	}
	if auo.mutation.ResourceIDCleared() {
		_spec.ClearField(audit.FieldResourceID, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(audit.FieldStatus, field.TypeString, value)
	}
	if value, ok := auo.mutation.IPAddress(); ok {
		_spec.SetField(audit.FieldIPAddress, field.TypeString, value)
	}
	if auo.mutation.IPAddressCleared() {
		_spec.ClearField(audit.FieldIPAddress, field.TypeString)
	}
	if value, ok := auo.mutation.UserAgent(); ok {
		_spec.SetField(audit.FieldUserAgent, field.TypeString, value)
	}
	if auo.mutation.UserAgentCleared() {
		_spec.ClearField(audit.FieldUserAgent, field.TypeString)
	}
	if value, ok := auo.mutation.Location(); ok {
		_spec.SetField(audit.FieldLocation, field.TypeString, value)
	}
	if auo.mutation.LocationCleared() {
		_spec.ClearField(audit.FieldLocation, field.TypeString)
	}
	if value, ok := auo.mutation.DeviceID(); ok {
		_spec.SetField(audit.FieldDeviceID, field.TypeString, value)
	}
	if auo.mutation.DeviceIDCleared() {
		_spec.ClearField(audit.FieldDeviceID, field.TypeString)
	}
	if value, ok := auo.mutation.RequestID(); ok {
		_spec.SetField(audit.FieldRequestID, field.TypeString, value)
	}
	if auo.mutation.RequestIDCleared() {
		_spec.ClearField(audit.FieldRequestID, field.TypeString)
	}
	if value, ok := auo.mutation.ErrorCode(); ok {
		_spec.SetField(audit.FieldErrorCode, field.TypeString, value)
	}
	if auo.mutation.ErrorCodeCleared() {
		_spec.ClearField(audit.FieldErrorCode, field.TypeString)
	}
	if value, ok := auo.mutation.ErrorMessage(); ok {
		_spec.SetField(audit.FieldErrorMessage, field.TypeString, value)
	}
	if auo.mutation.ErrorMessageCleared() {
		_spec.ClearField(audit.FieldErrorMessage, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(audit.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(audit.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(audit.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(audit.FieldMetadata, field.TypeJSON)
	}
	if value, ok := auo.mutation.OldValues(); ok {
		_spec.SetField(audit.FieldOldValues, field.TypeJSON, value)
	}
	if auo.mutation.OldValuesCleared() {
		_spec.ClearField(audit.FieldOldValues, field.TypeJSON)
	}
	if value, ok := auo.mutation.CurrentValues(); ok {
		_spec.SetField(audit.FieldCurrentValues, field.TypeJSON, value)
	}
	if auo.mutation.CurrentValuesCleared() {
		_spec.ClearField(audit.FieldCurrentValues, field.TypeJSON)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Audit{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
