// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/smstemplate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/pkg/model"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrganizationUpdate) SetDeletedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetSlug sets the "slug" field.
func (ou *OrganizationUpdate) SetSlug(s string) *OrganizationUpdate {
	ou.mutation.SetSlug(s)
	return ou
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSlug(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSlug(*s)
	}
	return ou
}

// SetDomains sets the "domains" field.
func (ou *OrganizationUpdate) SetDomains(s []string) *OrganizationUpdate {
	ou.mutation.SetDomains(s)
	return ou
}

// AppendDomains appends s to the "domains" field.
func (ou *OrganizationUpdate) AppendDomains(s []string) *OrganizationUpdate {
	ou.mutation.AppendDomains(s)
	return ou
}

// ClearDomains clears the value of the "domains" field.
func (ou *OrganizationUpdate) ClearDomains() *OrganizationUpdate {
	ou.mutation.ClearDomains()
	return ou
}

// SetVerifiedDomains sets the "verified_domains" field.
func (ou *OrganizationUpdate) SetVerifiedDomains(s []string) *OrganizationUpdate {
	ou.mutation.SetVerifiedDomains(s)
	return ou
}

// AppendVerifiedDomains appends s to the "verified_domains" field.
func (ou *OrganizationUpdate) AppendVerifiedDomains(s []string) *OrganizationUpdate {
	ou.mutation.AppendVerifiedDomains(s)
	return ou
}

// ClearVerifiedDomains clears the value of the "verified_domains" field.
func (ou *OrganizationUpdate) ClearVerifiedDomains() *OrganizationUpdate {
	ou.mutation.ClearVerifiedDomains()
	return ou
}

// SetDomain sets the "domain" field.
func (ou *OrganizationUpdate) SetDomain(s string) *OrganizationUpdate {
	ou.mutation.SetDomain(s)
	return ou
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDomain(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDomain(*s)
	}
	return ou
}

// ClearDomain clears the value of the "domain" field.
func (ou *OrganizationUpdate) ClearDomain() *OrganizationUpdate {
	ou.mutation.ClearDomain()
	return ou
}

// SetLogoURL sets the "logo_url" field.
func (ou *OrganizationUpdate) SetLogoURL(s string) *OrganizationUpdate {
	ou.mutation.SetLogoURL(s)
	return ou
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLogoURL(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLogoURL(*s)
	}
	return ou
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ou *OrganizationUpdate) ClearLogoURL() *OrganizationUpdate {
	ou.mutation.ClearLogoURL()
	return ou
}

// SetPlan sets the "plan" field.
func (ou *OrganizationUpdate) SetPlan(s string) *OrganizationUpdate {
	ou.mutation.SetPlan(s)
	return ou
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillablePlan(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetPlan(*s)
	}
	return ou
}

// SetActive sets the "active" field.
func (ou *OrganizationUpdate) SetActive(b bool) *OrganizationUpdate {
	ou.mutation.SetActive(b)
	return ou
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableActive(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetActive(*b)
	}
	return ou
}

// SetMetadata sets the "metadata" field.
func (ou *OrganizationUpdate) SetMetadata(m map[string]interface{}) *OrganizationUpdate {
	ou.mutation.SetMetadata(m)
	return ou
}

// ClearMetadata clears the value of the "metadata" field.
func (ou *OrganizationUpdate) ClearMetadata() *OrganizationUpdate {
	ou.mutation.ClearMetadata()
	return ou
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (ou *OrganizationUpdate) SetTrialEndsAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetTrialEndsAt(t)
	return ou
}

// SetNillableTrialEndsAt sets the "trial_ends_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTrialEndsAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetTrialEndsAt(*t)
	}
	return ou
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (ou *OrganizationUpdate) ClearTrialEndsAt() *OrganizationUpdate {
	ou.mutation.ClearTrialEndsAt()
	return ou
}

// SetTrialUsed sets the "trial_used" field.
func (ou *OrganizationUpdate) SetTrialUsed(b bool) *OrganizationUpdate {
	ou.mutation.SetTrialUsed(b)
	return ou
}

// SetNillableTrialUsed sets the "trial_used" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTrialUsed(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetTrialUsed(*b)
	}
	return ou
}

// SetOwnerID sets the "owner_id" field.
func (ou *OrganizationUpdate) SetOwnerID(x xid.ID) *OrganizationUpdate {
	ou.mutation.SetOwnerID(x)
	return ou
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableOwnerID(x *xid.ID) *OrganizationUpdate {
	if x != nil {
		ou.SetOwnerID(*x)
	}
	return ou
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ou *OrganizationUpdate) ClearOwnerID() *OrganizationUpdate {
	ou.mutation.ClearOwnerID()
	return ou
}

// SetOrgType sets the "org_type" field.
func (ou *OrganizationUpdate) SetOrgType(mt model.OrgType) *OrganizationUpdate {
	ou.mutation.SetOrgType(mt)
	return ou
}

// SetNillableOrgType sets the "org_type" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableOrgType(mt *model.OrgType) *OrganizationUpdate {
	if mt != nil {
		ou.SetOrgType(*mt)
	}
	return ou
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (ou *OrganizationUpdate) SetIsPlatformOrganization(b bool) *OrganizationUpdate {
	ou.mutation.SetIsPlatformOrganization(b)
	return ou
}

// SetNillableIsPlatformOrganization sets the "is_platform_organization" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableIsPlatformOrganization(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetIsPlatformOrganization(*b)
	}
	return ou
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (ou *OrganizationUpdate) SetExternalUserLimit(i int) *OrganizationUpdate {
	ou.mutation.ResetExternalUserLimit()
	ou.mutation.SetExternalUserLimit(i)
	return ou
}

// SetNillableExternalUserLimit sets the "external_user_limit" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableExternalUserLimit(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetExternalUserLimit(*i)
	}
	return ou
}

// AddExternalUserLimit adds i to the "external_user_limit" field.
func (ou *OrganizationUpdate) AddExternalUserLimit(i int) *OrganizationUpdate {
	ou.mutation.AddExternalUserLimit(i)
	return ou
}

// SetEndUserLimit sets the "end_user_limit" field.
func (ou *OrganizationUpdate) SetEndUserLimit(i int) *OrganizationUpdate {
	ou.mutation.ResetEndUserLimit()
	ou.mutation.SetEndUserLimit(i)
	return ou
}

// SetNillableEndUserLimit sets the "end_user_limit" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableEndUserLimit(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetEndUserLimit(*i)
	}
	return ou
}

// AddEndUserLimit adds i to the "end_user_limit" field.
func (ou *OrganizationUpdate) AddEndUserLimit(i int) *OrganizationUpdate {
	ou.mutation.AddEndUserLimit(i)
	return ou
}

// SetSSOEnabled sets the "sso_enabled" field.
func (ou *OrganizationUpdate) SetSSOEnabled(b bool) *OrganizationUpdate {
	ou.mutation.SetSSOEnabled(b)
	return ou
}

// SetNillableSSOEnabled sets the "sso_enabled" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSSOEnabled(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetSSOEnabled(*b)
	}
	return ou
}

// SetSSODomain sets the "sso_domain" field.
func (ou *OrganizationUpdate) SetSSODomain(s string) *OrganizationUpdate {
	ou.mutation.SetSSODomain(s)
	return ou
}

// SetNillableSSODomain sets the "sso_domain" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSSODomain(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSSODomain(*s)
	}
	return ou
}

// ClearSSODomain clears the value of the "sso_domain" field.
func (ou *OrganizationUpdate) ClearSSODomain() *OrganizationUpdate {
	ou.mutation.ClearSSODomain()
	return ou
}

// SetSubscriptionID sets the "subscription_id" field.
func (ou *OrganizationUpdate) SetSubscriptionID(s string) *OrganizationUpdate {
	ou.mutation.SetSubscriptionID(s)
	return ou
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSubscriptionID(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSubscriptionID(*s)
	}
	return ou
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (ou *OrganizationUpdate) ClearSubscriptionID() *OrganizationUpdate {
	ou.mutation.ClearSubscriptionID()
	return ou
}

// SetCustomerID sets the "customer_id" field.
func (ou *OrganizationUpdate) SetCustomerID(s string) *OrganizationUpdate {
	ou.mutation.SetCustomerID(s)
	return ou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCustomerID(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCustomerID(*s)
	}
	return ou
}

// ClearCustomerID clears the value of the "customer_id" field.
func (ou *OrganizationUpdate) ClearCustomerID() *OrganizationUpdate {
	ou.mutation.ClearCustomerID()
	return ou
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (ou *OrganizationUpdate) SetSubscriptionStatus(os organization.SubscriptionStatus) *OrganizationUpdate {
	ou.mutation.SetSubscriptionStatus(os)
	return ou
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSubscriptionStatus(os *organization.SubscriptionStatus) *OrganizationUpdate {
	if os != nil {
		ou.SetSubscriptionStatus(*os)
	}
	return ou
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (ou *OrganizationUpdate) SetAuthServiceEnabled(b bool) *OrganizationUpdate {
	ou.mutation.SetAuthServiceEnabled(b)
	return ou
}

// SetNillableAuthServiceEnabled sets the "auth_service_enabled" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAuthServiceEnabled(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetAuthServiceEnabled(*b)
	}
	return ou
}

// SetAuthConfig sets the "auth_config" field.
func (ou *OrganizationUpdate) SetAuthConfig(m map[string]interface{}) *OrganizationUpdate {
	ou.mutation.SetAuthConfig(m)
	return ou
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (ou *OrganizationUpdate) ClearAuthConfig() *OrganizationUpdate {
	ou.mutation.ClearAuthConfig()
	return ou
}

// SetAuthDomain sets the "auth_domain" field.
func (ou *OrganizationUpdate) SetAuthDomain(s string) *OrganizationUpdate {
	ou.mutation.SetAuthDomain(s)
	return ou
}

// SetNillableAuthDomain sets the "auth_domain" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAuthDomain(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetAuthDomain(*s)
	}
	return ou
}

// ClearAuthDomain clears the value of the "auth_domain" field.
func (ou *OrganizationUpdate) ClearAuthDomain() *OrganizationUpdate {
	ou.mutation.ClearAuthDomain()
	return ou
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (ou *OrganizationUpdate) SetAPIRequestLimit(i int) *OrganizationUpdate {
	ou.mutation.ResetAPIRequestLimit()
	ou.mutation.SetAPIRequestLimit(i)
	return ou
}

// SetNillableAPIRequestLimit sets the "api_request_limit" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAPIRequestLimit(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetAPIRequestLimit(*i)
	}
	return ou
}

// AddAPIRequestLimit adds i to the "api_request_limit" field.
func (ou *OrganizationUpdate) AddAPIRequestLimit(i int) *OrganizationUpdate {
	ou.mutation.AddAPIRequestLimit(i)
	return ou
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (ou *OrganizationUpdate) SetAPIRequestsUsed(i int) *OrganizationUpdate {
	ou.mutation.ResetAPIRequestsUsed()
	ou.mutation.SetAPIRequestsUsed(i)
	return ou
}

// SetNillableAPIRequestsUsed sets the "api_requests_used" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAPIRequestsUsed(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetAPIRequestsUsed(*i)
	}
	return ou
}

// AddAPIRequestsUsed adds i to the "api_requests_used" field.
func (ou *OrganizationUpdate) AddAPIRequestsUsed(i int) *OrganizationUpdate {
	ou.mutation.AddAPIRequestsUsed(i)
	return ou
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (ou *OrganizationUpdate) SetCurrentExternalUsers(i int) *OrganizationUpdate {
	ou.mutation.ResetCurrentExternalUsers()
	ou.mutation.SetCurrentExternalUsers(i)
	return ou
}

// SetNillableCurrentExternalUsers sets the "current_external_users" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCurrentExternalUsers(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetCurrentExternalUsers(*i)
	}
	return ou
}

// AddCurrentExternalUsers adds i to the "current_external_users" field.
func (ou *OrganizationUpdate) AddCurrentExternalUsers(i int) *OrganizationUpdate {
	ou.mutation.AddCurrentExternalUsers(i)
	return ou
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (ou *OrganizationUpdate) SetCurrentEndUsers(i int) *OrganizationUpdate {
	ou.mutation.ResetCurrentEndUsers()
	ou.mutation.SetCurrentEndUsers(i)
	return ou
}

// SetNillableCurrentEndUsers sets the "current_end_users" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCurrentEndUsers(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetCurrentEndUsers(*i)
	}
	return ou
}

// AddCurrentEndUsers adds i to the "current_end_users" field.
func (ou *OrganizationUpdate) AddCurrentEndUsers(i int) *OrganizationUpdate {
	ou.mutation.AddCurrentEndUsers(i)
	return ou
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrganizationUpdate) AddUserIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrganizationUpdate) AddUsers(u ...*User) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (ou *OrganizationUpdate) AddMembershipIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddMembershipIDs(ids...)
	return ou
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (ou *OrganizationUpdate) AddMemberships(m ...*Membership) *OrganizationUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.AddMembershipIDs(ids...)
}

// AddSmsTemplateIDs adds the "sms_templates" edge to the SMSTemplate entity by IDs.
func (ou *OrganizationUpdate) AddSmsTemplateIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddSmsTemplateIDs(ids...)
	return ou
}

// AddSmsTemplates adds the "sms_templates" edges to the SMSTemplate entity.
func (ou *OrganizationUpdate) AddSmsTemplates(s ...*SMSTemplate) *OrganizationUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddSmsTemplateIDs(ids...)
}

// AddEmailTemplateIDs adds the "email_templates" edge to the EmailTemplate entity by IDs.
func (ou *OrganizationUpdate) AddEmailTemplateIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddEmailTemplateIDs(ids...)
	return ou
}

// AddEmailTemplates adds the "email_templates" edges to the EmailTemplate entity.
func (ou *OrganizationUpdate) AddEmailTemplates(e ...*EmailTemplate) *OrganizationUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEmailTemplateIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (ou *OrganizationUpdate) AddAPIKeyIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddAPIKeyIDs(ids...)
	return ou
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (ou *OrganizationUpdate) AddAPIKeys(a ...*ApiKey) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAPIKeyIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ou *OrganizationUpdate) AddWebhookIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddWebhookIDs(ids...)
	return ou
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) AddWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.AddWebhookIDs(ids...)
}

// AddFeatureFlagIDs adds the "feature_flags" edge to the OrganizationFeature entity by IDs.
func (ou *OrganizationUpdate) AddFeatureFlagIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddFeatureFlagIDs(ids...)
	return ou
}

// AddFeatureFlags adds the "feature_flags" edges to the OrganizationFeature entity.
func (ou *OrganizationUpdate) AddFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddFeatureFlagIDs(ids...)
}

// AddIdentityProviderIDs adds the "identity_providers" edge to the IdentityProvider entity by IDs.
func (ou *OrganizationUpdate) AddIdentityProviderIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddIdentityProviderIDs(ids...)
	return ou
}

// AddIdentityProviders adds the "identity_providers" edges to the IdentityProvider entity.
func (ou *OrganizationUpdate) AddIdentityProviders(i ...*IdentityProvider) *OrganizationUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddIdentityProviderIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OAuthClient entity by IDs.
func (ou *OrganizationUpdate) AddOauthClientIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddOauthClientIDs(ids...)
	return ou
}

// AddOauthClients adds the "oauth_clients" edges to the OAuthClient entity.
func (ou *OrganizationUpdate) AddOauthClients(o ...*OAuthClient) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOauthClientIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (ou *OrganizationUpdate) AddRoleIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddRoleIDs(ids...)
	return ou
}

// AddRoles adds the "roles" edges to the Role entity.
func (ou *OrganizationUpdate) AddRoles(r ...*Role) *OrganizationUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddRoleIDs(ids...)
}

// AddUserRoleContextIDs adds the "user_role_contexts" edge to the UserRole entity by IDs.
func (ou *OrganizationUpdate) AddUserRoleContextIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddUserRoleContextIDs(ids...)
	return ou
}

// AddUserRoleContexts adds the "user_role_contexts" edges to the UserRole entity.
func (ou *OrganizationUpdate) AddUserRoleContexts(u ...*UserRole) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserRoleContextIDs(ids...)
}

// AddUserPermissionContextIDs adds the "user_permission_contexts" edge to the UserPermission entity by IDs.
func (ou *OrganizationUpdate) AddUserPermissionContextIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddUserPermissionContextIDs(ids...)
	return ou
}

// AddUserPermissionContexts adds the "user_permission_contexts" edges to the UserPermission entity.
func (ou *OrganizationUpdate) AddUserPermissionContexts(u ...*UserPermission) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserPermissionContextIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (ou *OrganizationUpdate) AddAuditLogIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddAuditLogIDs(ids...)
	return ou
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (ou *OrganizationUpdate) AddAuditLogs(a ...*Audit) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAuditLogIDs(ids...)
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ou *OrganizationUpdate) AddOrganizationProviderIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddOrganizationProviderIDs(ids...)
	return ou
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ou *OrganizationUpdate) AddOrganizationProviders(o ...*OrganizationProvider) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrganizationProviderIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (ou *OrganizationUpdate) AddActivityIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.AddActivityIDs(ids...)
	return ou
}

// AddActivities adds the "activities" edges to the Activity entity.
func (ou *OrganizationUpdate) AddActivities(a ...*Activity) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddActivityIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrganizationUpdate) ClearUsers() *OrganizationUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrganizationUpdate) RemoveUserIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrganizationUpdate) RemoveUsers(u ...*User) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (ou *OrganizationUpdate) ClearMemberships() *OrganizationUpdate {
	ou.mutation.ClearMemberships()
	return ou
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (ou *OrganizationUpdate) RemoveMembershipIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveMembershipIDs(ids...)
	return ou
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (ou *OrganizationUpdate) RemoveMemberships(m ...*Membership) *OrganizationUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.RemoveMembershipIDs(ids...)
}

// ClearSmsTemplates clears all "sms_templates" edges to the SMSTemplate entity.
func (ou *OrganizationUpdate) ClearSmsTemplates() *OrganizationUpdate {
	ou.mutation.ClearSmsTemplates()
	return ou
}

// RemoveSmsTemplateIDs removes the "sms_templates" edge to SMSTemplate entities by IDs.
func (ou *OrganizationUpdate) RemoveSmsTemplateIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveSmsTemplateIDs(ids...)
	return ou
}

// RemoveSmsTemplates removes "sms_templates" edges to SMSTemplate entities.
func (ou *OrganizationUpdate) RemoveSmsTemplates(s ...*SMSTemplate) *OrganizationUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveSmsTemplateIDs(ids...)
}

// ClearEmailTemplates clears all "email_templates" edges to the EmailTemplate entity.
func (ou *OrganizationUpdate) ClearEmailTemplates() *OrganizationUpdate {
	ou.mutation.ClearEmailTemplates()
	return ou
}

// RemoveEmailTemplateIDs removes the "email_templates" edge to EmailTemplate entities by IDs.
func (ou *OrganizationUpdate) RemoveEmailTemplateIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveEmailTemplateIDs(ids...)
	return ou
}

// RemoveEmailTemplates removes "email_templates" edges to EmailTemplate entities.
func (ou *OrganizationUpdate) RemoveEmailTemplates(e ...*EmailTemplate) *OrganizationUpdate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEmailTemplateIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (ou *OrganizationUpdate) ClearAPIKeys() *OrganizationUpdate {
	ou.mutation.ClearAPIKeys()
	return ou
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (ou *OrganizationUpdate) RemoveAPIKeyIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveAPIKeyIDs(ids...)
	return ou
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (ou *OrganizationUpdate) RemoveAPIKeys(a ...*ApiKey) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAPIKeyIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) ClearWebhooks() *OrganizationUpdate {
	ou.mutation.ClearWebhooks()
	return ou
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ou *OrganizationUpdate) RemoveWebhookIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveWebhookIDs(ids...)
	return ou
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ou *OrganizationUpdate) RemoveWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.RemoveWebhookIDs(ids...)
}

// ClearFeatureFlags clears all "feature_flags" edges to the OrganizationFeature entity.
func (ou *OrganizationUpdate) ClearFeatureFlags() *OrganizationUpdate {
	ou.mutation.ClearFeatureFlags()
	return ou
}

// RemoveFeatureFlagIDs removes the "feature_flags" edge to OrganizationFeature entities by IDs.
func (ou *OrganizationUpdate) RemoveFeatureFlagIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveFeatureFlagIDs(ids...)
	return ou
}

// RemoveFeatureFlags removes "feature_flags" edges to OrganizationFeature entities.
func (ou *OrganizationUpdate) RemoveFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveFeatureFlagIDs(ids...)
}

// ClearIdentityProviders clears all "identity_providers" edges to the IdentityProvider entity.
func (ou *OrganizationUpdate) ClearIdentityProviders() *OrganizationUpdate {
	ou.mutation.ClearIdentityProviders()
	return ou
}

// RemoveIdentityProviderIDs removes the "identity_providers" edge to IdentityProvider entities by IDs.
func (ou *OrganizationUpdate) RemoveIdentityProviderIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveIdentityProviderIDs(ids...)
	return ou
}

// RemoveIdentityProviders removes "identity_providers" edges to IdentityProvider entities.
func (ou *OrganizationUpdate) RemoveIdentityProviders(i ...*IdentityProvider) *OrganizationUpdate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveIdentityProviderIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OAuthClient entity.
func (ou *OrganizationUpdate) ClearOauthClients() *OrganizationUpdate {
	ou.mutation.ClearOauthClients()
	return ou
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OAuthClient entities by IDs.
func (ou *OrganizationUpdate) RemoveOauthClientIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveOauthClientIDs(ids...)
	return ou
}

// RemoveOauthClients removes "oauth_clients" edges to OAuthClient entities.
func (ou *OrganizationUpdate) RemoveOauthClients(o ...*OAuthClient) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOauthClientIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (ou *OrganizationUpdate) ClearRoles() *OrganizationUpdate {
	ou.mutation.ClearRoles()
	return ou
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (ou *OrganizationUpdate) RemoveRoleIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveRoleIDs(ids...)
	return ou
}

// RemoveRoles removes "roles" edges to Role entities.
func (ou *OrganizationUpdate) RemoveRoles(r ...*Role) *OrganizationUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveRoleIDs(ids...)
}

// ClearUserRoleContexts clears all "user_role_contexts" edges to the UserRole entity.
func (ou *OrganizationUpdate) ClearUserRoleContexts() *OrganizationUpdate {
	ou.mutation.ClearUserRoleContexts()
	return ou
}

// RemoveUserRoleContextIDs removes the "user_role_contexts" edge to UserRole entities by IDs.
func (ou *OrganizationUpdate) RemoveUserRoleContextIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveUserRoleContextIDs(ids...)
	return ou
}

// RemoveUserRoleContexts removes "user_role_contexts" edges to UserRole entities.
func (ou *OrganizationUpdate) RemoveUserRoleContexts(u ...*UserRole) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserRoleContextIDs(ids...)
}

// ClearUserPermissionContexts clears all "user_permission_contexts" edges to the UserPermission entity.
func (ou *OrganizationUpdate) ClearUserPermissionContexts() *OrganizationUpdate {
	ou.mutation.ClearUserPermissionContexts()
	return ou
}

// RemoveUserPermissionContextIDs removes the "user_permission_contexts" edge to UserPermission entities by IDs.
func (ou *OrganizationUpdate) RemoveUserPermissionContextIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveUserPermissionContextIDs(ids...)
	return ou
}

// RemoveUserPermissionContexts removes "user_permission_contexts" edges to UserPermission entities.
func (ou *OrganizationUpdate) RemoveUserPermissionContexts(u ...*UserPermission) *OrganizationUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserPermissionContextIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the Audit entity.
func (ou *OrganizationUpdate) ClearAuditLogs() *OrganizationUpdate {
	ou.mutation.ClearAuditLogs()
	return ou
}

// RemoveAuditLogIDs removes the "audit_logs" edge to Audit entities by IDs.
func (ou *OrganizationUpdate) RemoveAuditLogIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveAuditLogIDs(ids...)
	return ou
}

// RemoveAuditLogs removes "audit_logs" edges to Audit entities.
func (ou *OrganizationUpdate) RemoveAuditLogs(a ...*Audit) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAuditLogIDs(ids...)
}

// ClearOrganizationProviders clears all "organization_providers" edges to the OrganizationProvider entity.
func (ou *OrganizationUpdate) ClearOrganizationProviders() *OrganizationUpdate {
	ou.mutation.ClearOrganizationProviders()
	return ou
}

// RemoveOrganizationProviderIDs removes the "organization_providers" edge to OrganizationProvider entities by IDs.
func (ou *OrganizationUpdate) RemoveOrganizationProviderIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveOrganizationProviderIDs(ids...)
	return ou
}

// RemoveOrganizationProviders removes "organization_providers" edges to OrganizationProvider entities.
func (ou *OrganizationUpdate) RemoveOrganizationProviders(o ...*OrganizationProvider) *OrganizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrganizationProviderIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (ou *OrganizationUpdate) ClearActivities() *OrganizationUpdate {
	ou.mutation.ClearActivities()
	return ou
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (ou *OrganizationUpdate) RemoveActivityIDs(ids ...xid.ID) *OrganizationUpdate {
	ou.mutation.RemoveActivityIDs(ids...)
	return ou
}

// RemoveActivities removes "activities" edges to Activity entities.
func (ou *OrganizationUpdate) RemoveActivities(a ...*Activity) *OrganizationUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Slug(); ok {
		if err := organization.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Organization.slug": %w`, err)}
		}
	}
	if v, ok := ou.mutation.OrgType(); ok {
		if err := organization.OrgTypeValidator(v); err != nil {
			return &ValidationError{Name: "org_type", err: fmt.Errorf(`ent: validator failed for field "Organization.org_type": %w`, err)}
		}
	}
	if v, ok := ou.mutation.SubscriptionStatus(); ok {
		if err := organization.SubscriptionStatusValidator(v); err != nil {
			return &ValidationError{Name: "subscription_status", err: fmt.Errorf(`ent: validator failed for field "Organization.subscription_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ou.mutation.Domains(); ok {
		_spec.SetField(organization.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldDomains, value)
		})
	}
	if ou.mutation.DomainsCleared() {
		_spec.ClearField(organization.FieldDomains, field.TypeJSON)
	}
	if value, ok := ou.mutation.VerifiedDomains(); ok {
		_spec.SetField(organization.FieldVerifiedDomains, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedVerifiedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldVerifiedDomains, value)
		})
	}
	if ou.mutation.VerifiedDomainsCleared() {
		_spec.ClearField(organization.FieldVerifiedDomains, field.TypeJSON)
	}
	if value, ok := ou.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ou.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ou.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ou.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ou.mutation.Plan(); ok {
		_spec.SetField(organization.FieldPlan, field.TypeString, value)
	}
	if value, ok := ou.mutation.Active(); ok {
		_spec.SetField(organization.FieldActive, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeJSON, value)
	}
	if ou.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ou.mutation.TrialEndsAt(); ok {
		_spec.SetField(organization.FieldTrialEndsAt, field.TypeTime, value)
	}
	if ou.mutation.TrialEndsAtCleared() {
		_spec.ClearField(organization.FieldTrialEndsAt, field.TypeTime)
	}
	if value, ok := ou.mutation.TrialUsed(); ok {
		_spec.SetField(organization.FieldTrialUsed, field.TypeBool, value)
	}
	if value, ok := ou.mutation.OwnerID(); ok {
		_spec.SetField(organization.FieldOwnerID, field.TypeString, value)
	}
	if ou.mutation.OwnerIDCleared() {
		_spec.ClearField(organization.FieldOwnerID, field.TypeString)
	}
	if value, ok := ou.mutation.OrgType(); ok {
		_spec.SetField(organization.FieldOrgType, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.IsPlatformOrganization(); ok {
		_spec.SetField(organization.FieldIsPlatformOrganization, field.TypeBool, value)
	}
	if value, ok := ou.mutation.ExternalUserLimit(); ok {
		_spec.SetField(organization.FieldExternalUserLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedExternalUserLimit(); ok {
		_spec.AddField(organization.FieldExternalUserLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.EndUserLimit(); ok {
		_spec.SetField(organization.FieldEndUserLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedEndUserLimit(); ok {
		_spec.AddField(organization.FieldEndUserLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.SSOEnabled(); ok {
		_spec.SetField(organization.FieldSSOEnabled, field.TypeBool, value)
	}
	if value, ok := ou.mutation.SSODomain(); ok {
		_spec.SetField(organization.FieldSSODomain, field.TypeString, value)
	}
	if ou.mutation.SSODomainCleared() {
		_spec.ClearField(organization.FieldSSODomain, field.TypeString)
	}
	if value, ok := ou.mutation.SubscriptionID(); ok {
		_spec.SetField(organization.FieldSubscriptionID, field.TypeString, value)
	}
	if ou.mutation.SubscriptionIDCleared() {
		_spec.ClearField(organization.FieldSubscriptionID, field.TypeString)
	}
	if value, ok := ou.mutation.CustomerID(); ok {
		_spec.SetField(organization.FieldCustomerID, field.TypeString, value)
	}
	if ou.mutation.CustomerIDCleared() {
		_spec.ClearField(organization.FieldCustomerID, field.TypeString)
	}
	if value, ok := ou.mutation.SubscriptionStatus(); ok {
		_spec.SetField(organization.FieldSubscriptionStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.AuthServiceEnabled(); ok {
		_spec.SetField(organization.FieldAuthServiceEnabled, field.TypeBool, value)
	}
	if value, ok := ou.mutation.AuthConfig(); ok {
		_spec.SetField(organization.FieldAuthConfig, field.TypeJSON, value)
	}
	if ou.mutation.AuthConfigCleared() {
		_spec.ClearField(organization.FieldAuthConfig, field.TypeJSON)
	}
	if value, ok := ou.mutation.AuthDomain(); ok {
		_spec.SetField(organization.FieldAuthDomain, field.TypeString, value)
	}
	if ou.mutation.AuthDomainCleared() {
		_spec.ClearField(organization.FieldAuthDomain, field.TypeString)
	}
	if value, ok := ou.mutation.APIRequestLimit(); ok {
		_spec.SetField(organization.FieldAPIRequestLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedAPIRequestLimit(); ok {
		_spec.AddField(organization.FieldAPIRequestLimit, field.TypeInt, value)
	}
	if value, ok := ou.mutation.APIRequestsUsed(); ok {
		_spec.SetField(organization.FieldAPIRequestsUsed, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedAPIRequestsUsed(); ok {
		_spec.AddField(organization.FieldAPIRequestsUsed, field.TypeInt, value)
	}
	if value, ok := ou.mutation.CurrentExternalUsers(); ok {
		_spec.SetField(organization.FieldCurrentExternalUsers, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCurrentExternalUsers(); ok {
		_spec.AddField(organization.FieldCurrentExternalUsers, field.TypeInt, value)
	}
	if value, ok := ou.mutation.CurrentEndUsers(); ok {
		_spec.SetField(organization.FieldCurrentEndUsers, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCurrentEndUsers(); ok {
		_spec.AddField(organization.FieldCurrentEndUsers, field.TypeInt, value)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ou.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SmsTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSmsTemplatesIDs(); len(nodes) > 0 && !ou.mutation.SmsTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SmsTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEmailTemplatesIDs(); len(nodes) > 0 && !ou.mutation.EmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EmailTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !ou.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedFeatureFlagsIDs(); len(nodes) > 0 && !ou.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.FeatureFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedIdentityProvidersIDs(); len(nodes) > 0 && !ou.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.IdentityProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !ou.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ou.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UserRoleContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUserRoleContextsIDs(); len(nodes) > 0 && !ou.mutation.UserRoleContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserRoleContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UserPermissionContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUserPermissionContextsIDs(); len(nodes) > 0 && !ou.mutation.UserPermissionContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserPermissionContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !ou.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrganizationProvidersIDs(); len(nodes) > 0 && !ou.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !ou.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrganizationUpdateOne) SetDeletedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetSlug sets the "slug" field.
func (ouo *OrganizationUpdateOne) SetSlug(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSlug(s)
	return ouo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSlug(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSlug(*s)
	}
	return ouo
}

// SetDomains sets the "domains" field.
func (ouo *OrganizationUpdateOne) SetDomains(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetDomains(s)
	return ouo
}

// AppendDomains appends s to the "domains" field.
func (ouo *OrganizationUpdateOne) AppendDomains(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendDomains(s)
	return ouo
}

// ClearDomains clears the value of the "domains" field.
func (ouo *OrganizationUpdateOne) ClearDomains() *OrganizationUpdateOne {
	ouo.mutation.ClearDomains()
	return ouo
}

// SetVerifiedDomains sets the "verified_domains" field.
func (ouo *OrganizationUpdateOne) SetVerifiedDomains(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetVerifiedDomains(s)
	return ouo
}

// AppendVerifiedDomains appends s to the "verified_domains" field.
func (ouo *OrganizationUpdateOne) AppendVerifiedDomains(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendVerifiedDomains(s)
	return ouo
}

// ClearVerifiedDomains clears the value of the "verified_domains" field.
func (ouo *OrganizationUpdateOne) ClearVerifiedDomains() *OrganizationUpdateOne {
	ouo.mutation.ClearVerifiedDomains()
	return ouo
}

// SetDomain sets the "domain" field.
func (ouo *OrganizationUpdateOne) SetDomain(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDomain(s)
	return ouo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDomain(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDomain(*s)
	}
	return ouo
}

// ClearDomain clears the value of the "domain" field.
func (ouo *OrganizationUpdateOne) ClearDomain() *OrganizationUpdateOne {
	ouo.mutation.ClearDomain()
	return ouo
}

// SetLogoURL sets the "logo_url" field.
func (ouo *OrganizationUpdateOne) SetLogoURL(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLogoURL(s)
	return ouo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLogoURL(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLogoURL(*s)
	}
	return ouo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ouo *OrganizationUpdateOne) ClearLogoURL() *OrganizationUpdateOne {
	ouo.mutation.ClearLogoURL()
	return ouo
}

// SetPlan sets the "plan" field.
func (ouo *OrganizationUpdateOne) SetPlan(s string) *OrganizationUpdateOne {
	ouo.mutation.SetPlan(s)
	return ouo
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillablePlan(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetPlan(*s)
	}
	return ouo
}

// SetActive sets the "active" field.
func (ouo *OrganizationUpdateOne) SetActive(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetActive(b)
	return ouo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableActive(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetActive(*b)
	}
	return ouo
}

// SetMetadata sets the "metadata" field.
func (ouo *OrganizationUpdateOne) SetMetadata(m map[string]interface{}) *OrganizationUpdateOne {
	ouo.mutation.SetMetadata(m)
	return ouo
}

// ClearMetadata clears the value of the "metadata" field.
func (ouo *OrganizationUpdateOne) ClearMetadata() *OrganizationUpdateOne {
	ouo.mutation.ClearMetadata()
	return ouo
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (ouo *OrganizationUpdateOne) SetTrialEndsAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetTrialEndsAt(t)
	return ouo
}

// SetNillableTrialEndsAt sets the "trial_ends_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTrialEndsAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetTrialEndsAt(*t)
	}
	return ouo
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (ouo *OrganizationUpdateOne) ClearTrialEndsAt() *OrganizationUpdateOne {
	ouo.mutation.ClearTrialEndsAt()
	return ouo
}

// SetTrialUsed sets the "trial_used" field.
func (ouo *OrganizationUpdateOne) SetTrialUsed(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetTrialUsed(b)
	return ouo
}

// SetNillableTrialUsed sets the "trial_used" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTrialUsed(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetTrialUsed(*b)
	}
	return ouo
}

// SetOwnerID sets the "owner_id" field.
func (ouo *OrganizationUpdateOne) SetOwnerID(x xid.ID) *OrganizationUpdateOne {
	ouo.mutation.SetOwnerID(x)
	return ouo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableOwnerID(x *xid.ID) *OrganizationUpdateOne {
	if x != nil {
		ouo.SetOwnerID(*x)
	}
	return ouo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ouo *OrganizationUpdateOne) ClearOwnerID() *OrganizationUpdateOne {
	ouo.mutation.ClearOwnerID()
	return ouo
}

// SetOrgType sets the "org_type" field.
func (ouo *OrganizationUpdateOne) SetOrgType(mt model.OrgType) *OrganizationUpdateOne {
	ouo.mutation.SetOrgType(mt)
	return ouo
}

// SetNillableOrgType sets the "org_type" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableOrgType(mt *model.OrgType) *OrganizationUpdateOne {
	if mt != nil {
		ouo.SetOrgType(*mt)
	}
	return ouo
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (ouo *OrganizationUpdateOne) SetIsPlatformOrganization(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetIsPlatformOrganization(b)
	return ouo
}

// SetNillableIsPlatformOrganization sets the "is_platform_organization" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableIsPlatformOrganization(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetIsPlatformOrganization(*b)
	}
	return ouo
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (ouo *OrganizationUpdateOne) SetExternalUserLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetExternalUserLimit()
	ouo.mutation.SetExternalUserLimit(i)
	return ouo
}

// SetNillableExternalUserLimit sets the "external_user_limit" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableExternalUserLimit(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetExternalUserLimit(*i)
	}
	return ouo
}

// AddExternalUserLimit adds i to the "external_user_limit" field.
func (ouo *OrganizationUpdateOne) AddExternalUserLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.AddExternalUserLimit(i)
	return ouo
}

// SetEndUserLimit sets the "end_user_limit" field.
func (ouo *OrganizationUpdateOne) SetEndUserLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetEndUserLimit()
	ouo.mutation.SetEndUserLimit(i)
	return ouo
}

// SetNillableEndUserLimit sets the "end_user_limit" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableEndUserLimit(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetEndUserLimit(*i)
	}
	return ouo
}

// AddEndUserLimit adds i to the "end_user_limit" field.
func (ouo *OrganizationUpdateOne) AddEndUserLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.AddEndUserLimit(i)
	return ouo
}

// SetSSOEnabled sets the "sso_enabled" field.
func (ouo *OrganizationUpdateOne) SetSSOEnabled(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetSSOEnabled(b)
	return ouo
}

// SetNillableSSOEnabled sets the "sso_enabled" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSSOEnabled(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetSSOEnabled(*b)
	}
	return ouo
}

// SetSSODomain sets the "sso_domain" field.
func (ouo *OrganizationUpdateOne) SetSSODomain(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSSODomain(s)
	return ouo
}

// SetNillableSSODomain sets the "sso_domain" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSSODomain(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSSODomain(*s)
	}
	return ouo
}

// ClearSSODomain clears the value of the "sso_domain" field.
func (ouo *OrganizationUpdateOne) ClearSSODomain() *OrganizationUpdateOne {
	ouo.mutation.ClearSSODomain()
	return ouo
}

// SetSubscriptionID sets the "subscription_id" field.
func (ouo *OrganizationUpdateOne) SetSubscriptionID(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSubscriptionID(s)
	return ouo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSubscriptionID(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSubscriptionID(*s)
	}
	return ouo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (ouo *OrganizationUpdateOne) ClearSubscriptionID() *OrganizationUpdateOne {
	ouo.mutation.ClearSubscriptionID()
	return ouo
}

// SetCustomerID sets the "customer_id" field.
func (ouo *OrganizationUpdateOne) SetCustomerID(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCustomerID(s)
	return ouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCustomerID(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCustomerID(*s)
	}
	return ouo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (ouo *OrganizationUpdateOne) ClearCustomerID() *OrganizationUpdateOne {
	ouo.mutation.ClearCustomerID()
	return ouo
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (ouo *OrganizationUpdateOne) SetSubscriptionStatus(os organization.SubscriptionStatus) *OrganizationUpdateOne {
	ouo.mutation.SetSubscriptionStatus(os)
	return ouo
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSubscriptionStatus(os *organization.SubscriptionStatus) *OrganizationUpdateOne {
	if os != nil {
		ouo.SetSubscriptionStatus(*os)
	}
	return ouo
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (ouo *OrganizationUpdateOne) SetAuthServiceEnabled(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetAuthServiceEnabled(b)
	return ouo
}

// SetNillableAuthServiceEnabled sets the "auth_service_enabled" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAuthServiceEnabled(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetAuthServiceEnabled(*b)
	}
	return ouo
}

// SetAuthConfig sets the "auth_config" field.
func (ouo *OrganizationUpdateOne) SetAuthConfig(m map[string]interface{}) *OrganizationUpdateOne {
	ouo.mutation.SetAuthConfig(m)
	return ouo
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (ouo *OrganizationUpdateOne) ClearAuthConfig() *OrganizationUpdateOne {
	ouo.mutation.ClearAuthConfig()
	return ouo
}

// SetAuthDomain sets the "auth_domain" field.
func (ouo *OrganizationUpdateOne) SetAuthDomain(s string) *OrganizationUpdateOne {
	ouo.mutation.SetAuthDomain(s)
	return ouo
}

// SetNillableAuthDomain sets the "auth_domain" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAuthDomain(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetAuthDomain(*s)
	}
	return ouo
}

// ClearAuthDomain clears the value of the "auth_domain" field.
func (ouo *OrganizationUpdateOne) ClearAuthDomain() *OrganizationUpdateOne {
	ouo.mutation.ClearAuthDomain()
	return ouo
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (ouo *OrganizationUpdateOne) SetAPIRequestLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetAPIRequestLimit()
	ouo.mutation.SetAPIRequestLimit(i)
	return ouo
}

// SetNillableAPIRequestLimit sets the "api_request_limit" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAPIRequestLimit(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetAPIRequestLimit(*i)
	}
	return ouo
}

// AddAPIRequestLimit adds i to the "api_request_limit" field.
func (ouo *OrganizationUpdateOne) AddAPIRequestLimit(i int) *OrganizationUpdateOne {
	ouo.mutation.AddAPIRequestLimit(i)
	return ouo
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (ouo *OrganizationUpdateOne) SetAPIRequestsUsed(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetAPIRequestsUsed()
	ouo.mutation.SetAPIRequestsUsed(i)
	return ouo
}

// SetNillableAPIRequestsUsed sets the "api_requests_used" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAPIRequestsUsed(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetAPIRequestsUsed(*i)
	}
	return ouo
}

// AddAPIRequestsUsed adds i to the "api_requests_used" field.
func (ouo *OrganizationUpdateOne) AddAPIRequestsUsed(i int) *OrganizationUpdateOne {
	ouo.mutation.AddAPIRequestsUsed(i)
	return ouo
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (ouo *OrganizationUpdateOne) SetCurrentExternalUsers(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetCurrentExternalUsers()
	ouo.mutation.SetCurrentExternalUsers(i)
	return ouo
}

// SetNillableCurrentExternalUsers sets the "current_external_users" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCurrentExternalUsers(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetCurrentExternalUsers(*i)
	}
	return ouo
}

// AddCurrentExternalUsers adds i to the "current_external_users" field.
func (ouo *OrganizationUpdateOne) AddCurrentExternalUsers(i int) *OrganizationUpdateOne {
	ouo.mutation.AddCurrentExternalUsers(i)
	return ouo
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (ouo *OrganizationUpdateOne) SetCurrentEndUsers(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetCurrentEndUsers()
	ouo.mutation.SetCurrentEndUsers(i)
	return ouo
}

// SetNillableCurrentEndUsers sets the "current_end_users" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCurrentEndUsers(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetCurrentEndUsers(*i)
	}
	return ouo
}

// AddCurrentEndUsers adds i to the "current_end_users" field.
func (ouo *OrganizationUpdateOne) AddCurrentEndUsers(i int) *OrganizationUpdateOne {
	ouo.mutation.AddCurrentEndUsers(i)
	return ouo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) AddUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (ouo *OrganizationUpdateOne) AddMembershipIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddMembershipIDs(ids...)
	return ouo
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (ouo *OrganizationUpdateOne) AddMemberships(m ...*Membership) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.AddMembershipIDs(ids...)
}

// AddSmsTemplateIDs adds the "sms_templates" edge to the SMSTemplate entity by IDs.
func (ouo *OrganizationUpdateOne) AddSmsTemplateIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddSmsTemplateIDs(ids...)
	return ouo
}

// AddSmsTemplates adds the "sms_templates" edges to the SMSTemplate entity.
func (ouo *OrganizationUpdateOne) AddSmsTemplates(s ...*SMSTemplate) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddSmsTemplateIDs(ids...)
}

// AddEmailTemplateIDs adds the "email_templates" edge to the EmailTemplate entity by IDs.
func (ouo *OrganizationUpdateOne) AddEmailTemplateIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddEmailTemplateIDs(ids...)
	return ouo
}

// AddEmailTemplates adds the "email_templates" edges to the EmailTemplate entity.
func (ouo *OrganizationUpdateOne) AddEmailTemplates(e ...*EmailTemplate) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEmailTemplateIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (ouo *OrganizationUpdateOne) AddAPIKeyIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddAPIKeyIDs(ids...)
	return ouo
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (ouo *OrganizationUpdateOne) AddAPIKeys(a ...*ApiKey) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAPIKeyIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ouo *OrganizationUpdateOne) AddWebhookIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddWebhookIDs(ids...)
	return ouo
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) AddWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.AddWebhookIDs(ids...)
}

// AddFeatureFlagIDs adds the "feature_flags" edge to the OrganizationFeature entity by IDs.
func (ouo *OrganizationUpdateOne) AddFeatureFlagIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddFeatureFlagIDs(ids...)
	return ouo
}

// AddFeatureFlags adds the "feature_flags" edges to the OrganizationFeature entity.
func (ouo *OrganizationUpdateOne) AddFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddFeatureFlagIDs(ids...)
}

// AddIdentityProviderIDs adds the "identity_providers" edge to the IdentityProvider entity by IDs.
func (ouo *OrganizationUpdateOne) AddIdentityProviderIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddIdentityProviderIDs(ids...)
	return ouo
}

// AddIdentityProviders adds the "identity_providers" edges to the IdentityProvider entity.
func (ouo *OrganizationUpdateOne) AddIdentityProviders(i ...*IdentityProvider) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddIdentityProviderIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OAuthClient entity by IDs.
func (ouo *OrganizationUpdateOne) AddOauthClientIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddOauthClientIDs(ids...)
	return ouo
}

// AddOauthClients adds the "oauth_clients" edges to the OAuthClient entity.
func (ouo *OrganizationUpdateOne) AddOauthClients(o ...*OAuthClient) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOauthClientIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (ouo *OrganizationUpdateOne) AddRoleIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddRoleIDs(ids...)
	return ouo
}

// AddRoles adds the "roles" edges to the Role entity.
func (ouo *OrganizationUpdateOne) AddRoles(r ...*Role) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddRoleIDs(ids...)
}

// AddUserRoleContextIDs adds the "user_role_contexts" edge to the UserRole entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserRoleContextIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddUserRoleContextIDs(ids...)
	return ouo
}

// AddUserRoleContexts adds the "user_role_contexts" edges to the UserRole entity.
func (ouo *OrganizationUpdateOne) AddUserRoleContexts(u ...*UserRole) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserRoleContextIDs(ids...)
}

// AddUserPermissionContextIDs adds the "user_permission_contexts" edge to the UserPermission entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserPermissionContextIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddUserPermissionContextIDs(ids...)
	return ouo
}

// AddUserPermissionContexts adds the "user_permission_contexts" edges to the UserPermission entity.
func (ouo *OrganizationUpdateOne) AddUserPermissionContexts(u ...*UserPermission) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserPermissionContextIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (ouo *OrganizationUpdateOne) AddAuditLogIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddAuditLogIDs(ids...)
	return ouo
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (ouo *OrganizationUpdateOne) AddAuditLogs(a ...*Audit) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAuditLogIDs(ids...)
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ouo *OrganizationUpdateOne) AddOrganizationProviderIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddOrganizationProviderIDs(ids...)
	return ouo
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ouo *OrganizationUpdateOne) AddOrganizationProviders(o ...*OrganizationProvider) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrganizationProviderIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (ouo *OrganizationUpdateOne) AddActivityIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.AddActivityIDs(ids...)
	return ouo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (ouo *OrganizationUpdateOne) AddActivities(a ...*Activity) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddActivityIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) ClearUsers() *OrganizationUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrganizationUpdateOne) RemoveUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (ouo *OrganizationUpdateOne) ClearMemberships() *OrganizationUpdateOne {
	ouo.mutation.ClearMemberships()
	return ouo
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveMembershipIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveMembershipIDs(ids...)
	return ouo
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (ouo *OrganizationUpdateOne) RemoveMemberships(m ...*Membership) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.RemoveMembershipIDs(ids...)
}

// ClearSmsTemplates clears all "sms_templates" edges to the SMSTemplate entity.
func (ouo *OrganizationUpdateOne) ClearSmsTemplates() *OrganizationUpdateOne {
	ouo.mutation.ClearSmsTemplates()
	return ouo
}

// RemoveSmsTemplateIDs removes the "sms_templates" edge to SMSTemplate entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveSmsTemplateIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveSmsTemplateIDs(ids...)
	return ouo
}

// RemoveSmsTemplates removes "sms_templates" edges to SMSTemplate entities.
func (ouo *OrganizationUpdateOne) RemoveSmsTemplates(s ...*SMSTemplate) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveSmsTemplateIDs(ids...)
}

// ClearEmailTemplates clears all "email_templates" edges to the EmailTemplate entity.
func (ouo *OrganizationUpdateOne) ClearEmailTemplates() *OrganizationUpdateOne {
	ouo.mutation.ClearEmailTemplates()
	return ouo
}

// RemoveEmailTemplateIDs removes the "email_templates" edge to EmailTemplate entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEmailTemplateIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveEmailTemplateIDs(ids...)
	return ouo
}

// RemoveEmailTemplates removes "email_templates" edges to EmailTemplate entities.
func (ouo *OrganizationUpdateOne) RemoveEmailTemplates(e ...*EmailTemplate) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEmailTemplateIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (ouo *OrganizationUpdateOne) ClearAPIKeys() *OrganizationUpdateOne {
	ouo.mutation.ClearAPIKeys()
	return ouo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveAPIKeyIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveAPIKeyIDs(ids...)
	return ouo
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (ouo *OrganizationUpdateOne) RemoveAPIKeys(a ...*ApiKey) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAPIKeyIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) ClearWebhooks() *OrganizationUpdateOne {
	ouo.mutation.ClearWebhooks()
	return ouo
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveWebhookIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveWebhookIDs(ids...)
	return ouo
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ouo *OrganizationUpdateOne) RemoveWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.RemoveWebhookIDs(ids...)
}

// ClearFeatureFlags clears all "feature_flags" edges to the OrganizationFeature entity.
func (ouo *OrganizationUpdateOne) ClearFeatureFlags() *OrganizationUpdateOne {
	ouo.mutation.ClearFeatureFlags()
	return ouo
}

// RemoveFeatureFlagIDs removes the "feature_flags" edge to OrganizationFeature entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveFeatureFlagIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveFeatureFlagIDs(ids...)
	return ouo
}

// RemoveFeatureFlags removes "feature_flags" edges to OrganizationFeature entities.
func (ouo *OrganizationUpdateOne) RemoveFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveFeatureFlagIDs(ids...)
}

// ClearIdentityProviders clears all "identity_providers" edges to the IdentityProvider entity.
func (ouo *OrganizationUpdateOne) ClearIdentityProviders() *OrganizationUpdateOne {
	ouo.mutation.ClearIdentityProviders()
	return ouo
}

// RemoveIdentityProviderIDs removes the "identity_providers" edge to IdentityProvider entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveIdentityProviderIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveIdentityProviderIDs(ids...)
	return ouo
}

// RemoveIdentityProviders removes "identity_providers" edges to IdentityProvider entities.
func (ouo *OrganizationUpdateOne) RemoveIdentityProviders(i ...*IdentityProvider) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveIdentityProviderIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OAuthClient entity.
func (ouo *OrganizationUpdateOne) ClearOauthClients() *OrganizationUpdateOne {
	ouo.mutation.ClearOauthClients()
	return ouo
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OAuthClient entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOauthClientIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveOauthClientIDs(ids...)
	return ouo
}

// RemoveOauthClients removes "oauth_clients" edges to OAuthClient entities.
func (ouo *OrganizationUpdateOne) RemoveOauthClients(o ...*OAuthClient) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOauthClientIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (ouo *OrganizationUpdateOne) ClearRoles() *OrganizationUpdateOne {
	ouo.mutation.ClearRoles()
	return ouo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveRoleIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveRoleIDs(ids...)
	return ouo
}

// RemoveRoles removes "roles" edges to Role entities.
func (ouo *OrganizationUpdateOne) RemoveRoles(r ...*Role) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveRoleIDs(ids...)
}

// ClearUserRoleContexts clears all "user_role_contexts" edges to the UserRole entity.
func (ouo *OrganizationUpdateOne) ClearUserRoleContexts() *OrganizationUpdateOne {
	ouo.mutation.ClearUserRoleContexts()
	return ouo
}

// RemoveUserRoleContextIDs removes the "user_role_contexts" edge to UserRole entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserRoleContextIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserRoleContextIDs(ids...)
	return ouo
}

// RemoveUserRoleContexts removes "user_role_contexts" edges to UserRole entities.
func (ouo *OrganizationUpdateOne) RemoveUserRoleContexts(u ...*UserRole) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserRoleContextIDs(ids...)
}

// ClearUserPermissionContexts clears all "user_permission_contexts" edges to the UserPermission entity.
func (ouo *OrganizationUpdateOne) ClearUserPermissionContexts() *OrganizationUpdateOne {
	ouo.mutation.ClearUserPermissionContexts()
	return ouo
}

// RemoveUserPermissionContextIDs removes the "user_permission_contexts" edge to UserPermission entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserPermissionContextIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserPermissionContextIDs(ids...)
	return ouo
}

// RemoveUserPermissionContexts removes "user_permission_contexts" edges to UserPermission entities.
func (ouo *OrganizationUpdateOne) RemoveUserPermissionContexts(u ...*UserPermission) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserPermissionContextIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the Audit entity.
func (ouo *OrganizationUpdateOne) ClearAuditLogs() *OrganizationUpdateOne {
	ouo.mutation.ClearAuditLogs()
	return ouo
}

// RemoveAuditLogIDs removes the "audit_logs" edge to Audit entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveAuditLogIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveAuditLogIDs(ids...)
	return ouo
}

// RemoveAuditLogs removes "audit_logs" edges to Audit entities.
func (ouo *OrganizationUpdateOne) RemoveAuditLogs(a ...*Audit) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAuditLogIDs(ids...)
}

// ClearOrganizationProviders clears all "organization_providers" edges to the OrganizationProvider entity.
func (ouo *OrganizationUpdateOne) ClearOrganizationProviders() *OrganizationUpdateOne {
	ouo.mutation.ClearOrganizationProviders()
	return ouo
}

// RemoveOrganizationProviderIDs removes the "organization_providers" edge to OrganizationProvider entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOrganizationProviderIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveOrganizationProviderIDs(ids...)
	return ouo
}

// RemoveOrganizationProviders removes "organization_providers" edges to OrganizationProvider entities.
func (ouo *OrganizationUpdateOne) RemoveOrganizationProviders(o ...*OrganizationProvider) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrganizationProviderIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (ouo *OrganizationUpdateOne) ClearActivities() *OrganizationUpdateOne {
	ouo.mutation.ClearActivities()
	return ouo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveActivityIDs(ids ...xid.ID) *OrganizationUpdateOne {
	ouo.mutation.RemoveActivityIDs(ids...)
	return ouo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (ouo *OrganizationUpdateOne) RemoveActivities(a ...*Activity) *OrganizationUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveActivityIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Slug(); ok {
		if err := organization.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Organization.slug": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.OrgType(); ok {
		if err := organization.OrgTypeValidator(v); err != nil {
			return &ValidationError{Name: "org_type", err: fmt.Errorf(`ent: validator failed for field "Organization.org_type": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.SubscriptionStatus(); ok {
		if err := organization.SubscriptionStatusValidator(v); err != nil {
			return &ValidationError{Name: "subscription_status", err: fmt.Errorf(`ent: validator failed for field "Organization.subscription_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Domains(); ok {
		_spec.SetField(organization.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldDomains, value)
		})
	}
	if ouo.mutation.DomainsCleared() {
		_spec.ClearField(organization.FieldDomains, field.TypeJSON)
	}
	if value, ok := ouo.mutation.VerifiedDomains(); ok {
		_spec.SetField(organization.FieldVerifiedDomains, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedVerifiedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldVerifiedDomains, value)
		})
	}
	if ouo.mutation.VerifiedDomainsCleared() {
		_spec.ClearField(organization.FieldVerifiedDomains, field.TypeJSON)
	}
	if value, ok := ouo.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ouo.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ouo.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ouo.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ouo.mutation.Plan(); ok {
		_spec.SetField(organization.FieldPlan, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Active(); ok {
		_spec.SetField(organization.FieldActive, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeJSON, value)
	}
	if ouo.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ouo.mutation.TrialEndsAt(); ok {
		_spec.SetField(organization.FieldTrialEndsAt, field.TypeTime, value)
	}
	if ouo.mutation.TrialEndsAtCleared() {
		_spec.ClearField(organization.FieldTrialEndsAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.TrialUsed(); ok {
		_spec.SetField(organization.FieldTrialUsed, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.OwnerID(); ok {
		_spec.SetField(organization.FieldOwnerID, field.TypeString, value)
	}
	if ouo.mutation.OwnerIDCleared() {
		_spec.ClearField(organization.FieldOwnerID, field.TypeString)
	}
	if value, ok := ouo.mutation.OrgType(); ok {
		_spec.SetField(organization.FieldOrgType, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.IsPlatformOrganization(); ok {
		_spec.SetField(organization.FieldIsPlatformOrganization, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.ExternalUserLimit(); ok {
		_spec.SetField(organization.FieldExternalUserLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedExternalUserLimit(); ok {
		_spec.AddField(organization.FieldExternalUserLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.EndUserLimit(); ok {
		_spec.SetField(organization.FieldEndUserLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedEndUserLimit(); ok {
		_spec.AddField(organization.FieldEndUserLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.SSOEnabled(); ok {
		_spec.SetField(organization.FieldSSOEnabled, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.SSODomain(); ok {
		_spec.SetField(organization.FieldSSODomain, field.TypeString, value)
	}
	if ouo.mutation.SSODomainCleared() {
		_spec.ClearField(organization.FieldSSODomain, field.TypeString)
	}
	if value, ok := ouo.mutation.SubscriptionID(); ok {
		_spec.SetField(organization.FieldSubscriptionID, field.TypeString, value)
	}
	if ouo.mutation.SubscriptionIDCleared() {
		_spec.ClearField(organization.FieldSubscriptionID, field.TypeString)
	}
	if value, ok := ouo.mutation.CustomerID(); ok {
		_spec.SetField(organization.FieldCustomerID, field.TypeString, value)
	}
	if ouo.mutation.CustomerIDCleared() {
		_spec.ClearField(organization.FieldCustomerID, field.TypeString)
	}
	if value, ok := ouo.mutation.SubscriptionStatus(); ok {
		_spec.SetField(organization.FieldSubscriptionStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.AuthServiceEnabled(); ok {
		_spec.SetField(organization.FieldAuthServiceEnabled, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.AuthConfig(); ok {
		_spec.SetField(organization.FieldAuthConfig, field.TypeJSON, value)
	}
	if ouo.mutation.AuthConfigCleared() {
		_spec.ClearField(organization.FieldAuthConfig, field.TypeJSON)
	}
	if value, ok := ouo.mutation.AuthDomain(); ok {
		_spec.SetField(organization.FieldAuthDomain, field.TypeString, value)
	}
	if ouo.mutation.AuthDomainCleared() {
		_spec.ClearField(organization.FieldAuthDomain, field.TypeString)
	}
	if value, ok := ouo.mutation.APIRequestLimit(); ok {
		_spec.SetField(organization.FieldAPIRequestLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedAPIRequestLimit(); ok {
		_spec.AddField(organization.FieldAPIRequestLimit, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.APIRequestsUsed(); ok {
		_spec.SetField(organization.FieldAPIRequestsUsed, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedAPIRequestsUsed(); ok {
		_spec.AddField(organization.FieldAPIRequestsUsed, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.CurrentExternalUsers(); ok {
		_spec.SetField(organization.FieldCurrentExternalUsers, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCurrentExternalUsers(); ok {
		_spec.AddField(organization.FieldCurrentExternalUsers, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.CurrentEndUsers(); ok {
		_spec.SetField(organization.FieldCurrentEndUsers, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCurrentEndUsers(); ok {
		_spec.AddField(organization.FieldCurrentEndUsers, field.TypeInt, value)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ouo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SmsTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSmsTemplatesIDs(); len(nodes) > 0 && !ouo.mutation.SmsTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SmsTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEmailTemplatesIDs(); len(nodes) > 0 && !ouo.mutation.EmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EmailTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !ouo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedFeatureFlagsIDs(); len(nodes) > 0 && !ouo.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.FeatureFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedIdentityProvidersIDs(); len(nodes) > 0 && !ouo.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.IdentityProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !ouo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ouo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UserRoleContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUserRoleContextsIDs(); len(nodes) > 0 && !ouo.mutation.UserRoleContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserRoleContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UserPermissionContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUserPermissionContextsIDs(); len(nodes) > 0 && !ouo.mutation.UserPermissionContextsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserPermissionContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !ouo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrganizationProvidersIDs(); len(nodes) > 0 && !ouo.mutation.OrganizationProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !ouo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
