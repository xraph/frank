// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/pkg/model"
)

// Webhook is the model entity for the Webhook schema.
type Webhook struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"-"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// EventTypes holds the value of the "event_types" field.
	EventTypes []string `json:"event_types,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// TimeoutMs holds the value of the "timeout_ms" field.
	TimeoutMs int `json:"timeout_ms,omitempty"`
	// Format holds the value of the "format" field.
	Format model.WebhookFormat `json:"format,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string]string `json:"headers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebhookQuery when eager-loading is set.
	Edges        WebhookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WebhookEdges holds the relations/edges for other nodes in the graph.
type WebhookEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Events holds the value of the events edge.
	Events []*WebhookEvent `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	namedEvents map[string][]*WebhookEvent
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebhookEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e WebhookEdges) EventsOrErr() ([]*WebhookEvent, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Webhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhook.FieldEventTypes, webhook.FieldMetadata, webhook.FieldHeaders:
			values[i] = new([]byte)
		case webhook.FieldActive:
			values[i] = new(sql.NullBool)
		case webhook.FieldRetryCount, webhook.FieldTimeoutMs:
			values[i] = new(sql.NullInt64)
		case webhook.FieldName, webhook.FieldURL, webhook.FieldSecret, webhook.FieldVersion, webhook.FieldFormat:
			values[i] = new(sql.NullString)
		case webhook.FieldCreatedAt, webhook.FieldUpdatedAt, webhook.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case webhook.FieldID, webhook.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Webhook fields.
func (w *Webhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhook.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case webhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case webhook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case webhook.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = value.Time
			}
		case webhook.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case webhook.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				w.URL = value.String
			}
		case webhook.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				w.OrganizationID = *value
			}
		case webhook.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				w.Secret = value.String
			}
		case webhook.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				w.Active = value.Bool
			}
		case webhook.FieldEventTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field event_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.EventTypes); err != nil {
					return fmt.Errorf("unmarshal field event_types: %w", err)
				}
			}
		case webhook.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				w.Version = value.String
			}
		case webhook.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				w.RetryCount = int(value.Int64)
			}
		case webhook.FieldTimeoutMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_ms", values[i])
			} else if value.Valid {
				w.TimeoutMs = int(value.Int64)
			}
		case webhook.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				w.Format = model.WebhookFormat(value.String)
			}
		case webhook.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case webhook.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Webhook.
// This includes values selected through modifiers, order, etc.
func (w *Webhook) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Webhook entity.
func (w *Webhook) QueryOrganization() *OrganizationQuery {
	return NewWebhookClient(w.config).QueryOrganization(w)
}

// QueryEvents queries the "events" edge of the Webhook entity.
func (w *Webhook) QueryEvents() *WebhookEventQuery {
	return NewWebhookClient(w.config).QueryEvents(w)
}

// Update returns a builder for updating this Webhook.
// Note that you need to call Webhook.Unwrap() before calling this method if this Webhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Webhook) Update() *WebhookUpdateOne {
	return NewWebhookClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Webhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Webhook) Unwrap() *Webhook {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Webhook is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Webhook) String() string {
	var builder strings.Builder
	builder.WriteString("Webhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(w.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(w.URL)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", w.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", w.Active))
	builder.WriteString(", ")
	builder.WriteString("event_types=")
	builder.WriteString(fmt.Sprintf("%v", w.EventTypes))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(w.Version)
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", w.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("timeout_ms=")
	builder.WriteString(fmt.Sprintf("%v", w.TimeoutMs))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", w.Format))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", w.Metadata))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(fmt.Sprintf("%v", w.Headers))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Webhook) NamedEvents(name string) ([]*WebhookEvent, error) {
	if w.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Webhook) appendNamedEvents(name string, edges ...*WebhookEvent) {
	if w.Edges.namedEvents == nil {
		w.Edges.namedEvents = make(map[string][]*WebhookEvent)
	}
	if len(edges) == 0 {
		w.Edges.namedEvents[name] = []*WebhookEvent{}
	} else {
		w.Edges.namedEvents[name] = append(w.Edges.namedEvents[name], edges...)
	}
}

// Webhooks is a parsable slice of Webhook.
type Webhooks []*Webhook
