// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/mfa"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
)

// MFAUpdate is the builder for updating MFA entities.
type MFAUpdate struct {
	config
	hooks     []Hook
	mutation  *MFAMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MFAUpdate builder.
func (mu *MFAUpdate) Where(ps ...predicate.MFA) *MFAUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MFAUpdate) SetUpdatedAt(t time.Time) *MFAUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MFAUpdate) SetDeletedAt(t time.Time) *MFAUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableDeletedAt(t *time.Time) *MFAUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MFAUpdate) ClearDeletedAt() *MFAUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MFAUpdate) SetUserID(x xid.ID) *MFAUpdate {
	mu.mutation.SetUserID(x)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableUserID(x *xid.ID) *MFAUpdate {
	if x != nil {
		mu.SetUserID(*x)
	}
	return mu
}

// SetMethod sets the "method" field.
func (mu *MFAUpdate) SetMethod(s string) *MFAUpdate {
	mu.mutation.SetMethod(s)
	return mu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableMethod(s *string) *MFAUpdate {
	if s != nil {
		mu.SetMethod(*s)
	}
	return mu
}

// SetSecret sets the "secret" field.
func (mu *MFAUpdate) SetSecret(s string) *MFAUpdate {
	mu.mutation.SetSecret(s)
	return mu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableSecret(s *string) *MFAUpdate {
	if s != nil {
		mu.SetSecret(*s)
	}
	return mu
}

// SetVerified sets the "verified" field.
func (mu *MFAUpdate) SetVerified(b bool) *MFAUpdate {
	mu.mutation.SetVerified(b)
	return mu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableVerified(b *bool) *MFAUpdate {
	if b != nil {
		mu.SetVerified(*b)
	}
	return mu
}

// SetActive sets the "active" field.
func (mu *MFAUpdate) SetActive(b bool) *MFAUpdate {
	mu.mutation.SetActive(b)
	return mu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableActive(b *bool) *MFAUpdate {
	if b != nil {
		mu.SetActive(*b)
	}
	return mu
}

// SetBackupCodes sets the "backup_codes" field.
func (mu *MFAUpdate) SetBackupCodes(s []string) *MFAUpdate {
	mu.mutation.SetBackupCodes(s)
	return mu
}

// AppendBackupCodes appends s to the "backup_codes" field.
func (mu *MFAUpdate) AppendBackupCodes(s []string) *MFAUpdate {
	mu.mutation.AppendBackupCodes(s)
	return mu
}

// ClearBackupCodes clears the value of the "backup_codes" field.
func (mu *MFAUpdate) ClearBackupCodes() *MFAUpdate {
	mu.mutation.ClearBackupCodes()
	return mu
}

// SetPhoneNumber sets the "phone_number" field.
func (mu *MFAUpdate) SetPhoneNumber(s string) *MFAUpdate {
	mu.mutation.SetPhoneNumber(s)
	return mu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (mu *MFAUpdate) SetNillablePhoneNumber(s *string) *MFAUpdate {
	if s != nil {
		mu.SetPhoneNumber(*s)
	}
	return mu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (mu *MFAUpdate) ClearPhoneNumber() *MFAUpdate {
	mu.mutation.ClearPhoneNumber()
	return mu
}

// SetEmail sets the "email" field.
func (mu *MFAUpdate) SetEmail(s string) *MFAUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableEmail(s *string) *MFAUpdate {
	if s != nil {
		mu.SetEmail(*s)
	}
	return mu
}

// ClearEmail clears the value of the "email" field.
func (mu *MFAUpdate) ClearEmail() *MFAUpdate {
	mu.mutation.ClearEmail()
	return mu
}

// SetLastUsed sets the "last_used" field.
func (mu *MFAUpdate) SetLastUsed(t time.Time) *MFAUpdate {
	mu.mutation.SetLastUsed(t)
	return mu
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (mu *MFAUpdate) SetNillableLastUsed(t *time.Time) *MFAUpdate {
	if t != nil {
		mu.SetLastUsed(*t)
	}
	return mu
}

// ClearLastUsed clears the value of the "last_used" field.
func (mu *MFAUpdate) ClearLastUsed() *MFAUpdate {
	mu.mutation.ClearLastUsed()
	return mu
}

// SetMetadata sets the "metadata" field.
func (mu *MFAUpdate) SetMetadata(m map[string]interface{}) *MFAUpdate {
	mu.mutation.SetMetadata(m)
	return mu
}

// ClearMetadata clears the value of the "metadata" field.
func (mu *MFAUpdate) ClearMetadata() *MFAUpdate {
	mu.mutation.ClearMetadata()
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MFAUpdate) SetUser(u *User) *MFAUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MFAMutation object of the builder.
func (mu *MFAUpdate) Mutation() *MFAMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MFAUpdate) ClearUser() *MFAUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MFAUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MFAUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MFAUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MFAUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MFAUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := mfa.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MFAUpdate) check() error {
	if v, ok := mu.mutation.UserID(); ok {
		if err := mfa.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MFA.user_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Method(); ok {
		if err := mfa.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "MFA.method": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Secret(); ok {
		if err := mfa.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "MFA.secret": %w`, err)}
		}
	}
	if mu.mutation.UserCleared() && len(mu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MFA.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MFAUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MFAUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MFAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mfa.Table, mfa.Columns, sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(mfa.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(mfa.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(mfa.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Method(); ok {
		_spec.SetField(mfa.FieldMethod, field.TypeString, value)
	}
	if value, ok := mu.mutation.Secret(); ok {
		_spec.SetField(mfa.FieldSecret, field.TypeString, value)
	}
	if value, ok := mu.mutation.Verified(); ok {
		_spec.SetField(mfa.FieldVerified, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Active(); ok {
		_spec.SetField(mfa.FieldActive, field.TypeBool, value)
	}
	if value, ok := mu.mutation.BackupCodes(); ok {
		_spec.SetField(mfa.FieldBackupCodes, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedBackupCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mfa.FieldBackupCodes, value)
		})
	}
	if mu.mutation.BackupCodesCleared() {
		_spec.ClearField(mfa.FieldBackupCodes, field.TypeJSON)
	}
	if value, ok := mu.mutation.PhoneNumber(); ok {
		_spec.SetField(mfa.FieldPhoneNumber, field.TypeString, value)
	}
	if mu.mutation.PhoneNumberCleared() {
		_spec.ClearField(mfa.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.SetField(mfa.FieldEmail, field.TypeString, value)
	}
	if mu.mutation.EmailCleared() {
		_spec.ClearField(mfa.FieldEmail, field.TypeString)
	}
	if value, ok := mu.mutation.LastUsed(); ok {
		_spec.SetField(mfa.FieldLastUsed, field.TypeTime, value)
	}
	if mu.mutation.LastUsedCleared() {
		_spec.ClearField(mfa.FieldLastUsed, field.TypeTime)
	}
	if value, ok := mu.mutation.Metadata(); ok {
		_spec.SetField(mfa.FieldMetadata, field.TypeJSON, value)
	}
	if mu.mutation.MetadataCleared() {
		_spec.ClearField(mfa.FieldMetadata, field.TypeJSON)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfa.UserTable,
			Columns: []string{mfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfa.UserTable,
			Columns: []string{mfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MFAUpdateOne is the builder for updating a single MFA entity.
type MFAUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MFAMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MFAUpdateOne) SetUpdatedAt(t time.Time) *MFAUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MFAUpdateOne) SetDeletedAt(t time.Time) *MFAUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableDeletedAt(t *time.Time) *MFAUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MFAUpdateOne) ClearDeletedAt() *MFAUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MFAUpdateOne) SetUserID(x xid.ID) *MFAUpdateOne {
	muo.mutation.SetUserID(x)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableUserID(x *xid.ID) *MFAUpdateOne {
	if x != nil {
		muo.SetUserID(*x)
	}
	return muo
}

// SetMethod sets the "method" field.
func (muo *MFAUpdateOne) SetMethod(s string) *MFAUpdateOne {
	muo.mutation.SetMethod(s)
	return muo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableMethod(s *string) *MFAUpdateOne {
	if s != nil {
		muo.SetMethod(*s)
	}
	return muo
}

// SetSecret sets the "secret" field.
func (muo *MFAUpdateOne) SetSecret(s string) *MFAUpdateOne {
	muo.mutation.SetSecret(s)
	return muo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableSecret(s *string) *MFAUpdateOne {
	if s != nil {
		muo.SetSecret(*s)
	}
	return muo
}

// SetVerified sets the "verified" field.
func (muo *MFAUpdateOne) SetVerified(b bool) *MFAUpdateOne {
	muo.mutation.SetVerified(b)
	return muo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableVerified(b *bool) *MFAUpdateOne {
	if b != nil {
		muo.SetVerified(*b)
	}
	return muo
}

// SetActive sets the "active" field.
func (muo *MFAUpdateOne) SetActive(b bool) *MFAUpdateOne {
	muo.mutation.SetActive(b)
	return muo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableActive(b *bool) *MFAUpdateOne {
	if b != nil {
		muo.SetActive(*b)
	}
	return muo
}

// SetBackupCodes sets the "backup_codes" field.
func (muo *MFAUpdateOne) SetBackupCodes(s []string) *MFAUpdateOne {
	muo.mutation.SetBackupCodes(s)
	return muo
}

// AppendBackupCodes appends s to the "backup_codes" field.
func (muo *MFAUpdateOne) AppendBackupCodes(s []string) *MFAUpdateOne {
	muo.mutation.AppendBackupCodes(s)
	return muo
}

// ClearBackupCodes clears the value of the "backup_codes" field.
func (muo *MFAUpdateOne) ClearBackupCodes() *MFAUpdateOne {
	muo.mutation.ClearBackupCodes()
	return muo
}

// SetPhoneNumber sets the "phone_number" field.
func (muo *MFAUpdateOne) SetPhoneNumber(s string) *MFAUpdateOne {
	muo.mutation.SetPhoneNumber(s)
	return muo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillablePhoneNumber(s *string) *MFAUpdateOne {
	if s != nil {
		muo.SetPhoneNumber(*s)
	}
	return muo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (muo *MFAUpdateOne) ClearPhoneNumber() *MFAUpdateOne {
	muo.mutation.ClearPhoneNumber()
	return muo
}

// SetEmail sets the "email" field.
func (muo *MFAUpdateOne) SetEmail(s string) *MFAUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableEmail(s *string) *MFAUpdateOne {
	if s != nil {
		muo.SetEmail(*s)
	}
	return muo
}

// ClearEmail clears the value of the "email" field.
func (muo *MFAUpdateOne) ClearEmail() *MFAUpdateOne {
	muo.mutation.ClearEmail()
	return muo
}

// SetLastUsed sets the "last_used" field.
func (muo *MFAUpdateOne) SetLastUsed(t time.Time) *MFAUpdateOne {
	muo.mutation.SetLastUsed(t)
	return muo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (muo *MFAUpdateOne) SetNillableLastUsed(t *time.Time) *MFAUpdateOne {
	if t != nil {
		muo.SetLastUsed(*t)
	}
	return muo
}

// ClearLastUsed clears the value of the "last_used" field.
func (muo *MFAUpdateOne) ClearLastUsed() *MFAUpdateOne {
	muo.mutation.ClearLastUsed()
	return muo
}

// SetMetadata sets the "metadata" field.
func (muo *MFAUpdateOne) SetMetadata(m map[string]interface{}) *MFAUpdateOne {
	muo.mutation.SetMetadata(m)
	return muo
}

// ClearMetadata clears the value of the "metadata" field.
func (muo *MFAUpdateOne) ClearMetadata() *MFAUpdateOne {
	muo.mutation.ClearMetadata()
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MFAUpdateOne) SetUser(u *User) *MFAUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MFAMutation object of the builder.
func (muo *MFAUpdateOne) Mutation() *MFAMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MFAUpdateOne) ClearUser() *MFAUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MFAUpdate builder.
func (muo *MFAUpdateOne) Where(ps ...predicate.MFA) *MFAUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MFAUpdateOne) Select(field string, fields ...string) *MFAUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated MFA entity.
func (muo *MFAUpdateOne) Save(ctx context.Context) (*MFA, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MFAUpdateOne) SaveX(ctx context.Context) *MFA {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MFAUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MFAUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MFAUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := mfa.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MFAUpdateOne) check() error {
	if v, ok := muo.mutation.UserID(); ok {
		if err := mfa.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MFA.user_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Method(); ok {
		if err := mfa.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "MFA.method": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Secret(); ok {
		if err := mfa.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "MFA.secret": %w`, err)}
		}
	}
	if muo.mutation.UserCleared() && len(muo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MFA.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MFAUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MFAUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MFAUpdateOne) sqlSave(ctx context.Context) (_node *MFA, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mfa.Table, mfa.Columns, sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MFA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mfa.FieldID)
		for _, f := range fields {
			if !mfa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mfa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(mfa.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(mfa.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(mfa.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Method(); ok {
		_spec.SetField(mfa.FieldMethod, field.TypeString, value)
	}
	if value, ok := muo.mutation.Secret(); ok {
		_spec.SetField(mfa.FieldSecret, field.TypeString, value)
	}
	if value, ok := muo.mutation.Verified(); ok {
		_spec.SetField(mfa.FieldVerified, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Active(); ok {
		_spec.SetField(mfa.FieldActive, field.TypeBool, value)
	}
	if value, ok := muo.mutation.BackupCodes(); ok {
		_spec.SetField(mfa.FieldBackupCodes, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedBackupCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mfa.FieldBackupCodes, value)
		})
	}
	if muo.mutation.BackupCodesCleared() {
		_spec.ClearField(mfa.FieldBackupCodes, field.TypeJSON)
	}
	if value, ok := muo.mutation.PhoneNumber(); ok {
		_spec.SetField(mfa.FieldPhoneNumber, field.TypeString, value)
	}
	if muo.mutation.PhoneNumberCleared() {
		_spec.ClearField(mfa.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.SetField(mfa.FieldEmail, field.TypeString, value)
	}
	if muo.mutation.EmailCleared() {
		_spec.ClearField(mfa.FieldEmail, field.TypeString)
	}
	if value, ok := muo.mutation.LastUsed(); ok {
		_spec.SetField(mfa.FieldLastUsed, field.TypeTime, value)
	}
	if muo.mutation.LastUsedCleared() {
		_spec.ClearField(mfa.FieldLastUsed, field.TypeTime)
	}
	if value, ok := muo.mutation.Metadata(); ok {
		_spec.SetField(mfa.FieldMetadata, field.TypeJSON, value)
	}
	if muo.mutation.MetadataCleared() {
		_spec.ClearField(mfa.FieldMetadata, field.TypeJSON)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfa.UserTable,
			Columns: []string{mfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfa.UserTable,
			Columns: []string{mfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &MFA{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
