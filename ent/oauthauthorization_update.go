// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
)

// OAuthAuthorizationUpdate is the builder for updating OAuthAuthorization entities.
type OAuthAuthorizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OAuthAuthorizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OAuthAuthorizationUpdate builder.
func (oau *OAuthAuthorizationUpdate) Where(ps ...predicate.OAuthAuthorization) *OAuthAuthorizationUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OAuthAuthorizationUpdate) SetUpdatedAt(t time.Time) *OAuthAuthorizationUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetDeletedAt sets the "deleted_at" field.
func (oau *OAuthAuthorizationUpdate) SetDeletedAt(t time.Time) *OAuthAuthorizationUpdate {
	oau.mutation.SetDeletedAt(t)
	return oau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableDeletedAt(t *time.Time) *OAuthAuthorizationUpdate {
	if t != nil {
		oau.SetDeletedAt(*t)
	}
	return oau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oau *OAuthAuthorizationUpdate) ClearDeletedAt() *OAuthAuthorizationUpdate {
	oau.mutation.ClearDeletedAt()
	return oau
}

// SetClientID sets the "client_id" field.
func (oau *OAuthAuthorizationUpdate) SetClientID(x xid.ID) *OAuthAuthorizationUpdate {
	oau.mutation.SetClientID(x)
	return oau
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableClientID(x *xid.ID) *OAuthAuthorizationUpdate {
	if x != nil {
		oau.SetClientID(*x)
	}
	return oau
}

// SetUserID sets the "user_id" field.
func (oau *OAuthAuthorizationUpdate) SetUserID(x xid.ID) *OAuthAuthorizationUpdate {
	oau.mutation.SetUserID(x)
	return oau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableUserID(x *xid.ID) *OAuthAuthorizationUpdate {
	if x != nil {
		oau.SetUserID(*x)
	}
	return oau
}

// SetOrganizationID sets the "organization_id" field.
func (oau *OAuthAuthorizationUpdate) SetOrganizationID(x xid.ID) *OAuthAuthorizationUpdate {
	oau.mutation.SetOrganizationID(x)
	return oau
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableOrganizationID(x *xid.ID) *OAuthAuthorizationUpdate {
	if x != nil {
		oau.SetOrganizationID(*x)
	}
	return oau
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (oau *OAuthAuthorizationUpdate) ClearOrganizationID() *OAuthAuthorizationUpdate {
	oau.mutation.ClearOrganizationID()
	return oau
}

// SetCode sets the "code" field.
func (oau *OAuthAuthorizationUpdate) SetCode(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetCode(s)
	return oau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableCode(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetCode(*s)
	}
	return oau
}

// ClearCode clears the value of the "code" field.
func (oau *OAuthAuthorizationUpdate) ClearCode() *OAuthAuthorizationUpdate {
	oau.mutation.ClearCode()
	return oau
}

// SetCodeChallenge sets the "code_challenge" field.
func (oau *OAuthAuthorizationUpdate) SetCodeChallenge(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetCodeChallenge(s)
	return oau
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableCodeChallenge(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetCodeChallenge(*s)
	}
	return oau
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (oau *OAuthAuthorizationUpdate) ClearCodeChallenge() *OAuthAuthorizationUpdate {
	oau.mutation.ClearCodeChallenge()
	return oau
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (oau *OAuthAuthorizationUpdate) SetCodeChallengeMethod(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetCodeChallengeMethod(s)
	return oau
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableCodeChallengeMethod(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetCodeChallengeMethod(*s)
	}
	return oau
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (oau *OAuthAuthorizationUpdate) ClearCodeChallengeMethod() *OAuthAuthorizationUpdate {
	oau.mutation.ClearCodeChallengeMethod()
	return oau
}

// SetRedirectURI sets the "redirect_uri" field.
func (oau *OAuthAuthorizationUpdate) SetRedirectURI(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetRedirectURI(s)
	return oau
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableRedirectURI(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetRedirectURI(*s)
	}
	return oau
}

// SetScopeNames sets the "scope_names" field.
func (oau *OAuthAuthorizationUpdate) SetScopeNames(s []string) *OAuthAuthorizationUpdate {
	oau.mutation.SetScopeNames(s)
	return oau
}

// AppendScopeNames appends s to the "scope_names" field.
func (oau *OAuthAuthorizationUpdate) AppendScopeNames(s []string) *OAuthAuthorizationUpdate {
	oau.mutation.AppendScopeNames(s)
	return oau
}

// ClearScopeNames clears the value of the "scope_names" field.
func (oau *OAuthAuthorizationUpdate) ClearScopeNames() *OAuthAuthorizationUpdate {
	oau.mutation.ClearScopeNames()
	return oau
}

// SetUsed sets the "used" field.
func (oau *OAuthAuthorizationUpdate) SetUsed(b bool) *OAuthAuthorizationUpdate {
	oau.mutation.SetUsed(b)
	return oau
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableUsed(b *bool) *OAuthAuthorizationUpdate {
	if b != nil {
		oau.SetUsed(*b)
	}
	return oau
}

// SetUsedAt sets the "used_at" field.
func (oau *OAuthAuthorizationUpdate) SetUsedAt(t time.Time) *OAuthAuthorizationUpdate {
	oau.mutation.SetUsedAt(t)
	return oau
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableUsedAt(t *time.Time) *OAuthAuthorizationUpdate {
	if t != nil {
		oau.SetUsedAt(*t)
	}
	return oau
}

// SetExpiresAt sets the "expires_at" field.
func (oau *OAuthAuthorizationUpdate) SetExpiresAt(t time.Time) *OAuthAuthorizationUpdate {
	oau.mutation.SetExpiresAt(t)
	return oau
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableExpiresAt(t *time.Time) *OAuthAuthorizationUpdate {
	if t != nil {
		oau.SetExpiresAt(*t)
	}
	return oau
}

// SetState sets the "state" field.
func (oau *OAuthAuthorizationUpdate) SetState(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetState(s)
	return oau
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableState(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetState(*s)
	}
	return oau
}

// ClearState clears the value of the "state" field.
func (oau *OAuthAuthorizationUpdate) ClearState() *OAuthAuthorizationUpdate {
	oau.mutation.ClearState()
	return oau
}

// SetNonce sets the "nonce" field.
func (oau *OAuthAuthorizationUpdate) SetNonce(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetNonce(s)
	return oau
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableNonce(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetNonce(*s)
	}
	return oau
}

// ClearNonce clears the value of the "nonce" field.
func (oau *OAuthAuthorizationUpdate) ClearNonce() *OAuthAuthorizationUpdate {
	oau.mutation.ClearNonce()
	return oau
}

// SetUserAgent sets the "user_agent" field.
func (oau *OAuthAuthorizationUpdate) SetUserAgent(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetUserAgent(s)
	return oau
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableUserAgent(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetUserAgent(*s)
	}
	return oau
}

// ClearUserAgent clears the value of the "user_agent" field.
func (oau *OAuthAuthorizationUpdate) ClearUserAgent() *OAuthAuthorizationUpdate {
	oau.mutation.ClearUserAgent()
	return oau
}

// SetIPAddress sets the "ip_address" field.
func (oau *OAuthAuthorizationUpdate) SetIPAddress(s string) *OAuthAuthorizationUpdate {
	oau.mutation.SetIPAddress(s)
	return oau
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (oau *OAuthAuthorizationUpdate) SetNillableIPAddress(s *string) *OAuthAuthorizationUpdate {
	if s != nil {
		oau.SetIPAddress(*s)
	}
	return oau
}

// ClearIPAddress clears the value of the "ip_address" field.
func (oau *OAuthAuthorizationUpdate) ClearIPAddress() *OAuthAuthorizationUpdate {
	oau.mutation.ClearIPAddress()
	return oau
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (oau *OAuthAuthorizationUpdate) SetClient(o *OAuthClient) *OAuthAuthorizationUpdate {
	return oau.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oau *OAuthAuthorizationUpdate) SetUser(u *User) *OAuthAuthorizationUpdate {
	return oau.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (oau *OAuthAuthorizationUpdate) AddScopeIDs(ids ...xid.ID) *OAuthAuthorizationUpdate {
	oau.mutation.AddScopeIDs(ids...)
	return oau
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (oau *OAuthAuthorizationUpdate) AddScopes(o ...*OAuthScope) *OAuthAuthorizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.AddScopeIDs(ids...)
}

// Mutation returns the OAuthAuthorizationMutation object of the builder.
func (oau *OAuthAuthorizationUpdate) Mutation() *OAuthAuthorizationMutation {
	return oau.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (oau *OAuthAuthorizationUpdate) ClearClient() *OAuthAuthorizationUpdate {
	oau.mutation.ClearClient()
	return oau
}

// ClearUser clears the "user" edge to the User entity.
func (oau *OAuthAuthorizationUpdate) ClearUser() *OAuthAuthorizationUpdate {
	oau.mutation.ClearUser()
	return oau
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (oau *OAuthAuthorizationUpdate) ClearScopes() *OAuthAuthorizationUpdate {
	oau.mutation.ClearScopes()
	return oau
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (oau *OAuthAuthorizationUpdate) RemoveScopeIDs(ids ...xid.ID) *OAuthAuthorizationUpdate {
	oau.mutation.RemoveScopeIDs(ids...)
	return oau
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (oau *OAuthAuthorizationUpdate) RemoveScopes(o ...*OAuthScope) *OAuthAuthorizationUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.RemoveScopeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OAuthAuthorizationUpdate) Save(ctx context.Context) (int, error) {
	oau.defaults()
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OAuthAuthorizationUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OAuthAuthorizationUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OAuthAuthorizationUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OAuthAuthorizationUpdate) defaults() {
	if _, ok := oau.mutation.UpdatedAt(); !ok {
		v := oauthauthorization.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OAuthAuthorizationUpdate) check() error {
	if v, ok := oau.mutation.ClientID(); ok {
		if err := oauthauthorization.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.client_id": %w`, err)}
		}
	}
	if v, ok := oau.mutation.UserID(); ok {
		if err := oauthauthorization.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.user_id": %w`, err)}
		}
	}
	if v, ok := oau.mutation.RedirectURI(); ok {
		if err := oauthauthorization.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.redirect_uri": %w`, err)}
		}
	}
	if oau.mutation.ClientCleared() && len(oau.mutation.ClientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuthorization.client"`)
	}
	if oau.mutation.UserCleared() && len(oau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuthorization.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oau *OAuthAuthorizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthAuthorizationUpdate {
	oau.modifiers = append(oau.modifiers, modifiers...)
	return oau
}

func (oau *OAuthAuthorizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauthorization.Table, oauthauthorization.Columns, sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.DeletedAt(); ok {
		_spec.SetField(oauthauthorization.FieldDeletedAt, field.TypeTime, value)
	}
	if oau.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthauthorization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oau.mutation.OrganizationID(); ok {
		_spec.SetField(oauthauthorization.FieldOrganizationID, field.TypeString, value)
	}
	if oau.mutation.OrganizationIDCleared() {
		_spec.ClearField(oauthauthorization.FieldOrganizationID, field.TypeString)
	}
	if value, ok := oau.mutation.Code(); ok {
		_spec.SetField(oauthauthorization.FieldCode, field.TypeString, value)
	}
	if oau.mutation.CodeCleared() {
		_spec.ClearField(oauthauthorization.FieldCode, field.TypeString)
	}
	if value, ok := oau.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallenge, field.TypeString, value)
	}
	if oau.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthauthorization.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := oau.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if oau.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthauthorization.FieldCodeChallengeMethod, field.TypeString)
	}
	if value, ok := oau.mutation.RedirectURI(); ok {
		_spec.SetField(oauthauthorization.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := oau.mutation.ScopeNames(); ok {
		_spec.SetField(oauthauthorization.FieldScopeNames, field.TypeJSON, value)
	}
	if value, ok := oau.mutation.AppendedScopeNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthauthorization.FieldScopeNames, value)
		})
	}
	if oau.mutation.ScopeNamesCleared() {
		_spec.ClearField(oauthauthorization.FieldScopeNames, field.TypeJSON)
	}
	if value, ok := oau.mutation.Used(); ok {
		_spec.SetField(oauthauthorization.FieldUsed, field.TypeBool, value)
	}
	if value, ok := oau.mutation.UsedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUsedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthauthorization.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.State(); ok {
		_spec.SetField(oauthauthorization.FieldState, field.TypeString, value)
	}
	if oau.mutation.StateCleared() {
		_spec.ClearField(oauthauthorization.FieldState, field.TypeString)
	}
	if value, ok := oau.mutation.Nonce(); ok {
		_spec.SetField(oauthauthorization.FieldNonce, field.TypeString, value)
	}
	if oau.mutation.NonceCleared() {
		_spec.ClearField(oauthauthorization.FieldNonce, field.TypeString)
	}
	if value, ok := oau.mutation.UserAgent(); ok {
		_spec.SetField(oauthauthorization.FieldUserAgent, field.TypeString, value)
	}
	if oau.mutation.UserAgentCleared() {
		_spec.ClearField(oauthauthorization.FieldUserAgent, field.TypeString)
	}
	if value, ok := oau.mutation.IPAddress(); ok {
		_spec.SetField(oauthauthorization.FieldIPAddress, field.TypeString, value)
	}
	if oau.mutation.IPAddressCleared() {
		_spec.ClearField(oauthauthorization.FieldIPAddress, field.TypeString)
	}
	if oau.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RemovedScopesIDs(); len(nodes) > 0 && !oau.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauthorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OAuthAuthorizationUpdateOne is the builder for updating a single OAuthAuthorization entity.
type OAuthAuthorizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OAuthAuthorizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OAuthAuthorizationUpdateOne) SetUpdatedAt(t time.Time) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetDeletedAt sets the "deleted_at" field.
func (oauo *OAuthAuthorizationUpdateOne) SetDeletedAt(t time.Time) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetDeletedAt(t)
	return oauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableDeletedAt(t *time.Time) *OAuthAuthorizationUpdateOne {
	if t != nil {
		oauo.SetDeletedAt(*t)
	}
	return oauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearDeletedAt() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearDeletedAt()
	return oauo
}

// SetClientID sets the "client_id" field.
func (oauo *OAuthAuthorizationUpdateOne) SetClientID(x xid.ID) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetClientID(x)
	return oauo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableClientID(x *xid.ID) *OAuthAuthorizationUpdateOne {
	if x != nil {
		oauo.SetClientID(*x)
	}
	return oauo
}

// SetUserID sets the "user_id" field.
func (oauo *OAuthAuthorizationUpdateOne) SetUserID(x xid.ID) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetUserID(x)
	return oauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableUserID(x *xid.ID) *OAuthAuthorizationUpdateOne {
	if x != nil {
		oauo.SetUserID(*x)
	}
	return oauo
}

// SetOrganizationID sets the "organization_id" field.
func (oauo *OAuthAuthorizationUpdateOne) SetOrganizationID(x xid.ID) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetOrganizationID(x)
	return oauo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableOrganizationID(x *xid.ID) *OAuthAuthorizationUpdateOne {
	if x != nil {
		oauo.SetOrganizationID(*x)
	}
	return oauo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearOrganizationID() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearOrganizationID()
	return oauo
}

// SetCode sets the "code" field.
func (oauo *OAuthAuthorizationUpdateOne) SetCode(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetCode(s)
	return oauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableCode(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetCode(*s)
	}
	return oauo
}

// ClearCode clears the value of the "code" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearCode() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearCode()
	return oauo
}

// SetCodeChallenge sets the "code_challenge" field.
func (oauo *OAuthAuthorizationUpdateOne) SetCodeChallenge(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetCodeChallenge(s)
	return oauo
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableCodeChallenge(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetCodeChallenge(*s)
	}
	return oauo
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearCodeChallenge() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearCodeChallenge()
	return oauo
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (oauo *OAuthAuthorizationUpdateOne) SetCodeChallengeMethod(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetCodeChallengeMethod(s)
	return oauo
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableCodeChallengeMethod(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetCodeChallengeMethod(*s)
	}
	return oauo
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearCodeChallengeMethod() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearCodeChallengeMethod()
	return oauo
}

// SetRedirectURI sets the "redirect_uri" field.
func (oauo *OAuthAuthorizationUpdateOne) SetRedirectURI(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetRedirectURI(s)
	return oauo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableRedirectURI(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetRedirectURI(*s)
	}
	return oauo
}

// SetScopeNames sets the "scope_names" field.
func (oauo *OAuthAuthorizationUpdateOne) SetScopeNames(s []string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetScopeNames(s)
	return oauo
}

// AppendScopeNames appends s to the "scope_names" field.
func (oauo *OAuthAuthorizationUpdateOne) AppendScopeNames(s []string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.AppendScopeNames(s)
	return oauo
}

// ClearScopeNames clears the value of the "scope_names" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearScopeNames() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearScopeNames()
	return oauo
}

// SetUsed sets the "used" field.
func (oauo *OAuthAuthorizationUpdateOne) SetUsed(b bool) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetUsed(b)
	return oauo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableUsed(b *bool) *OAuthAuthorizationUpdateOne {
	if b != nil {
		oauo.SetUsed(*b)
	}
	return oauo
}

// SetUsedAt sets the "used_at" field.
func (oauo *OAuthAuthorizationUpdateOne) SetUsedAt(t time.Time) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetUsedAt(t)
	return oauo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableUsedAt(t *time.Time) *OAuthAuthorizationUpdateOne {
	if t != nil {
		oauo.SetUsedAt(*t)
	}
	return oauo
}

// SetExpiresAt sets the "expires_at" field.
func (oauo *OAuthAuthorizationUpdateOne) SetExpiresAt(t time.Time) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetExpiresAt(t)
	return oauo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableExpiresAt(t *time.Time) *OAuthAuthorizationUpdateOne {
	if t != nil {
		oauo.SetExpiresAt(*t)
	}
	return oauo
}

// SetState sets the "state" field.
func (oauo *OAuthAuthorizationUpdateOne) SetState(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetState(s)
	return oauo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableState(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetState(*s)
	}
	return oauo
}

// ClearState clears the value of the "state" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearState() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearState()
	return oauo
}

// SetNonce sets the "nonce" field.
func (oauo *OAuthAuthorizationUpdateOne) SetNonce(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetNonce(s)
	return oauo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableNonce(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetNonce(*s)
	}
	return oauo
}

// ClearNonce clears the value of the "nonce" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearNonce() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearNonce()
	return oauo
}

// SetUserAgent sets the "user_agent" field.
func (oauo *OAuthAuthorizationUpdateOne) SetUserAgent(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetUserAgent(s)
	return oauo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableUserAgent(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetUserAgent(*s)
	}
	return oauo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearUserAgent() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearUserAgent()
	return oauo
}

// SetIPAddress sets the "ip_address" field.
func (oauo *OAuthAuthorizationUpdateOne) SetIPAddress(s string) *OAuthAuthorizationUpdateOne {
	oauo.mutation.SetIPAddress(s)
	return oauo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (oauo *OAuthAuthorizationUpdateOne) SetNillableIPAddress(s *string) *OAuthAuthorizationUpdateOne {
	if s != nil {
		oauo.SetIPAddress(*s)
	}
	return oauo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (oauo *OAuthAuthorizationUpdateOne) ClearIPAddress() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearIPAddress()
	return oauo
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (oauo *OAuthAuthorizationUpdateOne) SetClient(o *OAuthClient) *OAuthAuthorizationUpdateOne {
	return oauo.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oauo *OAuthAuthorizationUpdateOne) SetUser(u *User) *OAuthAuthorizationUpdateOne {
	return oauo.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (oauo *OAuthAuthorizationUpdateOne) AddScopeIDs(ids ...xid.ID) *OAuthAuthorizationUpdateOne {
	oauo.mutation.AddScopeIDs(ids...)
	return oauo
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (oauo *OAuthAuthorizationUpdateOne) AddScopes(o ...*OAuthScope) *OAuthAuthorizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.AddScopeIDs(ids...)
}

// Mutation returns the OAuthAuthorizationMutation object of the builder.
func (oauo *OAuthAuthorizationUpdateOne) Mutation() *OAuthAuthorizationMutation {
	return oauo.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (oauo *OAuthAuthorizationUpdateOne) ClearClient() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearClient()
	return oauo
}

// ClearUser clears the "user" edge to the User entity.
func (oauo *OAuthAuthorizationUpdateOne) ClearUser() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearUser()
	return oauo
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (oauo *OAuthAuthorizationUpdateOne) ClearScopes() *OAuthAuthorizationUpdateOne {
	oauo.mutation.ClearScopes()
	return oauo
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (oauo *OAuthAuthorizationUpdateOne) RemoveScopeIDs(ids ...xid.ID) *OAuthAuthorizationUpdateOne {
	oauo.mutation.RemoveScopeIDs(ids...)
	return oauo
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (oauo *OAuthAuthorizationUpdateOne) RemoveScopes(o ...*OAuthScope) *OAuthAuthorizationUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.RemoveScopeIDs(ids...)
}

// Where appends a list predicates to the OAuthAuthorizationUpdate builder.
func (oauo *OAuthAuthorizationUpdateOne) Where(ps ...predicate.OAuthAuthorization) *OAuthAuthorizationUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OAuthAuthorizationUpdateOne) Select(field string, fields ...string) *OAuthAuthorizationUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OAuthAuthorization entity.
func (oauo *OAuthAuthorizationUpdateOne) Save(ctx context.Context) (*OAuthAuthorization, error) {
	oauo.defaults()
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OAuthAuthorizationUpdateOne) SaveX(ctx context.Context) *OAuthAuthorization {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OAuthAuthorizationUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OAuthAuthorizationUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OAuthAuthorizationUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdatedAt(); !ok {
		v := oauthauthorization.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OAuthAuthorizationUpdateOne) check() error {
	if v, ok := oauo.mutation.ClientID(); ok {
		if err := oauthauthorization.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.client_id": %w`, err)}
		}
	}
	if v, ok := oauo.mutation.UserID(); ok {
		if err := oauthauthorization.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.user_id": %w`, err)}
		}
	}
	if v, ok := oauo.mutation.RedirectURI(); ok {
		if err := oauthauthorization.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.redirect_uri": %w`, err)}
		}
	}
	if oauo.mutation.ClientCleared() && len(oauo.mutation.ClientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuthorization.client"`)
	}
	if oauo.mutation.UserCleared() && len(oauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuthorization.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oauo *OAuthAuthorizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthAuthorizationUpdateOne {
	oauo.modifiers = append(oauo.modifiers, modifiers...)
	return oauo
}

func (oauo *OAuthAuthorizationUpdateOne) sqlSave(ctx context.Context) (_node *OAuthAuthorization, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauthorization.Table, oauthauthorization.Columns, sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthAuthorization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthauthorization.FieldID)
		for _, f := range fields {
			if !oauthauthorization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthauthorization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.DeletedAt(); ok {
		_spec.SetField(oauthauthorization.FieldDeletedAt, field.TypeTime, value)
	}
	if oauo.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthauthorization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oauo.mutation.OrganizationID(); ok {
		_spec.SetField(oauthauthorization.FieldOrganizationID, field.TypeString, value)
	}
	if oauo.mutation.OrganizationIDCleared() {
		_spec.ClearField(oauthauthorization.FieldOrganizationID, field.TypeString)
	}
	if value, ok := oauo.mutation.Code(); ok {
		_spec.SetField(oauthauthorization.FieldCode, field.TypeString, value)
	}
	if oauo.mutation.CodeCleared() {
		_spec.ClearField(oauthauthorization.FieldCode, field.TypeString)
	}
	if value, ok := oauo.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallenge, field.TypeString, value)
	}
	if oauo.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthauthorization.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := oauo.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if oauo.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthauthorization.FieldCodeChallengeMethod, field.TypeString)
	}
	if value, ok := oauo.mutation.RedirectURI(); ok {
		_spec.SetField(oauthauthorization.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := oauo.mutation.ScopeNames(); ok {
		_spec.SetField(oauthauthorization.FieldScopeNames, field.TypeJSON, value)
	}
	if value, ok := oauo.mutation.AppendedScopeNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthauthorization.FieldScopeNames, value)
		})
	}
	if oauo.mutation.ScopeNamesCleared() {
		_spec.ClearField(oauthauthorization.FieldScopeNames, field.TypeJSON)
	}
	if value, ok := oauo.mutation.Used(); ok {
		_spec.SetField(oauthauthorization.FieldUsed, field.TypeBool, value)
	}
	if value, ok := oauo.mutation.UsedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUsedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthauthorization.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.State(); ok {
		_spec.SetField(oauthauthorization.FieldState, field.TypeString, value)
	}
	if oauo.mutation.StateCleared() {
		_spec.ClearField(oauthauthorization.FieldState, field.TypeString)
	}
	if value, ok := oauo.mutation.Nonce(); ok {
		_spec.SetField(oauthauthorization.FieldNonce, field.TypeString, value)
	}
	if oauo.mutation.NonceCleared() {
		_spec.ClearField(oauthauthorization.FieldNonce, field.TypeString)
	}
	if value, ok := oauo.mutation.UserAgent(); ok {
		_spec.SetField(oauthauthorization.FieldUserAgent, field.TypeString, value)
	}
	if oauo.mutation.UserAgentCleared() {
		_spec.ClearField(oauthauthorization.FieldUserAgent, field.TypeString)
	}
	if value, ok := oauo.mutation.IPAddress(); ok {
		_spec.SetField(oauthauthorization.FieldIPAddress, field.TypeString, value)
	}
	if oauo.mutation.IPAddressCleared() {
		_spec.ClearField(oauthauthorization.FieldIPAddress, field.TypeString)
	}
	if oauo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RemovedScopesIDs(); len(nodes) > 0 && !oauo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oauo.modifiers...)
	_node = &OAuthAuthorization{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauthorization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
