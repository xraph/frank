// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
)

// AuditCreate is the builder for creating a Audit entity.
type AuditCreate struct {
	config
	mutation *AuditMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AuditCreate) SetDeletedAt(t time.Time) *AuditCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AuditCreate) SetNillableDeletedAt(t *time.Time) *AuditCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AuditCreate) SetCreatedAt(t time.Time) *AuditCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AuditCreate) SetNillableCreatedAt(t *time.Time) *AuditCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AuditCreate) SetUpdatedAt(t time.Time) *AuditCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AuditCreate) SetNillableUpdatedAt(t *time.Time) *AuditCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AuditCreate) SetUserID(x xid.ID) *AuditCreate {
	ac.mutation.SetUserID(x)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableUserID(x *xid.ID) *AuditCreate {
	if x != nil {
		ac.SetUserID(*x)
	}
	return ac
}

// SetOrganizationID sets the "organization_id" field.
func (ac *AuditCreate) SetOrganizationID(x xid.ID) *AuditCreate {
	ac.mutation.SetOrganizationID(x)
	return ac
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableOrganizationID(x *xid.ID) *AuditCreate {
	if x != nil {
		ac.SetOrganizationID(*x)
	}
	return ac
}

// SetSessionID sets the "session_id" field.
func (ac *AuditCreate) SetSessionID(x xid.ID) *AuditCreate {
	ac.mutation.SetSessionID(x)
	return ac
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableSessionID(x *xid.ID) *AuditCreate {
	if x != nil {
		ac.SetSessionID(*x)
	}
	return ac
}

// SetAction sets the "action" field.
func (ac *AuditCreate) SetAction(s string) *AuditCreate {
	ac.mutation.SetAction(s)
	return ac
}

// SetResourceType sets the "resource_type" field.
func (ac *AuditCreate) SetResourceType(s string) *AuditCreate {
	ac.mutation.SetResourceType(s)
	return ac
}

// SetResourceID sets the "resource_id" field.
func (ac *AuditCreate) SetResourceID(x xid.ID) *AuditCreate {
	ac.mutation.SetResourceID(x)
	return ac
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableResourceID(x *xid.ID) *AuditCreate {
	if x != nil {
		ac.SetResourceID(*x)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AuditCreate) SetStatus(s string) *AuditCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetIPAddress sets the "ip_address" field.
func (ac *AuditCreate) SetIPAddress(s string) *AuditCreate {
	ac.mutation.SetIPAddress(s)
	return ac
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (ac *AuditCreate) SetNillableIPAddress(s *string) *AuditCreate {
	if s != nil {
		ac.SetIPAddress(*s)
	}
	return ac
}

// SetUserAgent sets the "user_agent" field.
func (ac *AuditCreate) SetUserAgent(s string) *AuditCreate {
	ac.mutation.SetUserAgent(s)
	return ac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (ac *AuditCreate) SetNillableUserAgent(s *string) *AuditCreate {
	if s != nil {
		ac.SetUserAgent(*s)
	}
	return ac
}

// SetLocation sets the "location" field.
func (ac *AuditCreate) SetLocation(s string) *AuditCreate {
	ac.mutation.SetLocation(s)
	return ac
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ac *AuditCreate) SetNillableLocation(s *string) *AuditCreate {
	if s != nil {
		ac.SetLocation(*s)
	}
	return ac
}

// SetDeviceID sets the "device_id" field.
func (ac *AuditCreate) SetDeviceID(s string) *AuditCreate {
	ac.mutation.SetDeviceID(s)
	return ac
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableDeviceID(s *string) *AuditCreate {
	if s != nil {
		ac.SetDeviceID(*s)
	}
	return ac
}

// SetRequestID sets the "request_id" field.
func (ac *AuditCreate) SetRequestID(s string) *AuditCreate {
	ac.mutation.SetRequestID(s)
	return ac
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableRequestID(s *string) *AuditCreate {
	if s != nil {
		ac.SetRequestID(*s)
	}
	return ac
}

// SetErrorCode sets the "error_code" field.
func (ac *AuditCreate) SetErrorCode(s string) *AuditCreate {
	ac.mutation.SetErrorCode(s)
	return ac
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (ac *AuditCreate) SetNillableErrorCode(s *string) *AuditCreate {
	if s != nil {
		ac.SetErrorCode(*s)
	}
	return ac
}

// SetErrorMessage sets the "error_message" field.
func (ac *AuditCreate) SetErrorMessage(s string) *AuditCreate {
	ac.mutation.SetErrorMessage(s)
	return ac
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ac *AuditCreate) SetNillableErrorMessage(s *string) *AuditCreate {
	if s != nil {
		ac.SetErrorMessage(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AuditCreate) SetDescription(s string) *AuditCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AuditCreate) SetNillableDescription(s *string) *AuditCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *AuditCreate) SetMetadata(m map[string]interface{}) *AuditCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetOldValues sets the "old_values" field.
func (ac *AuditCreate) SetOldValues(m map[string]interface{}) *AuditCreate {
	ac.mutation.SetOldValues(m)
	return ac
}

// SetCurrentValues sets the "current_values" field.
func (ac *AuditCreate) SetCurrentValues(m map[string]interface{}) *AuditCreate {
	ac.mutation.SetCurrentValues(m)
	return ac
}

// SetTimestamp sets the "timestamp" field.
func (ac *AuditCreate) SetTimestamp(t time.Time) *AuditCreate {
	ac.mutation.SetTimestamp(t)
	return ac
}

// SetID sets the "id" field.
func (ac *AuditCreate) SetID(x xid.ID) *AuditCreate {
	ac.mutation.SetID(x)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AuditCreate) SetNillableID(x *xid.ID) *AuditCreate {
	if x != nil {
		ac.SetID(*x)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AuditCreate) SetUser(u *User) *AuditCreate {
	return ac.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ac *AuditCreate) SetOrganization(o *Organization) *AuditCreate {
	return ac.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (ac *AuditCreate) SetSession(s *Session) *AuditCreate {
	return ac.SetSessionID(s.ID)
}

// Mutation returns the AuditMutation object of the builder.
func (ac *AuditCreate) Mutation() *AuditMutation {
	return ac.mutation
}

// Save creates the Audit in the database.
func (ac *AuditCreate) Save(ctx context.Context) (*Audit, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuditCreate) SaveX(ctx context.Context) *Audit {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuditCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuditCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuditCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := audit.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := audit.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := audit.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuditCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Audit.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Audit.updated_at"`)}
	}
	if _, ok := ac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Audit.action"`)}
	}
	if v, ok := ac.mutation.Action(); ok {
		if err := audit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Audit.action": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "Audit.resource_type"`)}
	}
	if v, ok := ac.mutation.ResourceType(); ok {
		if err := audit.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Audit.resource_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Audit.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := audit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Audit.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Audit.timestamp"`)}
	}
	return nil
}

func (ac *AuditCreate) sqlSave(ctx context.Context) (*Audit, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AuditCreate) createSpec() (*Audit, *sqlgraph.CreateSpec) {
	var (
		_node = &Audit{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(audit.Table, sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(audit.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(audit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(audit.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Action(); ok {
		_spec.SetField(audit.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := ac.mutation.ResourceType(); ok {
		_spec.SetField(audit.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := ac.mutation.ResourceID(); ok {
		_spec.SetField(audit.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(audit.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.IPAddress(); ok {
		_spec.SetField(audit.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := ac.mutation.UserAgent(); ok {
		_spec.SetField(audit.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := ac.mutation.Location(); ok {
		_spec.SetField(audit.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ac.mutation.DeviceID(); ok {
		_spec.SetField(audit.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := ac.mutation.RequestID(); ok {
		_spec.SetField(audit.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := ac.mutation.ErrorCode(); ok {
		_spec.SetField(audit.FieldErrorCode, field.TypeString, value)
		_node.ErrorCode = value
	}
	if value, ok := ac.mutation.ErrorMessage(); ok {
		_spec.SetField(audit.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(audit.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(audit.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ac.mutation.OldValues(); ok {
		_spec.SetField(audit.FieldOldValues, field.TypeJSON, value)
		_node.OldValues = value
	}
	if value, ok := ac.mutation.CurrentValues(); ok {
		_spec.SetField(audit.FieldCurrentValues, field.TypeJSON, value)
		_node.CurrentValues = value
	}
	if value, ok := ac.mutation.Timestamp(); ok {
		_spec.SetField(audit.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SessionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Audit.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AuditCreate) OnConflict(opts ...sql.ConflictOption) *AuditUpsertOne {
	ac.conflict = opts
	return &AuditUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Audit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AuditCreate) OnConflictColumns(columns ...string) *AuditUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AuditUpsertOne{
		create: ac,
	}
}

type (
	// AuditUpsertOne is the builder for "upsert"-ing
	//  one Audit node.
	AuditUpsertOne struct {
		create *AuditCreate
	}

	// AuditUpsert is the "OnConflict" setter.
	AuditUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditUpsert) SetDeletedAt(v time.Time) *AuditUpsert {
	u.Set(audit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditUpsert) UpdateDeletedAt() *AuditUpsert {
	u.SetExcluded(audit.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditUpsert) ClearDeletedAt() *AuditUpsert {
	u.SetNull(audit.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditUpsert) SetUpdatedAt(v time.Time) *AuditUpsert {
	u.Set(audit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditUpsert) UpdateUpdatedAt() *AuditUpsert {
	u.SetExcluded(audit.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AuditUpsert) SetUserID(v xid.ID) *AuditUpsert {
	u.Set(audit.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateUserID() *AuditUpsert {
	u.SetExcluded(audit.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *AuditUpsert) ClearUserID() *AuditUpsert {
	u.SetNull(audit.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *AuditUpsert) SetOrganizationID(v xid.ID) *AuditUpsert {
	u.Set(audit.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateOrganizationID() *AuditUpsert {
	u.SetExcluded(audit.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *AuditUpsert) ClearOrganizationID() *AuditUpsert {
	u.SetNull(audit.FieldOrganizationID)
	return u
}

// SetSessionID sets the "session_id" field.
func (u *AuditUpsert) SetSessionID(v xid.ID) *AuditUpsert {
	u.Set(audit.FieldSessionID, v)
	return u
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateSessionID() *AuditUpsert {
	u.SetExcluded(audit.FieldSessionID)
	return u
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditUpsert) ClearSessionID() *AuditUpsert {
	u.SetNull(audit.FieldSessionID)
	return u
}

// SetAction sets the "action" field.
func (u *AuditUpsert) SetAction(v string) *AuditUpsert {
	u.Set(audit.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditUpsert) UpdateAction() *AuditUpsert {
	u.SetExcluded(audit.FieldAction)
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *AuditUpsert) SetResourceType(v string) *AuditUpsert {
	u.Set(audit.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditUpsert) UpdateResourceType() *AuditUpsert {
	u.SetExcluded(audit.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *AuditUpsert) SetResourceID(v xid.ID) *AuditUpsert {
	u.Set(audit.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateResourceID() *AuditUpsert {
	u.SetExcluded(audit.FieldResourceID)
	return u
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditUpsert) ClearResourceID() *AuditUpsert {
	u.SetNull(audit.FieldResourceID)
	return u
}

// SetStatus sets the "status" field.
func (u *AuditUpsert) SetStatus(v string) *AuditUpsert {
	u.Set(audit.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditUpsert) UpdateStatus() *AuditUpsert {
	u.SetExcluded(audit.FieldStatus)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *AuditUpsert) SetIPAddress(v string) *AuditUpsert {
	u.Set(audit.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *AuditUpsert) UpdateIPAddress() *AuditUpsert {
	u.SetExcluded(audit.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *AuditUpsert) ClearIPAddress() *AuditUpsert {
	u.SetNull(audit.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditUpsert) SetUserAgent(v string) *AuditUpsert {
	u.Set(audit.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditUpsert) UpdateUserAgent() *AuditUpsert {
	u.SetExcluded(audit.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditUpsert) ClearUserAgent() *AuditUpsert {
	u.SetNull(audit.FieldUserAgent)
	return u
}

// SetLocation sets the "location" field.
func (u *AuditUpsert) SetLocation(v string) *AuditUpsert {
	u.Set(audit.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AuditUpsert) UpdateLocation() *AuditUpsert {
	u.SetExcluded(audit.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *AuditUpsert) ClearLocation() *AuditUpsert {
	u.SetNull(audit.FieldLocation)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *AuditUpsert) SetDeviceID(v string) *AuditUpsert {
	u.Set(audit.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateDeviceID() *AuditUpsert {
	u.SetExcluded(audit.FieldDeviceID)
	return u
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *AuditUpsert) ClearDeviceID() *AuditUpsert {
	u.SetNull(audit.FieldDeviceID)
	return u
}

// SetRequestID sets the "request_id" field.
func (u *AuditUpsert) SetRequestID(v string) *AuditUpsert {
	u.Set(audit.FieldRequestID, v)
	return u
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AuditUpsert) UpdateRequestID() *AuditUpsert {
	u.SetExcluded(audit.FieldRequestID)
	return u
}

// ClearRequestID clears the value of the "request_id" field.
func (u *AuditUpsert) ClearRequestID() *AuditUpsert {
	u.SetNull(audit.FieldRequestID)
	return u
}

// SetErrorCode sets the "error_code" field.
func (u *AuditUpsert) SetErrorCode(v string) *AuditUpsert {
	u.Set(audit.FieldErrorCode, v)
	return u
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *AuditUpsert) UpdateErrorCode() *AuditUpsert {
	u.SetExcluded(audit.FieldErrorCode)
	return u
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *AuditUpsert) ClearErrorCode() *AuditUpsert {
	u.SetNull(audit.FieldErrorCode)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditUpsert) SetErrorMessage(v string) *AuditUpsert {
	u.Set(audit.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditUpsert) UpdateErrorMessage() *AuditUpsert {
	u.SetExcluded(audit.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditUpsert) ClearErrorMessage() *AuditUpsert {
	u.SetNull(audit.FieldErrorMessage)
	return u
}

// SetDescription sets the "description" field.
func (u *AuditUpsert) SetDescription(v string) *AuditUpsert {
	u.Set(audit.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditUpsert) UpdateDescription() *AuditUpsert {
	u.SetExcluded(audit.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AuditUpsert) ClearDescription() *AuditUpsert {
	u.SetNull(audit.FieldDescription)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AuditUpsert) SetMetadata(v map[string]interface{}) *AuditUpsert {
	u.Set(audit.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AuditUpsert) UpdateMetadata() *AuditUpsert {
	u.SetExcluded(audit.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AuditUpsert) ClearMetadata() *AuditUpsert {
	u.SetNull(audit.FieldMetadata)
	return u
}

// SetOldValues sets the "old_values" field.
func (u *AuditUpsert) SetOldValues(v map[string]interface{}) *AuditUpsert {
	u.Set(audit.FieldOldValues, v)
	return u
}

// UpdateOldValues sets the "old_values" field to the value that was provided on create.
func (u *AuditUpsert) UpdateOldValues() *AuditUpsert {
	u.SetExcluded(audit.FieldOldValues)
	return u
}

// ClearOldValues clears the value of the "old_values" field.
func (u *AuditUpsert) ClearOldValues() *AuditUpsert {
	u.SetNull(audit.FieldOldValues)
	return u
}

// SetCurrentValues sets the "current_values" field.
func (u *AuditUpsert) SetCurrentValues(v map[string]interface{}) *AuditUpsert {
	u.Set(audit.FieldCurrentValues, v)
	return u
}

// UpdateCurrentValues sets the "current_values" field to the value that was provided on create.
func (u *AuditUpsert) UpdateCurrentValues() *AuditUpsert {
	u.SetExcluded(audit.FieldCurrentValues)
	return u
}

// ClearCurrentValues clears the value of the "current_values" field.
func (u *AuditUpsert) ClearCurrentValues() *AuditUpsert {
	u.SetNull(audit.FieldCurrentValues)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Audit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(audit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuditUpsertOne) UpdateNewValues() *AuditUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(audit.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(audit.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Timestamp(); exists {
			s.SetIgnore(audit.FieldTimestamp)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Audit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AuditUpsertOne) Ignore() *AuditUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditUpsertOne) DoNothing() *AuditUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditCreate.OnConflict
// documentation for more info.
func (u *AuditUpsertOne) Update(set func(*AuditUpsert)) *AuditUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditUpsertOne) SetDeletedAt(v time.Time) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateDeletedAt() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditUpsertOne) ClearDeletedAt() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditUpsertOne) SetUpdatedAt(v time.Time) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateUpdatedAt() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *AuditUpsertOne) SetUserID(v xid.ID) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateUserID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AuditUpsertOne) ClearUserID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *AuditUpsertOne) SetOrganizationID(v xid.ID) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateOrganizationID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *AuditUpsertOne) ClearOrganizationID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearOrganizationID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *AuditUpsertOne) SetSessionID(v xid.ID) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateSessionID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditUpsertOne) ClearSessionID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearSessionID()
	})
}

// SetAction sets the "action" field.
func (u *AuditUpsertOne) SetAction(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateAction() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *AuditUpsertOne) SetResourceType(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateResourceType() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *AuditUpsertOne) SetResourceID(v xid.ID) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateResourceID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditUpsertOne) ClearResourceID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearResourceID()
	})
}

// SetStatus sets the "status" field.
func (u *AuditUpsertOne) SetStatus(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateStatus() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateStatus()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *AuditUpsertOne) SetIPAddress(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateIPAddress() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *AuditUpsertOne) ClearIPAddress() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditUpsertOne) SetUserAgent(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateUserAgent() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditUpsertOne) ClearUserAgent() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *AuditUpsertOne) SetLocation(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateLocation() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *AuditUpsertOne) ClearLocation() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearLocation()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *AuditUpsertOne) SetDeviceID(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateDeviceID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDeviceID()
	})
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *AuditUpsertOne) ClearDeviceID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDeviceID()
	})
}

// SetRequestID sets the "request_id" field.
func (u *AuditUpsertOne) SetRequestID(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetRequestID(v)
	})
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateRequestID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateRequestID()
	})
}

// ClearRequestID clears the value of the "request_id" field.
func (u *AuditUpsertOne) ClearRequestID() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearRequestID()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *AuditUpsertOne) SetErrorCode(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateErrorCode() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *AuditUpsertOne) ClearErrorCode() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearErrorCode()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditUpsertOne) SetErrorMessage(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateErrorMessage() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditUpsertOne) ClearErrorMessage() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearErrorMessage()
	})
}

// SetDescription sets the "description" field.
func (u *AuditUpsertOne) SetDescription(v string) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateDescription() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AuditUpsertOne) ClearDescription() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AuditUpsertOne) SetMetadata(v map[string]interface{}) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateMetadata() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AuditUpsertOne) ClearMetadata() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearMetadata()
	})
}

// SetOldValues sets the "old_values" field.
func (u *AuditUpsertOne) SetOldValues(v map[string]interface{}) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetOldValues(v)
	})
}

// UpdateOldValues sets the "old_values" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateOldValues() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateOldValues()
	})
}

// ClearOldValues clears the value of the "old_values" field.
func (u *AuditUpsertOne) ClearOldValues() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearOldValues()
	})
}

// SetCurrentValues sets the "current_values" field.
func (u *AuditUpsertOne) SetCurrentValues(v map[string]interface{}) *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.SetCurrentValues(v)
	})
}

// UpdateCurrentValues sets the "current_values" field to the value that was provided on create.
func (u *AuditUpsertOne) UpdateCurrentValues() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateCurrentValues()
	})
}

// ClearCurrentValues clears the value of the "current_values" field.
func (u *AuditUpsertOne) ClearCurrentValues() *AuditUpsertOne {
	return u.Update(func(s *AuditUpsert) {
		s.ClearCurrentValues()
	})
}

// Exec executes the query.
func (u *AuditUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuditCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuditUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AuditUpsertOne.ID is not supported by MySQL driver. Use AuditUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuditUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuditCreateBulk is the builder for creating many Audit entities in bulk.
type AuditCreateBulk struct {
	config
	err      error
	builders []*AuditCreate
	conflict []sql.ConflictOption
}

// Save creates the Audit entities in the database.
func (acb *AuditCreateBulk) Save(ctx context.Context) ([]*Audit, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Audit, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuditCreateBulk) SaveX(ctx context.Context) []*Audit {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuditCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuditCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Audit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AuditCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuditUpsertBulk {
	acb.conflict = opts
	return &AuditUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Audit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AuditCreateBulk) OnConflictColumns(columns ...string) *AuditUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AuditUpsertBulk{
		create: acb,
	}
}

// AuditUpsertBulk is the builder for "upsert"-ing
// a bulk of Audit nodes.
type AuditUpsertBulk struct {
	create *AuditCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Audit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(audit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuditUpsertBulk) UpdateNewValues() *AuditUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(audit.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(audit.FieldCreatedAt)
			}
			if _, exists := b.mutation.Timestamp(); exists {
				s.SetIgnore(audit.FieldTimestamp)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Audit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AuditUpsertBulk) Ignore() *AuditUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditUpsertBulk) DoNothing() *AuditUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditCreateBulk.OnConflict
// documentation for more info.
func (u *AuditUpsertBulk) Update(set func(*AuditUpsert)) *AuditUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AuditUpsertBulk) SetDeletedAt(v time.Time) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateDeletedAt() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AuditUpsertBulk) ClearDeletedAt() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AuditUpsertBulk) SetUpdatedAt(v time.Time) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateUpdatedAt() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *AuditUpsertBulk) SetUserID(v xid.ID) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateUserID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AuditUpsertBulk) ClearUserID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *AuditUpsertBulk) SetOrganizationID(v xid.ID) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateOrganizationID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *AuditUpsertBulk) ClearOrganizationID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearOrganizationID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *AuditUpsertBulk) SetSessionID(v xid.ID) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateSessionID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *AuditUpsertBulk) ClearSessionID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearSessionID()
	})
}

// SetAction sets the "action" field.
func (u *AuditUpsertBulk) SetAction(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateAction() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *AuditUpsertBulk) SetResourceType(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateResourceType() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *AuditUpsertBulk) SetResourceID(v xid.ID) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateResourceID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *AuditUpsertBulk) ClearResourceID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearResourceID()
	})
}

// SetStatus sets the "status" field.
func (u *AuditUpsertBulk) SetStatus(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateStatus() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateStatus()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *AuditUpsertBulk) SetIPAddress(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateIPAddress() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *AuditUpsertBulk) ClearIPAddress() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AuditUpsertBulk) SetUserAgent(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateUserAgent() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *AuditUpsertBulk) ClearUserAgent() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearUserAgent()
	})
}

// SetLocation sets the "location" field.
func (u *AuditUpsertBulk) SetLocation(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateLocation() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *AuditUpsertBulk) ClearLocation() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearLocation()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *AuditUpsertBulk) SetDeviceID(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateDeviceID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDeviceID()
	})
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *AuditUpsertBulk) ClearDeviceID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDeviceID()
	})
}

// SetRequestID sets the "request_id" field.
func (u *AuditUpsertBulk) SetRequestID(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetRequestID(v)
	})
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateRequestID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateRequestID()
	})
}

// ClearRequestID clears the value of the "request_id" field.
func (u *AuditUpsertBulk) ClearRequestID() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearRequestID()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *AuditUpsertBulk) SetErrorCode(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateErrorCode() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *AuditUpsertBulk) ClearErrorCode() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearErrorCode()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *AuditUpsertBulk) SetErrorMessage(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateErrorMessage() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *AuditUpsertBulk) ClearErrorMessage() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearErrorMessage()
	})
}

// SetDescription sets the "description" field.
func (u *AuditUpsertBulk) SetDescription(v string) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateDescription() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AuditUpsertBulk) ClearDescription() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AuditUpsertBulk) SetMetadata(v map[string]interface{}) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateMetadata() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AuditUpsertBulk) ClearMetadata() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearMetadata()
	})
}

// SetOldValues sets the "old_values" field.
func (u *AuditUpsertBulk) SetOldValues(v map[string]interface{}) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetOldValues(v)
	})
}

// UpdateOldValues sets the "old_values" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateOldValues() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateOldValues()
	})
}

// ClearOldValues clears the value of the "old_values" field.
func (u *AuditUpsertBulk) ClearOldValues() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearOldValues()
	})
}

// SetCurrentValues sets the "current_values" field.
func (u *AuditUpsertBulk) SetCurrentValues(v map[string]interface{}) *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.SetCurrentValues(v)
	})
}

// UpdateCurrentValues sets the "current_values" field to the value that was provided on create.
func (u *AuditUpsertBulk) UpdateCurrentValues() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.UpdateCurrentValues()
	})
}

// ClearCurrentValues clears the value of the "current_values" field.
func (u *AuditUpsertBulk) ClearCurrentValues() *AuditUpsertBulk {
	return u.Update(func(s *AuditUpsert) {
		s.ClearCurrentValues()
	})
}

// Exec executes the query.
func (u *AuditUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AuditCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuditCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
