// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/featureflag"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/predicate"
)

// OrganizationFeatureUpdate is the builder for updating OrganizationFeature entities.
type OrganizationFeatureUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationFeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationFeatureUpdate builder.
func (ofu *OrganizationFeatureUpdate) Where(ps ...predicate.OrganizationFeature) *OrganizationFeatureUpdate {
	ofu.mutation.Where(ps...)
	return ofu
}

// SetUpdatedAt sets the "updated_at" field.
func (ofu *OrganizationFeatureUpdate) SetUpdatedAt(t time.Time) *OrganizationFeatureUpdate {
	ofu.mutation.SetUpdatedAt(t)
	return ofu
}

// SetDeletedAt sets the "deleted_at" field.
func (ofu *OrganizationFeatureUpdate) SetDeletedAt(t time.Time) *OrganizationFeatureUpdate {
	ofu.mutation.SetDeletedAt(t)
	return ofu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ofu *OrganizationFeatureUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationFeatureUpdate {
	if t != nil {
		ofu.SetDeletedAt(*t)
	}
	return ofu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ofu *OrganizationFeatureUpdate) ClearDeletedAt() *OrganizationFeatureUpdate {
	ofu.mutation.ClearDeletedAt()
	return ofu
}

// SetOrganizationID sets the "organization_id" field.
func (ofu *OrganizationFeatureUpdate) SetOrganizationID(x xid.ID) *OrganizationFeatureUpdate {
	ofu.mutation.SetOrganizationID(x)
	return ofu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ofu *OrganizationFeatureUpdate) SetNillableOrganizationID(x *xid.ID) *OrganizationFeatureUpdate {
	if x != nil {
		ofu.SetOrganizationID(*x)
	}
	return ofu
}

// SetFeatureID sets the "feature_id" field.
func (ofu *OrganizationFeatureUpdate) SetFeatureID(x xid.ID) *OrganizationFeatureUpdate {
	ofu.mutation.SetFeatureID(x)
	return ofu
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (ofu *OrganizationFeatureUpdate) SetNillableFeatureID(x *xid.ID) *OrganizationFeatureUpdate {
	if x != nil {
		ofu.SetFeatureID(*x)
	}
	return ofu
}

// SetEnabled sets the "enabled" field.
func (ofu *OrganizationFeatureUpdate) SetEnabled(b bool) *OrganizationFeatureUpdate {
	ofu.mutation.SetEnabled(b)
	return ofu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ofu *OrganizationFeatureUpdate) SetNillableEnabled(b *bool) *OrganizationFeatureUpdate {
	if b != nil {
		ofu.SetEnabled(*b)
	}
	return ofu
}

// SetSettings sets the "settings" field.
func (ofu *OrganizationFeatureUpdate) SetSettings(m map[string]interface{}) *OrganizationFeatureUpdate {
	ofu.mutation.SetSettings(m)
	return ofu
}

// ClearSettings clears the value of the "settings" field.
func (ofu *OrganizationFeatureUpdate) ClearSettings() *OrganizationFeatureUpdate {
	ofu.mutation.ClearSettings()
	return ofu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ofu *OrganizationFeatureUpdate) SetOrganization(o *Organization) *OrganizationFeatureUpdate {
	return ofu.SetOrganizationID(o.ID)
}

// SetFeature sets the "feature" edge to the FeatureFlag entity.
func (ofu *OrganizationFeatureUpdate) SetFeature(f *FeatureFlag) *OrganizationFeatureUpdate {
	return ofu.SetFeatureID(f.ID)
}

// Mutation returns the OrganizationFeatureMutation object of the builder.
func (ofu *OrganizationFeatureUpdate) Mutation() *OrganizationFeatureMutation {
	return ofu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ofu *OrganizationFeatureUpdate) ClearOrganization() *OrganizationFeatureUpdate {
	ofu.mutation.ClearOrganization()
	return ofu
}

// ClearFeature clears the "feature" edge to the FeatureFlag entity.
func (ofu *OrganizationFeatureUpdate) ClearFeature() *OrganizationFeatureUpdate {
	ofu.mutation.ClearFeature()
	return ofu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ofu *OrganizationFeatureUpdate) Save(ctx context.Context) (int, error) {
	ofu.defaults()
	return withHooks(ctx, ofu.sqlSave, ofu.mutation, ofu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ofu *OrganizationFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := ofu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ofu *OrganizationFeatureUpdate) Exec(ctx context.Context) error {
	_, err := ofu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofu *OrganizationFeatureUpdate) ExecX(ctx context.Context) {
	if err := ofu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ofu *OrganizationFeatureUpdate) defaults() {
	if _, ok := ofu.mutation.UpdatedAt(); !ok {
		v := organizationfeature.UpdateDefaultUpdatedAt()
		ofu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofu *OrganizationFeatureUpdate) check() error {
	if v, ok := ofu.mutation.OrganizationID(); ok {
		if err := organizationfeature.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.organization_id": %w`, err)}
		}
	}
	if v, ok := ofu.mutation.FeatureID(); ok {
		if err := organizationfeature.FeatureIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "feature_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.feature_id": %w`, err)}
		}
	}
	if ofu.mutation.OrganizationCleared() && len(ofu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeature.organization"`)
	}
	if ofu.mutation.FeatureCleared() && len(ofu.mutation.FeatureIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeature.feature"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ofu *OrganizationFeatureUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationFeatureUpdate {
	ofu.modifiers = append(ofu.modifiers, modifiers...)
	return ofu
}

func (ofu *OrganizationFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ofu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationfeature.Table, organizationfeature.Columns, sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString))
	if ps := ofu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ofu.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ofu.mutation.DeletedAt(); ok {
		_spec.SetField(organizationfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if ofu.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ofu.mutation.Enabled(); ok {
		_spec.SetField(organizationfeature.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ofu.mutation.Settings(); ok {
		_spec.SetField(organizationfeature.FieldSettings, field.TypeJSON, value)
	}
	if ofu.mutation.SettingsCleared() {
		_spec.ClearField(organizationfeature.FieldSettings, field.TypeJSON)
	}
	if ofu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ofu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofu.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ofu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ofu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ofu.mutation.done = true
	return n, nil
}

// OrganizationFeatureUpdateOne is the builder for updating a single OrganizationFeature entity.
type OrganizationFeatureUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationFeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ofuo *OrganizationFeatureUpdateOne) SetUpdatedAt(t time.Time) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetUpdatedAt(t)
	return ofuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ofuo *OrganizationFeatureUpdateOne) SetDeletedAt(t time.Time) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetDeletedAt(t)
	return ofuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ofuo *OrganizationFeatureUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationFeatureUpdateOne {
	if t != nil {
		ofuo.SetDeletedAt(*t)
	}
	return ofuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ofuo *OrganizationFeatureUpdateOne) ClearDeletedAt() *OrganizationFeatureUpdateOne {
	ofuo.mutation.ClearDeletedAt()
	return ofuo
}

// SetOrganizationID sets the "organization_id" field.
func (ofuo *OrganizationFeatureUpdateOne) SetOrganizationID(x xid.ID) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetOrganizationID(x)
	return ofuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ofuo *OrganizationFeatureUpdateOne) SetNillableOrganizationID(x *xid.ID) *OrganizationFeatureUpdateOne {
	if x != nil {
		ofuo.SetOrganizationID(*x)
	}
	return ofuo
}

// SetFeatureID sets the "feature_id" field.
func (ofuo *OrganizationFeatureUpdateOne) SetFeatureID(x xid.ID) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetFeatureID(x)
	return ofuo
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (ofuo *OrganizationFeatureUpdateOne) SetNillableFeatureID(x *xid.ID) *OrganizationFeatureUpdateOne {
	if x != nil {
		ofuo.SetFeatureID(*x)
	}
	return ofuo
}

// SetEnabled sets the "enabled" field.
func (ofuo *OrganizationFeatureUpdateOne) SetEnabled(b bool) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetEnabled(b)
	return ofuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ofuo *OrganizationFeatureUpdateOne) SetNillableEnabled(b *bool) *OrganizationFeatureUpdateOne {
	if b != nil {
		ofuo.SetEnabled(*b)
	}
	return ofuo
}

// SetSettings sets the "settings" field.
func (ofuo *OrganizationFeatureUpdateOne) SetSettings(m map[string]interface{}) *OrganizationFeatureUpdateOne {
	ofuo.mutation.SetSettings(m)
	return ofuo
}

// ClearSettings clears the value of the "settings" field.
func (ofuo *OrganizationFeatureUpdateOne) ClearSettings() *OrganizationFeatureUpdateOne {
	ofuo.mutation.ClearSettings()
	return ofuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ofuo *OrganizationFeatureUpdateOne) SetOrganization(o *Organization) *OrganizationFeatureUpdateOne {
	return ofuo.SetOrganizationID(o.ID)
}

// SetFeature sets the "feature" edge to the FeatureFlag entity.
func (ofuo *OrganizationFeatureUpdateOne) SetFeature(f *FeatureFlag) *OrganizationFeatureUpdateOne {
	return ofuo.SetFeatureID(f.ID)
}

// Mutation returns the OrganizationFeatureMutation object of the builder.
func (ofuo *OrganizationFeatureUpdateOne) Mutation() *OrganizationFeatureMutation {
	return ofuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ofuo *OrganizationFeatureUpdateOne) ClearOrganization() *OrganizationFeatureUpdateOne {
	ofuo.mutation.ClearOrganization()
	return ofuo
}

// ClearFeature clears the "feature" edge to the FeatureFlag entity.
func (ofuo *OrganizationFeatureUpdateOne) ClearFeature() *OrganizationFeatureUpdateOne {
	ofuo.mutation.ClearFeature()
	return ofuo
}

// Where appends a list predicates to the OrganizationFeatureUpdate builder.
func (ofuo *OrganizationFeatureUpdateOne) Where(ps ...predicate.OrganizationFeature) *OrganizationFeatureUpdateOne {
	ofuo.mutation.Where(ps...)
	return ofuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ofuo *OrganizationFeatureUpdateOne) Select(field string, fields ...string) *OrganizationFeatureUpdateOne {
	ofuo.fields = append([]string{field}, fields...)
	return ofuo
}

// Save executes the query and returns the updated OrganizationFeature entity.
func (ofuo *OrganizationFeatureUpdateOne) Save(ctx context.Context) (*OrganizationFeature, error) {
	ofuo.defaults()
	return withHooks(ctx, ofuo.sqlSave, ofuo.mutation, ofuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ofuo *OrganizationFeatureUpdateOne) SaveX(ctx context.Context) *OrganizationFeature {
	node, err := ofuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ofuo *OrganizationFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := ofuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofuo *OrganizationFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := ofuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ofuo *OrganizationFeatureUpdateOne) defaults() {
	if _, ok := ofuo.mutation.UpdatedAt(); !ok {
		v := organizationfeature.UpdateDefaultUpdatedAt()
		ofuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofuo *OrganizationFeatureUpdateOne) check() error {
	if v, ok := ofuo.mutation.OrganizationID(); ok {
		if err := organizationfeature.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.organization_id": %w`, err)}
		}
	}
	if v, ok := ofuo.mutation.FeatureID(); ok {
		if err := organizationfeature.FeatureIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "feature_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.feature_id": %w`, err)}
		}
	}
	if ofuo.mutation.OrganizationCleared() && len(ofuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeature.organization"`)
	}
	if ofuo.mutation.FeatureCleared() && len(ofuo.mutation.FeatureIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationFeature.feature"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ofuo *OrganizationFeatureUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationFeatureUpdateOne {
	ofuo.modifiers = append(ofuo.modifiers, modifiers...)
	return ofuo
}

func (ofuo *OrganizationFeatureUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationFeature, err error) {
	if err := ofuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationfeature.Table, organizationfeature.Columns, sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString))
	id, ok := ofuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ofuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationfeature.FieldID)
		for _, f := range fields {
			if !organizationfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ofuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ofuo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ofuo.mutation.DeletedAt(); ok {
		_spec.SetField(organizationfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if ofuo.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ofuo.mutation.Enabled(); ok {
		_spec.SetField(organizationfeature.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ofuo.mutation.Settings(); ok {
		_spec.SetField(organizationfeature.FieldSettings, field.TypeJSON, value)
	}
	if ofuo.mutation.SettingsCleared() {
		_spec.ClearField(organizationfeature.FieldSettings, field.TypeJSON)
	}
	if ofuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ofuo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofuo.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ofuo.modifiers...)
	_node = &OrganizationFeature{config: ofuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ofuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ofuo.mutation.done = true
	return _node, nil
}
