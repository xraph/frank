// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/pkg/model"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	mutation *RoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RoleCreate) SetCreatedAt(t time.Time) *RoleCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RoleCreate) SetNillableCreatedAt(t *time.Time) *RoleCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RoleCreate) SetUpdatedAt(t time.Time) *RoleCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RoleCreate) SetNillableUpdatedAt(t *time.Time) *RoleCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RoleCreate) SetDeletedAt(t time.Time) *RoleCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RoleCreate) SetNillableDeletedAt(t *time.Time) *RoleCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RoleCreate) SetName(s string) *RoleCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDisplayName sets the "display_name" field.
func (rc *RoleCreate) SetDisplayName(s string) *RoleCreate {
	rc.mutation.SetDisplayName(s)
	return rc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rc *RoleCreate) SetNillableDisplayName(s *string) *RoleCreate {
	if s != nil {
		rc.SetDisplayName(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *RoleCreate) SetDescription(s string) *RoleCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RoleCreate) SetNillableDescription(s *string) *RoleCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetRoleType sets the "role_type" field.
func (rc *RoleCreate) SetRoleType(mt model.RoleType) *RoleCreate {
	rc.mutation.SetRoleType(mt)
	return rc
}

// SetOrganizationID sets the "organization_id" field.
func (rc *RoleCreate) SetOrganizationID(x xid.ID) *RoleCreate {
	rc.mutation.SetOrganizationID(x)
	return rc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (rc *RoleCreate) SetNillableOrganizationID(x *xid.ID) *RoleCreate {
	if x != nil {
		rc.SetOrganizationID(*x)
	}
	return rc
}

// SetApplicationID sets the "application_id" field.
func (rc *RoleCreate) SetApplicationID(x xid.ID) *RoleCreate {
	rc.mutation.SetApplicationID(x)
	return rc
}

// SetNillableApplicationID sets the "application_id" field if the given value is not nil.
func (rc *RoleCreate) SetNillableApplicationID(x *xid.ID) *RoleCreate {
	if x != nil {
		rc.SetApplicationID(*x)
	}
	return rc
}

// SetSystem sets the "system" field.
func (rc *RoleCreate) SetSystem(b bool) *RoleCreate {
	rc.mutation.SetSystem(b)
	return rc
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (rc *RoleCreate) SetNillableSystem(b *bool) *RoleCreate {
	if b != nil {
		rc.SetSystem(*b)
	}
	return rc
}

// SetIsDefault sets the "is_default" field.
func (rc *RoleCreate) SetIsDefault(b bool) *RoleCreate {
	rc.mutation.SetIsDefault(b)
	return rc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (rc *RoleCreate) SetNillableIsDefault(b *bool) *RoleCreate {
	if b != nil {
		rc.SetIsDefault(*b)
	}
	return rc
}

// SetPriority sets the "priority" field.
func (rc *RoleCreate) SetPriority(i int) *RoleCreate {
	rc.mutation.SetPriority(i)
	return rc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (rc *RoleCreate) SetNillablePriority(i *int) *RoleCreate {
	if i != nil {
		rc.SetPriority(*i)
	}
	return rc
}

// SetColor sets the "color" field.
func (rc *RoleCreate) SetColor(s string) *RoleCreate {
	rc.mutation.SetColor(s)
	return rc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (rc *RoleCreate) SetNillableColor(s *string) *RoleCreate {
	if s != nil {
		rc.SetColor(*s)
	}
	return rc
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (rc *RoleCreate) SetApplicableUserTypes(mt []model.UserType) *RoleCreate {
	rc.mutation.SetApplicableUserTypes(mt)
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RoleCreate) SetCreatedBy(s string) *RoleCreate {
	rc.mutation.SetCreatedBy(s)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RoleCreate) SetNillableCreatedBy(s *string) *RoleCreate {
	if s != nil {
		rc.SetCreatedBy(*s)
	}
	return rc
}

// SetActive sets the "active" field.
func (rc *RoleCreate) SetActive(b bool) *RoleCreate {
	rc.mutation.SetActive(b)
	return rc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (rc *RoleCreate) SetNillableActive(b *bool) *RoleCreate {
	if b != nil {
		rc.SetActive(*b)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *RoleCreate) SetParentID(x xid.ID) *RoleCreate {
	rc.mutation.SetParentID(x)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *RoleCreate) SetNillableParentID(x *xid.ID) *RoleCreate {
	if x != nil {
		rc.SetParentID(*x)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RoleCreate) SetID(x xid.ID) *RoleCreate {
	rc.mutation.SetID(x)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RoleCreate) SetNillableID(x *xid.ID) *RoleCreate {
	if x != nil {
		rc.SetID(*x)
	}
	return rc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rc *RoleCreate) SetOrganization(o *Organization) *RoleCreate {
	return rc.SetOrganizationID(o.ID)
}

// AddUserAssignmentIDs adds the "user_assignments" edge to the UserRole entity by IDs.
func (rc *RoleCreate) AddUserAssignmentIDs(ids ...xid.ID) *RoleCreate {
	rc.mutation.AddUserAssignmentIDs(ids...)
	return rc
}

// AddUserAssignments adds the "user_assignments" edges to the UserRole entity.
func (rc *RoleCreate) AddUserAssignments(u ...*UserRole) *RoleCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rc.AddUserAssignmentIDs(ids...)
}

// AddSystemUserIDs adds the "system_users" edge to the User entity by IDs.
func (rc *RoleCreate) AddSystemUserIDs(ids ...xid.ID) *RoleCreate {
	rc.mutation.AddSystemUserIDs(ids...)
	return rc
}

// AddSystemUsers adds the "system_users" edges to the User entity.
func (rc *RoleCreate) AddSystemUsers(u ...*User) *RoleCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rc.AddSystemUserIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (rc *RoleCreate) AddPermissionIDs(ids ...xid.ID) *RoleCreate {
	rc.mutation.AddPermissionIDs(ids...)
	return rc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (rc *RoleCreate) AddPermissions(p ...*Permission) *RoleCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPermissionIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (rc *RoleCreate) AddMembershipIDs(ids ...xid.ID) *RoleCreate {
	rc.mutation.AddMembershipIDs(ids...)
	return rc
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (rc *RoleCreate) AddMemberships(m ...*Membership) *RoleCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rc.AddMembershipIDs(ids...)
}

// SetParent sets the "parent" edge to the Role entity.
func (rc *RoleCreate) SetParent(r *Role) *RoleCreate {
	return rc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Role entity by IDs.
func (rc *RoleCreate) AddChildIDs(ids ...xid.ID) *RoleCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Role entity.
func (rc *RoleCreate) AddChildren(r ...*Role) *RoleCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (rc *RoleCreate) Mutation() *RoleMutation {
	return rc.mutation
}

// Save creates the Role in the database.
func (rc *RoleCreate) Save(ctx context.Context) (*Role, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoleCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoleCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RoleCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := role.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := role.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.System(); !ok {
		v := role.DefaultSystem
		rc.mutation.SetSystem(v)
	}
	if _, ok := rc.mutation.IsDefault(); !ok {
		v := role.DefaultIsDefault
		rc.mutation.SetIsDefault(v)
	}
	if _, ok := rc.mutation.Priority(); !ok {
		v := role.DefaultPriority
		rc.mutation.SetPriority(v)
	}
	if _, ok := rc.mutation.Active(); !ok {
		v := role.DefaultActive
		rc.mutation.SetActive(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := role.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoleCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Role.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Role.updated_at"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Role.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.RoleType(); !ok {
		return &ValidationError{Name: "role_type", err: errors.New(`ent: missing required field "Role.role_type"`)}
	}
	if v, ok := rc.mutation.RoleType(); ok {
		if err := role.RoleTypeValidator(v); err != nil {
			return &ValidationError{Name: "role_type", err: fmt.Errorf(`ent: validator failed for field "Role.role_type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.System(); !ok {
		return &ValidationError{Name: "system", err: errors.New(`ent: missing required field "Role.system"`)}
	}
	if _, ok := rc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Role.is_default"`)}
	}
	if _, ok := rc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Role.priority"`)}
	}
	if _, ok := rc.mutation.ApplicableUserTypes(); !ok {
		return &ValidationError{Name: "applicable_user_types", err: errors.New(`ent: missing required field "Role.applicable_user_types"`)}
	}
	if _, ok := rc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Role.active"`)}
	}
	return nil
}

func (rc *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoleCreate) createSpec() (*Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Role{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(role.Table, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(role.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.DisplayName(); ok {
		_spec.SetField(role.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.RoleType(); ok {
		_spec.SetField(role.FieldRoleType, field.TypeEnum, value)
		_node.RoleType = value
	}
	if value, ok := rc.mutation.ApplicationID(); ok {
		_spec.SetField(role.FieldApplicationID, field.TypeString, value)
		_node.ApplicationID = value
	}
	if value, ok := rc.mutation.System(); ok {
		_spec.SetField(role.FieldSystem, field.TypeBool, value)
		_node.System = value
	}
	if value, ok := rc.mutation.IsDefault(); ok {
		_spec.SetField(role.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := rc.mutation.Priority(); ok {
		_spec.SetField(role.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := rc.mutation.Color(); ok {
		_spec.SetField(role.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := rc.mutation.ApplicableUserTypes(); ok {
		_spec.SetField(role.FieldApplicableUserTypes, field.TypeJSON, value)
		_node.ApplicableUserTypes = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.Active(); ok {
		_spec.SetField(role.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := rc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SystemUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Role.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RoleCreate) OnConflict(opts ...sql.ConflictOption) *RoleUpsertOne {
	rc.conflict = opts
	return &RoleUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RoleCreate) OnConflictColumns(columns ...string) *RoleUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RoleUpsertOne{
		create: rc,
	}
}

type (
	// RoleUpsertOne is the builder for "upsert"-ing
	//  one Role node.
	RoleUpsertOne struct {
		create *RoleCreate
	}

	// RoleUpsert is the "OnConflict" setter.
	RoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleUpsert) SetUpdatedAt(v time.Time) *RoleUpsert {
	u.Set(role.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleUpsert) UpdateUpdatedAt() *RoleUpsert {
	u.SetExcluded(role.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleUpsert) SetDeletedAt(v time.Time) *RoleUpsert {
	u.Set(role.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleUpsert) UpdateDeletedAt() *RoleUpsert {
	u.SetExcluded(role.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleUpsert) ClearDeletedAt() *RoleUpsert {
	u.SetNull(role.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *RoleUpsert) SetName(v string) *RoleUpsert {
	u.Set(role.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsert) UpdateName() *RoleUpsert {
	u.SetExcluded(role.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *RoleUpsert) SetDisplayName(v string) *RoleUpsert {
	u.Set(role.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *RoleUpsert) UpdateDisplayName() *RoleUpsert {
	u.SetExcluded(role.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *RoleUpsert) ClearDisplayName() *RoleUpsert {
	u.SetNull(role.FieldDisplayName)
	return u
}

// SetDescription sets the "description" field.
func (u *RoleUpsert) SetDescription(v string) *RoleUpsert {
	u.Set(role.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RoleUpsert) UpdateDescription() *RoleUpsert {
	u.SetExcluded(role.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *RoleUpsert) ClearDescription() *RoleUpsert {
	u.SetNull(role.FieldDescription)
	return u
}

// SetRoleType sets the "role_type" field.
func (u *RoleUpsert) SetRoleType(v model.RoleType) *RoleUpsert {
	u.Set(role.FieldRoleType, v)
	return u
}

// UpdateRoleType sets the "role_type" field to the value that was provided on create.
func (u *RoleUpsert) UpdateRoleType() *RoleUpsert {
	u.SetExcluded(role.FieldRoleType)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *RoleUpsert) SetOrganizationID(v xid.ID) *RoleUpsert {
	u.Set(role.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *RoleUpsert) UpdateOrganizationID() *RoleUpsert {
	u.SetExcluded(role.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *RoleUpsert) ClearOrganizationID() *RoleUpsert {
	u.SetNull(role.FieldOrganizationID)
	return u
}

// SetApplicationID sets the "application_id" field.
func (u *RoleUpsert) SetApplicationID(v xid.ID) *RoleUpsert {
	u.Set(role.FieldApplicationID, v)
	return u
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *RoleUpsert) UpdateApplicationID() *RoleUpsert {
	u.SetExcluded(role.FieldApplicationID)
	return u
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *RoleUpsert) ClearApplicationID() *RoleUpsert {
	u.SetNull(role.FieldApplicationID)
	return u
}

// SetSystem sets the "system" field.
func (u *RoleUpsert) SetSystem(v bool) *RoleUpsert {
	u.Set(role.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *RoleUpsert) UpdateSystem() *RoleUpsert {
	u.SetExcluded(role.FieldSystem)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *RoleUpsert) SetIsDefault(v bool) *RoleUpsert {
	u.Set(role.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RoleUpsert) UpdateIsDefault() *RoleUpsert {
	u.SetExcluded(role.FieldIsDefault)
	return u
}

// SetPriority sets the "priority" field.
func (u *RoleUpsert) SetPriority(v int) *RoleUpsert {
	u.Set(role.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *RoleUpsert) UpdatePriority() *RoleUpsert {
	u.SetExcluded(role.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *RoleUpsert) AddPriority(v int) *RoleUpsert {
	u.Add(role.FieldPriority, v)
	return u
}

// SetColor sets the "color" field.
func (u *RoleUpsert) SetColor(v string) *RoleUpsert {
	u.Set(role.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *RoleUpsert) UpdateColor() *RoleUpsert {
	u.SetExcluded(role.FieldColor)
	return u
}

// ClearColor clears the value of the "color" field.
func (u *RoleUpsert) ClearColor() *RoleUpsert {
	u.SetNull(role.FieldColor)
	return u
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *RoleUpsert) SetApplicableUserTypes(v []model.UserType) *RoleUpsert {
	u.Set(role.FieldApplicableUserTypes, v)
	return u
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *RoleUpsert) UpdateApplicableUserTypes() *RoleUpsert {
	u.SetExcluded(role.FieldApplicableUserTypes)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleUpsert) SetCreatedBy(v string) *RoleUpsert {
	u.Set(role.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleUpsert) UpdateCreatedBy() *RoleUpsert {
	u.SetExcluded(role.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleUpsert) ClearCreatedBy() *RoleUpsert {
	u.SetNull(role.FieldCreatedBy)
	return u
}

// SetActive sets the "active" field.
func (u *RoleUpsert) SetActive(v bool) *RoleUpsert {
	u.Set(role.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *RoleUpsert) UpdateActive() *RoleUpsert {
	u.SetExcluded(role.FieldActive)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsert) SetParentID(v xid.ID) *RoleUpsert {
	u.Set(role.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsert) UpdateParentID() *RoleUpsert {
	u.SetExcluded(role.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsert) ClearParentID() *RoleUpsert {
	u.SetNull(role.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(role.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleUpsertOne) UpdateNewValues() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(role.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(role.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoleUpsertOne) Ignore() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleUpsertOne) DoNothing() *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleCreate.OnConflict
// documentation for more info.
func (u *RoleUpsertOne) Update(set func(*RoleUpsert)) *RoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleUpsertOne) SetUpdatedAt(v time.Time) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateUpdatedAt() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleUpsertOne) SetDeletedAt(v time.Time) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateDeletedAt() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleUpsertOne) ClearDeletedAt() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RoleUpsertOne) SetName(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateName() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *RoleUpsertOne) SetDisplayName(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateDisplayName() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *RoleUpsertOne) ClearDisplayName() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *RoleUpsertOne) SetDescription(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateDescription() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RoleUpsertOne) ClearDescription() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDescription()
	})
}

// SetRoleType sets the "role_type" field.
func (u *RoleUpsertOne) SetRoleType(v model.RoleType) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetRoleType(v)
	})
}

// UpdateRoleType sets the "role_type" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateRoleType() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateRoleType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *RoleUpsertOne) SetOrganizationID(v xid.ID) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateOrganizationID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *RoleUpsertOne) ClearOrganizationID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearOrganizationID()
	})
}

// SetApplicationID sets the "application_id" field.
func (u *RoleUpsertOne) SetApplicationID(v xid.ID) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetApplicationID(v)
	})
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateApplicationID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApplicationID()
	})
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *RoleUpsertOne) ClearApplicationID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearApplicationID()
	})
}

// SetSystem sets the "system" field.
func (u *RoleUpsertOne) SetSystem(v bool) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateSystem() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateSystem()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *RoleUpsertOne) SetIsDefault(v bool) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateIsDefault() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateIsDefault()
	})
}

// SetPriority sets the "priority" field.
func (u *RoleUpsertOne) SetPriority(v int) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *RoleUpsertOne) AddPriority(v int) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdatePriority() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdatePriority()
	})
}

// SetColor sets the "color" field.
func (u *RoleUpsertOne) SetColor(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateColor() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *RoleUpsertOne) ClearColor() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearColor()
	})
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *RoleUpsertOne) SetApplicableUserTypes(v []model.UserType) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetApplicableUserTypes(v)
	})
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateApplicableUserTypes() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApplicableUserTypes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleUpsertOne) SetCreatedBy(v string) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateCreatedBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleUpsertOne) ClearCreatedBy() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCreatedBy()
	})
}

// SetActive sets the "active" field.
func (u *RoleUpsertOne) SetActive(v bool) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateActive() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateActive()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsertOne) SetParentID(v xid.ID) *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsertOne) UpdateParentID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsertOne) ClearParentID() *RoleUpsertOne {
	return u.Update(func(s *RoleUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *RoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoleUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RoleUpsertOne.ID is not supported by MySQL driver. Use RoleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoleUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoleCreateBulk is the builder for creating many Role entities in bulk.
type RoleCreateBulk struct {
	config
	err      error
	builders []*RoleCreate
	conflict []sql.ConflictOption
}

// Save creates the Role entities in the database.
func (rcb *RoleCreateBulk) Save(ctx context.Context) ([]*Role, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Role, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoleCreateBulk) SaveX(ctx context.Context) []*Role {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoleCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoleCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Role.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoleUpsertBulk {
	rcb.conflict = opts
	return &RoleUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RoleCreateBulk) OnConflictColumns(columns ...string) *RoleUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RoleUpsertBulk{
		create: rcb,
	}
}

// RoleUpsertBulk is the builder for "upsert"-ing
// a bulk of Role nodes.
type RoleUpsertBulk struct {
	create *RoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(role.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoleUpsertBulk) UpdateNewValues() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(role.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(role.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Role.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoleUpsertBulk) Ignore() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoleUpsertBulk) DoNothing() *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoleCreateBulk.OnConflict
// documentation for more info.
func (u *RoleUpsertBulk) Update(set func(*RoleUpsert)) *RoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoleUpsertBulk) SetUpdatedAt(v time.Time) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateUpdatedAt() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoleUpsertBulk) SetDeletedAt(v time.Time) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateDeletedAt() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoleUpsertBulk) ClearDeletedAt() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RoleUpsertBulk) SetName(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateName() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *RoleUpsertBulk) SetDisplayName(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateDisplayName() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *RoleUpsertBulk) ClearDisplayName() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDisplayName()
	})
}

// SetDescription sets the "description" field.
func (u *RoleUpsertBulk) SetDescription(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateDescription() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RoleUpsertBulk) ClearDescription() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearDescription()
	})
}

// SetRoleType sets the "role_type" field.
func (u *RoleUpsertBulk) SetRoleType(v model.RoleType) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetRoleType(v)
	})
}

// UpdateRoleType sets the "role_type" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateRoleType() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateRoleType()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *RoleUpsertBulk) SetOrganizationID(v xid.ID) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateOrganizationID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *RoleUpsertBulk) ClearOrganizationID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearOrganizationID()
	})
}

// SetApplicationID sets the "application_id" field.
func (u *RoleUpsertBulk) SetApplicationID(v xid.ID) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetApplicationID(v)
	})
}

// UpdateApplicationID sets the "application_id" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateApplicationID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApplicationID()
	})
}

// ClearApplicationID clears the value of the "application_id" field.
func (u *RoleUpsertBulk) ClearApplicationID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearApplicationID()
	})
}

// SetSystem sets the "system" field.
func (u *RoleUpsertBulk) SetSystem(v bool) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateSystem() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateSystem()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *RoleUpsertBulk) SetIsDefault(v bool) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateIsDefault() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateIsDefault()
	})
}

// SetPriority sets the "priority" field.
func (u *RoleUpsertBulk) SetPriority(v int) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *RoleUpsertBulk) AddPriority(v int) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdatePriority() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdatePriority()
	})
}

// SetColor sets the "color" field.
func (u *RoleUpsertBulk) SetColor(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateColor() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *RoleUpsertBulk) ClearColor() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearColor()
	})
}

// SetApplicableUserTypes sets the "applicable_user_types" field.
func (u *RoleUpsertBulk) SetApplicableUserTypes(v []model.UserType) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetApplicableUserTypes(v)
	})
}

// UpdateApplicableUserTypes sets the "applicable_user_types" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateApplicableUserTypes() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateApplicableUserTypes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RoleUpsertBulk) SetCreatedBy(v string) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateCreatedBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RoleUpsertBulk) ClearCreatedBy() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearCreatedBy()
	})
}

// SetActive sets the "active" field.
func (u *RoleUpsertBulk) SetActive(v bool) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateActive() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateActive()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RoleUpsertBulk) SetParentID(v xid.ID) *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RoleUpsertBulk) UpdateParentID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RoleUpsertBulk) ClearParentID() *RoleUpsertBulk {
	return u.Update(func(s *RoleUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *RoleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
