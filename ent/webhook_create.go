// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"
	"github.com/xraph/frank/pkg/model"
)

// WebhookCreate is the builder for creating a Webhook entity.
type WebhookCreate struct {
	config
	mutation *WebhookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WebhookCreate) SetCreatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableCreatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WebhookCreate) SetUpdatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableUpdatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WebhookCreate) SetDeletedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableDeletedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WebhookCreate) SetName(s string) *WebhookCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetURL sets the "url" field.
func (wc *WebhookCreate) SetURL(s string) *WebhookCreate {
	wc.mutation.SetURL(s)
	return wc
}

// SetOrganizationID sets the "organization_id" field.
func (wc *WebhookCreate) SetOrganizationID(x xid.ID) *WebhookCreate {
	wc.mutation.SetOrganizationID(x)
	return wc
}

// SetSecret sets the "secret" field.
func (wc *WebhookCreate) SetSecret(s string) *WebhookCreate {
	wc.mutation.SetSecret(s)
	return wc
}

// SetActive sets the "active" field.
func (wc *WebhookCreate) SetActive(b bool) *WebhookCreate {
	wc.mutation.SetActive(b)
	return wc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableActive(b *bool) *WebhookCreate {
	if b != nil {
		wc.SetActive(*b)
	}
	return wc
}

// SetEventTypes sets the "event_types" field.
func (wc *WebhookCreate) SetEventTypes(s []string) *WebhookCreate {
	wc.mutation.SetEventTypes(s)
	return wc
}

// SetVersion sets the "version" field.
func (wc *WebhookCreate) SetVersion(s string) *WebhookCreate {
	wc.mutation.SetVersion(s)
	return wc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableVersion(s *string) *WebhookCreate {
	if s != nil {
		wc.SetVersion(*s)
	}
	return wc
}

// SetRetryCount sets the "retry_count" field.
func (wc *WebhookCreate) SetRetryCount(i int) *WebhookCreate {
	wc.mutation.SetRetryCount(i)
	return wc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableRetryCount(i *int) *WebhookCreate {
	if i != nil {
		wc.SetRetryCount(*i)
	}
	return wc
}

// SetTimeoutMs sets the "timeout_ms" field.
func (wc *WebhookCreate) SetTimeoutMs(i int) *WebhookCreate {
	wc.mutation.SetTimeoutMs(i)
	return wc
}

// SetNillableTimeoutMs sets the "timeout_ms" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableTimeoutMs(i *int) *WebhookCreate {
	if i != nil {
		wc.SetTimeoutMs(*i)
	}
	return wc
}

// SetFormat sets the "format" field.
func (wc *WebhookCreate) SetFormat(mf model.WebhookFormat) *WebhookCreate {
	wc.mutation.SetFormat(mf)
	return wc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableFormat(mf *model.WebhookFormat) *WebhookCreate {
	if mf != nil {
		wc.SetFormat(*mf)
	}
	return wc
}

// SetMetadata sets the "metadata" field.
func (wc *WebhookCreate) SetMetadata(m map[string]interface{}) *WebhookCreate {
	wc.mutation.SetMetadata(m)
	return wc
}

// SetHeaders sets the "headers" field.
func (wc *WebhookCreate) SetHeaders(m map[string]string) *WebhookCreate {
	wc.mutation.SetHeaders(m)
	return wc
}

// SetID sets the "id" field.
func (wc *WebhookCreate) SetID(x xid.ID) *WebhookCreate {
	wc.mutation.SetID(x)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableID(x *xid.ID) *WebhookCreate {
	if x != nil {
		wc.SetID(*x)
	}
	return wc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (wc *WebhookCreate) SetOrganization(o *Organization) *WebhookCreate {
	return wc.SetOrganizationID(o.ID)
}

// AddEventIDs adds the "events" edge to the WebhookEvent entity by IDs.
func (wc *WebhookCreate) AddEventIDs(ids ...xid.ID) *WebhookCreate {
	wc.mutation.AddEventIDs(ids...)
	return wc
}

// AddEvents adds the "events" edges to the WebhookEvent entity.
func (wc *WebhookCreate) AddEvents(w ...*WebhookEvent) *WebhookCreate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddEventIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wc *WebhookCreate) Mutation() *WebhookMutation {
	return wc.mutation
}

// Save creates the Webhook in the database.
func (wc *WebhookCreate) Save(ctx context.Context) (*Webhook, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebhookCreate) SaveX(ctx context.Context) *Webhook {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebhookCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebhookCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WebhookCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := webhook.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := webhook.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.Active(); !ok {
		v := webhook.DefaultActive
		wc.mutation.SetActive(v)
	}
	if _, ok := wc.mutation.Version(); !ok {
		v := webhook.DefaultVersion
		wc.mutation.SetVersion(v)
	}
	if _, ok := wc.mutation.RetryCount(); !ok {
		v := webhook.DefaultRetryCount
		wc.mutation.SetRetryCount(v)
	}
	if _, ok := wc.mutation.TimeoutMs(); !ok {
		v := webhook.DefaultTimeoutMs
		wc.mutation.SetTimeoutMs(v)
	}
	if _, ok := wc.mutation.Format(); !ok {
		v := webhook.DefaultFormat
		wc.mutation.SetFormat(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := webhook.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebhookCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Webhook.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Webhook.updated_at"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Webhook.name"`)}
	}
	if v, ok := wc.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if _, ok := wc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Webhook.url"`)}
	}
	if v, ok := wc.mutation.URL(); ok {
		if err := webhook.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Webhook.url": %w`, err)}
		}
	}
	if _, ok := wc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Webhook.organization_id"`)}
	}
	if v, ok := wc.mutation.OrganizationID(); ok {
		if err := webhook.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Webhook.organization_id": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "Webhook.secret"`)}
	}
	if v, ok := wc.mutation.Secret(); ok {
		if err := webhook.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Webhook.secret": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Webhook.active"`)}
	}
	if _, ok := wc.mutation.EventTypes(); !ok {
		return &ValidationError{Name: "event_types", err: errors.New(`ent: missing required field "Webhook.event_types"`)}
	}
	if _, ok := wc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Webhook.version"`)}
	}
	if _, ok := wc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "Webhook.retry_count"`)}
	}
	if _, ok := wc.mutation.TimeoutMs(); !ok {
		return &ValidationError{Name: "timeout_ms", err: errors.New(`ent: missing required field "Webhook.timeout_ms"`)}
	}
	if _, ok := wc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "Webhook.format"`)}
	}
	if v, ok := wc.mutation.Format(); ok {
		if err := webhook.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Webhook.format": %w`, err)}
		}
	}
	if len(wc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Webhook.organization"`)}
	}
	return nil
}

func (wc *WebhookCreate) sqlSave(ctx context.Context) (*Webhook, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WebhookCreate) createSpec() (*Webhook, *sqlgraph.CreateSpec) {
	var (
		_node = &Webhook{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(webhook.Table, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(webhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(webhook.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.URL(); ok {
		_spec.SetField(webhook.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wc.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := wc.mutation.Active(); ok {
		_spec.SetField(webhook.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := wc.mutation.EventTypes(); ok {
		_spec.SetField(webhook.FieldEventTypes, field.TypeJSON, value)
		_node.EventTypes = value
	}
	if value, ok := wc.mutation.Version(); ok {
		_spec.SetField(webhook.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := wc.mutation.RetryCount(); ok {
		_spec.SetField(webhook.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := wc.mutation.TimeoutMs(); ok {
		_spec.SetField(webhook.FieldTimeoutMs, field.TypeInt, value)
		_node.TimeoutMs = value
	}
	if value, ok := wc.mutation.Format(); ok {
		_spec.SetField(webhook.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := wc.mutation.Metadata(); ok {
		_spec.SetField(webhook.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := wc.mutation.Headers(); ok {
		_spec.SetField(webhook.FieldHeaders, field.TypeJSON, value)
		_node.Headers = value
	}
	if nodes := wc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Webhook.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wc *WebhookCreate) OnConflict(opts ...sql.ConflictOption) *WebhookUpsertOne {
	wc.conflict = opts
	return &WebhookUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WebhookCreate) OnConflictColumns(columns ...string) *WebhookUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WebhookUpsertOne{
		create: wc,
	}
}

type (
	// WebhookUpsertOne is the builder for "upsert"-ing
	//  one Webhook node.
	WebhookUpsertOne struct {
		create *WebhookCreate
	}

	// WebhookUpsert is the "OnConflict" setter.
	WebhookUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsert) SetUpdatedAt(v time.Time) *WebhookUpsert {
	u.Set(webhook.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateUpdatedAt() *WebhookUpsert {
	u.SetExcluded(webhook.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookUpsert) SetDeletedAt(v time.Time) *WebhookUpsert {
	u.Set(webhook.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateDeletedAt() *WebhookUpsert {
	u.SetExcluded(webhook.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookUpsert) ClearDeletedAt() *WebhookUpsert {
	u.SetNull(webhook.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *WebhookUpsert) SetName(v string) *WebhookUpsert {
	u.Set(webhook.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateName() *WebhookUpsert {
	u.SetExcluded(webhook.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *WebhookUpsert) SetURL(v string) *WebhookUpsert {
	u.Set(webhook.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateURL() *WebhookUpsert {
	u.SetExcluded(webhook.FieldURL)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *WebhookUpsert) SetOrganizationID(v xid.ID) *WebhookUpsert {
	u.Set(webhook.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateOrganizationID() *WebhookUpsert {
	u.SetExcluded(webhook.FieldOrganizationID)
	return u
}

// SetSecret sets the "secret" field.
func (u *WebhookUpsert) SetSecret(v string) *WebhookUpsert {
	u.Set(webhook.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateSecret() *WebhookUpsert {
	u.SetExcluded(webhook.FieldSecret)
	return u
}

// SetActive sets the "active" field.
func (u *WebhookUpsert) SetActive(v bool) *WebhookUpsert {
	u.Set(webhook.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateActive() *WebhookUpsert {
	u.SetExcluded(webhook.FieldActive)
	return u
}

// SetEventTypes sets the "event_types" field.
func (u *WebhookUpsert) SetEventTypes(v []string) *WebhookUpsert {
	u.Set(webhook.FieldEventTypes, v)
	return u
}

// UpdateEventTypes sets the "event_types" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateEventTypes() *WebhookUpsert {
	u.SetExcluded(webhook.FieldEventTypes)
	return u
}

// SetVersion sets the "version" field.
func (u *WebhookUpsert) SetVersion(v string) *WebhookUpsert {
	u.Set(webhook.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateVersion() *WebhookUpsert {
	u.SetExcluded(webhook.FieldVersion)
	return u
}

// SetRetryCount sets the "retry_count" field.
func (u *WebhookUpsert) SetRetryCount(v int) *WebhookUpsert {
	u.Set(webhook.FieldRetryCount, v)
	return u
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateRetryCount() *WebhookUpsert {
	u.SetExcluded(webhook.FieldRetryCount)
	return u
}

// AddRetryCount adds v to the "retry_count" field.
func (u *WebhookUpsert) AddRetryCount(v int) *WebhookUpsert {
	u.Add(webhook.FieldRetryCount, v)
	return u
}

// SetTimeoutMs sets the "timeout_ms" field.
func (u *WebhookUpsert) SetTimeoutMs(v int) *WebhookUpsert {
	u.Set(webhook.FieldTimeoutMs, v)
	return u
}

// UpdateTimeoutMs sets the "timeout_ms" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateTimeoutMs() *WebhookUpsert {
	u.SetExcluded(webhook.FieldTimeoutMs)
	return u
}

// AddTimeoutMs adds v to the "timeout_ms" field.
func (u *WebhookUpsert) AddTimeoutMs(v int) *WebhookUpsert {
	u.Add(webhook.FieldTimeoutMs, v)
	return u
}

// SetFormat sets the "format" field.
func (u *WebhookUpsert) SetFormat(v model.WebhookFormat) *WebhookUpsert {
	u.Set(webhook.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateFormat() *WebhookUpsert {
	u.SetExcluded(webhook.FieldFormat)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *WebhookUpsert) SetMetadata(v map[string]interface{}) *WebhookUpsert {
	u.Set(webhook.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateMetadata() *WebhookUpsert {
	u.SetExcluded(webhook.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *WebhookUpsert) ClearMetadata() *WebhookUpsert {
	u.SetNull(webhook.FieldMetadata)
	return u
}

// SetHeaders sets the "headers" field.
func (u *WebhookUpsert) SetHeaders(v map[string]string) *WebhookUpsert {
	u.Set(webhook.FieldHeaders, v)
	return u
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateHeaders() *WebhookUpsert {
	u.SetExcluded(webhook.FieldHeaders)
	return u
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookUpsert) ClearHeaders() *WebhookUpsert {
	u.SetNull(webhook.FieldHeaders)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookUpsertOne) UpdateNewValues() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(webhook.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(webhook.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WebhookUpsertOne) Ignore() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookUpsertOne) DoNothing() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookCreate.OnConflict
// documentation for more info.
func (u *WebhookUpsertOne) Update(set func(*WebhookUpsert)) *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsertOne) SetUpdatedAt(v time.Time) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateUpdatedAt() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookUpsertOne) SetDeletedAt(v time.Time) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateDeletedAt() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookUpsertOne) ClearDeletedAt() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *WebhookUpsertOne) SetName(v string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateName() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *WebhookUpsertOne) SetURL(v string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateURL() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateURL()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *WebhookUpsertOne) SetOrganizationID(v xid.ID) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateOrganizationID() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetSecret sets the "secret" field.
func (u *WebhookUpsertOne) SetSecret(v string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateSecret() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateSecret()
	})
}

// SetActive sets the "active" field.
func (u *WebhookUpsertOne) SetActive(v bool) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateActive() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateActive()
	})
}

// SetEventTypes sets the "event_types" field.
func (u *WebhookUpsertOne) SetEventTypes(v []string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetEventTypes(v)
	})
}

// UpdateEventTypes sets the "event_types" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateEventTypes() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateEventTypes()
	})
}

// SetVersion sets the "version" field.
func (u *WebhookUpsertOne) SetVersion(v string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateVersion() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateVersion()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *WebhookUpsertOne) SetRetryCount(v int) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *WebhookUpsertOne) AddRetryCount(v int) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateRetryCount() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateRetryCount()
	})
}

// SetTimeoutMs sets the "timeout_ms" field.
func (u *WebhookUpsertOne) SetTimeoutMs(v int) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetTimeoutMs(v)
	})
}

// AddTimeoutMs adds v to the "timeout_ms" field.
func (u *WebhookUpsertOne) AddTimeoutMs(v int) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.AddTimeoutMs(v)
	})
}

// UpdateTimeoutMs sets the "timeout_ms" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateTimeoutMs() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateTimeoutMs()
	})
}

// SetFormat sets the "format" field.
func (u *WebhookUpsertOne) SetFormat(v model.WebhookFormat) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateFormat() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateFormat()
	})
}

// SetMetadata sets the "metadata" field.
func (u *WebhookUpsertOne) SetMetadata(v map[string]interface{}) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateMetadata() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *WebhookUpsertOne) ClearMetadata() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearMetadata()
	})
}

// SetHeaders sets the "headers" field.
func (u *WebhookUpsertOne) SetHeaders(v map[string]string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateHeaders() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateHeaders()
	})
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookUpsertOne) ClearHeaders() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearHeaders()
	})
}

// Exec executes the query.
func (u *WebhookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WebhookUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WebhookUpsertOne.ID is not supported by MySQL driver. Use WebhookUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WebhookUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WebhookCreateBulk is the builder for creating many Webhook entities in bulk.
type WebhookCreateBulk struct {
	config
	err      error
	builders []*WebhookCreate
	conflict []sql.ConflictOption
}

// Save creates the Webhook entities in the database.
func (wcb *WebhookCreateBulk) Save(ctx context.Context) ([]*Webhook, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Webhook, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebhookCreateBulk) SaveX(ctx context.Context) []*Webhook {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebhookCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Webhook.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wcb *WebhookCreateBulk) OnConflict(opts ...sql.ConflictOption) *WebhookUpsertBulk {
	wcb.conflict = opts
	return &WebhookUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WebhookCreateBulk) OnConflictColumns(columns ...string) *WebhookUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WebhookUpsertBulk{
		create: wcb,
	}
}

// WebhookUpsertBulk is the builder for "upsert"-ing
// a bulk of Webhook nodes.
type WebhookUpsertBulk struct {
	create *WebhookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookUpsertBulk) UpdateNewValues() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(webhook.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(webhook.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WebhookUpsertBulk) Ignore() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookUpsertBulk) DoNothing() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookCreateBulk.OnConflict
// documentation for more info.
func (u *WebhookUpsertBulk) Update(set func(*WebhookUpsert)) *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsertBulk) SetUpdatedAt(v time.Time) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateUpdatedAt() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WebhookUpsertBulk) SetDeletedAt(v time.Time) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateDeletedAt() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WebhookUpsertBulk) ClearDeletedAt() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *WebhookUpsertBulk) SetName(v string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateName() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *WebhookUpsertBulk) SetURL(v string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateURL() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateURL()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *WebhookUpsertBulk) SetOrganizationID(v xid.ID) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateOrganizationID() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetSecret sets the "secret" field.
func (u *WebhookUpsertBulk) SetSecret(v string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateSecret() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateSecret()
	})
}

// SetActive sets the "active" field.
func (u *WebhookUpsertBulk) SetActive(v bool) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateActive() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateActive()
	})
}

// SetEventTypes sets the "event_types" field.
func (u *WebhookUpsertBulk) SetEventTypes(v []string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetEventTypes(v)
	})
}

// UpdateEventTypes sets the "event_types" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateEventTypes() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateEventTypes()
	})
}

// SetVersion sets the "version" field.
func (u *WebhookUpsertBulk) SetVersion(v string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateVersion() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateVersion()
	})
}

// SetRetryCount sets the "retry_count" field.
func (u *WebhookUpsertBulk) SetRetryCount(v int) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetRetryCount(v)
	})
}

// AddRetryCount adds v to the "retry_count" field.
func (u *WebhookUpsertBulk) AddRetryCount(v int) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.AddRetryCount(v)
	})
}

// UpdateRetryCount sets the "retry_count" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateRetryCount() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateRetryCount()
	})
}

// SetTimeoutMs sets the "timeout_ms" field.
func (u *WebhookUpsertBulk) SetTimeoutMs(v int) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetTimeoutMs(v)
	})
}

// AddTimeoutMs adds v to the "timeout_ms" field.
func (u *WebhookUpsertBulk) AddTimeoutMs(v int) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.AddTimeoutMs(v)
	})
}

// UpdateTimeoutMs sets the "timeout_ms" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateTimeoutMs() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateTimeoutMs()
	})
}

// SetFormat sets the "format" field.
func (u *WebhookUpsertBulk) SetFormat(v model.WebhookFormat) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateFormat() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateFormat()
	})
}

// SetMetadata sets the "metadata" field.
func (u *WebhookUpsertBulk) SetMetadata(v map[string]interface{}) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateMetadata() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *WebhookUpsertBulk) ClearMetadata() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearMetadata()
	})
}

// SetHeaders sets the "headers" field.
func (u *WebhookUpsertBulk) SetHeaders(v map[string]string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetHeaders(v)
	})
}

// UpdateHeaders sets the "headers" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateHeaders() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateHeaders()
	})
}

// ClearHeaders clears the value of the "headers" field.
func (u *WebhookUpsertBulk) ClearHeaders() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearHeaders()
	})
}

// Exec executes the query.
func (u *WebhookUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WebhookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
