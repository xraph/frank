// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/pkg/model"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []string `json:"domains,omitempty"`
	// VerifiedDomains holds the value of the "verified_domains" field.
	VerifiedDomains []string `json:"verified_domains,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Plan holds the value of the "plan" field.
	Plan string `json:"plan,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Additional membership metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// TrialEndsAt holds the value of the "trial_ends_at" field.
	TrialEndsAt *time.Time `json:"trial_ends_at,omitempty"`
	// TrialUsed holds the value of the "trial_used" field.
	TrialUsed bool `json:"trial_used,omitempty"`
	// Primary owner of the organization
	OwnerID xid.ID `json:"owner_id,omitempty"`
	// platform = Your SaaS company, customer = Client organizations
	OrgType model.OrgType `json:"org_type,omitempty"`
	// Whether this is the main platform organization
	IsPlatformOrganization bool `json:"is_platform_organization,omitempty"`
	// Maximum external users (organization members) allowed
	ExternalUserLimit int `json:"external_user_limit,omitempty"`
	// Maximum end users allowed for auth service
	EndUserLimit int `json:"end_user_limit,omitempty"`
	// Whether SSO is enabled for this org
	SSOEnabled bool `json:"sso_enabled,omitempty"`
	// Domain for SSO authentication
	SSODomain string `json:"sso_domain,omitempty"`
	// Stripe/billing subscription ID
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Stripe/billing customer ID
	CustomerID string `json:"customer_id,omitempty"`
	// Billing subscription status
	SubscriptionStatus organization.SubscriptionStatus `json:"subscription_status,omitempty"`
	// Whether this org has auth service enabled
	AuthServiceEnabled bool `json:"auth_service_enabled,omitempty"`
	// Auth service configuration (allowed domains, providers, etc.)
	AuthConfig map[string]interface{} `json:"auth_config,omitempty"`
	// Custom domain for auth service (auth.customer.com)
	AuthDomain string `json:"auth_domain,omitempty"`
	// Monthly API request limit
	APIRequestLimit int `json:"api_request_limit,omitempty"`
	// API requests used this month
	APIRequestsUsed int `json:"api_requests_used,omitempty"`
	// Current count of active external users
	CurrentExternalUsers int `json:"current_external_users,omitempty"`
	// Current count of active end users
	CurrentEndUsers int `json:"current_end_users,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// SmsTemplates holds the value of the sms_templates edge.
	SmsTemplates []*SMSTemplate `json:"sms_templates,omitempty"`
	// EmailTemplates holds the value of the email_templates edge.
	EmailTemplates []*EmailTemplate `json:"email_templates,omitempty"`
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*ApiKey `json:"api_keys,omitempty"`
	// Webhooks holds the value of the webhooks edge.
	Webhooks []*Webhook `json:"webhooks,omitempty"`
	// FeatureFlags holds the value of the feature_flags edge.
	FeatureFlags []*OrganizationFeature `json:"feature_flags,omitempty"`
	// IdentityProviders holds the value of the identity_providers edge.
	IdentityProviders []*IdentityProvider `json:"identity_providers,omitempty"`
	// OauthClients holds the value of the oauth_clients edge.
	OauthClients []*OAuthClient `json:"oauth_clients,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// UserRoleContexts holds the value of the user_role_contexts edge.
	UserRoleContexts []*UserRole `json:"user_role_contexts,omitempty"`
	// UserPermissionContexts holds the value of the user_permission_contexts edge.
	UserPermissionContexts []*UserPermission `json:"user_permission_contexts,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*Audit `json:"audit_logs,omitempty"`
	// OrganizationProviders holds the value of the organization_providers edge.
	OrganizationProviders []*OrganizationProvider `json:"organization_providers,omitempty"`
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes                 [15]bool
	namedUsers                  map[string][]*User
	namedMemberships            map[string][]*Membership
	namedSmsTemplates           map[string][]*SMSTemplate
	namedEmailTemplates         map[string][]*EmailTemplate
	namedAPIKeys                map[string][]*ApiKey
	namedWebhooks               map[string][]*Webhook
	namedFeatureFlags           map[string][]*OrganizationFeature
	namedIdentityProviders      map[string][]*IdentityProvider
	namedOauthClients           map[string][]*OAuthClient
	namedRoles                  map[string][]*Role
	namedUserRoleContexts       map[string][]*UserRole
	namedUserPermissionContexts map[string][]*UserPermission
	namedAuditLogs              map[string][]*Audit
	namedOrganizationProviders  map[string][]*OrganizationProvider
	namedActivities             map[string][]*Activity
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[1] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// SmsTemplatesOrErr returns the SmsTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SmsTemplatesOrErr() ([]*SMSTemplate, error) {
	if e.loadedTypes[2] {
		return e.SmsTemplates, nil
	}
	return nil, &NotLoadedError{edge: "sms_templates"}
}

// EmailTemplatesOrErr returns the EmailTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EmailTemplatesOrErr() ([]*EmailTemplate, error) {
	if e.loadedTypes[3] {
		return e.EmailTemplates, nil
	}
	return nil, &NotLoadedError{edge: "email_templates"}
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) APIKeysOrErr() ([]*ApiKey, error) {
	if e.loadedTypes[4] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// WebhooksOrErr returns the Webhooks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) WebhooksOrErr() ([]*Webhook, error) {
	if e.loadedTypes[5] {
		return e.Webhooks, nil
	}
	return nil, &NotLoadedError{edge: "webhooks"}
}

// FeatureFlagsOrErr returns the FeatureFlags value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) FeatureFlagsOrErr() ([]*OrganizationFeature, error) {
	if e.loadedTypes[6] {
		return e.FeatureFlags, nil
	}
	return nil, &NotLoadedError{edge: "feature_flags"}
}

// IdentityProvidersOrErr returns the IdentityProviders value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) IdentityProvidersOrErr() ([]*IdentityProvider, error) {
	if e.loadedTypes[7] {
		return e.IdentityProviders, nil
	}
	return nil, &NotLoadedError{edge: "identity_providers"}
}

// OauthClientsOrErr returns the OauthClients value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OauthClientsOrErr() ([]*OAuthClient, error) {
	if e.loadedTypes[8] {
		return e.OauthClients, nil
	}
	return nil, &NotLoadedError{edge: "oauth_clients"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[9] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UserRoleContextsOrErr returns the UserRoleContexts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UserRoleContextsOrErr() ([]*UserRole, error) {
	if e.loadedTypes[10] {
		return e.UserRoleContexts, nil
	}
	return nil, &NotLoadedError{edge: "user_role_contexts"}
}

// UserPermissionContextsOrErr returns the UserPermissionContexts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UserPermissionContextsOrErr() ([]*UserPermission, error) {
	if e.loadedTypes[11] {
		return e.UserPermissionContexts, nil
	}
	return nil, &NotLoadedError{edge: "user_permission_contexts"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) AuditLogsOrErr() ([]*Audit, error) {
	if e.loadedTypes[12] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// OrganizationProvidersOrErr returns the OrganizationProviders value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OrganizationProvidersOrErr() ([]*OrganizationProvider, error) {
	if e.loadedTypes[13] {
		return e.OrganizationProviders, nil
	}
	return nil, &NotLoadedError{edge: "organization_providers"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[14] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldDomains, organization.FieldVerifiedDomains, organization.FieldMetadata, organization.FieldAuthConfig:
			values[i] = new([]byte)
		case organization.FieldActive, organization.FieldTrialUsed, organization.FieldIsPlatformOrganization, organization.FieldSSOEnabled, organization.FieldAuthServiceEnabled:
			values[i] = new(sql.NullBool)
		case organization.FieldExternalUserLimit, organization.FieldEndUserLimit, organization.FieldAPIRequestLimit, organization.FieldAPIRequestsUsed, organization.FieldCurrentExternalUsers, organization.FieldCurrentEndUsers:
			values[i] = new(sql.NullInt64)
		case organization.FieldName, organization.FieldSlug, organization.FieldDomain, organization.FieldLogoURL, organization.FieldPlan, organization.FieldOrgType, organization.FieldSSODomain, organization.FieldSubscriptionID, organization.FieldCustomerID, organization.FieldSubscriptionStatus, organization.FieldAuthDomain:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt, organization.FieldUpdatedAt, organization.FieldDeletedAt, organization.FieldTrialEndsAt:
			values[i] = new(sql.NullTime)
		case organization.FieldID, organization.FieldOwnerID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case organization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case organization.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = value.Time
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				o.Slug = value.String
			}
		case organization.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case organization.FieldVerifiedDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field verified_domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.VerifiedDomains); err != nil {
					return fmt.Errorf("unmarshal field verified_domains: %w", err)
				}
			}
		case organization.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				o.Domain = value.String
			}
		case organization.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				o.LogoURL = value.String
			}
		case organization.FieldPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan", values[i])
			} else if value.Valid {
				o.Plan = value.String
			}
		case organization.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				o.Active = value.Bool
			}
		case organization.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case organization.FieldTrialEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_ends_at", values[i])
			} else if value.Valid {
				o.TrialEndsAt = new(time.Time)
				*o.TrialEndsAt = value.Time
			}
		case organization.FieldTrialUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field trial_used", values[i])
			} else if value.Valid {
				o.TrialUsed = value.Bool
			}
		case organization.FieldOwnerID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				o.OwnerID = *value
			}
		case organization.FieldOrgType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_type", values[i])
			} else if value.Valid {
				o.OrgType = model.OrgType(value.String)
			}
		case organization.FieldIsPlatformOrganization:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_platform_organization", values[i])
			} else if value.Valid {
				o.IsPlatformOrganization = value.Bool
			}
		case organization.FieldExternalUserLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field external_user_limit", values[i])
			} else if value.Valid {
				o.ExternalUserLimit = int(value.Int64)
			}
		case organization.FieldEndUserLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_user_limit", values[i])
			} else if value.Valid {
				o.EndUserLimit = int(value.Int64)
			}
		case organization.FieldSSOEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sso_enabled", values[i])
			} else if value.Valid {
				o.SSOEnabled = value.Bool
			}
		case organization.FieldSSODomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_domain", values[i])
			} else if value.Valid {
				o.SSODomain = value.String
			}
		case organization.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				o.SubscriptionID = value.String
			}
		case organization.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				o.CustomerID = value.String
			}
		case organization.FieldSubscriptionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_status", values[i])
			} else if value.Valid {
				o.SubscriptionStatus = organization.SubscriptionStatus(value.String)
			}
		case organization.FieldAuthServiceEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auth_service_enabled", values[i])
			} else if value.Valid {
				o.AuthServiceEnabled = value.Bool
			}
		case organization.FieldAuthConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field auth_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.AuthConfig); err != nil {
					return fmt.Errorf("unmarshal field auth_config: %w", err)
				}
			}
		case organization.FieldAuthDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_domain", values[i])
			} else if value.Valid {
				o.AuthDomain = value.String
			}
		case organization.FieldAPIRequestLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field api_request_limit", values[i])
			} else if value.Valid {
				o.APIRequestLimit = int(value.Int64)
			}
		case organization.FieldAPIRequestsUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field api_requests_used", values[i])
			} else if value.Valid {
				o.APIRequestsUsed = int(value.Int64)
			}
		case organization.FieldCurrentExternalUsers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_external_users", values[i])
			} else if value.Valid {
				o.CurrentExternalUsers = int(value.Int64)
			}
		case organization.FieldCurrentEndUsers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_end_users", values[i])
			} else if value.Valid {
				o.CurrentEndUsers = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Organization entity.
func (o *Organization) QueryUsers() *UserQuery {
	return NewOrganizationClient(o.config).QueryUsers(o)
}

// QueryMemberships queries the "memberships" edge of the Organization entity.
func (o *Organization) QueryMemberships() *MembershipQuery {
	return NewOrganizationClient(o.config).QueryMemberships(o)
}

// QuerySmsTemplates queries the "sms_templates" edge of the Organization entity.
func (o *Organization) QuerySmsTemplates() *SMSTemplateQuery {
	return NewOrganizationClient(o.config).QuerySmsTemplates(o)
}

// QueryEmailTemplates queries the "email_templates" edge of the Organization entity.
func (o *Organization) QueryEmailTemplates() *EmailTemplateQuery {
	return NewOrganizationClient(o.config).QueryEmailTemplates(o)
}

// QueryAPIKeys queries the "api_keys" edge of the Organization entity.
func (o *Organization) QueryAPIKeys() *ApiKeyQuery {
	return NewOrganizationClient(o.config).QueryAPIKeys(o)
}

// QueryWebhooks queries the "webhooks" edge of the Organization entity.
func (o *Organization) QueryWebhooks() *WebhookQuery {
	return NewOrganizationClient(o.config).QueryWebhooks(o)
}

// QueryFeatureFlags queries the "feature_flags" edge of the Organization entity.
func (o *Organization) QueryFeatureFlags() *OrganizationFeatureQuery {
	return NewOrganizationClient(o.config).QueryFeatureFlags(o)
}

// QueryIdentityProviders queries the "identity_providers" edge of the Organization entity.
func (o *Organization) QueryIdentityProviders() *IdentityProviderQuery {
	return NewOrganizationClient(o.config).QueryIdentityProviders(o)
}

// QueryOauthClients queries the "oauth_clients" edge of the Organization entity.
func (o *Organization) QueryOauthClients() *OAuthClientQuery {
	return NewOrganizationClient(o.config).QueryOauthClients(o)
}

// QueryRoles queries the "roles" edge of the Organization entity.
func (o *Organization) QueryRoles() *RoleQuery {
	return NewOrganizationClient(o.config).QueryRoles(o)
}

// QueryUserRoleContexts queries the "user_role_contexts" edge of the Organization entity.
func (o *Organization) QueryUserRoleContexts() *UserRoleQuery {
	return NewOrganizationClient(o.config).QueryUserRoleContexts(o)
}

// QueryUserPermissionContexts queries the "user_permission_contexts" edge of the Organization entity.
func (o *Organization) QueryUserPermissionContexts() *UserPermissionQuery {
	return NewOrganizationClient(o.config).QueryUserPermissionContexts(o)
}

// QueryAuditLogs queries the "audit_logs" edge of the Organization entity.
func (o *Organization) QueryAuditLogs() *AuditQuery {
	return NewOrganizationClient(o.config).QueryAuditLogs(o)
}

// QueryOrganizationProviders queries the "organization_providers" edge of the Organization entity.
func (o *Organization) QueryOrganizationProviders() *OrganizationProviderQuery {
	return NewOrganizationClient(o.config).QueryOrganizationProviders(o)
}

// QueryActivities queries the "activities" edge of the Organization entity.
func (o *Organization) QueryActivities() *ActivityQuery {
	return NewOrganizationClient(o.config).QueryActivities(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(o.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(o.Slug)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", o.Domains))
	builder.WriteString(", ")
	builder.WriteString("verified_domains=")
	builder.WriteString(fmt.Sprintf("%v", o.VerifiedDomains))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(o.Domain)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(o.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("plan=")
	builder.WriteString(o.Plan)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", o.Active))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", o.Metadata))
	builder.WriteString(", ")
	if v := o.TrialEndsAt; v != nil {
		builder.WriteString("trial_ends_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("trial_used=")
	builder.WriteString(fmt.Sprintf("%v", o.TrialUsed))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", o.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("org_type=")
	builder.WriteString(fmt.Sprintf("%v", o.OrgType))
	builder.WriteString(", ")
	builder.WriteString("is_platform_organization=")
	builder.WriteString(fmt.Sprintf("%v", o.IsPlatformOrganization))
	builder.WriteString(", ")
	builder.WriteString("external_user_limit=")
	builder.WriteString(fmt.Sprintf("%v", o.ExternalUserLimit))
	builder.WriteString(", ")
	builder.WriteString("end_user_limit=")
	builder.WriteString(fmt.Sprintf("%v", o.EndUserLimit))
	builder.WriteString(", ")
	builder.WriteString("sso_enabled=")
	builder.WriteString(fmt.Sprintf("%v", o.SSOEnabled))
	builder.WriteString(", ")
	builder.WriteString("sso_domain=")
	builder.WriteString(o.SSODomain)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(o.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(o.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("subscription_status=")
	builder.WriteString(fmt.Sprintf("%v", o.SubscriptionStatus))
	builder.WriteString(", ")
	builder.WriteString("auth_service_enabled=")
	builder.WriteString(fmt.Sprintf("%v", o.AuthServiceEnabled))
	builder.WriteString(", ")
	builder.WriteString("auth_config=")
	builder.WriteString(fmt.Sprintf("%v", o.AuthConfig))
	builder.WriteString(", ")
	builder.WriteString("auth_domain=")
	builder.WriteString(o.AuthDomain)
	builder.WriteString(", ")
	builder.WriteString("api_request_limit=")
	builder.WriteString(fmt.Sprintf("%v", o.APIRequestLimit))
	builder.WriteString(", ")
	builder.WriteString("api_requests_used=")
	builder.WriteString(fmt.Sprintf("%v", o.APIRequestsUsed))
	builder.WriteString(", ")
	builder.WriteString("current_external_users=")
	builder.WriteString(fmt.Sprintf("%v", o.CurrentExternalUsers))
	builder.WriteString(", ")
	builder.WriteString("current_end_users=")
	builder.WriteString(fmt.Sprintf("%v", o.CurrentEndUsers))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedUsers(name string) ([]*User, error) {
	if o.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedUsers(name string, edges ...*User) {
	if o.Edges.namedUsers == nil {
		o.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		o.Edges.namedUsers[name] = []*User{}
	} else {
		o.Edges.namedUsers[name] = append(o.Edges.namedUsers[name], edges...)
	}
}

// NamedMemberships returns the Memberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedMemberships(name string) ([]*Membership, error) {
	if o.Edges.namedMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedMemberships(name string, edges ...*Membership) {
	if o.Edges.namedMemberships == nil {
		o.Edges.namedMemberships = make(map[string][]*Membership)
	}
	if len(edges) == 0 {
		o.Edges.namedMemberships[name] = []*Membership{}
	} else {
		o.Edges.namedMemberships[name] = append(o.Edges.namedMemberships[name], edges...)
	}
}

// NamedSmsTemplates returns the SmsTemplates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSmsTemplates(name string) ([]*SMSTemplate, error) {
	if o.Edges.namedSmsTemplates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSmsTemplates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSmsTemplates(name string, edges ...*SMSTemplate) {
	if o.Edges.namedSmsTemplates == nil {
		o.Edges.namedSmsTemplates = make(map[string][]*SMSTemplate)
	}
	if len(edges) == 0 {
		o.Edges.namedSmsTemplates[name] = []*SMSTemplate{}
	} else {
		o.Edges.namedSmsTemplates[name] = append(o.Edges.namedSmsTemplates[name], edges...)
	}
}

// NamedEmailTemplates returns the EmailTemplates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEmailTemplates(name string) ([]*EmailTemplate, error) {
	if o.Edges.namedEmailTemplates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEmailTemplates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEmailTemplates(name string, edges ...*EmailTemplate) {
	if o.Edges.namedEmailTemplates == nil {
		o.Edges.namedEmailTemplates = make(map[string][]*EmailTemplate)
	}
	if len(edges) == 0 {
		o.Edges.namedEmailTemplates[name] = []*EmailTemplate{}
	} else {
		o.Edges.namedEmailTemplates[name] = append(o.Edges.namedEmailTemplates[name], edges...)
	}
}

// NamedAPIKeys returns the APIKeys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedAPIKeys(name string) ([]*ApiKey, error) {
	if o.Edges.namedAPIKeys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedAPIKeys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedAPIKeys(name string, edges ...*ApiKey) {
	if o.Edges.namedAPIKeys == nil {
		o.Edges.namedAPIKeys = make(map[string][]*ApiKey)
	}
	if len(edges) == 0 {
		o.Edges.namedAPIKeys[name] = []*ApiKey{}
	} else {
		o.Edges.namedAPIKeys[name] = append(o.Edges.namedAPIKeys[name], edges...)
	}
}

// NamedWebhooks returns the Webhooks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedWebhooks(name string) ([]*Webhook, error) {
	if o.Edges.namedWebhooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedWebhooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedWebhooks(name string, edges ...*Webhook) {
	if o.Edges.namedWebhooks == nil {
		o.Edges.namedWebhooks = make(map[string][]*Webhook)
	}
	if len(edges) == 0 {
		o.Edges.namedWebhooks[name] = []*Webhook{}
	} else {
		o.Edges.namedWebhooks[name] = append(o.Edges.namedWebhooks[name], edges...)
	}
}

// NamedFeatureFlags returns the FeatureFlags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedFeatureFlags(name string) ([]*OrganizationFeature, error) {
	if o.Edges.namedFeatureFlags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedFeatureFlags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedFeatureFlags(name string, edges ...*OrganizationFeature) {
	if o.Edges.namedFeatureFlags == nil {
		o.Edges.namedFeatureFlags = make(map[string][]*OrganizationFeature)
	}
	if len(edges) == 0 {
		o.Edges.namedFeatureFlags[name] = []*OrganizationFeature{}
	} else {
		o.Edges.namedFeatureFlags[name] = append(o.Edges.namedFeatureFlags[name], edges...)
	}
}

// NamedIdentityProviders returns the IdentityProviders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedIdentityProviders(name string) ([]*IdentityProvider, error) {
	if o.Edges.namedIdentityProviders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedIdentityProviders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedIdentityProviders(name string, edges ...*IdentityProvider) {
	if o.Edges.namedIdentityProviders == nil {
		o.Edges.namedIdentityProviders = make(map[string][]*IdentityProvider)
	}
	if len(edges) == 0 {
		o.Edges.namedIdentityProviders[name] = []*IdentityProvider{}
	} else {
		o.Edges.namedIdentityProviders[name] = append(o.Edges.namedIdentityProviders[name], edges...)
	}
}

// NamedOauthClients returns the OauthClients named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedOauthClients(name string) ([]*OAuthClient, error) {
	if o.Edges.namedOauthClients == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOauthClients[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedOauthClients(name string, edges ...*OAuthClient) {
	if o.Edges.namedOauthClients == nil {
		o.Edges.namedOauthClients = make(map[string][]*OAuthClient)
	}
	if len(edges) == 0 {
		o.Edges.namedOauthClients[name] = []*OAuthClient{}
	} else {
		o.Edges.namedOauthClients[name] = append(o.Edges.namedOauthClients[name], edges...)
	}
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedRoles(name string) ([]*Role, error) {
	if o.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedRoles(name string, edges ...*Role) {
	if o.Edges.namedRoles == nil {
		o.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		o.Edges.namedRoles[name] = []*Role{}
	} else {
		o.Edges.namedRoles[name] = append(o.Edges.namedRoles[name], edges...)
	}
}

// NamedUserRoleContexts returns the UserRoleContexts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedUserRoleContexts(name string) ([]*UserRole, error) {
	if o.Edges.namedUserRoleContexts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUserRoleContexts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedUserRoleContexts(name string, edges ...*UserRole) {
	if o.Edges.namedUserRoleContexts == nil {
		o.Edges.namedUserRoleContexts = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		o.Edges.namedUserRoleContexts[name] = []*UserRole{}
	} else {
		o.Edges.namedUserRoleContexts[name] = append(o.Edges.namedUserRoleContexts[name], edges...)
	}
}

// NamedUserPermissionContexts returns the UserPermissionContexts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedUserPermissionContexts(name string) ([]*UserPermission, error) {
	if o.Edges.namedUserPermissionContexts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUserPermissionContexts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedUserPermissionContexts(name string, edges ...*UserPermission) {
	if o.Edges.namedUserPermissionContexts == nil {
		o.Edges.namedUserPermissionContexts = make(map[string][]*UserPermission)
	}
	if len(edges) == 0 {
		o.Edges.namedUserPermissionContexts[name] = []*UserPermission{}
	} else {
		o.Edges.namedUserPermissionContexts[name] = append(o.Edges.namedUserPermissionContexts[name], edges...)
	}
}

// NamedAuditLogs returns the AuditLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedAuditLogs(name string) ([]*Audit, error) {
	if o.Edges.namedAuditLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedAuditLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedAuditLogs(name string, edges ...*Audit) {
	if o.Edges.namedAuditLogs == nil {
		o.Edges.namedAuditLogs = make(map[string][]*Audit)
	}
	if len(edges) == 0 {
		o.Edges.namedAuditLogs[name] = []*Audit{}
	} else {
		o.Edges.namedAuditLogs[name] = append(o.Edges.namedAuditLogs[name], edges...)
	}
}

// NamedOrganizationProviders returns the OrganizationProviders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedOrganizationProviders(name string) ([]*OrganizationProvider, error) {
	if o.Edges.namedOrganizationProviders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOrganizationProviders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedOrganizationProviders(name string, edges ...*OrganizationProvider) {
	if o.Edges.namedOrganizationProviders == nil {
		o.Edges.namedOrganizationProviders = make(map[string][]*OrganizationProvider)
	}
	if len(edges) == 0 {
		o.Edges.namedOrganizationProviders[name] = []*OrganizationProvider{}
	} else {
		o.Edges.namedOrganizationProviders[name] = append(o.Edges.namedOrganizationProviders[name], edges...)
	}
}

// NamedActivities returns the Activities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedActivities(name string) ([]*Activity, error) {
	if o.Edges.namedActivities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedActivities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedActivities(name string, edges ...*Activity) {
	if o.Edges.namedActivities == nil {
		o.Edges.namedActivities = make(map[string][]*Activity)
	}
	if len(edges) == 0 {
		o.Edges.namedActivities[name] = []*Activity{}
	} else {
		o.Edges.namedActivities[name] = append(o.Edges.namedActivities[name], edges...)
	}
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
