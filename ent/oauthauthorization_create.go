// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/user"
)

// OAuthAuthorizationCreate is the builder for creating a OAuthAuthorization entity.
type OAuthAuthorizationCreate struct {
	config
	mutation *OAuthAuthorizationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oac *OAuthAuthorizationCreate) SetCreatedAt(t time.Time) *OAuthAuthorizationCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableCreatedAt(t *time.Time) *OAuthAuthorizationCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetUpdatedAt sets the "updated_at" field.
func (oac *OAuthAuthorizationCreate) SetUpdatedAt(t time.Time) *OAuthAuthorizationCreate {
	oac.mutation.SetUpdatedAt(t)
	return oac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableUpdatedAt(t *time.Time) *OAuthAuthorizationCreate {
	if t != nil {
		oac.SetUpdatedAt(*t)
	}
	return oac
}

// SetDeletedAt sets the "deleted_at" field.
func (oac *OAuthAuthorizationCreate) SetDeletedAt(t time.Time) *OAuthAuthorizationCreate {
	oac.mutation.SetDeletedAt(t)
	return oac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableDeletedAt(t *time.Time) *OAuthAuthorizationCreate {
	if t != nil {
		oac.SetDeletedAt(*t)
	}
	return oac
}

// SetClientID sets the "client_id" field.
func (oac *OAuthAuthorizationCreate) SetClientID(x xid.ID) *OAuthAuthorizationCreate {
	oac.mutation.SetClientID(x)
	return oac
}

// SetUserID sets the "user_id" field.
func (oac *OAuthAuthorizationCreate) SetUserID(x xid.ID) *OAuthAuthorizationCreate {
	oac.mutation.SetUserID(x)
	return oac
}

// SetOrganizationID sets the "organization_id" field.
func (oac *OAuthAuthorizationCreate) SetOrganizationID(x xid.ID) *OAuthAuthorizationCreate {
	oac.mutation.SetOrganizationID(x)
	return oac
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableOrganizationID(x *xid.ID) *OAuthAuthorizationCreate {
	if x != nil {
		oac.SetOrganizationID(*x)
	}
	return oac
}

// SetCode sets the "code" field.
func (oac *OAuthAuthorizationCreate) SetCode(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetCode(s)
	return oac
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableCode(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetCode(*s)
	}
	return oac
}

// SetCodeChallenge sets the "code_challenge" field.
func (oac *OAuthAuthorizationCreate) SetCodeChallenge(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetCodeChallenge(s)
	return oac
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableCodeChallenge(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetCodeChallenge(*s)
	}
	return oac
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (oac *OAuthAuthorizationCreate) SetCodeChallengeMethod(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetCodeChallengeMethod(s)
	return oac
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableCodeChallengeMethod(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetCodeChallengeMethod(*s)
	}
	return oac
}

// SetRedirectURI sets the "redirect_uri" field.
func (oac *OAuthAuthorizationCreate) SetRedirectURI(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetRedirectURI(s)
	return oac
}

// SetScopeNames sets the "scope_names" field.
func (oac *OAuthAuthorizationCreate) SetScopeNames(s []string) *OAuthAuthorizationCreate {
	oac.mutation.SetScopeNames(s)
	return oac
}

// SetUsed sets the "used" field.
func (oac *OAuthAuthorizationCreate) SetUsed(b bool) *OAuthAuthorizationCreate {
	oac.mutation.SetUsed(b)
	return oac
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableUsed(b *bool) *OAuthAuthorizationCreate {
	if b != nil {
		oac.SetUsed(*b)
	}
	return oac
}

// SetUsedAt sets the "used_at" field.
func (oac *OAuthAuthorizationCreate) SetUsedAt(t time.Time) *OAuthAuthorizationCreate {
	oac.mutation.SetUsedAt(t)
	return oac
}

// SetExpiresAt sets the "expires_at" field.
func (oac *OAuthAuthorizationCreate) SetExpiresAt(t time.Time) *OAuthAuthorizationCreate {
	oac.mutation.SetExpiresAt(t)
	return oac
}

// SetState sets the "state" field.
func (oac *OAuthAuthorizationCreate) SetState(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetState(s)
	return oac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableState(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetState(*s)
	}
	return oac
}

// SetNonce sets the "nonce" field.
func (oac *OAuthAuthorizationCreate) SetNonce(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetNonce(s)
	return oac
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableNonce(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetNonce(*s)
	}
	return oac
}

// SetUserAgent sets the "user_agent" field.
func (oac *OAuthAuthorizationCreate) SetUserAgent(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetUserAgent(s)
	return oac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableUserAgent(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetUserAgent(*s)
	}
	return oac
}

// SetIPAddress sets the "ip_address" field.
func (oac *OAuthAuthorizationCreate) SetIPAddress(s string) *OAuthAuthorizationCreate {
	oac.mutation.SetIPAddress(s)
	return oac
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableIPAddress(s *string) *OAuthAuthorizationCreate {
	if s != nil {
		oac.SetIPAddress(*s)
	}
	return oac
}

// SetID sets the "id" field.
func (oac *OAuthAuthorizationCreate) SetID(x xid.ID) *OAuthAuthorizationCreate {
	oac.mutation.SetID(x)
	return oac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oac *OAuthAuthorizationCreate) SetNillableID(x *xid.ID) *OAuthAuthorizationCreate {
	if x != nil {
		oac.SetID(*x)
	}
	return oac
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (oac *OAuthAuthorizationCreate) SetClient(o *OAuthClient) *OAuthAuthorizationCreate {
	return oac.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oac *OAuthAuthorizationCreate) SetUser(u *User) *OAuthAuthorizationCreate {
	return oac.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (oac *OAuthAuthorizationCreate) AddScopeIDs(ids ...xid.ID) *OAuthAuthorizationCreate {
	oac.mutation.AddScopeIDs(ids...)
	return oac
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (oac *OAuthAuthorizationCreate) AddScopes(o ...*OAuthScope) *OAuthAuthorizationCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oac.AddScopeIDs(ids...)
}

// Mutation returns the OAuthAuthorizationMutation object of the builder.
func (oac *OAuthAuthorizationCreate) Mutation() *OAuthAuthorizationMutation {
	return oac.mutation
}

// Save creates the OAuthAuthorization in the database.
func (oac *OAuthAuthorizationCreate) Save(ctx context.Context) (*OAuthAuthorization, error) {
	oac.defaults()
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OAuthAuthorizationCreate) SaveX(ctx context.Context) *OAuthAuthorization {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OAuthAuthorizationCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OAuthAuthorizationCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OAuthAuthorizationCreate) defaults() {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		v := oauthauthorization.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		v := oauthauthorization.DefaultUpdatedAt()
		oac.mutation.SetUpdatedAt(v)
	}
	if _, ok := oac.mutation.Used(); !ok {
		v := oauthauthorization.DefaultUsed
		oac.mutation.SetUsed(v)
	}
	if _, ok := oac.mutation.ID(); !ok {
		v := oauthauthorization.DefaultID()
		oac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OAuthAuthorizationCreate) check() error {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthAuthorization.created_at"`)}
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthAuthorization.updated_at"`)}
	}
	if _, ok := oac.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthAuthorization.client_id"`)}
	}
	if v, ok := oac.mutation.ClientID(); ok {
		if err := oauthauthorization.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.client_id": %w`, err)}
		}
	}
	if _, ok := oac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OAuthAuthorization.user_id"`)}
	}
	if v, ok := oac.mutation.UserID(); ok {
		if err := oauthauthorization.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.user_id": %w`, err)}
		}
	}
	if _, ok := oac.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "OAuthAuthorization.redirect_uri"`)}
	}
	if v, ok := oac.mutation.RedirectURI(); ok {
		if err := oauthauthorization.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthAuthorization.redirect_uri": %w`, err)}
		}
	}
	if _, ok := oac.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "OAuthAuthorization.used"`)}
	}
	if _, ok := oac.mutation.UsedAt(); !ok {
		return &ValidationError{Name: "used_at", err: errors.New(`ent: missing required field "OAuthAuthorization.used_at"`)}
	}
	if _, ok := oac.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OAuthAuthorization.expires_at"`)}
	}
	if len(oac.mutation.ClientIDs()) == 0 {
		return &ValidationError{Name: "client", err: errors.New(`ent: missing required edge "OAuthAuthorization.client"`)}
	}
	if len(oac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OAuthAuthorization.user"`)}
	}
	return nil
}

func (oac *OAuthAuthorizationCreate) sqlSave(ctx context.Context) (*OAuthAuthorization, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OAuthAuthorizationCreate) createSpec() (*OAuthAuthorization, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthAuthorization{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(oauthauthorization.Table, sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString))
	)
	_spec.OnConflict = oac.conflict
	if id, ok := oac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.SetField(oauthauthorization.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oac.mutation.DeletedAt(); ok {
		_spec.SetField(oauthauthorization.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oac.mutation.OrganizationID(); ok {
		_spec.SetField(oauthauthorization.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := oac.mutation.Code(); ok {
		_spec.SetField(oauthauthorization.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := oac.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallenge, field.TypeString, value)
		_node.CodeChallenge = value
	}
	if value, ok := oac.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthauthorization.FieldCodeChallengeMethod, field.TypeString, value)
		_node.CodeChallengeMethod = value
	}
	if value, ok := oac.mutation.RedirectURI(); ok {
		_spec.SetField(oauthauthorization.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := oac.mutation.ScopeNames(); ok {
		_spec.SetField(oauthauthorization.FieldScopeNames, field.TypeJSON, value)
		_node.ScopeNames = value
	}
	if value, ok := oac.mutation.Used(); ok {
		_spec.SetField(oauthauthorization.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if value, ok := oac.mutation.UsedAt(); ok {
		_spec.SetField(oauthauthorization.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if value, ok := oac.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthauthorization.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := oac.mutation.State(); ok {
		_spec.SetField(oauthauthorization.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := oac.mutation.Nonce(); ok {
		_spec.SetField(oauthauthorization.FieldNonce, field.TypeString, value)
		_node.Nonce = value
	}
	if value, ok := oac.mutation.UserAgent(); ok {
		_spec.SetField(oauthauthorization.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := oac.mutation.IPAddress(); ok {
		_spec.SetField(oauthauthorization.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if nodes := oac.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthAuthorization.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthAuthorizationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oac *OAuthAuthorizationCreate) OnConflict(opts ...sql.ConflictOption) *OAuthAuthorizationUpsertOne {
	oac.conflict = opts
	return &OAuthAuthorizationUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oac *OAuthAuthorizationCreate) OnConflictColumns(columns ...string) *OAuthAuthorizationUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OAuthAuthorizationUpsertOne{
		create: oac,
	}
}

type (
	// OAuthAuthorizationUpsertOne is the builder for "upsert"-ing
	//  one OAuthAuthorization node.
	OAuthAuthorizationUpsertOne struct {
		create *OAuthAuthorizationCreate
	}

	// OAuthAuthorizationUpsert is the "OnConflict" setter.
	OAuthAuthorizationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthAuthorizationUpsert) SetUpdatedAt(v time.Time) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateUpdatedAt() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthAuthorizationUpsert) SetDeletedAt(v time.Time) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateDeletedAt() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthAuthorizationUpsert) ClearDeletedAt() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldDeletedAt)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OAuthAuthorizationUpsert) SetClientID(v xid.ID) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateClientID() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldClientID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OAuthAuthorizationUpsert) SetUserID(v xid.ID) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateUserID() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthAuthorizationUpsert) SetOrganizationID(v xid.ID) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateOrganizationID() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthAuthorizationUpsert) ClearOrganizationID() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldOrganizationID)
	return u
}

// SetCode sets the "code" field.
func (u *OAuthAuthorizationUpsert) SetCode(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateCode() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *OAuthAuthorizationUpsert) ClearCode() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldCode)
	return u
}

// SetCodeChallenge sets the "code_challenge" field.
func (u *OAuthAuthorizationUpsert) SetCodeChallenge(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldCodeChallenge, v)
	return u
}

// UpdateCodeChallenge sets the "code_challenge" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateCodeChallenge() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldCodeChallenge)
	return u
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (u *OAuthAuthorizationUpsert) ClearCodeChallenge() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldCodeChallenge)
	return u
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsert) SetCodeChallengeMethod(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldCodeChallengeMethod, v)
	return u
}

// UpdateCodeChallengeMethod sets the "code_challenge_method" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateCodeChallengeMethod() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldCodeChallengeMethod)
	return u
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsert) ClearCodeChallengeMethod() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldCodeChallengeMethod)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthAuthorizationUpsert) SetRedirectURI(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateRedirectURI() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldRedirectURI)
	return u
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthAuthorizationUpsert) SetScopeNames(v []string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldScopeNames, v)
	return u
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateScopeNames() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldScopeNames)
	return u
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthAuthorizationUpsert) ClearScopeNames() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldScopeNames)
	return u
}

// SetUsed sets the "used" field.
func (u *OAuthAuthorizationUpsert) SetUsed(v bool) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldUsed, v)
	return u
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateUsed() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldUsed)
	return u
}

// SetUsedAt sets the "used_at" field.
func (u *OAuthAuthorizationUpsert) SetUsedAt(v time.Time) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldUsedAt, v)
	return u
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateUsedAt() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldUsedAt)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthAuthorizationUpsert) SetExpiresAt(v time.Time) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateExpiresAt() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldExpiresAt)
	return u
}

// SetState sets the "state" field.
func (u *OAuthAuthorizationUpsert) SetState(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateState() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *OAuthAuthorizationUpsert) ClearState() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldState)
	return u
}

// SetNonce sets the "nonce" field.
func (u *OAuthAuthorizationUpsert) SetNonce(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldNonce, v)
	return u
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateNonce() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldNonce)
	return u
}

// ClearNonce clears the value of the "nonce" field.
func (u *OAuthAuthorizationUpsert) ClearNonce() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldNonce)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthAuthorizationUpsert) SetUserAgent(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateUserAgent() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthAuthorizationUpsert) ClearUserAgent() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldUserAgent)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthAuthorizationUpsert) SetIPAddress(v string) *OAuthAuthorizationUpsert {
	u.Set(oauthauthorization.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsert) UpdateIPAddress() *OAuthAuthorizationUpsert {
	u.SetExcluded(oauthauthorization.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthAuthorizationUpsert) ClearIPAddress() *OAuthAuthorizationUpsert {
	u.SetNull(oauthauthorization.FieldIPAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthauthorization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthAuthorizationUpsertOne) UpdateNewValues() *OAuthAuthorizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauthauthorization.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauthauthorization.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthAuthorizationUpsertOne) Ignore() *OAuthAuthorizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthAuthorizationUpsertOne) DoNothing() *OAuthAuthorizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthAuthorizationCreate.OnConflict
// documentation for more info.
func (u *OAuthAuthorizationUpsertOne) Update(set func(*OAuthAuthorizationUpsert)) *OAuthAuthorizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthAuthorizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthAuthorizationUpsertOne) SetUpdatedAt(v time.Time) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateUpdatedAt() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthAuthorizationUpsertOne) SetDeletedAt(v time.Time) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateDeletedAt() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthAuthorizationUpsertOne) ClearDeletedAt() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthAuthorizationUpsertOne) SetClientID(v xid.ID) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateClientID() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateClientID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OAuthAuthorizationUpsertOne) SetUserID(v xid.ID) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateUserID() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthAuthorizationUpsertOne) SetOrganizationID(v xid.ID) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateOrganizationID() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthAuthorizationUpsertOne) ClearOrganizationID() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearOrganizationID()
	})
}

// SetCode sets the "code" field.
func (u *OAuthAuthorizationUpsertOne) SetCode(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateCode() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OAuthAuthorizationUpsertOne) ClearCode() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCode()
	})
}

// SetCodeChallenge sets the "code_challenge" field.
func (u *OAuthAuthorizationUpsertOne) SetCodeChallenge(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCodeChallenge(v)
	})
}

// UpdateCodeChallenge sets the "code_challenge" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateCodeChallenge() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCodeChallenge()
	})
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (u *OAuthAuthorizationUpsertOne) ClearCodeChallenge() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCodeChallenge()
	})
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsertOne) SetCodeChallengeMethod(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCodeChallengeMethod(v)
	})
}

// UpdateCodeChallengeMethod sets the "code_challenge_method" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateCodeChallengeMethod() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCodeChallengeMethod()
	})
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsertOne) ClearCodeChallengeMethod() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCodeChallengeMethod()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthAuthorizationUpsertOne) SetRedirectURI(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateRedirectURI() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthAuthorizationUpsertOne) SetScopeNames(v []string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetScopeNames(v)
	})
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateScopeNames() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateScopeNames()
	})
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthAuthorizationUpsertOne) ClearScopeNames() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearScopeNames()
	})
}

// SetUsed sets the "used" field.
func (u *OAuthAuthorizationUpsertOne) SetUsed(v bool) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateUsed() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUsed()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *OAuthAuthorizationUpsertOne) SetUsedAt(v time.Time) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateUsedAt() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUsedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthAuthorizationUpsertOne) SetExpiresAt(v time.Time) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateExpiresAt() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetState sets the "state" field.
func (u *OAuthAuthorizationUpsertOne) SetState(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateState() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *OAuthAuthorizationUpsertOne) ClearState() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearState()
	})
}

// SetNonce sets the "nonce" field.
func (u *OAuthAuthorizationUpsertOne) SetNonce(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateNonce() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateNonce()
	})
}

// ClearNonce clears the value of the "nonce" field.
func (u *OAuthAuthorizationUpsertOne) ClearNonce() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearNonce()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthAuthorizationUpsertOne) SetUserAgent(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateUserAgent() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthAuthorizationUpsertOne) ClearUserAgent() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthAuthorizationUpsertOne) SetIPAddress(v string) *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertOne) UpdateIPAddress() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthAuthorizationUpsertOne) ClearIPAddress() *OAuthAuthorizationUpsertOne {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearIPAddress()
	})
}

// Exec executes the query.
func (u *OAuthAuthorizationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthAuthorizationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthAuthorizationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthAuthorizationUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OAuthAuthorizationUpsertOne.ID is not supported by MySQL driver. Use OAuthAuthorizationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthAuthorizationUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthAuthorizationCreateBulk is the builder for creating many OAuthAuthorization entities in bulk.
type OAuthAuthorizationCreateBulk struct {
	config
	err      error
	builders []*OAuthAuthorizationCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthAuthorization entities in the database.
func (oacb *OAuthAuthorizationCreateBulk) Save(ctx context.Context) ([]*OAuthAuthorization, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OAuthAuthorization, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthAuthorizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OAuthAuthorizationCreateBulk) SaveX(ctx context.Context) []*OAuthAuthorization {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OAuthAuthorizationCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OAuthAuthorizationCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthAuthorization.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthAuthorizationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oacb *OAuthAuthorizationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthAuthorizationUpsertBulk {
	oacb.conflict = opts
	return &OAuthAuthorizationUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oacb *OAuthAuthorizationCreateBulk) OnConflictColumns(columns ...string) *OAuthAuthorizationUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OAuthAuthorizationUpsertBulk{
		create: oacb,
	}
}

// OAuthAuthorizationUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthAuthorization nodes.
type OAuthAuthorizationUpsertBulk struct {
	create *OAuthAuthorizationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthauthorization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthAuthorizationUpsertBulk) UpdateNewValues() *OAuthAuthorizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauthauthorization.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauthauthorization.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthAuthorization.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthAuthorizationUpsertBulk) Ignore() *OAuthAuthorizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthAuthorizationUpsertBulk) DoNothing() *OAuthAuthorizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthAuthorizationCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthAuthorizationUpsertBulk) Update(set func(*OAuthAuthorizationUpsert)) *OAuthAuthorizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthAuthorizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthAuthorizationUpsertBulk) SetUpdatedAt(v time.Time) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateUpdatedAt() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthAuthorizationUpsertBulk) SetDeletedAt(v time.Time) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateDeletedAt() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthAuthorizationUpsertBulk) ClearDeletedAt() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthAuthorizationUpsertBulk) SetClientID(v xid.ID) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateClientID() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateClientID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OAuthAuthorizationUpsertBulk) SetUserID(v xid.ID) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateUserID() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthAuthorizationUpsertBulk) SetOrganizationID(v xid.ID) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateOrganizationID() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthAuthorizationUpsertBulk) ClearOrganizationID() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearOrganizationID()
	})
}

// SetCode sets the "code" field.
func (u *OAuthAuthorizationUpsertBulk) SetCode(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateCode() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OAuthAuthorizationUpsertBulk) ClearCode() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCode()
	})
}

// SetCodeChallenge sets the "code_challenge" field.
func (u *OAuthAuthorizationUpsertBulk) SetCodeChallenge(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCodeChallenge(v)
	})
}

// UpdateCodeChallenge sets the "code_challenge" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateCodeChallenge() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCodeChallenge()
	})
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (u *OAuthAuthorizationUpsertBulk) ClearCodeChallenge() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCodeChallenge()
	})
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsertBulk) SetCodeChallengeMethod(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetCodeChallengeMethod(v)
	})
}

// UpdateCodeChallengeMethod sets the "code_challenge_method" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateCodeChallengeMethod() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateCodeChallengeMethod()
	})
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (u *OAuthAuthorizationUpsertBulk) ClearCodeChallengeMethod() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearCodeChallengeMethod()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthAuthorizationUpsertBulk) SetRedirectURI(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateRedirectURI() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetScopeNames sets the "scope_names" field.
func (u *OAuthAuthorizationUpsertBulk) SetScopeNames(v []string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetScopeNames(v)
	})
}

// UpdateScopeNames sets the "scope_names" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateScopeNames() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateScopeNames()
	})
}

// ClearScopeNames clears the value of the "scope_names" field.
func (u *OAuthAuthorizationUpsertBulk) ClearScopeNames() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearScopeNames()
	})
}

// SetUsed sets the "used" field.
func (u *OAuthAuthorizationUpsertBulk) SetUsed(v bool) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateUsed() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUsed()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *OAuthAuthorizationUpsertBulk) SetUsedAt(v time.Time) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateUsedAt() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUsedAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *OAuthAuthorizationUpsertBulk) SetExpiresAt(v time.Time) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateExpiresAt() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetState sets the "state" field.
func (u *OAuthAuthorizationUpsertBulk) SetState(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateState() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *OAuthAuthorizationUpsertBulk) ClearState() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearState()
	})
}

// SetNonce sets the "nonce" field.
func (u *OAuthAuthorizationUpsertBulk) SetNonce(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateNonce() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateNonce()
	})
}

// ClearNonce clears the value of the "nonce" field.
func (u *OAuthAuthorizationUpsertBulk) ClearNonce() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearNonce()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *OAuthAuthorizationUpsertBulk) SetUserAgent(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateUserAgent() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *OAuthAuthorizationUpsertBulk) ClearUserAgent() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *OAuthAuthorizationUpsertBulk) SetIPAddress(v string) *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *OAuthAuthorizationUpsertBulk) UpdateIPAddress() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *OAuthAuthorizationUpsertBulk) ClearIPAddress() *OAuthAuthorizationUpsertBulk {
	return u.Update(func(s *OAuthAuthorizationUpsert) {
		s.ClearIPAddress()
	})
}

// Exec executes the query.
func (u *OAuthAuthorizationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthAuthorizationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthAuthorizationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthAuthorizationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
