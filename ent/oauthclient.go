// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/organization"
)

// OAuthClient is the model entity for the OAuthClient schema.
type OAuthClient struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"-"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription holds the value of the "client_description" field.
	ClientDescription string `json:"client_description,omitempty"`
	// ClientURI holds the value of the "client_uri" field.
	ClientURI string `json:"client_uri,omitempty"`
	// LogoURI holds the value of the "logo_uri" field.
	LogoURI string `json:"logo_uri,omitempty"`
	// RedirectUris holds the value of the "redirect_uris" field.
	RedirectUris []string `json:"redirect_uris,omitempty"`
	// PostLogoutRedirectUris holds the value of the "post_logout_redirect_uris" field.
	PostLogoutRedirectUris []string `json:"post_logout_redirect_uris,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// Public clients operate without a client secret
	Public bool `json:"public,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// AllowedCorsOrigins holds the value of the "allowed_cors_origins" field.
	AllowedCorsOrigins []string `json:"allowed_cors_origins,omitempty"`
	// AllowedGrantTypes holds the value of the "allowed_grant_types" field.
	AllowedGrantTypes []string `json:"allowed_grant_types,omitempty"`
	// TokenExpirySeconds holds the value of the "token_expiry_seconds" field.
	TokenExpirySeconds int `json:"token_expiry_seconds,omitempty"`
	// RefreshTokenExpirySeconds holds the value of the "refresh_token_expiry_seconds" field.
	RefreshTokenExpirySeconds int `json:"refresh_token_expiry_seconds,omitempty"`
	// AuthCodeExpirySeconds holds the value of the "auth_code_expiry_seconds" field.
	AuthCodeExpirySeconds int `json:"auth_code_expiry_seconds,omitempty"`
	// Enforce PKCE (Proof Key for Code Exchange)
	RequiresPkce bool `json:"requires_pkce,omitempty"`
	// Require user consent before authorization
	RequiresConsent bool `json:"requires_consent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthClientQuery when eager-loading is set.
	Edges        OAuthClientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OAuthClientEdges holds the relations/edges for other nodes in the graph.
type OAuthClientEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Tokens holds the value of the tokens edge.
	Tokens []*OAuthToken `json:"tokens,omitempty"`
	// Authorizations holds the value of the authorizations edge.
	Authorizations []*OAuthAuthorization `json:"authorizations,omitempty"`
	// Scopes holds the value of the scopes edge.
	Scopes []*OAuthScope `json:"scopes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes         [4]bool
	namedTokens         map[string][]*OAuthToken
	namedAuthorizations map[string][]*OAuthAuthorization
	namedScopes         map[string][]*OAuthScope
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthClientEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthClientEdges) TokensOrErr() ([]*OAuthToken, error) {
	if e.loadedTypes[1] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// AuthorizationsOrErr returns the Authorizations value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthClientEdges) AuthorizationsOrErr() ([]*OAuthAuthorization, error) {
	if e.loadedTypes[2] {
		return e.Authorizations, nil
	}
	return nil, &NotLoadedError{edge: "authorizations"}
}

// ScopesOrErr returns the Scopes value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthClientEdges) ScopesOrErr() ([]*OAuthScope, error) {
	if e.loadedTypes[3] {
		return e.Scopes, nil
	}
	return nil, &NotLoadedError{edge: "scopes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldRedirectUris, oauthclient.FieldPostLogoutRedirectUris, oauthclient.FieldAllowedCorsOrigins, oauthclient.FieldAllowedGrantTypes:
			values[i] = new([]byte)
		case oauthclient.FieldPublic, oauthclient.FieldActive, oauthclient.FieldRequiresPkce, oauthclient.FieldRequiresConsent:
			values[i] = new(sql.NullBool)
		case oauthclient.FieldTokenExpirySeconds, oauthclient.FieldRefreshTokenExpirySeconds, oauthclient.FieldAuthCodeExpirySeconds:
			values[i] = new(sql.NullInt64)
		case oauthclient.FieldClientID, oauthclient.FieldClientSecret, oauthclient.FieldClientName, oauthclient.FieldClientDescription, oauthclient.FieldClientURI, oauthclient.FieldLogoURI:
			values[i] = new(sql.NullString)
		case oauthclient.FieldCreatedAt, oauthclient.FieldUpdatedAt, oauthclient.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case oauthclient.FieldID, oauthclient.FieldOrganizationID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthClient fields.
func (oc *OAuthClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oc.ID = *value
			}
		case oauthclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = value.Time
			}
		case oauthclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = value.Time
			}
		case oauthclient.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				oc.DeletedAt = value.Time
			}
		case oauthclient.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oc.ClientID = value.String
			}
		case oauthclient.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				oc.ClientSecret = value.String
			}
		case oauthclient.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				oc.ClientName = value.String
			}
		case oauthclient.FieldClientDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_description", values[i])
			} else if value.Valid {
				oc.ClientDescription = value.String
			}
		case oauthclient.FieldClientURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_uri", values[i])
			} else if value.Valid {
				oc.ClientURI = value.String
			}
		case oauthclient.FieldLogoURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_uri", values[i])
			} else if value.Valid {
				oc.LogoURI = value.String
			}
		case oauthclient.FieldRedirectUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.RedirectUris); err != nil {
					return fmt.Errorf("unmarshal field redirect_uris: %w", err)
				}
			}
		case oauthclient.FieldPostLogoutRedirectUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field post_logout_redirect_uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.PostLogoutRedirectUris); err != nil {
					return fmt.Errorf("unmarshal field post_logout_redirect_uris: %w", err)
				}
			}
		case oauthclient.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				oc.OrganizationID = *value
			}
		case oauthclient.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				oc.Public = value.Bool
			}
		case oauthclient.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				oc.Active = value.Bool
			}
		case oauthclient.FieldAllowedCorsOrigins:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_cors_origins", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.AllowedCorsOrigins); err != nil {
					return fmt.Errorf("unmarshal field allowed_cors_origins: %w", err)
				}
			}
		case oauthclient.FieldAllowedGrantTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_grant_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.AllowedGrantTypes); err != nil {
					return fmt.Errorf("unmarshal field allowed_grant_types: %w", err)
				}
			}
		case oauthclient.FieldTokenExpirySeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_expiry_seconds", values[i])
			} else if value.Valid {
				oc.TokenExpirySeconds = int(value.Int64)
			}
		case oauthclient.FieldRefreshTokenExpirySeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token_expiry_seconds", values[i])
			} else if value.Valid {
				oc.RefreshTokenExpirySeconds = int(value.Int64)
			}
		case oauthclient.FieldAuthCodeExpirySeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auth_code_expiry_seconds", values[i])
			} else if value.Valid {
				oc.AuthCodeExpirySeconds = int(value.Int64)
			}
		case oauthclient.FieldRequiresPkce:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_pkce", values[i])
			} else if value.Valid {
				oc.RequiresPkce = value.Bool
			}
		case oauthclient.FieldRequiresConsent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_consent", values[i])
			} else if value.Valid {
				oc.RequiresConsent = value.Bool
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthClient.
// This includes values selected through modifiers, order, etc.
func (oc *OAuthClient) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryOrganization() *OrganizationQuery {
	return NewOAuthClientClient(oc.config).QueryOrganization(oc)
}

// QueryTokens queries the "tokens" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryTokens() *OAuthTokenQuery {
	return NewOAuthClientClient(oc.config).QueryTokens(oc)
}

// QueryAuthorizations queries the "authorizations" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryAuthorizations() *OAuthAuthorizationQuery {
	return NewOAuthClientClient(oc.config).QueryAuthorizations(oc)
}

// QueryScopes queries the "scopes" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryScopes() *OAuthScopeQuery {
	return NewOAuthClientClient(oc.config).QueryScopes(oc)
}

// Update returns a builder for updating this OAuthClient.
// Note that you need to call OAuthClient.Unwrap() before calling this method if this OAuthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OAuthClient) Update() *OAuthClientUpdateOne {
	return NewOAuthClientClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OAuthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OAuthClient) Unwrap() *OAuthClient {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthClient is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OAuthClient) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(oc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("client_name=")
	builder.WriteString(oc.ClientName)
	builder.WriteString(", ")
	builder.WriteString("client_description=")
	builder.WriteString(oc.ClientDescription)
	builder.WriteString(", ")
	builder.WriteString("client_uri=")
	builder.WriteString(oc.ClientURI)
	builder.WriteString(", ")
	builder.WriteString("logo_uri=")
	builder.WriteString(oc.LogoURI)
	builder.WriteString(", ")
	builder.WriteString("redirect_uris=")
	builder.WriteString(fmt.Sprintf("%v", oc.RedirectUris))
	builder.WriteString(", ")
	builder.WriteString("post_logout_redirect_uris=")
	builder.WriteString(fmt.Sprintf("%v", oc.PostLogoutRedirectUris))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", oc.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", oc.Public))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", oc.Active))
	builder.WriteString(", ")
	builder.WriteString("allowed_cors_origins=")
	builder.WriteString(fmt.Sprintf("%v", oc.AllowedCorsOrigins))
	builder.WriteString(", ")
	builder.WriteString("allowed_grant_types=")
	builder.WriteString(fmt.Sprintf("%v", oc.AllowedGrantTypes))
	builder.WriteString(", ")
	builder.WriteString("token_expiry_seconds=")
	builder.WriteString(fmt.Sprintf("%v", oc.TokenExpirySeconds))
	builder.WriteString(", ")
	builder.WriteString("refresh_token_expiry_seconds=")
	builder.WriteString(fmt.Sprintf("%v", oc.RefreshTokenExpirySeconds))
	builder.WriteString(", ")
	builder.WriteString("auth_code_expiry_seconds=")
	builder.WriteString(fmt.Sprintf("%v", oc.AuthCodeExpirySeconds))
	builder.WriteString(", ")
	builder.WriteString("requires_pkce=")
	builder.WriteString(fmt.Sprintf("%v", oc.RequiresPkce))
	builder.WriteString(", ")
	builder.WriteString("requires_consent=")
	builder.WriteString(fmt.Sprintf("%v", oc.RequiresConsent))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTokens returns the Tokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (oc *OAuthClient) NamedTokens(name string) ([]*OAuthToken, error) {
	if oc.Edges.namedTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := oc.Edges.namedTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (oc *OAuthClient) appendNamedTokens(name string, edges ...*OAuthToken) {
	if oc.Edges.namedTokens == nil {
		oc.Edges.namedTokens = make(map[string][]*OAuthToken)
	}
	if len(edges) == 0 {
		oc.Edges.namedTokens[name] = []*OAuthToken{}
	} else {
		oc.Edges.namedTokens[name] = append(oc.Edges.namedTokens[name], edges...)
	}
}

// NamedAuthorizations returns the Authorizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (oc *OAuthClient) NamedAuthorizations(name string) ([]*OAuthAuthorization, error) {
	if oc.Edges.namedAuthorizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := oc.Edges.namedAuthorizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (oc *OAuthClient) appendNamedAuthorizations(name string, edges ...*OAuthAuthorization) {
	if oc.Edges.namedAuthorizations == nil {
		oc.Edges.namedAuthorizations = make(map[string][]*OAuthAuthorization)
	}
	if len(edges) == 0 {
		oc.Edges.namedAuthorizations[name] = []*OAuthAuthorization{}
	} else {
		oc.Edges.namedAuthorizations[name] = append(oc.Edges.namedAuthorizations[name], edges...)
	}
}

// NamedScopes returns the Scopes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (oc *OAuthClient) NamedScopes(name string) ([]*OAuthScope, error) {
	if oc.Edges.namedScopes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := oc.Edges.namedScopes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (oc *OAuthClient) appendNamedScopes(name string, edges ...*OAuthScope) {
	if oc.Edges.namedScopes == nil {
		oc.Edges.namedScopes = make(map[string][]*OAuthScope)
	}
	if len(edges) == 0 {
		oc.Edges.namedScopes[name] = []*OAuthScope{}
	} else {
		oc.Edges.namedScopes[name] = append(oc.Edges.namedScopes[name], edges...)
	}
}

// OAuthClients is a parsable slice of OAuthClient.
type OAuthClients []*OAuthClient
