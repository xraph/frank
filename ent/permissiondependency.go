// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
)

// PermissionDependency is the model entity for the PermissionDependency schema.
type PermissionDependency struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// The permission that depends on another
	PermissionID xid.ID `json:"permission_id,omitempty"`
	// The permission that is required
	RequiredPermissionID xid.ID `json:"required_permission_id,omitempty"`
	// Type of dependency relationship
	DependencyType permissiondependency.DependencyType `json:"dependency_type,omitempty"`
	// Optional condition for when this dependency applies
	Condition string `json:"condition,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Who created this dependency
	CreatedBy string `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionDependencyQuery when eager-loading is set.
	Edges        PermissionDependencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionDependencyEdges holds the relations/edges for other nodes in the graph.
type PermissionDependencyEdges struct {
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// RequiredPermission holds the value of the required_permission edge.
	RequiredPermission *Permission `json:"required_permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionDependencyEdges) PermissionOrErr() (*Permission, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// RequiredPermissionOrErr returns the RequiredPermission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionDependencyEdges) RequiredPermissionOrErr() (*Permission, error) {
	if e.RequiredPermission != nil {
		return e.RequiredPermission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "required_permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PermissionDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permissiondependency.FieldActive:
			values[i] = new(sql.NullBool)
		case permissiondependency.FieldDependencyType, permissiondependency.FieldCondition, permissiondependency.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case permissiondependency.FieldCreatedAt, permissiondependency.FieldUpdatedAt, permissiondependency.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case permissiondependency.FieldID, permissiondependency.FieldPermissionID, permissiondependency.FieldRequiredPermissionID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PermissionDependency fields.
func (pd *PermissionDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permissiondependency.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case permissiondependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case permissiondependency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		case permissiondependency.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pd.DeletedAt = value.Time
			}
		case permissiondependency.FieldPermissionID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value != nil {
				pd.PermissionID = *value
			}
		case permissiondependency.FieldRequiredPermissionID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field required_permission_id", values[i])
			} else if value != nil {
				pd.RequiredPermissionID = *value
			}
		case permissiondependency.FieldDependencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_type", values[i])
			} else if value.Valid {
				pd.DependencyType = permissiondependency.DependencyType(value.String)
			}
		case permissiondependency.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				pd.Condition = value.String
			}
		case permissiondependency.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				pd.Active = value.Bool
			}
		case permissiondependency.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pd.CreatedBy = value.String
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PermissionDependency.
// This includes values selected through modifiers, order, etc.
func (pd *PermissionDependency) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryPermission queries the "permission" edge of the PermissionDependency entity.
func (pd *PermissionDependency) QueryPermission() *PermissionQuery {
	return NewPermissionDependencyClient(pd.config).QueryPermission(pd)
}

// QueryRequiredPermission queries the "required_permission" edge of the PermissionDependency entity.
func (pd *PermissionDependency) QueryRequiredPermission() *PermissionQuery {
	return NewPermissionDependencyClient(pd.config).QueryRequiredPermission(pd)
}

// Update returns a builder for updating this PermissionDependency.
// Note that you need to call PermissionDependency.Unwrap() before calling this method if this PermissionDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PermissionDependency) Update() *PermissionDependencyUpdateOne {
	return NewPermissionDependencyClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PermissionDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PermissionDependency) Unwrap() *PermissionDependency {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PermissionDependency is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PermissionDependency) String() string {
	var builder strings.Builder
	builder.WriteString("PermissionDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pd.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.PermissionID))
	builder.WriteString(", ")
	builder.WriteString("required_permission_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.RequiredPermissionID))
	builder.WriteString(", ")
	builder.WriteString("dependency_type=")
	builder.WriteString(fmt.Sprintf("%v", pd.DependencyType))
	builder.WriteString(", ")
	builder.WriteString("condition=")
	builder.WriteString(pd.Condition)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", pd.Active))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pd.CreatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// PermissionDependencies is a parsable slice of PermissionDependency.
type PermissionDependencies []*PermissionDependency
