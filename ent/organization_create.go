// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/smstemplate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/pkg/model"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrganizationCreate) SetCreatedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCreatedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrganizationCreate) SetUpdatedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrganizationCreate) SetDeletedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDeletedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *OrganizationCreate) SetName(s string) *OrganizationCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetSlug sets the "slug" field.
func (oc *OrganizationCreate) SetSlug(s string) *OrganizationCreate {
	oc.mutation.SetSlug(s)
	return oc
}

// SetDomains sets the "domains" field.
func (oc *OrganizationCreate) SetDomains(s []string) *OrganizationCreate {
	oc.mutation.SetDomains(s)
	return oc
}

// SetVerifiedDomains sets the "verified_domains" field.
func (oc *OrganizationCreate) SetVerifiedDomains(s []string) *OrganizationCreate {
	oc.mutation.SetVerifiedDomains(s)
	return oc
}

// SetDomain sets the "domain" field.
func (oc *OrganizationCreate) SetDomain(s string) *OrganizationCreate {
	oc.mutation.SetDomain(s)
	return oc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDomain(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetDomain(*s)
	}
	return oc
}

// SetLogoURL sets the "logo_url" field.
func (oc *OrganizationCreate) SetLogoURL(s string) *OrganizationCreate {
	oc.mutation.SetLogoURL(s)
	return oc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableLogoURL(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetLogoURL(*s)
	}
	return oc
}

// SetPlan sets the "plan" field.
func (oc *OrganizationCreate) SetPlan(s string) *OrganizationCreate {
	oc.mutation.SetPlan(s)
	return oc
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillablePlan(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetPlan(*s)
	}
	return oc
}

// SetActive sets the "active" field.
func (oc *OrganizationCreate) SetActive(b bool) *OrganizationCreate {
	oc.mutation.SetActive(b)
	return oc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableActive(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetActive(*b)
	}
	return oc
}

// SetMetadata sets the "metadata" field.
func (oc *OrganizationCreate) SetMetadata(m map[string]interface{}) *OrganizationCreate {
	oc.mutation.SetMetadata(m)
	return oc
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (oc *OrganizationCreate) SetTrialEndsAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetTrialEndsAt(t)
	return oc
}

// SetNillableTrialEndsAt sets the "trial_ends_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableTrialEndsAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetTrialEndsAt(*t)
	}
	return oc
}

// SetTrialUsed sets the "trial_used" field.
func (oc *OrganizationCreate) SetTrialUsed(b bool) *OrganizationCreate {
	oc.mutation.SetTrialUsed(b)
	return oc
}

// SetNillableTrialUsed sets the "trial_used" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableTrialUsed(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetTrialUsed(*b)
	}
	return oc
}

// SetOwnerID sets the "owner_id" field.
func (oc *OrganizationCreate) SetOwnerID(x xid.ID) *OrganizationCreate {
	oc.mutation.SetOwnerID(x)
	return oc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableOwnerID(x *xid.ID) *OrganizationCreate {
	if x != nil {
		oc.SetOwnerID(*x)
	}
	return oc
}

// SetOrgType sets the "org_type" field.
func (oc *OrganizationCreate) SetOrgType(mt model.OrgType) *OrganizationCreate {
	oc.mutation.SetOrgType(mt)
	return oc
}

// SetNillableOrgType sets the "org_type" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableOrgType(mt *model.OrgType) *OrganizationCreate {
	if mt != nil {
		oc.SetOrgType(*mt)
	}
	return oc
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (oc *OrganizationCreate) SetIsPlatformOrganization(b bool) *OrganizationCreate {
	oc.mutation.SetIsPlatformOrganization(b)
	return oc
}

// SetNillableIsPlatformOrganization sets the "is_platform_organization" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableIsPlatformOrganization(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetIsPlatformOrganization(*b)
	}
	return oc
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (oc *OrganizationCreate) SetExternalUserLimit(i int) *OrganizationCreate {
	oc.mutation.SetExternalUserLimit(i)
	return oc
}

// SetNillableExternalUserLimit sets the "external_user_limit" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableExternalUserLimit(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetExternalUserLimit(*i)
	}
	return oc
}

// SetEndUserLimit sets the "end_user_limit" field.
func (oc *OrganizationCreate) SetEndUserLimit(i int) *OrganizationCreate {
	oc.mutation.SetEndUserLimit(i)
	return oc
}

// SetNillableEndUserLimit sets the "end_user_limit" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableEndUserLimit(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetEndUserLimit(*i)
	}
	return oc
}

// SetSSOEnabled sets the "sso_enabled" field.
func (oc *OrganizationCreate) SetSSOEnabled(b bool) *OrganizationCreate {
	oc.mutation.SetSSOEnabled(b)
	return oc
}

// SetNillableSSOEnabled sets the "sso_enabled" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableSSOEnabled(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetSSOEnabled(*b)
	}
	return oc
}

// SetSSODomain sets the "sso_domain" field.
func (oc *OrganizationCreate) SetSSODomain(s string) *OrganizationCreate {
	oc.mutation.SetSSODomain(s)
	return oc
}

// SetNillableSSODomain sets the "sso_domain" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableSSODomain(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetSSODomain(*s)
	}
	return oc
}

// SetSubscriptionID sets the "subscription_id" field.
func (oc *OrganizationCreate) SetSubscriptionID(s string) *OrganizationCreate {
	oc.mutation.SetSubscriptionID(s)
	return oc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableSubscriptionID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetSubscriptionID(*s)
	}
	return oc
}

// SetCustomerID sets the "customer_id" field.
func (oc *OrganizationCreate) SetCustomerID(s string) *OrganizationCreate {
	oc.mutation.SetCustomerID(s)
	return oc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCustomerID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetCustomerID(*s)
	}
	return oc
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (oc *OrganizationCreate) SetSubscriptionStatus(os organization.SubscriptionStatus) *OrganizationCreate {
	oc.mutation.SetSubscriptionStatus(os)
	return oc
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableSubscriptionStatus(os *organization.SubscriptionStatus) *OrganizationCreate {
	if os != nil {
		oc.SetSubscriptionStatus(*os)
	}
	return oc
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (oc *OrganizationCreate) SetAuthServiceEnabled(b bool) *OrganizationCreate {
	oc.mutation.SetAuthServiceEnabled(b)
	return oc
}

// SetNillableAuthServiceEnabled sets the "auth_service_enabled" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAuthServiceEnabled(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetAuthServiceEnabled(*b)
	}
	return oc
}

// SetAuthConfig sets the "auth_config" field.
func (oc *OrganizationCreate) SetAuthConfig(m map[string]interface{}) *OrganizationCreate {
	oc.mutation.SetAuthConfig(m)
	return oc
}

// SetAuthDomain sets the "auth_domain" field.
func (oc *OrganizationCreate) SetAuthDomain(s string) *OrganizationCreate {
	oc.mutation.SetAuthDomain(s)
	return oc
}

// SetNillableAuthDomain sets the "auth_domain" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAuthDomain(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetAuthDomain(*s)
	}
	return oc
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (oc *OrganizationCreate) SetAPIRequestLimit(i int) *OrganizationCreate {
	oc.mutation.SetAPIRequestLimit(i)
	return oc
}

// SetNillableAPIRequestLimit sets the "api_request_limit" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAPIRequestLimit(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetAPIRequestLimit(*i)
	}
	return oc
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (oc *OrganizationCreate) SetAPIRequestsUsed(i int) *OrganizationCreate {
	oc.mutation.SetAPIRequestsUsed(i)
	return oc
}

// SetNillableAPIRequestsUsed sets the "api_requests_used" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAPIRequestsUsed(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetAPIRequestsUsed(*i)
	}
	return oc
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (oc *OrganizationCreate) SetCurrentExternalUsers(i int) *OrganizationCreate {
	oc.mutation.SetCurrentExternalUsers(i)
	return oc
}

// SetNillableCurrentExternalUsers sets the "current_external_users" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCurrentExternalUsers(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetCurrentExternalUsers(*i)
	}
	return oc
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (oc *OrganizationCreate) SetCurrentEndUsers(i int) *OrganizationCreate {
	oc.mutation.SetCurrentEndUsers(i)
	return oc
}

// SetNillableCurrentEndUsers sets the "current_end_users" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCurrentEndUsers(i *int) *OrganizationCreate {
	if i != nil {
		oc.SetCurrentEndUsers(*i)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrganizationCreate) SetID(x xid.ID) *OrganizationCreate {
	oc.mutation.SetID(x)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableID(x *xid.ID) *OrganizationCreate {
	if x != nil {
		oc.SetID(*x)
	}
	return oc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (oc *OrganizationCreate) AddUserIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddUserIDs(ids...)
	return oc
}

// AddUsers adds the "users" edges to the User entity.
func (oc *OrganizationCreate) AddUsers(u ...*User) *OrganizationCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (oc *OrganizationCreate) AddMembershipIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddMembershipIDs(ids...)
	return oc
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (oc *OrganizationCreate) AddMemberships(m ...*Membership) *OrganizationCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return oc.AddMembershipIDs(ids...)
}

// AddSmsTemplateIDs adds the "sms_templates" edge to the SMSTemplate entity by IDs.
func (oc *OrganizationCreate) AddSmsTemplateIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddSmsTemplateIDs(ids...)
	return oc
}

// AddSmsTemplates adds the "sms_templates" edges to the SMSTemplate entity.
func (oc *OrganizationCreate) AddSmsTemplates(s ...*SMSTemplate) *OrganizationCreate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oc.AddSmsTemplateIDs(ids...)
}

// AddEmailTemplateIDs adds the "email_templates" edge to the EmailTemplate entity by IDs.
func (oc *OrganizationCreate) AddEmailTemplateIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddEmailTemplateIDs(ids...)
	return oc
}

// AddEmailTemplates adds the "email_templates" edges to the EmailTemplate entity.
func (oc *OrganizationCreate) AddEmailTemplates(e ...*EmailTemplate) *OrganizationCreate {
	ids := make([]xid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEmailTemplateIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (oc *OrganizationCreate) AddAPIKeyIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddAPIKeyIDs(ids...)
	return oc
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (oc *OrganizationCreate) AddAPIKeys(a ...*ApiKey) *OrganizationCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oc.AddAPIKeyIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (oc *OrganizationCreate) AddWebhookIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddWebhookIDs(ids...)
	return oc
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (oc *OrganizationCreate) AddWebhooks(w ...*Webhook) *OrganizationCreate {
	ids := make([]xid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return oc.AddWebhookIDs(ids...)
}

// AddFeatureFlagIDs adds the "feature_flags" edge to the OrganizationFeature entity by IDs.
func (oc *OrganizationCreate) AddFeatureFlagIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddFeatureFlagIDs(ids...)
	return oc
}

// AddFeatureFlags adds the "feature_flags" edges to the OrganizationFeature entity.
func (oc *OrganizationCreate) AddFeatureFlags(o ...*OrganizationFeature) *OrganizationCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddFeatureFlagIDs(ids...)
}

// AddIdentityProviderIDs adds the "identity_providers" edge to the IdentityProvider entity by IDs.
func (oc *OrganizationCreate) AddIdentityProviderIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddIdentityProviderIDs(ids...)
	return oc
}

// AddIdentityProviders adds the "identity_providers" edges to the IdentityProvider entity.
func (oc *OrganizationCreate) AddIdentityProviders(i ...*IdentityProvider) *OrganizationCreate {
	ids := make([]xid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddIdentityProviderIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OAuthClient entity by IDs.
func (oc *OrganizationCreate) AddOauthClientIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddOauthClientIDs(ids...)
	return oc
}

// AddOauthClients adds the "oauth_clients" edges to the OAuthClient entity.
func (oc *OrganizationCreate) AddOauthClients(o ...*OAuthClient) *OrganizationCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOauthClientIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (oc *OrganizationCreate) AddRoleIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddRoleIDs(ids...)
	return oc
}

// AddRoles adds the "roles" edges to the Role entity.
func (oc *OrganizationCreate) AddRoles(r ...*Role) *OrganizationCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oc.AddRoleIDs(ids...)
}

// AddUserRoleContextIDs adds the "user_role_contexts" edge to the UserRole entity by IDs.
func (oc *OrganizationCreate) AddUserRoleContextIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddUserRoleContextIDs(ids...)
	return oc
}

// AddUserRoleContexts adds the "user_role_contexts" edges to the UserRole entity.
func (oc *OrganizationCreate) AddUserRoleContexts(u ...*UserRole) *OrganizationCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserRoleContextIDs(ids...)
}

// AddUserPermissionContextIDs adds the "user_permission_contexts" edge to the UserPermission entity by IDs.
func (oc *OrganizationCreate) AddUserPermissionContextIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddUserPermissionContextIDs(ids...)
	return oc
}

// AddUserPermissionContexts adds the "user_permission_contexts" edges to the UserPermission entity.
func (oc *OrganizationCreate) AddUserPermissionContexts(u ...*UserPermission) *OrganizationCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserPermissionContextIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (oc *OrganizationCreate) AddAuditLogIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddAuditLogIDs(ids...)
	return oc
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (oc *OrganizationCreate) AddAuditLogs(a ...*Audit) *OrganizationCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oc.AddAuditLogIDs(ids...)
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (oc *OrganizationCreate) AddOrganizationProviderIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddOrganizationProviderIDs(ids...)
	return oc
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (oc *OrganizationCreate) AddOrganizationProviders(o ...*OrganizationProvider) *OrganizationCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrganizationProviderIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (oc *OrganizationCreate) AddActivityIDs(ids ...xid.ID) *OrganizationCreate {
	oc.mutation.AddActivityIDs(ids...)
	return oc
}

// AddActivities adds the "activities" edges to the Activity entity.
func (oc *OrganizationCreate) AddActivities(a ...*Activity) *OrganizationCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oc.AddActivityIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (oc *OrganizationCreate) Mutation() *OrganizationMutation {
	return oc.mutation
}

// Save creates the Organization in the database.
func (oc *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrganizationCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrganizationCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := organization.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := organization.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Plan(); !ok {
		v := organization.DefaultPlan
		oc.mutation.SetPlan(v)
	}
	if _, ok := oc.mutation.Active(); !ok {
		v := organization.DefaultActive
		oc.mutation.SetActive(v)
	}
	if _, ok := oc.mutation.TrialUsed(); !ok {
		v := organization.DefaultTrialUsed
		oc.mutation.SetTrialUsed(v)
	}
	if _, ok := oc.mutation.OrgType(); !ok {
		v := organization.DefaultOrgType
		oc.mutation.SetOrgType(v)
	}
	if _, ok := oc.mutation.IsPlatformOrganization(); !ok {
		v := organization.DefaultIsPlatformOrganization
		oc.mutation.SetIsPlatformOrganization(v)
	}
	if _, ok := oc.mutation.ExternalUserLimit(); !ok {
		v := organization.DefaultExternalUserLimit
		oc.mutation.SetExternalUserLimit(v)
	}
	if _, ok := oc.mutation.EndUserLimit(); !ok {
		v := organization.DefaultEndUserLimit
		oc.mutation.SetEndUserLimit(v)
	}
	if _, ok := oc.mutation.SSOEnabled(); !ok {
		v := organization.DefaultSSOEnabled
		oc.mutation.SetSSOEnabled(v)
	}
	if _, ok := oc.mutation.SubscriptionStatus(); !ok {
		v := organization.DefaultSubscriptionStatus
		oc.mutation.SetSubscriptionStatus(v)
	}
	if _, ok := oc.mutation.AuthServiceEnabled(); !ok {
		v := organization.DefaultAuthServiceEnabled
		oc.mutation.SetAuthServiceEnabled(v)
	}
	if _, ok := oc.mutation.APIRequestLimit(); !ok {
		v := organization.DefaultAPIRequestLimit
		oc.mutation.SetAPIRequestLimit(v)
	}
	if _, ok := oc.mutation.APIRequestsUsed(); !ok {
		v := organization.DefaultAPIRequestsUsed
		oc.mutation.SetAPIRequestsUsed(v)
	}
	if _, ok := oc.mutation.CurrentExternalUsers(); !ok {
		v := organization.DefaultCurrentExternalUsers
		oc.mutation.SetCurrentExternalUsers(v)
	}
	if _, ok := oc.mutation.CurrentEndUsers(); !ok {
		v := organization.DefaultCurrentEndUsers
		oc.mutation.SetCurrentEndUsers(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := organization.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrganizationCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Organization.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Organization.updated_at"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Organization.name"`)}
	}
	if v, ok := oc.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Organization.slug"`)}
	}
	if v, ok := oc.mutation.Slug(); ok {
		if err := organization.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Organization.slug": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Plan(); !ok {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required field "Organization.plan"`)}
	}
	if _, ok := oc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Organization.active"`)}
	}
	if _, ok := oc.mutation.TrialUsed(); !ok {
		return &ValidationError{Name: "trial_used", err: errors.New(`ent: missing required field "Organization.trial_used"`)}
	}
	if _, ok := oc.mutation.OrgType(); !ok {
		return &ValidationError{Name: "org_type", err: errors.New(`ent: missing required field "Organization.org_type"`)}
	}
	if v, ok := oc.mutation.OrgType(); ok {
		if err := organization.OrgTypeValidator(v); err != nil {
			return &ValidationError{Name: "org_type", err: fmt.Errorf(`ent: validator failed for field "Organization.org_type": %w`, err)}
		}
	}
	if _, ok := oc.mutation.IsPlatformOrganization(); !ok {
		return &ValidationError{Name: "is_platform_organization", err: errors.New(`ent: missing required field "Organization.is_platform_organization"`)}
	}
	if _, ok := oc.mutation.ExternalUserLimit(); !ok {
		return &ValidationError{Name: "external_user_limit", err: errors.New(`ent: missing required field "Organization.external_user_limit"`)}
	}
	if _, ok := oc.mutation.EndUserLimit(); !ok {
		return &ValidationError{Name: "end_user_limit", err: errors.New(`ent: missing required field "Organization.end_user_limit"`)}
	}
	if _, ok := oc.mutation.SSOEnabled(); !ok {
		return &ValidationError{Name: "sso_enabled", err: errors.New(`ent: missing required field "Organization.sso_enabled"`)}
	}
	if _, ok := oc.mutation.SubscriptionStatus(); !ok {
		return &ValidationError{Name: "subscription_status", err: errors.New(`ent: missing required field "Organization.subscription_status"`)}
	}
	if v, ok := oc.mutation.SubscriptionStatus(); ok {
		if err := organization.SubscriptionStatusValidator(v); err != nil {
			return &ValidationError{Name: "subscription_status", err: fmt.Errorf(`ent: validator failed for field "Organization.subscription_status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.AuthServiceEnabled(); !ok {
		return &ValidationError{Name: "auth_service_enabled", err: errors.New(`ent: missing required field "Organization.auth_service_enabled"`)}
	}
	if _, ok := oc.mutation.APIRequestLimit(); !ok {
		return &ValidationError{Name: "api_request_limit", err: errors.New(`ent: missing required field "Organization.api_request_limit"`)}
	}
	if _, ok := oc.mutation.APIRequestsUsed(); !ok {
		return &ValidationError{Name: "api_requests_used", err: errors.New(`ent: missing required field "Organization.api_requests_used"`)}
	}
	if _, ok := oc.mutation.CurrentExternalUsers(); !ok {
		return &ValidationError{Name: "current_external_users", err: errors.New(`ent: missing required field "Organization.current_external_users"`)}
	}
	if _, ok := oc.mutation.CurrentEndUsers(); !ok {
		return &ValidationError{Name: "current_end_users", err: errors.New(`ent: missing required field "Organization.current_end_users"`)}
	}
	return nil
}

func (oc *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := oc.mutation.Domains(); ok {
		_spec.SetField(organization.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := oc.mutation.VerifiedDomains(); ok {
		_spec.SetField(organization.FieldVerifiedDomains, field.TypeJSON, value)
		_node.VerifiedDomains = value
	}
	if value, ok := oc.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := oc.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := oc.mutation.Plan(); ok {
		_spec.SetField(organization.FieldPlan, field.TypeString, value)
		_node.Plan = value
	}
	if value, ok := oc.mutation.Active(); ok {
		_spec.SetField(organization.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := oc.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := oc.mutation.TrialEndsAt(); ok {
		_spec.SetField(organization.FieldTrialEndsAt, field.TypeTime, value)
		_node.TrialEndsAt = &value
	}
	if value, ok := oc.mutation.TrialUsed(); ok {
		_spec.SetField(organization.FieldTrialUsed, field.TypeBool, value)
		_node.TrialUsed = value
	}
	if value, ok := oc.mutation.OwnerID(); ok {
		_spec.SetField(organization.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := oc.mutation.OrgType(); ok {
		_spec.SetField(organization.FieldOrgType, field.TypeEnum, value)
		_node.OrgType = value
	}
	if value, ok := oc.mutation.IsPlatformOrganization(); ok {
		_spec.SetField(organization.FieldIsPlatformOrganization, field.TypeBool, value)
		_node.IsPlatformOrganization = value
	}
	if value, ok := oc.mutation.ExternalUserLimit(); ok {
		_spec.SetField(organization.FieldExternalUserLimit, field.TypeInt, value)
		_node.ExternalUserLimit = value
	}
	if value, ok := oc.mutation.EndUserLimit(); ok {
		_spec.SetField(organization.FieldEndUserLimit, field.TypeInt, value)
		_node.EndUserLimit = value
	}
	if value, ok := oc.mutation.SSOEnabled(); ok {
		_spec.SetField(organization.FieldSSOEnabled, field.TypeBool, value)
		_node.SSOEnabled = value
	}
	if value, ok := oc.mutation.SSODomain(); ok {
		_spec.SetField(organization.FieldSSODomain, field.TypeString, value)
		_node.SSODomain = value
	}
	if value, ok := oc.mutation.SubscriptionID(); ok {
		_spec.SetField(organization.FieldSubscriptionID, field.TypeString, value)
		_node.SubscriptionID = value
	}
	if value, ok := oc.mutation.CustomerID(); ok {
		_spec.SetField(organization.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := oc.mutation.SubscriptionStatus(); ok {
		_spec.SetField(organization.FieldSubscriptionStatus, field.TypeEnum, value)
		_node.SubscriptionStatus = value
	}
	if value, ok := oc.mutation.AuthServiceEnabled(); ok {
		_spec.SetField(organization.FieldAuthServiceEnabled, field.TypeBool, value)
		_node.AuthServiceEnabled = value
	}
	if value, ok := oc.mutation.AuthConfig(); ok {
		_spec.SetField(organization.FieldAuthConfig, field.TypeJSON, value)
		_node.AuthConfig = value
	}
	if value, ok := oc.mutation.AuthDomain(); ok {
		_spec.SetField(organization.FieldAuthDomain, field.TypeString, value)
		_node.AuthDomain = value
	}
	if value, ok := oc.mutation.APIRequestLimit(); ok {
		_spec.SetField(organization.FieldAPIRequestLimit, field.TypeInt, value)
		_node.APIRequestLimit = value
	}
	if value, ok := oc.mutation.APIRequestsUsed(); ok {
		_spec.SetField(organization.FieldAPIRequestsUsed, field.TypeInt, value)
		_node.APIRequestsUsed = value
	}
	if value, ok := oc.mutation.CurrentExternalUsers(); ok {
		_spec.SetField(organization.FieldCurrentExternalUsers, field.TypeInt, value)
		_node.CurrentExternalUsers = value
	}
	if value, ok := oc.mutation.CurrentEndUsers(); ok {
		_spec.SetField(organization.FieldCurrentEndUsers, field.TypeInt, value)
		_node.CurrentEndUsers = value
	}
	if nodes := oc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SmsTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smstemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EmailTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.FeatureFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.IdentityProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UserRoleContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UserPermissionContextsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *OrganizationCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertOne {
	oc.conflict = opts
	return &OrganizationUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrganizationCreate) OnConflictColumns(columns ...string) *OrganizationUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertOne{
		create: oc,
	}
}

type (
	// OrganizationUpsertOne is the builder for "upsert"-ing
	//  one Organization node.
	OrganizationUpsertOne struct {
		create *OrganizationCreate
	}

	// OrganizationUpsert is the "OnConflict" setter.
	OrganizationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsert) SetUpdatedAt(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateUpdatedAt() *OrganizationUpsert {
	u.SetExcluded(organization.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationUpsert) SetDeletedAt(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDeletedAt() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationUpsert) ClearDeletedAt() *OrganizationUpsert {
	u.SetNull(organization.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *OrganizationUpsert) SetName(v string) *OrganizationUpsert {
	u.Set(organization.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateName() *OrganizationUpsert {
	u.SetExcluded(organization.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *OrganizationUpsert) SetSlug(v string) *OrganizationUpsert {
	u.Set(organization.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSlug() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSlug)
	return u
}

// SetDomains sets the "domains" field.
func (u *OrganizationUpsert) SetDomains(v []string) *OrganizationUpsert {
	u.Set(organization.FieldDomains, v)
	return u
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDomains() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDomains)
	return u
}

// ClearDomains clears the value of the "domains" field.
func (u *OrganizationUpsert) ClearDomains() *OrganizationUpsert {
	u.SetNull(organization.FieldDomains)
	return u
}

// SetVerifiedDomains sets the "verified_domains" field.
func (u *OrganizationUpsert) SetVerifiedDomains(v []string) *OrganizationUpsert {
	u.Set(organization.FieldVerifiedDomains, v)
	return u
}

// UpdateVerifiedDomains sets the "verified_domains" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateVerifiedDomains() *OrganizationUpsert {
	u.SetExcluded(organization.FieldVerifiedDomains)
	return u
}

// ClearVerifiedDomains clears the value of the "verified_domains" field.
func (u *OrganizationUpsert) ClearVerifiedDomains() *OrganizationUpsert {
	u.SetNull(organization.FieldVerifiedDomains)
	return u
}

// SetDomain sets the "domain" field.
func (u *OrganizationUpsert) SetDomain(v string) *OrganizationUpsert {
	u.Set(organization.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDomain() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *OrganizationUpsert) ClearDomain() *OrganizationUpsert {
	u.SetNull(organization.FieldDomain)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsert) SetLogoURL(v string) *OrganizationUpsert {
	u.Set(organization.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateLogoURL() *OrganizationUpsert {
	u.SetExcluded(organization.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsert) ClearLogoURL() *OrganizationUpsert {
	u.SetNull(organization.FieldLogoURL)
	return u
}

// SetPlan sets the "plan" field.
func (u *OrganizationUpsert) SetPlan(v string) *OrganizationUpsert {
	u.Set(organization.FieldPlan, v)
	return u
}

// UpdatePlan sets the "plan" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdatePlan() *OrganizationUpsert {
	u.SetExcluded(organization.FieldPlan)
	return u
}

// SetActive sets the "active" field.
func (u *OrganizationUpsert) SetActive(v bool) *OrganizationUpsert {
	u.Set(organization.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateActive() *OrganizationUpsert {
	u.SetExcluded(organization.FieldActive)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationUpsert) SetMetadata(v map[string]interface{}) *OrganizationUpsert {
	u.Set(organization.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateMetadata() *OrganizationUpsert {
	u.SetExcluded(organization.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationUpsert) ClearMetadata() *OrganizationUpsert {
	u.SetNull(organization.FieldMetadata)
	return u
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (u *OrganizationUpsert) SetTrialEndsAt(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldTrialEndsAt, v)
	return u
}

// UpdateTrialEndsAt sets the "trial_ends_at" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateTrialEndsAt() *OrganizationUpsert {
	u.SetExcluded(organization.FieldTrialEndsAt)
	return u
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (u *OrganizationUpsert) ClearTrialEndsAt() *OrganizationUpsert {
	u.SetNull(organization.FieldTrialEndsAt)
	return u
}

// SetTrialUsed sets the "trial_used" field.
func (u *OrganizationUpsert) SetTrialUsed(v bool) *OrganizationUpsert {
	u.Set(organization.FieldTrialUsed, v)
	return u
}

// UpdateTrialUsed sets the "trial_used" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateTrialUsed() *OrganizationUpsert {
	u.SetExcluded(organization.FieldTrialUsed)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *OrganizationUpsert) SetOwnerID(v xid.ID) *OrganizationUpsert {
	u.Set(organization.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateOwnerID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldOwnerID)
	return u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrganizationUpsert) ClearOwnerID() *OrganizationUpsert {
	u.SetNull(organization.FieldOwnerID)
	return u
}

// SetOrgType sets the "org_type" field.
func (u *OrganizationUpsert) SetOrgType(v model.OrgType) *OrganizationUpsert {
	u.Set(organization.FieldOrgType, v)
	return u
}

// UpdateOrgType sets the "org_type" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateOrgType() *OrganizationUpsert {
	u.SetExcluded(organization.FieldOrgType)
	return u
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (u *OrganizationUpsert) SetIsPlatformOrganization(v bool) *OrganizationUpsert {
	u.Set(organization.FieldIsPlatformOrganization, v)
	return u
}

// UpdateIsPlatformOrganization sets the "is_platform_organization" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateIsPlatformOrganization() *OrganizationUpsert {
	u.SetExcluded(organization.FieldIsPlatformOrganization)
	return u
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (u *OrganizationUpsert) SetExternalUserLimit(v int) *OrganizationUpsert {
	u.Set(organization.FieldExternalUserLimit, v)
	return u
}

// UpdateExternalUserLimit sets the "external_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateExternalUserLimit() *OrganizationUpsert {
	u.SetExcluded(organization.FieldExternalUserLimit)
	return u
}

// AddExternalUserLimit adds v to the "external_user_limit" field.
func (u *OrganizationUpsert) AddExternalUserLimit(v int) *OrganizationUpsert {
	u.Add(organization.FieldExternalUserLimit, v)
	return u
}

// SetEndUserLimit sets the "end_user_limit" field.
func (u *OrganizationUpsert) SetEndUserLimit(v int) *OrganizationUpsert {
	u.Set(organization.FieldEndUserLimit, v)
	return u
}

// UpdateEndUserLimit sets the "end_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateEndUserLimit() *OrganizationUpsert {
	u.SetExcluded(organization.FieldEndUserLimit)
	return u
}

// AddEndUserLimit adds v to the "end_user_limit" field.
func (u *OrganizationUpsert) AddEndUserLimit(v int) *OrganizationUpsert {
	u.Add(organization.FieldEndUserLimit, v)
	return u
}

// SetSSOEnabled sets the "sso_enabled" field.
func (u *OrganizationUpsert) SetSSOEnabled(v bool) *OrganizationUpsert {
	u.Set(organization.FieldSSOEnabled, v)
	return u
}

// UpdateSSOEnabled sets the "sso_enabled" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSSOEnabled() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSSOEnabled)
	return u
}

// SetSSODomain sets the "sso_domain" field.
func (u *OrganizationUpsert) SetSSODomain(v string) *OrganizationUpsert {
	u.Set(organization.FieldSSODomain, v)
	return u
}

// UpdateSSODomain sets the "sso_domain" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSSODomain() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSSODomain)
	return u
}

// ClearSSODomain clears the value of the "sso_domain" field.
func (u *OrganizationUpsert) ClearSSODomain() *OrganizationUpsert {
	u.SetNull(organization.FieldSSODomain)
	return u
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *OrganizationUpsert) SetSubscriptionID(v string) *OrganizationUpsert {
	u.Set(organization.FieldSubscriptionID, v)
	return u
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSubscriptionID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSubscriptionID)
	return u
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *OrganizationUpsert) ClearSubscriptionID() *OrganizationUpsert {
	u.SetNull(organization.FieldSubscriptionID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *OrganizationUpsert) SetCustomerID(v string) *OrganizationUpsert {
	u.Set(organization.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateCustomerID() *OrganizationUpsert {
	u.SetExcluded(organization.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *OrganizationUpsert) ClearCustomerID() *OrganizationUpsert {
	u.SetNull(organization.FieldCustomerID)
	return u
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (u *OrganizationUpsert) SetSubscriptionStatus(v organization.SubscriptionStatus) *OrganizationUpsert {
	u.Set(organization.FieldSubscriptionStatus, v)
	return u
}

// UpdateSubscriptionStatus sets the "subscription_status" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSubscriptionStatus() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSubscriptionStatus)
	return u
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (u *OrganizationUpsert) SetAuthServiceEnabled(v bool) *OrganizationUpsert {
	u.Set(organization.FieldAuthServiceEnabled, v)
	return u
}

// UpdateAuthServiceEnabled sets the "auth_service_enabled" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAuthServiceEnabled() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAuthServiceEnabled)
	return u
}

// SetAuthConfig sets the "auth_config" field.
func (u *OrganizationUpsert) SetAuthConfig(v map[string]interface{}) *OrganizationUpsert {
	u.Set(organization.FieldAuthConfig, v)
	return u
}

// UpdateAuthConfig sets the "auth_config" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAuthConfig() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAuthConfig)
	return u
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (u *OrganizationUpsert) ClearAuthConfig() *OrganizationUpsert {
	u.SetNull(organization.FieldAuthConfig)
	return u
}

// SetAuthDomain sets the "auth_domain" field.
func (u *OrganizationUpsert) SetAuthDomain(v string) *OrganizationUpsert {
	u.Set(organization.FieldAuthDomain, v)
	return u
}

// UpdateAuthDomain sets the "auth_domain" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAuthDomain() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAuthDomain)
	return u
}

// ClearAuthDomain clears the value of the "auth_domain" field.
func (u *OrganizationUpsert) ClearAuthDomain() *OrganizationUpsert {
	u.SetNull(organization.FieldAuthDomain)
	return u
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (u *OrganizationUpsert) SetAPIRequestLimit(v int) *OrganizationUpsert {
	u.Set(organization.FieldAPIRequestLimit, v)
	return u
}

// UpdateAPIRequestLimit sets the "api_request_limit" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAPIRequestLimit() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAPIRequestLimit)
	return u
}

// AddAPIRequestLimit adds v to the "api_request_limit" field.
func (u *OrganizationUpsert) AddAPIRequestLimit(v int) *OrganizationUpsert {
	u.Add(organization.FieldAPIRequestLimit, v)
	return u
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (u *OrganizationUpsert) SetAPIRequestsUsed(v int) *OrganizationUpsert {
	u.Set(organization.FieldAPIRequestsUsed, v)
	return u
}

// UpdateAPIRequestsUsed sets the "api_requests_used" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAPIRequestsUsed() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAPIRequestsUsed)
	return u
}

// AddAPIRequestsUsed adds v to the "api_requests_used" field.
func (u *OrganizationUpsert) AddAPIRequestsUsed(v int) *OrganizationUpsert {
	u.Add(organization.FieldAPIRequestsUsed, v)
	return u
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (u *OrganizationUpsert) SetCurrentExternalUsers(v int) *OrganizationUpsert {
	u.Set(organization.FieldCurrentExternalUsers, v)
	return u
}

// UpdateCurrentExternalUsers sets the "current_external_users" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateCurrentExternalUsers() *OrganizationUpsert {
	u.SetExcluded(organization.FieldCurrentExternalUsers)
	return u
}

// AddCurrentExternalUsers adds v to the "current_external_users" field.
func (u *OrganizationUpsert) AddCurrentExternalUsers(v int) *OrganizationUpsert {
	u.Add(organization.FieldCurrentExternalUsers, v)
	return u
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (u *OrganizationUpsert) SetCurrentEndUsers(v int) *OrganizationUpsert {
	u.Set(organization.FieldCurrentEndUsers, v)
	return u
}

// UpdateCurrentEndUsers sets the "current_end_users" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateCurrentEndUsers() *OrganizationUpsert {
	u.SetExcluded(organization.FieldCurrentEndUsers)
	return u
}

// AddCurrentEndUsers adds v to the "current_end_users" field.
func (u *OrganizationUpsert) AddCurrentEndUsers(v int) *OrganizationUpsert {
	u.Add(organization.FieldCurrentEndUsers, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertOne) UpdateNewValues() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(organization.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(organization.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationUpsertOne) Ignore() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertOne) DoNothing() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreate.OnConflict
// documentation for more info.
func (u *OrganizationUpsertOne) Update(set func(*OrganizationUpsert)) *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsertOne) SetUpdatedAt(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateUpdatedAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationUpsertOne) SetDeletedAt(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDeletedAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationUpsertOne) ClearDeletedAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *OrganizationUpsertOne) SetName(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateName() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *OrganizationUpsertOne) SetSlug(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSlug() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSlug()
	})
}

// SetDomains sets the "domains" field.
func (u *OrganizationUpsertOne) SetDomains(v []string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDomains() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *OrganizationUpsertOne) ClearDomains() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDomains()
	})
}

// SetVerifiedDomains sets the "verified_domains" field.
func (u *OrganizationUpsertOne) SetVerifiedDomains(v []string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetVerifiedDomains(v)
	})
}

// UpdateVerifiedDomains sets the "verified_domains" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateVerifiedDomains() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateVerifiedDomains()
	})
}

// ClearVerifiedDomains clears the value of the "verified_domains" field.
func (u *OrganizationUpsertOne) ClearVerifiedDomains() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearVerifiedDomains()
	})
}

// SetDomain sets the "domain" field.
func (u *OrganizationUpsertOne) SetDomain(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *OrganizationUpsertOne) ClearDomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDomain()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsertOne) SetLogoURL(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateLogoURL() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsertOne) ClearLogoURL() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearLogoURL()
	})
}

// SetPlan sets the "plan" field.
func (u *OrganizationUpsertOne) SetPlan(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetPlan(v)
	})
}

// UpdatePlan sets the "plan" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdatePlan() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdatePlan()
	})
}

// SetActive sets the "active" field.
func (u *OrganizationUpsertOne) SetActive(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateActive() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateActive()
	})
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationUpsertOne) SetMetadata(v map[string]interface{}) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateMetadata() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationUpsertOne) ClearMetadata() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearMetadata()
	})
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (u *OrganizationUpsertOne) SetTrialEndsAt(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetTrialEndsAt(v)
	})
}

// UpdateTrialEndsAt sets the "trial_ends_at" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateTrialEndsAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateTrialEndsAt()
	})
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (u *OrganizationUpsertOne) ClearTrialEndsAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearTrialEndsAt()
	})
}

// SetTrialUsed sets the "trial_used" field.
func (u *OrganizationUpsertOne) SetTrialUsed(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetTrialUsed(v)
	})
}

// UpdateTrialUsed sets the "trial_used" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateTrialUsed() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateTrialUsed()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrganizationUpsertOne) SetOwnerID(v xid.ID) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateOwnerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrganizationUpsertOne) ClearOwnerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearOwnerID()
	})
}

// SetOrgType sets the "org_type" field.
func (u *OrganizationUpsertOne) SetOrgType(v model.OrgType) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOrgType(v)
	})
}

// UpdateOrgType sets the "org_type" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateOrgType() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOrgType()
	})
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (u *OrganizationUpsertOne) SetIsPlatformOrganization(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIsPlatformOrganization(v)
	})
}

// UpdateIsPlatformOrganization sets the "is_platform_organization" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateIsPlatformOrganization() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIsPlatformOrganization()
	})
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (u *OrganizationUpsertOne) SetExternalUserLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetExternalUserLimit(v)
	})
}

// AddExternalUserLimit adds v to the "external_user_limit" field.
func (u *OrganizationUpsertOne) AddExternalUserLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddExternalUserLimit(v)
	})
}

// UpdateExternalUserLimit sets the "external_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateExternalUserLimit() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateExternalUserLimit()
	})
}

// SetEndUserLimit sets the "end_user_limit" field.
func (u *OrganizationUpsertOne) SetEndUserLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetEndUserLimit(v)
	})
}

// AddEndUserLimit adds v to the "end_user_limit" field.
func (u *OrganizationUpsertOne) AddEndUserLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddEndUserLimit(v)
	})
}

// UpdateEndUserLimit sets the "end_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateEndUserLimit() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateEndUserLimit()
	})
}

// SetSSOEnabled sets the "sso_enabled" field.
func (u *OrganizationUpsertOne) SetSSOEnabled(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSSOEnabled(v)
	})
}

// UpdateSSOEnabled sets the "sso_enabled" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSSOEnabled() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSSOEnabled()
	})
}

// SetSSODomain sets the "sso_domain" field.
func (u *OrganizationUpsertOne) SetSSODomain(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSSODomain(v)
	})
}

// UpdateSSODomain sets the "sso_domain" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSSODomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSSODomain()
	})
}

// ClearSSODomain clears the value of the "sso_domain" field.
func (u *OrganizationUpsertOne) ClearSSODomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSSODomain()
	})
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *OrganizationUpsertOne) SetSubscriptionID(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSubscriptionID(v)
	})
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSubscriptionID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSubscriptionID()
	})
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *OrganizationUpsertOne) ClearSubscriptionID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSubscriptionID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *OrganizationUpsertOne) SetCustomerID(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateCustomerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *OrganizationUpsertOne) ClearCustomerID() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCustomerID()
	})
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (u *OrganizationUpsertOne) SetSubscriptionStatus(v organization.SubscriptionStatus) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSubscriptionStatus(v)
	})
}

// UpdateSubscriptionStatus sets the "subscription_status" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSubscriptionStatus() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSubscriptionStatus()
	})
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (u *OrganizationUpsertOne) SetAuthServiceEnabled(v bool) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthServiceEnabled(v)
	})
}

// UpdateAuthServiceEnabled sets the "auth_service_enabled" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAuthServiceEnabled() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthServiceEnabled()
	})
}

// SetAuthConfig sets the "auth_config" field.
func (u *OrganizationUpsertOne) SetAuthConfig(v map[string]interface{}) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthConfig(v)
	})
}

// UpdateAuthConfig sets the "auth_config" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAuthConfig() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthConfig()
	})
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (u *OrganizationUpsertOne) ClearAuthConfig() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAuthConfig()
	})
}

// SetAuthDomain sets the "auth_domain" field.
func (u *OrganizationUpsertOne) SetAuthDomain(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthDomain(v)
	})
}

// UpdateAuthDomain sets the "auth_domain" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAuthDomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthDomain()
	})
}

// ClearAuthDomain clears the value of the "auth_domain" field.
func (u *OrganizationUpsertOne) ClearAuthDomain() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAuthDomain()
	})
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (u *OrganizationUpsertOne) SetAPIRequestLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAPIRequestLimit(v)
	})
}

// AddAPIRequestLimit adds v to the "api_request_limit" field.
func (u *OrganizationUpsertOne) AddAPIRequestLimit(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddAPIRequestLimit(v)
	})
}

// UpdateAPIRequestLimit sets the "api_request_limit" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAPIRequestLimit() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAPIRequestLimit()
	})
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (u *OrganizationUpsertOne) SetAPIRequestsUsed(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAPIRequestsUsed(v)
	})
}

// AddAPIRequestsUsed adds v to the "api_requests_used" field.
func (u *OrganizationUpsertOne) AddAPIRequestsUsed(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddAPIRequestsUsed(v)
	})
}

// UpdateAPIRequestsUsed sets the "api_requests_used" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAPIRequestsUsed() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAPIRequestsUsed()
	})
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (u *OrganizationUpsertOne) SetCurrentExternalUsers(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCurrentExternalUsers(v)
	})
}

// AddCurrentExternalUsers adds v to the "current_external_users" field.
func (u *OrganizationUpsertOne) AddCurrentExternalUsers(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCurrentExternalUsers(v)
	})
}

// UpdateCurrentExternalUsers sets the "current_external_users" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateCurrentExternalUsers() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCurrentExternalUsers()
	})
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (u *OrganizationUpsertOne) SetCurrentEndUsers(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCurrentEndUsers(v)
	})
}

// AddCurrentEndUsers adds v to the "current_end_users" field.
func (u *OrganizationUpsertOne) AddCurrentEndUsers(v int) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCurrentEndUsers(v)
	})
}

// UpdateCurrentEndUsers sets the "current_end_users" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateCurrentEndUsers() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCurrentEndUsers()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrganizationUpsertOne.ID is not supported by MySQL driver. Use OrganizationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	err      error
	builders []*OrganizationCreate
	conflict []sql.ConflictOption
}

// Save creates the Organization entities in the database.
func (ocb *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Organization, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrganizationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertBulk {
	ocb.conflict = opts
	return &OrganizationUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrganizationCreateBulk) OnConflictColumns(columns ...string) *OrganizationUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertBulk{
		create: ocb,
	}
}

// OrganizationUpsertBulk is the builder for "upsert"-ing
// a bulk of Organization nodes.
type OrganizationUpsertBulk struct {
	create *OrganizationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organization.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) UpdateNewValues() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(organization.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(organization.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) Ignore() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertBulk) DoNothing() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationUpsertBulk) Update(set func(*OrganizationUpsert)) *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsertBulk) SetUpdatedAt(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateUpdatedAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationUpsertBulk) SetDeletedAt(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDeletedAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationUpsertBulk) ClearDeletedAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *OrganizationUpsertBulk) SetName(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateName() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *OrganizationUpsertBulk) SetSlug(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSlug() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSlug()
	})
}

// SetDomains sets the "domains" field.
func (u *OrganizationUpsertBulk) SetDomains(v []string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDomains(v)
	})
}

// UpdateDomains sets the "domains" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDomains() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDomains()
	})
}

// ClearDomains clears the value of the "domains" field.
func (u *OrganizationUpsertBulk) ClearDomains() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDomains()
	})
}

// SetVerifiedDomains sets the "verified_domains" field.
func (u *OrganizationUpsertBulk) SetVerifiedDomains(v []string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetVerifiedDomains(v)
	})
}

// UpdateVerifiedDomains sets the "verified_domains" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateVerifiedDomains() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateVerifiedDomains()
	})
}

// ClearVerifiedDomains clears the value of the "verified_domains" field.
func (u *OrganizationUpsertBulk) ClearVerifiedDomains() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearVerifiedDomains()
	})
}

// SetDomain sets the "domain" field.
func (u *OrganizationUpsertBulk) SetDomain(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *OrganizationUpsertBulk) ClearDomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDomain()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsertBulk) SetLogoURL(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateLogoURL() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsertBulk) ClearLogoURL() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearLogoURL()
	})
}

// SetPlan sets the "plan" field.
func (u *OrganizationUpsertBulk) SetPlan(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetPlan(v)
	})
}

// UpdatePlan sets the "plan" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdatePlan() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdatePlan()
	})
}

// SetActive sets the "active" field.
func (u *OrganizationUpsertBulk) SetActive(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateActive() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateActive()
	})
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationUpsertBulk) SetMetadata(v map[string]interface{}) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateMetadata() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationUpsertBulk) ClearMetadata() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearMetadata()
	})
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (u *OrganizationUpsertBulk) SetTrialEndsAt(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetTrialEndsAt(v)
	})
}

// UpdateTrialEndsAt sets the "trial_ends_at" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateTrialEndsAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateTrialEndsAt()
	})
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (u *OrganizationUpsertBulk) ClearTrialEndsAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearTrialEndsAt()
	})
}

// SetTrialUsed sets the "trial_used" field.
func (u *OrganizationUpsertBulk) SetTrialUsed(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetTrialUsed(v)
	})
}

// UpdateTrialUsed sets the "trial_used" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateTrialUsed() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateTrialUsed()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrganizationUpsertBulk) SetOwnerID(v xid.ID) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateOwnerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrganizationUpsertBulk) ClearOwnerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearOwnerID()
	})
}

// SetOrgType sets the "org_type" field.
func (u *OrganizationUpsertBulk) SetOrgType(v model.OrgType) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetOrgType(v)
	})
}

// UpdateOrgType sets the "org_type" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateOrgType() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateOrgType()
	})
}

// SetIsPlatformOrganization sets the "is_platform_organization" field.
func (u *OrganizationUpsertBulk) SetIsPlatformOrganization(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIsPlatformOrganization(v)
	})
}

// UpdateIsPlatformOrganization sets the "is_platform_organization" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateIsPlatformOrganization() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIsPlatformOrganization()
	})
}

// SetExternalUserLimit sets the "external_user_limit" field.
func (u *OrganizationUpsertBulk) SetExternalUserLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetExternalUserLimit(v)
	})
}

// AddExternalUserLimit adds v to the "external_user_limit" field.
func (u *OrganizationUpsertBulk) AddExternalUserLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddExternalUserLimit(v)
	})
}

// UpdateExternalUserLimit sets the "external_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateExternalUserLimit() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateExternalUserLimit()
	})
}

// SetEndUserLimit sets the "end_user_limit" field.
func (u *OrganizationUpsertBulk) SetEndUserLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetEndUserLimit(v)
	})
}

// AddEndUserLimit adds v to the "end_user_limit" field.
func (u *OrganizationUpsertBulk) AddEndUserLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddEndUserLimit(v)
	})
}

// UpdateEndUserLimit sets the "end_user_limit" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateEndUserLimit() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateEndUserLimit()
	})
}

// SetSSOEnabled sets the "sso_enabled" field.
func (u *OrganizationUpsertBulk) SetSSOEnabled(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSSOEnabled(v)
	})
}

// UpdateSSOEnabled sets the "sso_enabled" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSSOEnabled() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSSOEnabled()
	})
}

// SetSSODomain sets the "sso_domain" field.
func (u *OrganizationUpsertBulk) SetSSODomain(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSSODomain(v)
	})
}

// UpdateSSODomain sets the "sso_domain" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSSODomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSSODomain()
	})
}

// ClearSSODomain clears the value of the "sso_domain" field.
func (u *OrganizationUpsertBulk) ClearSSODomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSSODomain()
	})
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *OrganizationUpsertBulk) SetSubscriptionID(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSubscriptionID(v)
	})
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSubscriptionID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSubscriptionID()
	})
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *OrganizationUpsertBulk) ClearSubscriptionID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSubscriptionID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *OrganizationUpsertBulk) SetCustomerID(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateCustomerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *OrganizationUpsertBulk) ClearCustomerID() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearCustomerID()
	})
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (u *OrganizationUpsertBulk) SetSubscriptionStatus(v organization.SubscriptionStatus) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSubscriptionStatus(v)
	})
}

// UpdateSubscriptionStatus sets the "subscription_status" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSubscriptionStatus() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSubscriptionStatus()
	})
}

// SetAuthServiceEnabled sets the "auth_service_enabled" field.
func (u *OrganizationUpsertBulk) SetAuthServiceEnabled(v bool) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthServiceEnabled(v)
	})
}

// UpdateAuthServiceEnabled sets the "auth_service_enabled" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAuthServiceEnabled() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthServiceEnabled()
	})
}

// SetAuthConfig sets the "auth_config" field.
func (u *OrganizationUpsertBulk) SetAuthConfig(v map[string]interface{}) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthConfig(v)
	})
}

// UpdateAuthConfig sets the "auth_config" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAuthConfig() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthConfig()
	})
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (u *OrganizationUpsertBulk) ClearAuthConfig() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAuthConfig()
	})
}

// SetAuthDomain sets the "auth_domain" field.
func (u *OrganizationUpsertBulk) SetAuthDomain(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAuthDomain(v)
	})
}

// UpdateAuthDomain sets the "auth_domain" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAuthDomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAuthDomain()
	})
}

// ClearAuthDomain clears the value of the "auth_domain" field.
func (u *OrganizationUpsertBulk) ClearAuthDomain() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAuthDomain()
	})
}

// SetAPIRequestLimit sets the "api_request_limit" field.
func (u *OrganizationUpsertBulk) SetAPIRequestLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAPIRequestLimit(v)
	})
}

// AddAPIRequestLimit adds v to the "api_request_limit" field.
func (u *OrganizationUpsertBulk) AddAPIRequestLimit(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddAPIRequestLimit(v)
	})
}

// UpdateAPIRequestLimit sets the "api_request_limit" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAPIRequestLimit() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAPIRequestLimit()
	})
}

// SetAPIRequestsUsed sets the "api_requests_used" field.
func (u *OrganizationUpsertBulk) SetAPIRequestsUsed(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAPIRequestsUsed(v)
	})
}

// AddAPIRequestsUsed adds v to the "api_requests_used" field.
func (u *OrganizationUpsertBulk) AddAPIRequestsUsed(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddAPIRequestsUsed(v)
	})
}

// UpdateAPIRequestsUsed sets the "api_requests_used" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAPIRequestsUsed() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAPIRequestsUsed()
	})
}

// SetCurrentExternalUsers sets the "current_external_users" field.
func (u *OrganizationUpsertBulk) SetCurrentExternalUsers(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCurrentExternalUsers(v)
	})
}

// AddCurrentExternalUsers adds v to the "current_external_users" field.
func (u *OrganizationUpsertBulk) AddCurrentExternalUsers(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCurrentExternalUsers(v)
	})
}

// UpdateCurrentExternalUsers sets the "current_external_users" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateCurrentExternalUsers() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCurrentExternalUsers()
	})
}

// SetCurrentEndUsers sets the "current_end_users" field.
func (u *OrganizationUpsertBulk) SetCurrentEndUsers(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetCurrentEndUsers(v)
	})
}

// AddCurrentEndUsers adds v to the "current_end_users" field.
func (u *OrganizationUpsertBulk) AddCurrentEndUsers(v int) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.AddCurrentEndUsers(v)
	})
}

// UpdateCurrentEndUsers sets the "current_end_users" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateCurrentEndUsers() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateCurrentEndUsers()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
