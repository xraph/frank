// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/mfa"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/passkey"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/verification"
	"github.com/xraph/frank/pkg/model"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uu *UserUpdate) ClearPasswordHash() *UserUpdate {
	uu.mutation.ClearPasswordHash()
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetPhoneVerified sets the "phone_verified" field.
func (uu *UserUpdate) SetPhoneVerified(b bool) *UserUpdate {
	uu.mutation.SetPhoneVerified(b)
	return uu
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPhoneVerified(*b)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetBlocked sets the "blocked" field.
func (uu *UserUpdate) SetBlocked(b bool) *UserUpdate {
	uu.mutation.SetBlocked(b)
	return uu
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBlocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBlocked(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetLastPasswordChange sets the "last_password_change" field.
func (uu *UserUpdate) SetLastPasswordChange(t time.Time) *UserUpdate {
	uu.mutation.SetLastPasswordChange(t)
	return uu
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastPasswordChange(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastPasswordChange(*t)
	}
	return uu
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (uu *UserUpdate) ClearLastPasswordChange() *UserUpdate {
	uu.mutation.ClearLastPasswordChange()
	return uu
}

// SetMetadata sets the "metadata" field.
func (uu *UserUpdate) SetMetadata(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetMetadata(m)
	return uu
}

// ClearMetadata clears the value of the "metadata" field.
func (uu *UserUpdate) ClearMetadata() *UserUpdate {
	uu.mutation.ClearMetadata()
	return uu
}

// SetProfileImageURL sets the "profile_image_url" field.
func (uu *UserUpdate) SetProfileImageURL(s string) *UserUpdate {
	uu.mutation.SetProfileImageURL(s)
	return uu
}

// SetNillableProfileImageURL sets the "profile_image_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfileImageURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetProfileImageURL(*s)
	}
	return uu
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (uu *UserUpdate) ClearProfileImageURL() *UserUpdate {
	uu.mutation.ClearProfileImageURL()
	return uu
}

// SetLocale sets the "locale" field.
func (uu *UserUpdate) SetLocale(s string) *UserUpdate {
	uu.mutation.SetLocale(s)
	return uu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocale(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocale(*s)
	}
	return uu
}

// SetTimezone sets the "timezone" field.
func (uu *UserUpdate) SetTimezone(s string) *UserUpdate {
	uu.mutation.SetTimezone(s)
	return uu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTimezone(s *string) *UserUpdate {
	if s != nil {
		uu.SetTimezone(*s)
	}
	return uu
}

// ClearTimezone clears the value of the "timezone" field.
func (uu *UserUpdate) ClearTimezone() *UserUpdate {
	uu.mutation.ClearTimezone()
	return uu
}

// SetUserType sets the "user_type" field.
func (uu *UserUpdate) SetUserType(mt model.UserType) *UserUpdate {
	uu.mutation.SetUserType(mt)
	return uu
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserType(mt *model.UserType) *UserUpdate {
	if mt != nil {
		uu.SetUserType(*mt)
	}
	return uu
}

// SetOrganizationID sets the "organization_id" field.
func (uu *UserUpdate) SetOrganizationID(x xid.ID) *UserUpdate {
	uu.mutation.SetOrganizationID(x)
	return uu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOrganizationID(x *xid.ID) *UserUpdate {
	if x != nil {
		uu.SetOrganizationID(*x)
	}
	return uu
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (uu *UserUpdate) ClearOrganizationID() *UserUpdate {
	uu.mutation.ClearOrganizationID()
	return uu
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (uu *UserUpdate) SetPrimaryOrganizationID(x xid.ID) *UserUpdate {
	uu.mutation.SetPrimaryOrganizationID(x)
	return uu
}

// SetNillablePrimaryOrganizationID sets the "primary_organization_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePrimaryOrganizationID(x *xid.ID) *UserUpdate {
	if x != nil {
		uu.SetPrimaryOrganizationID(*x)
	}
	return uu
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (uu *UserUpdate) ClearPrimaryOrganizationID() *UserUpdate {
	uu.mutation.ClearPrimaryOrganizationID()
	return uu
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (uu *UserUpdate) SetIsPlatformAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsPlatformAdmin(b)
	return uu
}

// SetNillableIsPlatformAdmin sets the "is_platform_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsPlatformAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsPlatformAdmin(*b)
	}
	return uu
}

// SetAuthProvider sets the "auth_provider" field.
func (uu *UserUpdate) SetAuthProvider(s string) *UserUpdate {
	uu.mutation.SetAuthProvider(s)
	return uu
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAuthProvider(s *string) *UserUpdate {
	if s != nil {
		uu.SetAuthProvider(*s)
	}
	return uu
}

// SetExternalID sets the "external_id" field.
func (uu *UserUpdate) SetExternalID(s string) *UserUpdate {
	uu.mutation.SetExternalID(s)
	return uu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExternalID(s *string) *UserUpdate {
	if s != nil {
		uu.SetExternalID(*s)
	}
	return uu
}

// ClearExternalID clears the value of the "external_id" field.
func (uu *UserUpdate) ClearExternalID() *UserUpdate {
	uu.mutation.ClearExternalID()
	return uu
}

// SetCustomerID sets the "customer_id" field.
func (uu *UserUpdate) SetCustomerID(s string) *UserUpdate {
	uu.mutation.SetCustomerID(s)
	return uu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCustomerID(s *string) *UserUpdate {
	if s != nil {
		uu.SetCustomerID(*s)
	}
	return uu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (uu *UserUpdate) ClearCustomerID() *UserUpdate {
	uu.mutation.ClearCustomerID()
	return uu
}

// SetCustomAttributes sets the "custom_attributes" field.
func (uu *UserUpdate) SetCustomAttributes(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetCustomAttributes(m)
	return uu
}

// ClearCustomAttributes clears the value of the "custom_attributes" field.
func (uu *UserUpdate) ClearCustomAttributes() *UserUpdate {
	uu.mutation.ClearCustomAttributes()
	return uu
}

// SetCreatedBy sets the "created_by" field.
func (uu *UserUpdate) SetCreatedBy(s string) *UserUpdate {
	uu.mutation.SetCreatedBy(s)
	return uu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetCreatedBy(*s)
	}
	return uu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uu *UserUpdate) ClearCreatedBy() *UserUpdate {
	uu.mutation.ClearCreatedBy()
	return uu
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (uu *UserUpdate) SetPasswordResetTokenExpires(t time.Time) *UserUpdate {
	uu.mutation.SetPasswordResetTokenExpires(t)
	return uu
}

// SetNillablePasswordResetTokenExpires sets the "password_reset_token_expires" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordResetTokenExpires(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetPasswordResetTokenExpires(*t)
	}
	return uu
}

// ClearPasswordResetTokenExpires clears the value of the "password_reset_token_expires" field.
func (uu *UserUpdate) ClearPasswordResetTokenExpires() *UserUpdate {
	uu.mutation.ClearPasswordResetTokenExpires()
	return uu
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (uu *UserUpdate) SetPasswordResetToken(s string) *UserUpdate {
	uu.mutation.SetPasswordResetToken(s)
	return uu
}

// SetNillablePasswordResetToken sets the "password_reset_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordResetToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordResetToken(*s)
	}
	return uu
}

// ClearPasswordResetToken clears the value of the "password_reset_token" field.
func (uu *UserUpdate) ClearPasswordResetToken() *UserUpdate {
	uu.mutation.ClearPasswordResetToken()
	return uu
}

// SetLoginCount sets the "login_count" field.
func (uu *UserUpdate) SetLoginCount(i int) *UserUpdate {
	uu.mutation.ResetLoginCount()
	uu.mutation.SetLoginCount(i)
	return uu
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginCount(i *int) *UserUpdate {
	if i != nil {
		uu.SetLoginCount(*i)
	}
	return uu
}

// AddLoginCount adds i to the "login_count" field.
func (uu *UserUpdate) AddLoginCount(i int) *UserUpdate {
	uu.mutation.AddLoginCount(i)
	return uu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uu *UserUpdate) SetLastLoginIP(s string) *UserUpdate {
	uu.mutation.SetLastLoginIP(s)
	return uu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastLoginIP(*s)
	}
	return uu
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uu *UserUpdate) ClearLastLoginIP() *UserUpdate {
	uu.mutation.ClearLastLoginIP()
	return uu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uu *UserUpdate) SetOrganization(o *Organization) *UserUpdate {
	return uu.SetOrganizationID(o.ID)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (uu *UserUpdate) AddMembershipIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddMembershipIDs(ids...)
	return uu
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (uu *UserUpdate) AddMemberships(m ...*Membership) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMembershipIDs(ids...)
}

// AddSentInvitationIDs adds the "sent_invitations" edge to the Membership entity by IDs.
func (uu *UserUpdate) AddSentInvitationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddSentInvitationIDs(ids...)
	return uu
}

// AddSentInvitations adds the "sent_invitations" edges to the Membership entity.
func (uu *UserUpdate) AddSentInvitations(m ...*Membership) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddSentInvitationIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uu *UserUpdate) AddAPIKeyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAPIKeyIDs(ids...)
	return uu
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) AddAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPIKeyIDs(ids...)
}

// AddMfaMethodIDs adds the "mfa_methods" edge to the MFA entity by IDs.
func (uu *UserUpdate) AddMfaMethodIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddMfaMethodIDs(ids...)
	return uu
}

// AddMfaMethods adds the "mfa_methods" edges to the MFA entity.
func (uu *UserUpdate) AddMfaMethods(m ...*MFA) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMfaMethodIDs(ids...)
}

// AddPasskeyIDs adds the "passkeys" edge to the Passkey entity by IDs.
func (uu *UserUpdate) AddPasskeyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddPasskeyIDs(ids...)
	return uu
}

// AddPasskeys adds the "passkeys" edges to the Passkey entity.
func (uu *UserUpdate) AddPasskeys(p ...*Passkey) *UserUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPasskeyIDs(ids...)
}

// AddOauthTokenIDs adds the "oauth_tokens" edge to the OAuthToken entity by IDs.
func (uu *UserUpdate) AddOauthTokenIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddOauthTokenIDs(ids...)
	return uu
}

// AddOauthTokens adds the "oauth_tokens" edges to the OAuthToken entity.
func (uu *UserUpdate) AddOauthTokens(o ...*OAuthToken) *UserUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOauthTokenIDs(ids...)
}

// AddOauthAuthorizationIDs adds the "oauth_authorizations" edge to the OAuthAuthorization entity by IDs.
func (uu *UserUpdate) AddOauthAuthorizationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddOauthAuthorizationIDs(ids...)
	return uu
}

// AddOauthAuthorizations adds the "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uu *UserUpdate) AddOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOauthAuthorizationIDs(ids...)
}

// AddVerificationIDs adds the "verifications" edge to the Verification entity by IDs.
func (uu *UserUpdate) AddVerificationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddVerificationIDs(ids...)
	return uu
}

// AddVerifications adds the "verifications" edges to the Verification entity.
func (uu *UserUpdate) AddVerifications(v ...*Verification) *UserUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVerificationIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uu *UserUpdate) AddUserRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddUserRoleIDs(ids...)
	return uu
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) AddUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserRoleIDs(ids...)
}

// AddUserPermissionIDs adds the "user_permissions" edge to the UserPermission entity by IDs.
func (uu *UserUpdate) AddUserPermissionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddUserPermissionIDs(ids...)
	return uu
}

// AddUserPermissions adds the "user_permissions" edges to the UserPermission entity.
func (uu *UserUpdate) AddUserPermissions(u ...*UserPermission) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserPermissionIDs(ids...)
}

// AddSystemRoleIDs adds the "system_roles" edge to the Role entity by IDs.
func (uu *UserUpdate) AddSystemRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddSystemRoleIDs(ids...)
	return uu
}

// AddSystemRoles adds the "system_roles" edges to the Role entity.
func (uu *UserUpdate) AddSystemRoles(r ...*Role) *UserUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddSystemRoleIDs(ids...)
}

// AddAssignedUserRoleIDs adds the "assigned_user_roles" edge to the UserRole entity by IDs.
func (uu *UserUpdate) AddAssignedUserRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAssignedUserRoleIDs(ids...)
	return uu
}

// AddAssignedUserRoles adds the "assigned_user_roles" edges to the UserRole entity.
func (uu *UserUpdate) AddAssignedUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddAssignedUserRoleIDs(ids...)
}

// AddAssignedUserPermissionIDs adds the "assigned_user_permissions" edge to the UserPermission entity by IDs.
func (uu *UserUpdate) AddAssignedUserPermissionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAssignedUserPermissionIDs(ids...)
	return uu
}

// AddAssignedUserPermissions adds the "assigned_user_permissions" edges to the UserPermission entity.
func (uu *UserUpdate) AddAssignedUserPermissions(u ...*UserPermission) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddAssignedUserPermissionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (uu *UserUpdate) AddAuditLogIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAuditLogIDs(ids...)
	return uu
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (uu *UserUpdate) AddAuditLogs(a ...*Audit) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAuditLogIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (uu *UserUpdate) AddActivityIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddActivityIDs(ids...)
	return uu
}

// AddActivities adds the "activities" edges to the Activity entity.
func (uu *UserUpdate) AddActivities(a ...*Activity) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddActivityIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uu *UserUpdate) ClearOrganization() *UserUpdate {
	uu.mutation.ClearOrganization()
	return uu
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (uu *UserUpdate) ClearMemberships() *UserUpdate {
	uu.mutation.ClearMemberships()
	return uu
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (uu *UserUpdate) RemoveMembershipIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveMembershipIDs(ids...)
	return uu
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (uu *UserUpdate) RemoveMemberships(m ...*Membership) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMembershipIDs(ids...)
}

// ClearSentInvitations clears all "sent_invitations" edges to the Membership entity.
func (uu *UserUpdate) ClearSentInvitations() *UserUpdate {
	uu.mutation.ClearSentInvitations()
	return uu
}

// RemoveSentInvitationIDs removes the "sent_invitations" edge to Membership entities by IDs.
func (uu *UserUpdate) RemoveSentInvitationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveSentInvitationIDs(ids...)
	return uu
}

// RemoveSentInvitations removes "sent_invitations" edges to Membership entities.
func (uu *UserUpdate) RemoveSentInvitations(m ...*Membership) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveSentInvitationIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) ClearAPIKeys() *UserUpdate {
	uu.mutation.ClearAPIKeys()
	return uu
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uu *UserUpdate) RemoveAPIKeyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAPIKeyIDs(ids...)
	return uu
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uu *UserUpdate) RemoveAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPIKeyIDs(ids...)
}

// ClearMfaMethods clears all "mfa_methods" edges to the MFA entity.
func (uu *UserUpdate) ClearMfaMethods() *UserUpdate {
	uu.mutation.ClearMfaMethods()
	return uu
}

// RemoveMfaMethodIDs removes the "mfa_methods" edge to MFA entities by IDs.
func (uu *UserUpdate) RemoveMfaMethodIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveMfaMethodIDs(ids...)
	return uu
}

// RemoveMfaMethods removes "mfa_methods" edges to MFA entities.
func (uu *UserUpdate) RemoveMfaMethods(m ...*MFA) *UserUpdate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMfaMethodIDs(ids...)
}

// ClearPasskeys clears all "passkeys" edges to the Passkey entity.
func (uu *UserUpdate) ClearPasskeys() *UserUpdate {
	uu.mutation.ClearPasskeys()
	return uu
}

// RemovePasskeyIDs removes the "passkeys" edge to Passkey entities by IDs.
func (uu *UserUpdate) RemovePasskeyIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemovePasskeyIDs(ids...)
	return uu
}

// RemovePasskeys removes "passkeys" edges to Passkey entities.
func (uu *UserUpdate) RemovePasskeys(p ...*Passkey) *UserUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePasskeyIDs(ids...)
}

// ClearOauthTokens clears all "oauth_tokens" edges to the OAuthToken entity.
func (uu *UserUpdate) ClearOauthTokens() *UserUpdate {
	uu.mutation.ClearOauthTokens()
	return uu
}

// RemoveOauthTokenIDs removes the "oauth_tokens" edge to OAuthToken entities by IDs.
func (uu *UserUpdate) RemoveOauthTokenIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveOauthTokenIDs(ids...)
	return uu
}

// RemoveOauthTokens removes "oauth_tokens" edges to OAuthToken entities.
func (uu *UserUpdate) RemoveOauthTokens(o ...*OAuthToken) *UserUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOauthTokenIDs(ids...)
}

// ClearOauthAuthorizations clears all "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uu *UserUpdate) ClearOauthAuthorizations() *UserUpdate {
	uu.mutation.ClearOauthAuthorizations()
	return uu
}

// RemoveOauthAuthorizationIDs removes the "oauth_authorizations" edge to OAuthAuthorization entities by IDs.
func (uu *UserUpdate) RemoveOauthAuthorizationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveOauthAuthorizationIDs(ids...)
	return uu
}

// RemoveOauthAuthorizations removes "oauth_authorizations" edges to OAuthAuthorization entities.
func (uu *UserUpdate) RemoveOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOauthAuthorizationIDs(ids...)
}

// ClearVerifications clears all "verifications" edges to the Verification entity.
func (uu *UserUpdate) ClearVerifications() *UserUpdate {
	uu.mutation.ClearVerifications()
	return uu
}

// RemoveVerificationIDs removes the "verifications" edge to Verification entities by IDs.
func (uu *UserUpdate) RemoveVerificationIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveVerificationIDs(ids...)
	return uu
}

// RemoveVerifications removes "verifications" edges to Verification entities.
func (uu *UserUpdate) RemoveVerifications(v ...*Verification) *UserUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVerificationIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) ClearUserRoles() *UserUpdate {
	uu.mutation.ClearUserRoles()
	return uu
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uu *UserUpdate) RemoveUserRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveUserRoleIDs(ids...)
	return uu
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uu *UserUpdate) RemoveUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserRoleIDs(ids...)
}

// ClearUserPermissions clears all "user_permissions" edges to the UserPermission entity.
func (uu *UserUpdate) ClearUserPermissions() *UserUpdate {
	uu.mutation.ClearUserPermissions()
	return uu
}

// RemoveUserPermissionIDs removes the "user_permissions" edge to UserPermission entities by IDs.
func (uu *UserUpdate) RemoveUserPermissionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveUserPermissionIDs(ids...)
	return uu
}

// RemoveUserPermissions removes "user_permissions" edges to UserPermission entities.
func (uu *UserUpdate) RemoveUserPermissions(u ...*UserPermission) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserPermissionIDs(ids...)
}

// ClearSystemRoles clears all "system_roles" edges to the Role entity.
func (uu *UserUpdate) ClearSystemRoles() *UserUpdate {
	uu.mutation.ClearSystemRoles()
	return uu
}

// RemoveSystemRoleIDs removes the "system_roles" edge to Role entities by IDs.
func (uu *UserUpdate) RemoveSystemRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveSystemRoleIDs(ids...)
	return uu
}

// RemoveSystemRoles removes "system_roles" edges to Role entities.
func (uu *UserUpdate) RemoveSystemRoles(r ...*Role) *UserUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveSystemRoleIDs(ids...)
}

// ClearAssignedUserRoles clears all "assigned_user_roles" edges to the UserRole entity.
func (uu *UserUpdate) ClearAssignedUserRoles() *UserUpdate {
	uu.mutation.ClearAssignedUserRoles()
	return uu
}

// RemoveAssignedUserRoleIDs removes the "assigned_user_roles" edge to UserRole entities by IDs.
func (uu *UserUpdate) RemoveAssignedUserRoleIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAssignedUserRoleIDs(ids...)
	return uu
}

// RemoveAssignedUserRoles removes "assigned_user_roles" edges to UserRole entities.
func (uu *UserUpdate) RemoveAssignedUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveAssignedUserRoleIDs(ids...)
}

// ClearAssignedUserPermissions clears all "assigned_user_permissions" edges to the UserPermission entity.
func (uu *UserUpdate) ClearAssignedUserPermissions() *UserUpdate {
	uu.mutation.ClearAssignedUserPermissions()
	return uu
}

// RemoveAssignedUserPermissionIDs removes the "assigned_user_permissions" edge to UserPermission entities by IDs.
func (uu *UserUpdate) RemoveAssignedUserPermissionIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAssignedUserPermissionIDs(ids...)
	return uu
}

// RemoveAssignedUserPermissions removes "assigned_user_permissions" edges to UserPermission entities.
func (uu *UserUpdate) RemoveAssignedUserPermissions(u ...*UserPermission) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveAssignedUserPermissionIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the Audit entity.
func (uu *UserUpdate) ClearAuditLogs() *UserUpdate {
	uu.mutation.ClearAuditLogs()
	return uu
}

// RemoveAuditLogIDs removes the "audit_logs" edge to Audit entities by IDs.
func (uu *UserUpdate) RemoveAuditLogIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAuditLogIDs(ids...)
	return uu
}

// RemoveAuditLogs removes "audit_logs" edges to Audit entities.
func (uu *UserUpdate) RemoveAuditLogs(a ...*Audit) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAuditLogIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (uu *UserUpdate) ClearActivities() *UserUpdate {
	uu.mutation.ClearActivities()
	return uu
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (uu *UserUpdate) RemoveActivityIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveActivityIDs(ids...)
	return uu
}

// RemoveActivities removes "activities" edges to Activity entities.
func (uu *UserUpdate) RemoveActivities(a ...*Activity) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uu.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Blocked(); ok {
		_spec.SetField(user.FieldBlocked, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.LastPasswordChange(); ok {
		_spec.SetField(user.FieldLastPasswordChange, field.TypeTime, value)
	}
	if uu.mutation.LastPasswordChangeCleared() {
		_spec.ClearField(user.FieldLastPasswordChange, field.TypeTime)
	}
	if value, ok := uu.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if uu.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := uu.mutation.ProfileImageURL(); ok {
		_spec.SetField(user.FieldProfileImageURL, field.TypeString, value)
	}
	if uu.mutation.ProfileImageURLCleared() {
		_spec.ClearField(user.FieldProfileImageURL, field.TypeString)
	}
	if value, ok := uu.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if value, ok := uu.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if uu.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := uu.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.PrimaryOrganizationID(); ok {
		_spec.SetField(user.FieldPrimaryOrganizationID, field.TypeString, value)
	}
	if uu.mutation.PrimaryOrganizationIDCleared() {
		_spec.ClearField(user.FieldPrimaryOrganizationID, field.TypeString)
	}
	if value, ok := uu.mutation.IsPlatformAdmin(); ok {
		_spec.SetField(user.FieldIsPlatformAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeString, value)
	}
	if value, ok := uu.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if uu.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeString)
	}
	if value, ok := uu.mutation.CustomerID(); ok {
		_spec.SetField(user.FieldCustomerID, field.TypeString, value)
	}
	if uu.mutation.CustomerIDCleared() {
		_spec.ClearField(user.FieldCustomerID, field.TypeString)
	}
	if value, ok := uu.mutation.CustomAttributes(); ok {
		_spec.SetField(user.FieldCustomAttributes, field.TypeJSON, value)
	}
	if uu.mutation.CustomAttributesCleared() {
		_spec.ClearField(user.FieldCustomAttributes, field.TypeJSON)
	}
	if value, ok := uu.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeString, value)
	}
	if uu.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordResetTokenExpires(); ok {
		_spec.SetField(user.FieldPasswordResetTokenExpires, field.TypeTime, value)
	}
	if uu.mutation.PasswordResetTokenExpiresCleared() {
		_spec.ClearField(user.FieldPasswordResetTokenExpires, field.TypeTime)
	}
	if value, ok := uu.mutation.PasswordResetToken(); ok {
		_spec.SetField(user.FieldPasswordResetToken, field.TypeString, value)
	}
	if uu.mutation.PasswordResetTokenCleared() {
		_spec.ClearField(user.FieldPasswordResetToken, field.TypeString)
	}
	if value, ok := uu.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLoginCount(); ok {
		_spec.AddField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uu.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if uu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !uu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SentInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSentInvitationsIDs(); len(nodes) > 0 && !uu.mutation.SentInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SentInvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMfaMethodsIDs(); len(nodes) > 0 && !uu.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MfaMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPasskeysIDs(); len(nodes) > 0 && !uu.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PasskeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOauthTokensIDs(); len(nodes) > 0 && !uu.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OauthTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOauthAuthorizationsIDs(); len(nodes) > 0 && !uu.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OauthAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVerificationsIDs(); len(nodes) > 0 && !uu.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserPermissionsIDs(); len(nodes) > 0 && !uu.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SystemRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSystemRolesIDs(); len(nodes) > 0 && !uu.mutation.SystemRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SystemRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedUserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedUserRolesIDs(); len(nodes) > 0 && !uu.mutation.AssignedUserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedUserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedUserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedUserPermissionsIDs(); len(nodes) > 0 && !uu.mutation.AssignedUserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedUserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !uu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uuo *UserUpdateOne) ClearPasswordHash() *UserUpdateOne {
	uuo.mutation.ClearPasswordHash()
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetPhoneVerified sets the "phone_verified" field.
func (uuo *UserUpdateOne) SetPhoneVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPhoneVerified(b)
	return uuo
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPhoneVerified(*b)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetBlocked sets the "blocked" field.
func (uuo *UserUpdateOne) SetBlocked(b bool) *UserUpdateOne {
	uuo.mutation.SetBlocked(b)
	return uuo
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBlocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBlocked(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetLastPasswordChange sets the "last_password_change" field.
func (uuo *UserUpdateOne) SetLastPasswordChange(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastPasswordChange(t)
	return uuo
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastPasswordChange(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastPasswordChange(*t)
	}
	return uuo
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (uuo *UserUpdateOne) ClearLastPasswordChange() *UserUpdateOne {
	uuo.mutation.ClearLastPasswordChange()
	return uuo
}

// SetMetadata sets the "metadata" field.
func (uuo *UserUpdateOne) SetMetadata(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetMetadata(m)
	return uuo
}

// ClearMetadata clears the value of the "metadata" field.
func (uuo *UserUpdateOne) ClearMetadata() *UserUpdateOne {
	uuo.mutation.ClearMetadata()
	return uuo
}

// SetProfileImageURL sets the "profile_image_url" field.
func (uuo *UserUpdateOne) SetProfileImageURL(s string) *UserUpdateOne {
	uuo.mutation.SetProfileImageURL(s)
	return uuo
}

// SetNillableProfileImageURL sets the "profile_image_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfileImageURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProfileImageURL(*s)
	}
	return uuo
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (uuo *UserUpdateOne) ClearProfileImageURL() *UserUpdateOne {
	uuo.mutation.ClearProfileImageURL()
	return uuo
}

// SetLocale sets the "locale" field.
func (uuo *UserUpdateOne) SetLocale(s string) *UserUpdateOne {
	uuo.mutation.SetLocale(s)
	return uuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocale(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocale(*s)
	}
	return uuo
}

// SetTimezone sets the "timezone" field.
func (uuo *UserUpdateOne) SetTimezone(s string) *UserUpdateOne {
	uuo.mutation.SetTimezone(s)
	return uuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTimezone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTimezone(*s)
	}
	return uuo
}

// ClearTimezone clears the value of the "timezone" field.
func (uuo *UserUpdateOne) ClearTimezone() *UserUpdateOne {
	uuo.mutation.ClearTimezone()
	return uuo
}

// SetUserType sets the "user_type" field.
func (uuo *UserUpdateOne) SetUserType(mt model.UserType) *UserUpdateOne {
	uuo.mutation.SetUserType(mt)
	return uuo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserType(mt *model.UserType) *UserUpdateOne {
	if mt != nil {
		uuo.SetUserType(*mt)
	}
	return uuo
}

// SetOrganizationID sets the "organization_id" field.
func (uuo *UserUpdateOne) SetOrganizationID(x xid.ID) *UserUpdateOne {
	uuo.mutation.SetOrganizationID(x)
	return uuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrganizationID(x *xid.ID) *UserUpdateOne {
	if x != nil {
		uuo.SetOrganizationID(*x)
	}
	return uuo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (uuo *UserUpdateOne) ClearOrganizationID() *UserUpdateOne {
	uuo.mutation.ClearOrganizationID()
	return uuo
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (uuo *UserUpdateOne) SetPrimaryOrganizationID(x xid.ID) *UserUpdateOne {
	uuo.mutation.SetPrimaryOrganizationID(x)
	return uuo
}

// SetNillablePrimaryOrganizationID sets the "primary_organization_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrimaryOrganizationID(x *xid.ID) *UserUpdateOne {
	if x != nil {
		uuo.SetPrimaryOrganizationID(*x)
	}
	return uuo
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (uuo *UserUpdateOne) ClearPrimaryOrganizationID() *UserUpdateOne {
	uuo.mutation.ClearPrimaryOrganizationID()
	return uuo
}

// SetIsPlatformAdmin sets the "is_platform_admin" field.
func (uuo *UserUpdateOne) SetIsPlatformAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsPlatformAdmin(b)
	return uuo
}

// SetNillableIsPlatformAdmin sets the "is_platform_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsPlatformAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsPlatformAdmin(*b)
	}
	return uuo
}

// SetAuthProvider sets the "auth_provider" field.
func (uuo *UserUpdateOne) SetAuthProvider(s string) *UserUpdateOne {
	uuo.mutation.SetAuthProvider(s)
	return uuo
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuthProvider(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAuthProvider(*s)
	}
	return uuo
}

// SetExternalID sets the "external_id" field.
func (uuo *UserUpdateOne) SetExternalID(s string) *UserUpdateOne {
	uuo.mutation.SetExternalID(s)
	return uuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExternalID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetExternalID(*s)
	}
	return uuo
}

// ClearExternalID clears the value of the "external_id" field.
func (uuo *UserUpdateOne) ClearExternalID() *UserUpdateOne {
	uuo.mutation.ClearExternalID()
	return uuo
}

// SetCustomerID sets the "customer_id" field.
func (uuo *UserUpdateOne) SetCustomerID(s string) *UserUpdateOne {
	uuo.mutation.SetCustomerID(s)
	return uuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCustomerID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCustomerID(*s)
	}
	return uuo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (uuo *UserUpdateOne) ClearCustomerID() *UserUpdateOne {
	uuo.mutation.ClearCustomerID()
	return uuo
}

// SetCustomAttributes sets the "custom_attributes" field.
func (uuo *UserUpdateOne) SetCustomAttributes(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetCustomAttributes(m)
	return uuo
}

// ClearCustomAttributes clears the value of the "custom_attributes" field.
func (uuo *UserUpdateOne) ClearCustomAttributes() *UserUpdateOne {
	uuo.mutation.ClearCustomAttributes()
	return uuo
}

// SetCreatedBy sets the "created_by" field.
func (uuo *UserUpdateOne) SetCreatedBy(s string) *UserUpdateOne {
	uuo.mutation.SetCreatedBy(s)
	return uuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCreatedBy(*s)
	}
	return uuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uuo *UserUpdateOne) ClearCreatedBy() *UserUpdateOne {
	uuo.mutation.ClearCreatedBy()
	return uuo
}

// SetPasswordResetTokenExpires sets the "password_reset_token_expires" field.
func (uuo *UserUpdateOne) SetPasswordResetTokenExpires(t time.Time) *UserUpdateOne {
	uuo.mutation.SetPasswordResetTokenExpires(t)
	return uuo
}

// SetNillablePasswordResetTokenExpires sets the "password_reset_token_expires" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordResetTokenExpires(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetPasswordResetTokenExpires(*t)
	}
	return uuo
}

// ClearPasswordResetTokenExpires clears the value of the "password_reset_token_expires" field.
func (uuo *UserUpdateOne) ClearPasswordResetTokenExpires() *UserUpdateOne {
	uuo.mutation.ClearPasswordResetTokenExpires()
	return uuo
}

// SetPasswordResetToken sets the "password_reset_token" field.
func (uuo *UserUpdateOne) SetPasswordResetToken(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordResetToken(s)
	return uuo
}

// SetNillablePasswordResetToken sets the "password_reset_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordResetToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordResetToken(*s)
	}
	return uuo
}

// ClearPasswordResetToken clears the value of the "password_reset_token" field.
func (uuo *UserUpdateOne) ClearPasswordResetToken() *UserUpdateOne {
	uuo.mutation.ClearPasswordResetToken()
	return uuo
}

// SetLoginCount sets the "login_count" field.
func (uuo *UserUpdateOne) SetLoginCount(i int) *UserUpdateOne {
	uuo.mutation.ResetLoginCount()
	uuo.mutation.SetLoginCount(i)
	return uuo
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginCount(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetLoginCount(*i)
	}
	return uuo
}

// AddLoginCount adds i to the "login_count" field.
func (uuo *UserUpdateOne) AddLoginCount(i int) *UserUpdateOne {
	uuo.mutation.AddLoginCount(i)
	return uuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uuo *UserUpdateOne) SetLastLoginIP(s string) *UserUpdateOne {
	uuo.mutation.SetLastLoginIP(s)
	return uuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastLoginIP(*s)
	}
	return uuo
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uuo *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	uuo.mutation.ClearLastLoginIP()
	return uuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uuo *UserUpdateOne) SetOrganization(o *Organization) *UserUpdateOne {
	return uuo.SetOrganizationID(o.ID)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (uuo *UserUpdateOne) AddMembershipIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddMembershipIDs(ids...)
	return uuo
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (uuo *UserUpdateOne) AddMemberships(m ...*Membership) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMembershipIDs(ids...)
}

// AddSentInvitationIDs adds the "sent_invitations" edge to the Membership entity by IDs.
func (uuo *UserUpdateOne) AddSentInvitationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddSentInvitationIDs(ids...)
	return uuo
}

// AddSentInvitations adds the "sent_invitations" edges to the Membership entity.
func (uuo *UserUpdateOne) AddSentInvitations(m ...*Membership) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddSentInvitationIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uuo *UserUpdateOne) AddAPIKeyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAPIKeyIDs(ids...)
	return uuo
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) AddAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPIKeyIDs(ids...)
}

// AddMfaMethodIDs adds the "mfa_methods" edge to the MFA entity by IDs.
func (uuo *UserUpdateOne) AddMfaMethodIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddMfaMethodIDs(ids...)
	return uuo
}

// AddMfaMethods adds the "mfa_methods" edges to the MFA entity.
func (uuo *UserUpdateOne) AddMfaMethods(m ...*MFA) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMfaMethodIDs(ids...)
}

// AddPasskeyIDs adds the "passkeys" edge to the Passkey entity by IDs.
func (uuo *UserUpdateOne) AddPasskeyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddPasskeyIDs(ids...)
	return uuo
}

// AddPasskeys adds the "passkeys" edges to the Passkey entity.
func (uuo *UserUpdateOne) AddPasskeys(p ...*Passkey) *UserUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPasskeyIDs(ids...)
}

// AddOauthTokenIDs adds the "oauth_tokens" edge to the OAuthToken entity by IDs.
func (uuo *UserUpdateOne) AddOauthTokenIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddOauthTokenIDs(ids...)
	return uuo
}

// AddOauthTokens adds the "oauth_tokens" edges to the OAuthToken entity.
func (uuo *UserUpdateOne) AddOauthTokens(o ...*OAuthToken) *UserUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOauthTokenIDs(ids...)
}

// AddOauthAuthorizationIDs adds the "oauth_authorizations" edge to the OAuthAuthorization entity by IDs.
func (uuo *UserUpdateOne) AddOauthAuthorizationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddOauthAuthorizationIDs(ids...)
	return uuo
}

// AddOauthAuthorizations adds the "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uuo *UserUpdateOne) AddOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOauthAuthorizationIDs(ids...)
}

// AddVerificationIDs adds the "verifications" edge to the Verification entity by IDs.
func (uuo *UserUpdateOne) AddVerificationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddVerificationIDs(ids...)
	return uuo
}

// AddVerifications adds the "verifications" edges to the Verification entity.
func (uuo *UserUpdateOne) AddVerifications(v ...*Verification) *UserUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVerificationIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uuo *UserUpdateOne) AddUserRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddUserRoleIDs(ids...)
	return uuo
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) AddUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserRoleIDs(ids...)
}

// AddUserPermissionIDs adds the "user_permissions" edge to the UserPermission entity by IDs.
func (uuo *UserUpdateOne) AddUserPermissionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddUserPermissionIDs(ids...)
	return uuo
}

// AddUserPermissions adds the "user_permissions" edges to the UserPermission entity.
func (uuo *UserUpdateOne) AddUserPermissions(u ...*UserPermission) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserPermissionIDs(ids...)
}

// AddSystemRoleIDs adds the "system_roles" edge to the Role entity by IDs.
func (uuo *UserUpdateOne) AddSystemRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddSystemRoleIDs(ids...)
	return uuo
}

// AddSystemRoles adds the "system_roles" edges to the Role entity.
func (uuo *UserUpdateOne) AddSystemRoles(r ...*Role) *UserUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddSystemRoleIDs(ids...)
}

// AddAssignedUserRoleIDs adds the "assigned_user_roles" edge to the UserRole entity by IDs.
func (uuo *UserUpdateOne) AddAssignedUserRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAssignedUserRoleIDs(ids...)
	return uuo
}

// AddAssignedUserRoles adds the "assigned_user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) AddAssignedUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddAssignedUserRoleIDs(ids...)
}

// AddAssignedUserPermissionIDs adds the "assigned_user_permissions" edge to the UserPermission entity by IDs.
func (uuo *UserUpdateOne) AddAssignedUserPermissionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAssignedUserPermissionIDs(ids...)
	return uuo
}

// AddAssignedUserPermissions adds the "assigned_user_permissions" edges to the UserPermission entity.
func (uuo *UserUpdateOne) AddAssignedUserPermissions(u ...*UserPermission) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddAssignedUserPermissionIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the Audit entity by IDs.
func (uuo *UserUpdateOne) AddAuditLogIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAuditLogIDs(ids...)
	return uuo
}

// AddAuditLogs adds the "audit_logs" edges to the Audit entity.
func (uuo *UserUpdateOne) AddAuditLogs(a ...*Audit) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAuditLogIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (uuo *UserUpdateOne) AddActivityIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddActivityIDs(ids...)
	return uuo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (uuo *UserUpdateOne) AddActivities(a ...*Activity) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddActivityIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (uuo *UserUpdateOne) ClearOrganization() *UserUpdateOne {
	uuo.mutation.ClearOrganization()
	return uuo
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (uuo *UserUpdateOne) ClearMemberships() *UserUpdateOne {
	uuo.mutation.ClearMemberships()
	return uuo
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (uuo *UserUpdateOne) RemoveMembershipIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveMembershipIDs(ids...)
	return uuo
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (uuo *UserUpdateOne) RemoveMemberships(m ...*Membership) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMembershipIDs(ids...)
}

// ClearSentInvitations clears all "sent_invitations" edges to the Membership entity.
func (uuo *UserUpdateOne) ClearSentInvitations() *UserUpdateOne {
	uuo.mutation.ClearSentInvitations()
	return uuo
}

// RemoveSentInvitationIDs removes the "sent_invitations" edge to Membership entities by IDs.
func (uuo *UserUpdateOne) RemoveSentInvitationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveSentInvitationIDs(ids...)
	return uuo
}

// RemoveSentInvitations removes "sent_invitations" edges to Membership entities.
func (uuo *UserUpdateOne) RemoveSentInvitations(m ...*Membership) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveSentInvitationIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) ClearAPIKeys() *UserUpdateOne {
	uuo.mutation.ClearAPIKeys()
	return uuo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uuo *UserUpdateOne) RemoveAPIKeyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAPIKeyIDs(ids...)
	return uuo
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uuo *UserUpdateOne) RemoveAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPIKeyIDs(ids...)
}

// ClearMfaMethods clears all "mfa_methods" edges to the MFA entity.
func (uuo *UserUpdateOne) ClearMfaMethods() *UserUpdateOne {
	uuo.mutation.ClearMfaMethods()
	return uuo
}

// RemoveMfaMethodIDs removes the "mfa_methods" edge to MFA entities by IDs.
func (uuo *UserUpdateOne) RemoveMfaMethodIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveMfaMethodIDs(ids...)
	return uuo
}

// RemoveMfaMethods removes "mfa_methods" edges to MFA entities.
func (uuo *UserUpdateOne) RemoveMfaMethods(m ...*MFA) *UserUpdateOne {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMfaMethodIDs(ids...)
}

// ClearPasskeys clears all "passkeys" edges to the Passkey entity.
func (uuo *UserUpdateOne) ClearPasskeys() *UserUpdateOne {
	uuo.mutation.ClearPasskeys()
	return uuo
}

// RemovePasskeyIDs removes the "passkeys" edge to Passkey entities by IDs.
func (uuo *UserUpdateOne) RemovePasskeyIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemovePasskeyIDs(ids...)
	return uuo
}

// RemovePasskeys removes "passkeys" edges to Passkey entities.
func (uuo *UserUpdateOne) RemovePasskeys(p ...*Passkey) *UserUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePasskeyIDs(ids...)
}

// ClearOauthTokens clears all "oauth_tokens" edges to the OAuthToken entity.
func (uuo *UserUpdateOne) ClearOauthTokens() *UserUpdateOne {
	uuo.mutation.ClearOauthTokens()
	return uuo
}

// RemoveOauthTokenIDs removes the "oauth_tokens" edge to OAuthToken entities by IDs.
func (uuo *UserUpdateOne) RemoveOauthTokenIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveOauthTokenIDs(ids...)
	return uuo
}

// RemoveOauthTokens removes "oauth_tokens" edges to OAuthToken entities.
func (uuo *UserUpdateOne) RemoveOauthTokens(o ...*OAuthToken) *UserUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOauthTokenIDs(ids...)
}

// ClearOauthAuthorizations clears all "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uuo *UserUpdateOne) ClearOauthAuthorizations() *UserUpdateOne {
	uuo.mutation.ClearOauthAuthorizations()
	return uuo
}

// RemoveOauthAuthorizationIDs removes the "oauth_authorizations" edge to OAuthAuthorization entities by IDs.
func (uuo *UserUpdateOne) RemoveOauthAuthorizationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveOauthAuthorizationIDs(ids...)
	return uuo
}

// RemoveOauthAuthorizations removes "oauth_authorizations" edges to OAuthAuthorization entities.
func (uuo *UserUpdateOne) RemoveOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOauthAuthorizationIDs(ids...)
}

// ClearVerifications clears all "verifications" edges to the Verification entity.
func (uuo *UserUpdateOne) ClearVerifications() *UserUpdateOne {
	uuo.mutation.ClearVerifications()
	return uuo
}

// RemoveVerificationIDs removes the "verifications" edge to Verification entities by IDs.
func (uuo *UserUpdateOne) RemoveVerificationIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveVerificationIDs(ids...)
	return uuo
}

// RemoveVerifications removes "verifications" edges to Verification entities.
func (uuo *UserUpdateOne) RemoveVerifications(v ...*Verification) *UserUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVerificationIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) ClearUserRoles() *UserUpdateOne {
	uuo.mutation.ClearUserRoles()
	return uuo
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uuo *UserUpdateOne) RemoveUserRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveUserRoleIDs(ids...)
	return uuo
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uuo *UserUpdateOne) RemoveUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserRoleIDs(ids...)
}

// ClearUserPermissions clears all "user_permissions" edges to the UserPermission entity.
func (uuo *UserUpdateOne) ClearUserPermissions() *UserUpdateOne {
	uuo.mutation.ClearUserPermissions()
	return uuo
}

// RemoveUserPermissionIDs removes the "user_permissions" edge to UserPermission entities by IDs.
func (uuo *UserUpdateOne) RemoveUserPermissionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveUserPermissionIDs(ids...)
	return uuo
}

// RemoveUserPermissions removes "user_permissions" edges to UserPermission entities.
func (uuo *UserUpdateOne) RemoveUserPermissions(u ...*UserPermission) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserPermissionIDs(ids...)
}

// ClearSystemRoles clears all "system_roles" edges to the Role entity.
func (uuo *UserUpdateOne) ClearSystemRoles() *UserUpdateOne {
	uuo.mutation.ClearSystemRoles()
	return uuo
}

// RemoveSystemRoleIDs removes the "system_roles" edge to Role entities by IDs.
func (uuo *UserUpdateOne) RemoveSystemRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveSystemRoleIDs(ids...)
	return uuo
}

// RemoveSystemRoles removes "system_roles" edges to Role entities.
func (uuo *UserUpdateOne) RemoveSystemRoles(r ...*Role) *UserUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveSystemRoleIDs(ids...)
}

// ClearAssignedUserRoles clears all "assigned_user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) ClearAssignedUserRoles() *UserUpdateOne {
	uuo.mutation.ClearAssignedUserRoles()
	return uuo
}

// RemoveAssignedUserRoleIDs removes the "assigned_user_roles" edge to UserRole entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedUserRoleIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAssignedUserRoleIDs(ids...)
	return uuo
}

// RemoveAssignedUserRoles removes "assigned_user_roles" edges to UserRole entities.
func (uuo *UserUpdateOne) RemoveAssignedUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveAssignedUserRoleIDs(ids...)
}

// ClearAssignedUserPermissions clears all "assigned_user_permissions" edges to the UserPermission entity.
func (uuo *UserUpdateOne) ClearAssignedUserPermissions() *UserUpdateOne {
	uuo.mutation.ClearAssignedUserPermissions()
	return uuo
}

// RemoveAssignedUserPermissionIDs removes the "assigned_user_permissions" edge to UserPermission entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedUserPermissionIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAssignedUserPermissionIDs(ids...)
	return uuo
}

// RemoveAssignedUserPermissions removes "assigned_user_permissions" edges to UserPermission entities.
func (uuo *UserUpdateOne) RemoveAssignedUserPermissions(u ...*UserPermission) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveAssignedUserPermissionIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the Audit entity.
func (uuo *UserUpdateOne) ClearAuditLogs() *UserUpdateOne {
	uuo.mutation.ClearAuditLogs()
	return uuo
}

// RemoveAuditLogIDs removes the "audit_logs" edge to Audit entities by IDs.
func (uuo *UserUpdateOne) RemoveAuditLogIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAuditLogIDs(ids...)
	return uuo
}

// RemoveAuditLogs removes "audit_logs" edges to Audit entities.
func (uuo *UserUpdateOne) RemoveAuditLogs(a ...*Audit) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAuditLogIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (uuo *UserUpdateOne) ClearActivities() *UserUpdateOne {
	uuo.mutation.ClearActivities()
	return uuo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (uuo *UserUpdateOne) RemoveActivityIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveActivityIDs(ids...)
	return uuo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (uuo *UserUpdateOne) RemoveActivities(a ...*Activity) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveActivityIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uuo.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Blocked(); ok {
		_spec.SetField(user.FieldBlocked, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastPasswordChange(); ok {
		_spec.SetField(user.FieldLastPasswordChange, field.TypeTime, value)
	}
	if uuo.mutation.LastPasswordChangeCleared() {
		_spec.ClearField(user.FieldLastPasswordChange, field.TypeTime)
	}
	if value, ok := uuo.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if uuo.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := uuo.mutation.ProfileImageURL(); ok {
		_spec.SetField(user.FieldProfileImageURL, field.TypeString, value)
	}
	if uuo.mutation.ProfileImageURLCleared() {
		_spec.ClearField(user.FieldProfileImageURL, field.TypeString)
	}
	if value, ok := uuo.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if uuo.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := uuo.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.PrimaryOrganizationID(); ok {
		_spec.SetField(user.FieldPrimaryOrganizationID, field.TypeString, value)
	}
	if uuo.mutation.PrimaryOrganizationIDCleared() {
		_spec.ClearField(user.FieldPrimaryOrganizationID, field.TypeString)
	}
	if value, ok := uuo.mutation.IsPlatformAdmin(); ok {
		_spec.SetField(user.FieldIsPlatformAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
	}
	if uuo.mutation.ExternalIDCleared() {
		_spec.ClearField(user.FieldExternalID, field.TypeString)
	}
	if value, ok := uuo.mutation.CustomerID(); ok {
		_spec.SetField(user.FieldCustomerID, field.TypeString, value)
	}
	if uuo.mutation.CustomerIDCleared() {
		_spec.ClearField(user.FieldCustomerID, field.TypeString)
	}
	if value, ok := uuo.mutation.CustomAttributes(); ok {
		_spec.SetField(user.FieldCustomAttributes, field.TypeJSON, value)
	}
	if uuo.mutation.CustomAttributesCleared() {
		_spec.ClearField(user.FieldCustomAttributes, field.TypeJSON)
	}
	if value, ok := uuo.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeString, value)
	}
	if uuo.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordResetTokenExpires(); ok {
		_spec.SetField(user.FieldPasswordResetTokenExpires, field.TypeTime, value)
	}
	if uuo.mutation.PasswordResetTokenExpiresCleared() {
		_spec.ClearField(user.FieldPasswordResetTokenExpires, field.TypeTime)
	}
	if value, ok := uuo.mutation.PasswordResetToken(); ok {
		_spec.SetField(user.FieldPasswordResetToken, field.TypeString, value)
	}
	if uuo.mutation.PasswordResetTokenCleared() {
		_spec.ClearField(user.FieldPasswordResetToken, field.TypeString)
	}
	if value, ok := uuo.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLoginCount(); ok {
		_spec.AddField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uuo.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if uuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !uuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SentInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSentInvitationsIDs(); len(nodes) > 0 && !uuo.mutation.SentInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SentInvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMfaMethodsIDs(); len(nodes) > 0 && !uuo.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MfaMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPasskeysIDs(); len(nodes) > 0 && !uuo.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PasskeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOauthTokensIDs(); len(nodes) > 0 && !uuo.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OauthTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOauthAuthorizationsIDs(); len(nodes) > 0 && !uuo.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OauthAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVerificationsIDs(); len(nodes) > 0 && !uuo.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserPermissionsIDs(); len(nodes) > 0 && !uuo.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SystemRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSystemRolesIDs(); len(nodes) > 0 && !uuo.mutation.SystemRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SystemRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedUserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedUserRolesIDs(); len(nodes) > 0 && !uuo.mutation.AssignedUserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedUserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedUserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedUserPermissionsIDs(); len(nodes) > 0 && !uuo.mutation.AssignedUserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedUserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !uuo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !uuo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
