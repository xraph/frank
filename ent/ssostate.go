// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/ssostate"
)

// SSOState is the model entity for the SSOState schema.
type SSOState struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// State token for SSO authentication flow
	State string `json:"state,omitempty"`
	// JSON-encoded state data
	Data string `json:"data,omitempty"`
	// When this state expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL  string `json:"redirect_url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SSOState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ssostate.FieldState, ssostate.FieldData, ssostate.FieldRedirectURL:
			values[i] = new(sql.NullString)
		case ssostate.FieldCreatedAt, ssostate.FieldUpdatedAt, ssostate.FieldDeletedAt, ssostate.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case ssostate.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SSOState fields.
func (ss *SSOState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ssostate.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ss.ID = *value
			}
		case ssostate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Time
			}
		case ssostate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Time
			}
		case ssostate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ss.DeletedAt = value.Time
			}
		case ssostate.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ss.State = value.String
			}
		case ssostate.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				ss.Data = value.String
			}
		case ssostate.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ss.ExpiresAt = value.Time
			}
		case ssostate.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				ss.RedirectURL = value.String
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SSOState.
// This includes values selected through modifiers, order, etc.
func (ss *SSOState) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this SSOState.
// Note that you need to call SSOState.Unwrap() before calling this method if this SSOState
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SSOState) Update() *SSOStateUpdateOne {
	return NewSSOStateClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SSOState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SSOState) Unwrap() *SSOState {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SSOState is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SSOState) String() string {
	var builder strings.Builder
	builder.WriteString("SSOState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ss.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ss.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ss.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ss.State)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(ss.Data)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(ss.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(ss.RedirectURL)
	builder.WriteByte(')')
	return builder.String()
}

// SSOStates is a parsable slice of SSOState.
type SSOStates []*SSOState
