// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
)

// PermissionDependencyCreate is the builder for creating a PermissionDependency entity.
type PermissionDependencyCreate struct {
	config
	mutation *PermissionDependencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pdc *PermissionDependencyCreate) SetCreatedAt(t time.Time) *PermissionDependencyCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableCreatedAt(t *time.Time) *PermissionDependencyCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *PermissionDependencyCreate) SetUpdatedAt(t time.Time) *PermissionDependencyCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableUpdatedAt(t *time.Time) *PermissionDependencyCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetDeletedAt sets the "deleted_at" field.
func (pdc *PermissionDependencyCreate) SetDeletedAt(t time.Time) *PermissionDependencyCreate {
	pdc.mutation.SetDeletedAt(t)
	return pdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableDeletedAt(t *time.Time) *PermissionDependencyCreate {
	if t != nil {
		pdc.SetDeletedAt(*t)
	}
	return pdc
}

// SetPermissionID sets the "permission_id" field.
func (pdc *PermissionDependencyCreate) SetPermissionID(x xid.ID) *PermissionDependencyCreate {
	pdc.mutation.SetPermissionID(x)
	return pdc
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (pdc *PermissionDependencyCreate) SetRequiredPermissionID(x xid.ID) *PermissionDependencyCreate {
	pdc.mutation.SetRequiredPermissionID(x)
	return pdc
}

// SetDependencyType sets the "dependency_type" field.
func (pdc *PermissionDependencyCreate) SetDependencyType(pt permissiondependency.DependencyType) *PermissionDependencyCreate {
	pdc.mutation.SetDependencyType(pt)
	return pdc
}

// SetNillableDependencyType sets the "dependency_type" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableDependencyType(pt *permissiondependency.DependencyType) *PermissionDependencyCreate {
	if pt != nil {
		pdc.SetDependencyType(*pt)
	}
	return pdc
}

// SetCondition sets the "condition" field.
func (pdc *PermissionDependencyCreate) SetCondition(s string) *PermissionDependencyCreate {
	pdc.mutation.SetCondition(s)
	return pdc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableCondition(s *string) *PermissionDependencyCreate {
	if s != nil {
		pdc.SetCondition(*s)
	}
	return pdc
}

// SetActive sets the "active" field.
func (pdc *PermissionDependencyCreate) SetActive(b bool) *PermissionDependencyCreate {
	pdc.mutation.SetActive(b)
	return pdc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableActive(b *bool) *PermissionDependencyCreate {
	if b != nil {
		pdc.SetActive(*b)
	}
	return pdc
}

// SetCreatedBy sets the "created_by" field.
func (pdc *PermissionDependencyCreate) SetCreatedBy(s string) *PermissionDependencyCreate {
	pdc.mutation.SetCreatedBy(s)
	return pdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableCreatedBy(s *string) *PermissionDependencyCreate {
	if s != nil {
		pdc.SetCreatedBy(*s)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *PermissionDependencyCreate) SetID(x xid.ID) *PermissionDependencyCreate {
	pdc.mutation.SetID(x)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *PermissionDependencyCreate) SetNillableID(x *xid.ID) *PermissionDependencyCreate {
	if x != nil {
		pdc.SetID(*x)
	}
	return pdc
}

// SetPermission sets the "permission" edge to the Permission entity.
func (pdc *PermissionDependencyCreate) SetPermission(p *Permission) *PermissionDependencyCreate {
	return pdc.SetPermissionID(p.ID)
}

// SetRequiredPermission sets the "required_permission" edge to the Permission entity.
func (pdc *PermissionDependencyCreate) SetRequiredPermission(p *Permission) *PermissionDependencyCreate {
	return pdc.SetRequiredPermissionID(p.ID)
}

// Mutation returns the PermissionDependencyMutation object of the builder.
func (pdc *PermissionDependencyCreate) Mutation() *PermissionDependencyMutation {
	return pdc.mutation
}

// Save creates the PermissionDependency in the database.
func (pdc *PermissionDependencyCreate) Save(ctx context.Context) (*PermissionDependency, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PermissionDependencyCreate) SaveX(ctx context.Context) *PermissionDependency {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PermissionDependencyCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PermissionDependencyCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *PermissionDependencyCreate) defaults() {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := permissiondependency.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := permissiondependency.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdc.mutation.DependencyType(); !ok {
		v := permissiondependency.DefaultDependencyType
		pdc.mutation.SetDependencyType(v)
	}
	if _, ok := pdc.mutation.Active(); !ok {
		v := permissiondependency.DefaultActive
		pdc.mutation.SetActive(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		v := permissiondependency.DefaultID()
		pdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PermissionDependencyCreate) check() error {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PermissionDependency.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PermissionDependency.updated_at"`)}
	}
	if _, ok := pdc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "PermissionDependency.permission_id"`)}
	}
	if v, ok := pdc.mutation.PermissionID(); ok {
		if err := permissiondependency.PermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.permission_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.RequiredPermissionID(); !ok {
		return &ValidationError{Name: "required_permission_id", err: errors.New(`ent: missing required field "PermissionDependency.required_permission_id"`)}
	}
	if v, ok := pdc.mutation.RequiredPermissionID(); ok {
		if err := permissiondependency.RequiredPermissionIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "required_permission_id", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.required_permission_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DependencyType(); !ok {
		return &ValidationError{Name: "dependency_type", err: errors.New(`ent: missing required field "PermissionDependency.dependency_type"`)}
	}
	if v, ok := pdc.mutation.DependencyType(); ok {
		if err := permissiondependency.DependencyTypeValidator(v); err != nil {
			return &ValidationError{Name: "dependency_type", err: fmt.Errorf(`ent: validator failed for field "PermissionDependency.dependency_type": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "PermissionDependency.active"`)}
	}
	if len(pdc.mutation.PermissionIDs()) == 0 {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "PermissionDependency.permission"`)}
	}
	if len(pdc.mutation.RequiredPermissionIDs()) == 0 {
		return &ValidationError{Name: "required_permission", err: errors.New(`ent: missing required edge "PermissionDependency.required_permission"`)}
	}
	return nil
}

func (pdc *PermissionDependencyCreate) sqlSave(ctx context.Context) (*PermissionDependency, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PermissionDependencyCreate) createSpec() (*PermissionDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionDependency{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(permissiondependency.Table, sqlgraph.NewFieldSpec(permissiondependency.FieldID, field.TypeString))
	)
	_spec.OnConflict = pdc.conflict
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(permissiondependency.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(permissiondependency.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pdc.mutation.DeletedAt(); ok {
		_spec.SetField(permissiondependency.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pdc.mutation.DependencyType(); ok {
		_spec.SetField(permissiondependency.FieldDependencyType, field.TypeEnum, value)
		_node.DependencyType = value
	}
	if value, ok := pdc.mutation.Condition(); ok {
		_spec.SetField(permissiondependency.FieldCondition, field.TypeString, value)
		_node.Condition = value
	}
	if value, ok := pdc.mutation.Active(); ok {
		_spec.SetField(permissiondependency.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pdc.mutation.CreatedBy(); ok {
		_spec.SetField(permissiondependency.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if nodes := pdc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.RequiredPermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequiredPermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PermissionDependency.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionDependencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pdc *PermissionDependencyCreate) OnConflict(opts ...sql.ConflictOption) *PermissionDependencyUpsertOne {
	pdc.conflict = opts
	return &PermissionDependencyUpsertOne{
		create: pdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdc *PermissionDependencyCreate) OnConflictColumns(columns ...string) *PermissionDependencyUpsertOne {
	pdc.conflict = append(pdc.conflict, sql.ConflictColumns(columns...))
	return &PermissionDependencyUpsertOne{
		create: pdc,
	}
}

type (
	// PermissionDependencyUpsertOne is the builder for "upsert"-ing
	//  one PermissionDependency node.
	PermissionDependencyUpsertOne struct {
		create *PermissionDependencyCreate
	}

	// PermissionDependencyUpsert is the "OnConflict" setter.
	PermissionDependencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionDependencyUpsert) SetUpdatedAt(v time.Time) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateUpdatedAt() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionDependencyUpsert) SetDeletedAt(v time.Time) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateDeletedAt() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionDependencyUpsert) ClearDeletedAt() *PermissionDependencyUpsert {
	u.SetNull(permissiondependency.FieldDeletedAt)
	return u
}

// SetPermissionID sets the "permission_id" field.
func (u *PermissionDependencyUpsert) SetPermissionID(v xid.ID) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldPermissionID, v)
	return u
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdatePermissionID() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldPermissionID)
	return u
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (u *PermissionDependencyUpsert) SetRequiredPermissionID(v xid.ID) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldRequiredPermissionID, v)
	return u
}

// UpdateRequiredPermissionID sets the "required_permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateRequiredPermissionID() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldRequiredPermissionID)
	return u
}

// SetDependencyType sets the "dependency_type" field.
func (u *PermissionDependencyUpsert) SetDependencyType(v permissiondependency.DependencyType) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldDependencyType, v)
	return u
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateDependencyType() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldDependencyType)
	return u
}

// SetCondition sets the "condition" field.
func (u *PermissionDependencyUpsert) SetCondition(v string) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldCondition, v)
	return u
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateCondition() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldCondition)
	return u
}

// ClearCondition clears the value of the "condition" field.
func (u *PermissionDependencyUpsert) ClearCondition() *PermissionDependencyUpsert {
	u.SetNull(permissiondependency.FieldCondition)
	return u
}

// SetActive sets the "active" field.
func (u *PermissionDependencyUpsert) SetActive(v bool) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateActive() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldActive)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionDependencyUpsert) SetCreatedBy(v string) *PermissionDependencyUpsert {
	u.Set(permissiondependency.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionDependencyUpsert) UpdateCreatedBy() *PermissionDependencyUpsert {
	u.SetExcluded(permissiondependency.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionDependencyUpsert) ClearCreatedBy() *PermissionDependencyUpsert {
	u.SetNull(permissiondependency.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permissiondependency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionDependencyUpsertOne) UpdateNewValues() *PermissionDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(permissiondependency.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(permissiondependency.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermissionDependencyUpsertOne) Ignore() *PermissionDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionDependencyUpsertOne) DoNothing() *PermissionDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionDependencyCreate.OnConflict
// documentation for more info.
func (u *PermissionDependencyUpsertOne) Update(set func(*PermissionDependencyUpsert)) *PermissionDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionDependencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionDependencyUpsertOne) SetUpdatedAt(v time.Time) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateUpdatedAt() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionDependencyUpsertOne) SetDeletedAt(v time.Time) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateDeletedAt() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionDependencyUpsertOne) ClearDeletedAt() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPermissionID sets the "permission_id" field.
func (u *PermissionDependencyUpsertOne) SetPermissionID(v xid.ID) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetPermissionID(v)
	})
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdatePermissionID() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdatePermissionID()
	})
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (u *PermissionDependencyUpsertOne) SetRequiredPermissionID(v xid.ID) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetRequiredPermissionID(v)
	})
}

// UpdateRequiredPermissionID sets the "required_permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateRequiredPermissionID() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateRequiredPermissionID()
	})
}

// SetDependencyType sets the "dependency_type" field.
func (u *PermissionDependencyUpsertOne) SetDependencyType(v permissiondependency.DependencyType) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetDependencyType(v)
	})
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateDependencyType() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateDependencyType()
	})
}

// SetCondition sets the "condition" field.
func (u *PermissionDependencyUpsertOne) SetCondition(v string) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateCondition() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateCondition()
	})
}

// ClearCondition clears the value of the "condition" field.
func (u *PermissionDependencyUpsertOne) ClearCondition() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearCondition()
	})
}

// SetActive sets the "active" field.
func (u *PermissionDependencyUpsertOne) SetActive(v bool) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateActive() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateActive()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionDependencyUpsertOne) SetCreatedBy(v string) *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionDependencyUpsertOne) UpdateCreatedBy() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionDependencyUpsertOne) ClearCreatedBy() *PermissionDependencyUpsertOne {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *PermissionDependencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionDependencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionDependencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermissionDependencyUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PermissionDependencyUpsertOne.ID is not supported by MySQL driver. Use PermissionDependencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermissionDependencyUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermissionDependencyCreateBulk is the builder for creating many PermissionDependency entities in bulk.
type PermissionDependencyCreateBulk struct {
	config
	err      error
	builders []*PermissionDependencyCreate
	conflict []sql.ConflictOption
}

// Save creates the PermissionDependency entities in the database.
func (pdcb *PermissionDependencyCreateBulk) Save(ctx context.Context) ([]*PermissionDependency, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PermissionDependency, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PermissionDependencyCreateBulk) SaveX(ctx context.Context) []*PermissionDependency {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PermissionDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PermissionDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PermissionDependency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionDependencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pdcb *PermissionDependencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermissionDependencyUpsertBulk {
	pdcb.conflict = opts
	return &PermissionDependencyUpsertBulk{
		create: pdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdcb *PermissionDependencyCreateBulk) OnConflictColumns(columns ...string) *PermissionDependencyUpsertBulk {
	pdcb.conflict = append(pdcb.conflict, sql.ConflictColumns(columns...))
	return &PermissionDependencyUpsertBulk{
		create: pdcb,
	}
}

// PermissionDependencyUpsertBulk is the builder for "upsert"-ing
// a bulk of PermissionDependency nodes.
type PermissionDependencyUpsertBulk struct {
	create *PermissionDependencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permissiondependency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionDependencyUpsertBulk) UpdateNewValues() *PermissionDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(permissiondependency.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(permissiondependency.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PermissionDependency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermissionDependencyUpsertBulk) Ignore() *PermissionDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionDependencyUpsertBulk) DoNothing() *PermissionDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionDependencyCreateBulk.OnConflict
// documentation for more info.
func (u *PermissionDependencyUpsertBulk) Update(set func(*PermissionDependencyUpsert)) *PermissionDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionDependencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionDependencyUpsertBulk) SetUpdatedAt(v time.Time) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateUpdatedAt() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PermissionDependencyUpsertBulk) SetDeletedAt(v time.Time) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateDeletedAt() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PermissionDependencyUpsertBulk) ClearDeletedAt() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPermissionID sets the "permission_id" field.
func (u *PermissionDependencyUpsertBulk) SetPermissionID(v xid.ID) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetPermissionID(v)
	})
}

// UpdatePermissionID sets the "permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdatePermissionID() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdatePermissionID()
	})
}

// SetRequiredPermissionID sets the "required_permission_id" field.
func (u *PermissionDependencyUpsertBulk) SetRequiredPermissionID(v xid.ID) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetRequiredPermissionID(v)
	})
}

// UpdateRequiredPermissionID sets the "required_permission_id" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateRequiredPermissionID() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateRequiredPermissionID()
	})
}

// SetDependencyType sets the "dependency_type" field.
func (u *PermissionDependencyUpsertBulk) SetDependencyType(v permissiondependency.DependencyType) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetDependencyType(v)
	})
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateDependencyType() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateDependencyType()
	})
}

// SetCondition sets the "condition" field.
func (u *PermissionDependencyUpsertBulk) SetCondition(v string) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateCondition() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateCondition()
	})
}

// ClearCondition clears the value of the "condition" field.
func (u *PermissionDependencyUpsertBulk) ClearCondition() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearCondition()
	})
}

// SetActive sets the "active" field.
func (u *PermissionDependencyUpsertBulk) SetActive(v bool) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateActive() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateActive()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PermissionDependencyUpsertBulk) SetCreatedBy(v string) *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PermissionDependencyUpsertBulk) UpdateCreatedBy() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PermissionDependencyUpsertBulk) ClearCreatedBy() *PermissionDependencyUpsertBulk {
	return u.Update(func(s *PermissionDependencyUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *PermissionDependencyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermissionDependencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionDependencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionDependencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
