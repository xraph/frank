// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"
)

// WebhookEvent is the model entity for the WebhookEvent schema.
type WebhookEvent struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// WebhookID holds the value of the "webhook_id" field.
	WebhookID xid.ID `json:"webhook_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string]string `json:"headers,omitempty"`
	// Additional membership metadata
	Payload map[string]interface{} `json:"payload,omitempty"`
	// Delivered holds the value of the "delivered" field.
	Delivered bool `json:"delivered,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`
	// Attempts holds the value of the "attempts" field.
	Attempts int `json:"attempts,omitempty"`
	// NextRetry holds the value of the "next_retry" field.
	NextRetry *time.Time `json:"next_retry,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode *int `json:"status_code,omitempty"`
	// ResponseBody holds the value of the "response_body" field.
	ResponseBody string `json:"response_body,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebhookEventQuery when eager-loading is set.
	Edges        WebhookEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WebhookEventEdges holds the relations/edges for other nodes in the graph.
type WebhookEventEdges struct {
	// Webhook holds the value of the webhook edge.
	Webhook *Webhook `json:"webhook,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WebhookOrErr returns the Webhook value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebhookEventEdges) WebhookOrErr() (*Webhook, error) {
	if e.Webhook != nil {
		return e.Webhook, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: webhook.Label}
	}
	return nil, &NotLoadedError{edge: "webhook"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebhookEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhookevent.FieldHeaders, webhookevent.FieldPayload:
			values[i] = new([]byte)
		case webhookevent.FieldDelivered:
			values[i] = new(sql.NullBool)
		case webhookevent.FieldAttempts, webhookevent.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case webhookevent.FieldEventType, webhookevent.FieldResponseBody, webhookevent.FieldError:
			values[i] = new(sql.NullString)
		case webhookevent.FieldCreatedAt, webhookevent.FieldUpdatedAt, webhookevent.FieldDeletedAt, webhookevent.FieldDeliveredAt, webhookevent.FieldNextRetry:
			values[i] = new(sql.NullTime)
		case webhookevent.FieldID, webhookevent.FieldWebhookID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebhookEvent fields.
func (we *WebhookEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhookevent.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				we.ID = *value
			}
		case webhookevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case webhookevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case webhookevent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				we.DeletedAt = value.Time
			}
		case webhookevent.FieldWebhookID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_id", values[i])
			} else if value != nil {
				we.WebhookID = *value
			}
		case webhookevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				we.EventType = value.String
			}
		case webhookevent.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		case webhookevent.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case webhookevent.FieldDelivered:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field delivered", values[i])
			} else if value.Valid {
				we.Delivered = value.Bool
			}
		case webhookevent.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				we.DeliveredAt = new(time.Time)
				*we.DeliveredAt = value.Time
			}
		case webhookevent.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				we.Attempts = int(value.Int64)
			}
		case webhookevent.FieldNextRetry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_retry", values[i])
			} else if value.Valid {
				we.NextRetry = new(time.Time)
				*we.NextRetry = value.Time
			}
		case webhookevent.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				we.StatusCode = new(int)
				*we.StatusCode = int(value.Int64)
			}
		case webhookevent.FieldResponseBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value.Valid {
				we.ResponseBody = value.String
			}
		case webhookevent.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				we.Error = value.String
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebhookEvent.
// This includes values selected through modifiers, order, etc.
func (we *WebhookEvent) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryWebhook queries the "webhook" edge of the WebhookEvent entity.
func (we *WebhookEvent) QueryWebhook() *WebhookQuery {
	return NewWebhookEventClient(we.config).QueryWebhook(we)
}

// Update returns a builder for updating this WebhookEvent.
// Note that you need to call WebhookEvent.Unwrap() before calling this method if this WebhookEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WebhookEvent) Update() *WebhookEventUpdateOne {
	return NewWebhookEventClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WebhookEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WebhookEvent) Unwrap() *WebhookEvent {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebhookEvent is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WebhookEvent) String() string {
	var builder strings.Builder
	builder.WriteString("WebhookEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(we.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("webhook_id=")
	builder.WriteString(fmt.Sprintf("%v", we.WebhookID))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(we.EventType)
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(fmt.Sprintf("%v", we.Headers))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", we.Payload))
	builder.WriteString(", ")
	builder.WriteString("delivered=")
	builder.WriteString(fmt.Sprintf("%v", we.Delivered))
	builder.WriteString(", ")
	if v := we.DeliveredAt; v != nil {
		builder.WriteString("delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", we.Attempts))
	builder.WriteString(", ")
	if v := we.NextRetry; v != nil {
		builder.WriteString("next_retry=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := we.StatusCode; v != nil {
		builder.WriteString("status_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(we.ResponseBody)
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(we.Error)
	builder.WriteByte(')')
	return builder.String()
}

// WebhookEvents is a parsable slice of WebhookEvent.
type WebhookEvents []*WebhookEvent
