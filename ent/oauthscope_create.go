// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
)

// OAuthScopeCreate is the builder for creating a OAuthScope entity.
type OAuthScopeCreate struct {
	config
	mutation *OAuthScopeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (osc *OAuthScopeCreate) SetCreatedAt(t time.Time) *OAuthScopeCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableCreatedAt(t *time.Time) *OAuthScopeCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OAuthScopeCreate) SetUpdatedAt(t time.Time) *OAuthScopeCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableUpdatedAt(t *time.Time) *OAuthScopeCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetDeletedAt sets the "deleted_at" field.
func (osc *OAuthScopeCreate) SetDeletedAt(t time.Time) *OAuthScopeCreate {
	osc.mutation.SetDeletedAt(t)
	return osc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableDeletedAt(t *time.Time) *OAuthScopeCreate {
	if t != nil {
		osc.SetDeletedAt(*t)
	}
	return osc
}

// SetName sets the "name" field.
func (osc *OAuthScopeCreate) SetName(s string) *OAuthScopeCreate {
	osc.mutation.SetName(s)
	return osc
}

// SetDescription sets the "description" field.
func (osc *OAuthScopeCreate) SetDescription(s string) *OAuthScopeCreate {
	osc.mutation.SetDescription(s)
	return osc
}

// SetDefaultScope sets the "default_scope" field.
func (osc *OAuthScopeCreate) SetDefaultScope(b bool) *OAuthScopeCreate {
	osc.mutation.SetDefaultScope(b)
	return osc
}

// SetNillableDefaultScope sets the "default_scope" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableDefaultScope(b *bool) *OAuthScopeCreate {
	if b != nil {
		osc.SetDefaultScope(*b)
	}
	return osc
}

// SetPublic sets the "public" field.
func (osc *OAuthScopeCreate) SetPublic(b bool) *OAuthScopeCreate {
	osc.mutation.SetPublic(b)
	return osc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillablePublic(b *bool) *OAuthScopeCreate {
	if b != nil {
		osc.SetPublic(*b)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OAuthScopeCreate) SetID(x xid.ID) *OAuthScopeCreate {
	osc.mutation.SetID(x)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableID(x *xid.ID) *OAuthScopeCreate {
	if x != nil {
		osc.SetID(*x)
	}
	return osc
}

// AddClientIDs adds the "clients" edge to the OAuthClient entity by IDs.
func (osc *OAuthScopeCreate) AddClientIDs(ids ...xid.ID) *OAuthScopeCreate {
	osc.mutation.AddClientIDs(ids...)
	return osc
}

// AddClients adds the "clients" edges to the OAuthClient entity.
func (osc *OAuthScopeCreate) AddClients(o ...*OAuthClient) *OAuthScopeCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddClientIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (osc *OAuthScopeCreate) AddTokenIDs(ids ...xid.ID) *OAuthScopeCreate {
	osc.mutation.AddTokenIDs(ids...)
	return osc
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (osc *OAuthScopeCreate) AddTokens(o ...*OAuthToken) *OAuthScopeCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (osc *OAuthScopeCreate) AddAuthorizationIDs(ids ...xid.ID) *OAuthScopeCreate {
	osc.mutation.AddAuthorizationIDs(ids...)
	return osc
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (osc *OAuthScopeCreate) AddAuthorizations(o ...*OAuthAuthorization) *OAuthScopeCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddAuthorizationIDs(ids...)
}

// Mutation returns the OAuthScopeMutation object of the builder.
func (osc *OAuthScopeCreate) Mutation() *OAuthScopeMutation {
	return osc.mutation
}

// Save creates the OAuthScope in the database.
func (osc *OAuthScopeCreate) Save(ctx context.Context) (*OAuthScope, error) {
	osc.defaults()
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OAuthScopeCreate) SaveX(ctx context.Context) *OAuthScope {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OAuthScopeCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OAuthScopeCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OAuthScopeCreate) defaults() {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		v := oauthscope.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		v := oauthscope.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.DefaultScope(); !ok {
		v := oauthscope.DefaultDefaultScope
		osc.mutation.SetDefaultScope(v)
	}
	if _, ok := osc.mutation.Public(); !ok {
		v := oauthscope.DefaultPublic
		osc.mutation.SetPublic(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		v := oauthscope.DefaultID()
		osc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OAuthScopeCreate) check() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthScope.created_at"`)}
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthScope.updated_at"`)}
	}
	if _, ok := osc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OAuthScope.name"`)}
	}
	if v, ok := osc.mutation.Name(); ok {
		if err := oauthscope.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthScope.name": %w`, err)}
		}
	}
	if _, ok := osc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "OAuthScope.description"`)}
	}
	if v, ok := osc.mutation.Description(); ok {
		if err := oauthscope.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "OAuthScope.description": %w`, err)}
		}
	}
	if _, ok := osc.mutation.DefaultScope(); !ok {
		return &ValidationError{Name: "default_scope", err: errors.New(`ent: missing required field "OAuthScope.default_scope"`)}
	}
	if _, ok := osc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "OAuthScope.public"`)}
	}
	return nil
}

func (osc *OAuthScopeCreate) sqlSave(ctx context.Context) (*OAuthScope, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OAuthScopeCreate) createSpec() (*OAuthScope, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthScope{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(oauthscope.Table, sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString))
	)
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(oauthscope.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthscope.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.DeletedAt(); ok {
		_spec.SetField(oauthscope.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := osc.mutation.Name(); ok {
		_spec.SetField(oauthscope.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := osc.mutation.Description(); ok {
		_spec.SetField(oauthscope.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := osc.mutation.DefaultScope(); ok {
		_spec.SetField(oauthscope.FieldDefaultScope, field.TypeBool, value)
		_node.DefaultScope = value
	}
	if value, ok := osc.mutation.Public(); ok {
		_spec.SetField(oauthscope.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if nodes := osc.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.ClientsTable,
			Columns: oauthscope.ClientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.TokensTable,
			Columns: oauthscope.TokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.AuthorizationsTable,
			Columns: oauthscope.AuthorizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthScope.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (osc *OAuthScopeCreate) OnConflict(opts ...sql.ConflictOption) *OAuthScopeUpsertOne {
	osc.conflict = opts
	return &OAuthScopeUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OAuthScopeCreate) OnConflictColumns(columns ...string) *OAuthScopeUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OAuthScopeUpsertOne{
		create: osc,
	}
}

type (
	// OAuthScopeUpsertOne is the builder for "upsert"-ing
	//  one OAuthScope node.
	OAuthScopeUpsertOne struct {
		create *OAuthScopeCreate
	}

	// OAuthScopeUpsert is the "OnConflict" setter.
	OAuthScopeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthScopeUpsert) SetUpdatedAt(v time.Time) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdateUpdatedAt() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthScopeUpsert) SetDeletedAt(v time.Time) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdateDeletedAt() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthScopeUpsert) ClearDeletedAt() *OAuthScopeUpsert {
	u.SetNull(oauthscope.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *OAuthScopeUpsert) SetName(v string) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdateName() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *OAuthScopeUpsert) SetDescription(v string) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdateDescription() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldDescription)
	return u
}

// SetDefaultScope sets the "default_scope" field.
func (u *OAuthScopeUpsert) SetDefaultScope(v bool) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldDefaultScope, v)
	return u
}

// UpdateDefaultScope sets the "default_scope" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdateDefaultScope() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldDefaultScope)
	return u
}

// SetPublic sets the "public" field.
func (u *OAuthScopeUpsert) SetPublic(v bool) *OAuthScopeUpsert {
	u.Set(oauthscope.FieldPublic, v)
	return u
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthScopeUpsert) UpdatePublic() *OAuthScopeUpsert {
	u.SetExcluded(oauthscope.FieldPublic)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthScopeUpsertOne) UpdateNewValues() *OAuthScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauthscope.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauthscope.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthScopeUpsertOne) Ignore() *OAuthScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthScopeUpsertOne) DoNothing() *OAuthScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthScopeCreate.OnConflict
// documentation for more info.
func (u *OAuthScopeUpsertOne) Update(set func(*OAuthScopeUpsert)) *OAuthScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthScopeUpsertOne) SetUpdatedAt(v time.Time) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdateUpdatedAt() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthScopeUpsertOne) SetDeletedAt(v time.Time) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdateDeletedAt() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthScopeUpsertOne) ClearDeletedAt() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *OAuthScopeUpsertOne) SetName(v string) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdateName() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *OAuthScopeUpsertOne) SetDescription(v string) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdateDescription() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDescription()
	})
}

// SetDefaultScope sets the "default_scope" field.
func (u *OAuthScopeUpsertOne) SetDefaultScope(v bool) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDefaultScope(v)
	})
}

// UpdateDefaultScope sets the "default_scope" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdateDefaultScope() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDefaultScope()
	})
}

// SetPublic sets the "public" field.
func (u *OAuthScopeUpsertOne) SetPublic(v bool) *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthScopeUpsertOne) UpdatePublic() *OAuthScopeUpsertOne {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdatePublic()
	})
}

// Exec executes the query.
func (u *OAuthScopeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthScopeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthScopeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthScopeUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OAuthScopeUpsertOne.ID is not supported by MySQL driver. Use OAuthScopeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthScopeUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthScopeCreateBulk is the builder for creating many OAuthScope entities in bulk.
type OAuthScopeCreateBulk struct {
	config
	err      error
	builders []*OAuthScopeCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthScope entities in the database.
func (oscb *OAuthScopeCreateBulk) Save(ctx context.Context) ([]*OAuthScope, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OAuthScope, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OAuthScopeCreateBulk) SaveX(ctx context.Context) []*OAuthScope {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OAuthScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OAuthScopeCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthScope.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthScopeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oscb *OAuthScopeCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthScopeUpsertBulk {
	oscb.conflict = opts
	return &OAuthScopeUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OAuthScopeCreateBulk) OnConflictColumns(columns ...string) *OAuthScopeUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OAuthScopeUpsertBulk{
		create: oscb,
	}
}

// OAuthScopeUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthScope nodes.
type OAuthScopeUpsertBulk struct {
	create *OAuthScopeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthscope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthScopeUpsertBulk) UpdateNewValues() *OAuthScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauthscope.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauthscope.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthScope.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthScopeUpsertBulk) Ignore() *OAuthScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthScopeUpsertBulk) DoNothing() *OAuthScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthScopeCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthScopeUpsertBulk) Update(set func(*OAuthScopeUpsert)) *OAuthScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthScopeUpsertBulk) SetUpdatedAt(v time.Time) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdateUpdatedAt() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthScopeUpsertBulk) SetDeletedAt(v time.Time) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdateDeletedAt() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthScopeUpsertBulk) ClearDeletedAt() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *OAuthScopeUpsertBulk) SetName(v string) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdateName() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *OAuthScopeUpsertBulk) SetDescription(v string) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdateDescription() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDescription()
	})
}

// SetDefaultScope sets the "default_scope" field.
func (u *OAuthScopeUpsertBulk) SetDefaultScope(v bool) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetDefaultScope(v)
	})
}

// UpdateDefaultScope sets the "default_scope" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdateDefaultScope() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdateDefaultScope()
	})
}

// SetPublic sets the "public" field.
func (u *OAuthScopeUpsertBulk) SetPublic(v bool) *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthScopeUpsertBulk) UpdatePublic() *OAuthScopeUpsertBulk {
	return u.Update(func(s *OAuthScopeUpsert) {
		s.UpdatePublic()
	})
}

// Exec executes the query.
func (u *OAuthScopeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthScopeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthScopeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthScopeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
