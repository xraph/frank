// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
)

// OAuthClientCreate is the builder for creating a OAuthClient entity.
type OAuthClientCreate struct {
	config
	mutation *OAuthClientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (occ *OAuthClientCreate) SetCreatedAt(t time.Time) *OAuthClientCreate {
	occ.mutation.SetCreatedAt(t)
	return occ
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableCreatedAt(t *time.Time) *OAuthClientCreate {
	if t != nil {
		occ.SetCreatedAt(*t)
	}
	return occ
}

// SetUpdatedAt sets the "updated_at" field.
func (occ *OAuthClientCreate) SetUpdatedAt(t time.Time) *OAuthClientCreate {
	occ.mutation.SetUpdatedAt(t)
	return occ
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableUpdatedAt(t *time.Time) *OAuthClientCreate {
	if t != nil {
		occ.SetUpdatedAt(*t)
	}
	return occ
}

// SetDeletedAt sets the "deleted_at" field.
func (occ *OAuthClientCreate) SetDeletedAt(t time.Time) *OAuthClientCreate {
	occ.mutation.SetDeletedAt(t)
	return occ
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableDeletedAt(t *time.Time) *OAuthClientCreate {
	if t != nil {
		occ.SetDeletedAt(*t)
	}
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OAuthClientCreate) SetClientID(s string) *OAuthClientCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetClientSecret sets the "client_secret" field.
func (occ *OAuthClientCreate) SetClientSecret(s string) *OAuthClientCreate {
	occ.mutation.SetClientSecret(s)
	return occ
}

// SetClientName sets the "client_name" field.
func (occ *OAuthClientCreate) SetClientName(s string) *OAuthClientCreate {
	occ.mutation.SetClientName(s)
	return occ
}

// SetClientDescription sets the "client_description" field.
func (occ *OAuthClientCreate) SetClientDescription(s string) *OAuthClientCreate {
	occ.mutation.SetClientDescription(s)
	return occ
}

// SetNillableClientDescription sets the "client_description" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableClientDescription(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetClientDescription(*s)
	}
	return occ
}

// SetClientURI sets the "client_uri" field.
func (occ *OAuthClientCreate) SetClientURI(s string) *OAuthClientCreate {
	occ.mutation.SetClientURI(s)
	return occ
}

// SetNillableClientURI sets the "client_uri" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableClientURI(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetClientURI(*s)
	}
	return occ
}

// SetLogoURI sets the "logo_uri" field.
func (occ *OAuthClientCreate) SetLogoURI(s string) *OAuthClientCreate {
	occ.mutation.SetLogoURI(s)
	return occ
}

// SetNillableLogoURI sets the "logo_uri" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableLogoURI(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetLogoURI(*s)
	}
	return occ
}

// SetRedirectUris sets the "redirect_uris" field.
func (occ *OAuthClientCreate) SetRedirectUris(s []string) *OAuthClientCreate {
	occ.mutation.SetRedirectUris(s)
	return occ
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (occ *OAuthClientCreate) SetPostLogoutRedirectUris(s []string) *OAuthClientCreate {
	occ.mutation.SetPostLogoutRedirectUris(s)
	return occ
}

// SetOrganizationID sets the "organization_id" field.
func (occ *OAuthClientCreate) SetOrganizationID(x xid.ID) *OAuthClientCreate {
	occ.mutation.SetOrganizationID(x)
	return occ
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableOrganizationID(x *xid.ID) *OAuthClientCreate {
	if x != nil {
		occ.SetOrganizationID(*x)
	}
	return occ
}

// SetPublic sets the "public" field.
func (occ *OAuthClientCreate) SetPublic(b bool) *OAuthClientCreate {
	occ.mutation.SetPublic(b)
	return occ
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillablePublic(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetPublic(*b)
	}
	return occ
}

// SetActive sets the "active" field.
func (occ *OAuthClientCreate) SetActive(b bool) *OAuthClientCreate {
	occ.mutation.SetActive(b)
	return occ
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableActive(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetActive(*b)
	}
	return occ
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (occ *OAuthClientCreate) SetAllowedCorsOrigins(s []string) *OAuthClientCreate {
	occ.mutation.SetAllowedCorsOrigins(s)
	return occ
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (occ *OAuthClientCreate) SetAllowedGrantTypes(s []string) *OAuthClientCreate {
	occ.mutation.SetAllowedGrantTypes(s)
	return occ
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (occ *OAuthClientCreate) SetTokenExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetTokenExpirySeconds(i)
	return occ
}

// SetNillableTokenExpirySeconds sets the "token_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableTokenExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetTokenExpirySeconds(*i)
	}
	return occ
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (occ *OAuthClientCreate) SetRefreshTokenExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetRefreshTokenExpirySeconds(i)
	return occ
}

// SetNillableRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRefreshTokenExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetRefreshTokenExpirySeconds(*i)
	}
	return occ
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (occ *OAuthClientCreate) SetAuthCodeExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetAuthCodeExpirySeconds(i)
	return occ
}

// SetNillableAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableAuthCodeExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetAuthCodeExpirySeconds(*i)
	}
	return occ
}

// SetRequiresPkce sets the "requires_pkce" field.
func (occ *OAuthClientCreate) SetRequiresPkce(b bool) *OAuthClientCreate {
	occ.mutation.SetRequiresPkce(b)
	return occ
}

// SetNillableRequiresPkce sets the "requires_pkce" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRequiresPkce(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetRequiresPkce(*b)
	}
	return occ
}

// SetRequiresConsent sets the "requires_consent" field.
func (occ *OAuthClientCreate) SetRequiresConsent(b bool) *OAuthClientCreate {
	occ.mutation.SetRequiresConsent(b)
	return occ
}

// SetNillableRequiresConsent sets the "requires_consent" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRequiresConsent(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetRequiresConsent(*b)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OAuthClientCreate) SetID(x xid.ID) *OAuthClientCreate {
	occ.mutation.SetID(x)
	return occ
}

// SetNillableID sets the "id" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableID(x *xid.ID) *OAuthClientCreate {
	if x != nil {
		occ.SetID(*x)
	}
	return occ
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (occ *OAuthClientCreate) SetOrganization(o *Organization) *OAuthClientCreate {
	return occ.SetOrganizationID(o.ID)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (occ *OAuthClientCreate) AddTokenIDs(ids ...xid.ID) *OAuthClientCreate {
	occ.mutation.AddTokenIDs(ids...)
	return occ
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (occ *OAuthClientCreate) AddTokens(o ...*OAuthToken) *OAuthClientCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (occ *OAuthClientCreate) AddAuthorizationIDs(ids ...xid.ID) *OAuthClientCreate {
	occ.mutation.AddAuthorizationIDs(ids...)
	return occ
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (occ *OAuthClientCreate) AddAuthorizations(o ...*OAuthAuthorization) *OAuthClientCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddAuthorizationIDs(ids...)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (occ *OAuthClientCreate) AddScopeIDs(ids ...xid.ID) *OAuthClientCreate {
	occ.mutation.AddScopeIDs(ids...)
	return occ
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (occ *OAuthClientCreate) AddScopes(o ...*OAuthScope) *OAuthClientCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddScopeIDs(ids...)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (occ *OAuthClientCreate) Mutation() *OAuthClientMutation {
	return occ.mutation
}

// Save creates the OAuthClient in the database.
func (occ *OAuthClientCreate) Save(ctx context.Context) (*OAuthClient, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OAuthClientCreate) SaveX(ctx context.Context) *OAuthClient {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OAuthClientCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OAuthClientCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OAuthClientCreate) defaults() {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		v := oauthclient.DefaultCreatedAt()
		occ.mutation.SetCreatedAt(v)
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		v := oauthclient.DefaultUpdatedAt()
		occ.mutation.SetUpdatedAt(v)
	}
	if _, ok := occ.mutation.Public(); !ok {
		v := oauthclient.DefaultPublic
		occ.mutation.SetPublic(v)
	}
	if _, ok := occ.mutation.Active(); !ok {
		v := oauthclient.DefaultActive
		occ.mutation.SetActive(v)
	}
	if _, ok := occ.mutation.AllowedGrantTypes(); !ok {
		v := oauthclient.DefaultAllowedGrantTypes
		occ.mutation.SetAllowedGrantTypes(v)
	}
	if _, ok := occ.mutation.TokenExpirySeconds(); !ok {
		v := oauthclient.DefaultTokenExpirySeconds
		occ.mutation.SetTokenExpirySeconds(v)
	}
	if _, ok := occ.mutation.RefreshTokenExpirySeconds(); !ok {
		v := oauthclient.DefaultRefreshTokenExpirySeconds
		occ.mutation.SetRefreshTokenExpirySeconds(v)
	}
	if _, ok := occ.mutation.AuthCodeExpirySeconds(); !ok {
		v := oauthclient.DefaultAuthCodeExpirySeconds
		occ.mutation.SetAuthCodeExpirySeconds(v)
	}
	if _, ok := occ.mutation.RequiresPkce(); !ok {
		v := oauthclient.DefaultRequiresPkce
		occ.mutation.SetRequiresPkce(v)
	}
	if _, ok := occ.mutation.RequiresConsent(); !ok {
		v := oauthclient.DefaultRequiresConsent
		occ.mutation.SetRequiresConsent(v)
	}
	if _, ok := occ.mutation.ID(); !ok {
		v := oauthclient.DefaultID()
		occ.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OAuthClientCreate) check() error {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthClient.created_at"`)}
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthClient.updated_at"`)}
	}
	if _, ok := occ.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthClient.client_id"`)}
	}
	if v, ok := occ.mutation.ClientID(); ok {
		if err := oauthclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_id": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OAuthClient.client_secret"`)}
	}
	if v, ok := occ.mutation.ClientSecret(); ok {
		if err := oauthclient.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_secret": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientName(); !ok {
		return &ValidationError{Name: "client_name", err: errors.New(`ent: missing required field "OAuthClient.client_name"`)}
	}
	if v, ok := occ.mutation.ClientName(); ok {
		if err := oauthclient.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_name": %w`, err)}
		}
	}
	if _, ok := occ.mutation.RedirectUris(); !ok {
		return &ValidationError{Name: "redirect_uris", err: errors.New(`ent: missing required field "OAuthClient.redirect_uris"`)}
	}
	if _, ok := occ.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "OAuthClient.public"`)}
	}
	if _, ok := occ.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "OAuthClient.active"`)}
	}
	if _, ok := occ.mutation.AllowedGrantTypes(); !ok {
		return &ValidationError{Name: "allowed_grant_types", err: errors.New(`ent: missing required field "OAuthClient.allowed_grant_types"`)}
	}
	if _, ok := occ.mutation.TokenExpirySeconds(); !ok {
		return &ValidationError{Name: "token_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.token_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.RefreshTokenExpirySeconds(); !ok {
		return &ValidationError{Name: "refresh_token_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.refresh_token_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.AuthCodeExpirySeconds(); !ok {
		return &ValidationError{Name: "auth_code_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.auth_code_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.RequiresPkce(); !ok {
		return &ValidationError{Name: "requires_pkce", err: errors.New(`ent: missing required field "OAuthClient.requires_pkce"`)}
	}
	if _, ok := occ.mutation.RequiresConsent(); !ok {
		return &ValidationError{Name: "requires_consent", err: errors.New(`ent: missing required field "OAuthClient.requires_consent"`)}
	}
	return nil
}

func (occ *OAuthClientCreate) sqlSave(ctx context.Context) (*OAuthClient, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OAuthClientCreate) createSpec() (*OAuthClient, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthClient{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oauthclient.Table, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	)
	_spec.OnConflict = occ.conflict
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := occ.mutation.CreatedAt(); ok {
		_spec.SetField(oauthclient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := occ.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthclient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := occ.mutation.DeletedAt(); ok {
		_spec.SetField(oauthclient.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oauthclient.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.ClientSecret(); ok {
		_spec.SetField(oauthclient.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := occ.mutation.ClientName(); ok {
		_spec.SetField(oauthclient.FieldClientName, field.TypeString, value)
		_node.ClientName = value
	}
	if value, ok := occ.mutation.ClientDescription(); ok {
		_spec.SetField(oauthclient.FieldClientDescription, field.TypeString, value)
		_node.ClientDescription = value
	}
	if value, ok := occ.mutation.ClientURI(); ok {
		_spec.SetField(oauthclient.FieldClientURI, field.TypeString, value)
		_node.ClientURI = value
	}
	if value, ok := occ.mutation.LogoURI(); ok {
		_spec.SetField(oauthclient.FieldLogoURI, field.TypeString, value)
		_node.LogoURI = value
	}
	if value, ok := occ.mutation.RedirectUris(); ok {
		_spec.SetField(oauthclient.FieldRedirectUris, field.TypeJSON, value)
		_node.RedirectUris = value
	}
	if value, ok := occ.mutation.PostLogoutRedirectUris(); ok {
		_spec.SetField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON, value)
		_node.PostLogoutRedirectUris = value
	}
	if value, ok := occ.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := occ.mutation.Active(); ok {
		_spec.SetField(oauthclient.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := occ.mutation.AllowedCorsOrigins(); ok {
		_spec.SetField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON, value)
		_node.AllowedCorsOrigins = value
	}
	if value, ok := occ.mutation.AllowedGrantTypes(); ok {
		_spec.SetField(oauthclient.FieldAllowedGrantTypes, field.TypeJSON, value)
		_node.AllowedGrantTypes = value
	}
	if value, ok := occ.mutation.TokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
		_node.TokenExpirySeconds = value
	}
	if value, ok := occ.mutation.RefreshTokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
		_node.RefreshTokenExpirySeconds = value
	}
	if value, ok := occ.mutation.AuthCodeExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
		_node.AuthCodeExpirySeconds = value
	}
	if value, ok := occ.mutation.RequiresPkce(); ok {
		_spec.SetField(oauthclient.FieldRequiresPkce, field.TypeBool, value)
		_node.RequiresPkce = value
	}
	if value, ok := occ.mutation.RequiresConsent(); ok {
		_spec.SetField(oauthclient.FieldRequiresConsent, field.TypeBool, value)
		_node.RequiresConsent = value
	}
	if nodes := occ.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthClient.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthClientUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (occ *OAuthClientCreate) OnConflict(opts ...sql.ConflictOption) *OAuthClientUpsertOne {
	occ.conflict = opts
	return &OAuthClientUpsertOne{
		create: occ,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occ *OAuthClientCreate) OnConflictColumns(columns ...string) *OAuthClientUpsertOne {
	occ.conflict = append(occ.conflict, sql.ConflictColumns(columns...))
	return &OAuthClientUpsertOne{
		create: occ,
	}
}

type (
	// OAuthClientUpsertOne is the builder for "upsert"-ing
	//  one OAuthClient node.
	OAuthClientUpsertOne struct {
		create *OAuthClientCreate
	}

	// OAuthClientUpsert is the "OnConflict" setter.
	OAuthClientUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthClientUpsert) SetUpdatedAt(v time.Time) *OAuthClientUpsert {
	u.Set(oauthclient.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateUpdatedAt() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthClientUpsert) SetDeletedAt(v time.Time) *OAuthClientUpsert {
	u.Set(oauthclient.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateDeletedAt() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthClientUpsert) ClearDeletedAt() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldDeletedAt)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OAuthClientUpsert) SetClientID(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateClientID() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthClientUpsert) SetClientSecret(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateClientSecret() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldClientSecret)
	return u
}

// SetClientName sets the "client_name" field.
func (u *OAuthClientUpsert) SetClientName(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldClientName, v)
	return u
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateClientName() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldClientName)
	return u
}

// SetClientDescription sets the "client_description" field.
func (u *OAuthClientUpsert) SetClientDescription(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldClientDescription, v)
	return u
}

// UpdateClientDescription sets the "client_description" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateClientDescription() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldClientDescription)
	return u
}

// ClearClientDescription clears the value of the "client_description" field.
func (u *OAuthClientUpsert) ClearClientDescription() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldClientDescription)
	return u
}

// SetClientURI sets the "client_uri" field.
func (u *OAuthClientUpsert) SetClientURI(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldClientURI, v)
	return u
}

// UpdateClientURI sets the "client_uri" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateClientURI() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldClientURI)
	return u
}

// ClearClientURI clears the value of the "client_uri" field.
func (u *OAuthClientUpsert) ClearClientURI() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldClientURI)
	return u
}

// SetLogoURI sets the "logo_uri" field.
func (u *OAuthClientUpsert) SetLogoURI(v string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldLogoURI, v)
	return u
}

// UpdateLogoURI sets the "logo_uri" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateLogoURI() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldLogoURI)
	return u
}

// ClearLogoURI clears the value of the "logo_uri" field.
func (u *OAuthClientUpsert) ClearLogoURI() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldLogoURI)
	return u
}

// SetRedirectUris sets the "redirect_uris" field.
func (u *OAuthClientUpsert) SetRedirectUris(v []string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldRedirectUris, v)
	return u
}

// UpdateRedirectUris sets the "redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateRedirectUris() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldRedirectUris)
	return u
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsert) SetPostLogoutRedirectUris(v []string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldPostLogoutRedirectUris, v)
	return u
}

// UpdatePostLogoutRedirectUris sets the "post_logout_redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdatePostLogoutRedirectUris() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldPostLogoutRedirectUris)
	return u
}

// ClearPostLogoutRedirectUris clears the value of the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsert) ClearPostLogoutRedirectUris() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldPostLogoutRedirectUris)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthClientUpsert) SetOrganizationID(v xid.ID) *OAuthClientUpsert {
	u.Set(oauthclient.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateOrganizationID() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthClientUpsert) ClearOrganizationID() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldOrganizationID)
	return u
}

// SetPublic sets the "public" field.
func (u *OAuthClientUpsert) SetPublic(v bool) *OAuthClientUpsert {
	u.Set(oauthclient.FieldPublic, v)
	return u
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdatePublic() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldPublic)
	return u
}

// SetActive sets the "active" field.
func (u *OAuthClientUpsert) SetActive(v bool) *OAuthClientUpsert {
	u.Set(oauthclient.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateActive() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldActive)
	return u
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (u *OAuthClientUpsert) SetAllowedCorsOrigins(v []string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldAllowedCorsOrigins, v)
	return u
}

// UpdateAllowedCorsOrigins sets the "allowed_cors_origins" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateAllowedCorsOrigins() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldAllowedCorsOrigins)
	return u
}

// ClearAllowedCorsOrigins clears the value of the "allowed_cors_origins" field.
func (u *OAuthClientUpsert) ClearAllowedCorsOrigins() *OAuthClientUpsert {
	u.SetNull(oauthclient.FieldAllowedCorsOrigins)
	return u
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (u *OAuthClientUpsert) SetAllowedGrantTypes(v []string) *OAuthClientUpsert {
	u.Set(oauthclient.FieldAllowedGrantTypes, v)
	return u
}

// UpdateAllowedGrantTypes sets the "allowed_grant_types" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateAllowedGrantTypes() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldAllowedGrantTypes)
	return u
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (u *OAuthClientUpsert) SetTokenExpirySeconds(v int) *OAuthClientUpsert {
	u.Set(oauthclient.FieldTokenExpirySeconds, v)
	return u
}

// UpdateTokenExpirySeconds sets the "token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateTokenExpirySeconds() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldTokenExpirySeconds)
	return u
}

// AddTokenExpirySeconds adds v to the "token_expiry_seconds" field.
func (u *OAuthClientUpsert) AddTokenExpirySeconds(v int) *OAuthClientUpsert {
	u.Add(oauthclient.FieldTokenExpirySeconds, v)
	return u
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsert) SetRefreshTokenExpirySeconds(v int) *OAuthClientUpsert {
	u.Set(oauthclient.FieldRefreshTokenExpirySeconds, v)
	return u
}

// UpdateRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateRefreshTokenExpirySeconds() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldRefreshTokenExpirySeconds)
	return u
}

// AddRefreshTokenExpirySeconds adds v to the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsert) AddRefreshTokenExpirySeconds(v int) *OAuthClientUpsert {
	u.Add(oauthclient.FieldRefreshTokenExpirySeconds, v)
	return u
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsert) SetAuthCodeExpirySeconds(v int) *OAuthClientUpsert {
	u.Set(oauthclient.FieldAuthCodeExpirySeconds, v)
	return u
}

// UpdateAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateAuthCodeExpirySeconds() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldAuthCodeExpirySeconds)
	return u
}

// AddAuthCodeExpirySeconds adds v to the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsert) AddAuthCodeExpirySeconds(v int) *OAuthClientUpsert {
	u.Add(oauthclient.FieldAuthCodeExpirySeconds, v)
	return u
}

// SetRequiresPkce sets the "requires_pkce" field.
func (u *OAuthClientUpsert) SetRequiresPkce(v bool) *OAuthClientUpsert {
	u.Set(oauthclient.FieldRequiresPkce, v)
	return u
}

// UpdateRequiresPkce sets the "requires_pkce" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateRequiresPkce() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldRequiresPkce)
	return u
}

// SetRequiresConsent sets the "requires_consent" field.
func (u *OAuthClientUpsert) SetRequiresConsent(v bool) *OAuthClientUpsert {
	u.Set(oauthclient.FieldRequiresConsent, v)
	return u
}

// UpdateRequiresConsent sets the "requires_consent" field to the value that was provided on create.
func (u *OAuthClientUpsert) UpdateRequiresConsent() *OAuthClientUpsert {
	u.SetExcluded(oauthclient.FieldRequiresConsent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthClientUpsertOne) UpdateNewValues() *OAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauthclient.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauthclient.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthClientUpsertOne) Ignore() *OAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthClientUpsertOne) DoNothing() *OAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthClientCreate.OnConflict
// documentation for more info.
func (u *OAuthClientUpsertOne) Update(set func(*OAuthClientUpsert)) *OAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthClientUpsertOne) SetUpdatedAt(v time.Time) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateUpdatedAt() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthClientUpsertOne) SetDeletedAt(v time.Time) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateDeletedAt() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthClientUpsertOne) ClearDeletedAt() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthClientUpsertOne) SetClientID(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateClientID() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthClientUpsertOne) SetClientSecret(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateClientSecret() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientSecret()
	})
}

// SetClientName sets the "client_name" field.
func (u *OAuthClientUpsertOne) SetClientName(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateClientName() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientName()
	})
}

// SetClientDescription sets the "client_description" field.
func (u *OAuthClientUpsertOne) SetClientDescription(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientDescription(v)
	})
}

// UpdateClientDescription sets the "client_description" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateClientDescription() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientDescription()
	})
}

// ClearClientDescription clears the value of the "client_description" field.
func (u *OAuthClientUpsertOne) ClearClientDescription() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearClientDescription()
	})
}

// SetClientURI sets the "client_uri" field.
func (u *OAuthClientUpsertOne) SetClientURI(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientURI(v)
	})
}

// UpdateClientURI sets the "client_uri" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateClientURI() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientURI()
	})
}

// ClearClientURI clears the value of the "client_uri" field.
func (u *OAuthClientUpsertOne) ClearClientURI() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearClientURI()
	})
}

// SetLogoURI sets the "logo_uri" field.
func (u *OAuthClientUpsertOne) SetLogoURI(v string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetLogoURI(v)
	})
}

// UpdateLogoURI sets the "logo_uri" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateLogoURI() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateLogoURI()
	})
}

// ClearLogoURI clears the value of the "logo_uri" field.
func (u *OAuthClientUpsertOne) ClearLogoURI() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearLogoURI()
	})
}

// SetRedirectUris sets the "redirect_uris" field.
func (u *OAuthClientUpsertOne) SetRedirectUris(v []string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRedirectUris(v)
	})
}

// UpdateRedirectUris sets the "redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateRedirectUris() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRedirectUris()
	})
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsertOne) SetPostLogoutRedirectUris(v []string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetPostLogoutRedirectUris(v)
	})
}

// UpdatePostLogoutRedirectUris sets the "post_logout_redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdatePostLogoutRedirectUris() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdatePostLogoutRedirectUris()
	})
}

// ClearPostLogoutRedirectUris clears the value of the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsertOne) ClearPostLogoutRedirectUris() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearPostLogoutRedirectUris()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthClientUpsertOne) SetOrganizationID(v xid.ID) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateOrganizationID() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthClientUpsertOne) ClearOrganizationID() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearOrganizationID()
	})
}

// SetPublic sets the "public" field.
func (u *OAuthClientUpsertOne) SetPublic(v bool) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdatePublic() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdatePublic()
	})
}

// SetActive sets the "active" field.
func (u *OAuthClientUpsertOne) SetActive(v bool) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateActive() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateActive()
	})
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (u *OAuthClientUpsertOne) SetAllowedCorsOrigins(v []string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAllowedCorsOrigins(v)
	})
}

// UpdateAllowedCorsOrigins sets the "allowed_cors_origins" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateAllowedCorsOrigins() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAllowedCorsOrigins()
	})
}

// ClearAllowedCorsOrigins clears the value of the "allowed_cors_origins" field.
func (u *OAuthClientUpsertOne) ClearAllowedCorsOrigins() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearAllowedCorsOrigins()
	})
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (u *OAuthClientUpsertOne) SetAllowedGrantTypes(v []string) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAllowedGrantTypes(v)
	})
}

// UpdateAllowedGrantTypes sets the "allowed_grant_types" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateAllowedGrantTypes() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAllowedGrantTypes()
	})
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (u *OAuthClientUpsertOne) SetTokenExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetTokenExpirySeconds(v)
	})
}

// AddTokenExpirySeconds adds v to the "token_expiry_seconds" field.
func (u *OAuthClientUpsertOne) AddTokenExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddTokenExpirySeconds(v)
	})
}

// UpdateTokenExpirySeconds sets the "token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateTokenExpirySeconds() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateTokenExpirySeconds()
	})
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsertOne) SetRefreshTokenExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRefreshTokenExpirySeconds(v)
	})
}

// AddRefreshTokenExpirySeconds adds v to the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsertOne) AddRefreshTokenExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddRefreshTokenExpirySeconds(v)
	})
}

// UpdateRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateRefreshTokenExpirySeconds() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRefreshTokenExpirySeconds()
	})
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsertOne) SetAuthCodeExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAuthCodeExpirySeconds(v)
	})
}

// AddAuthCodeExpirySeconds adds v to the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsertOne) AddAuthCodeExpirySeconds(v int) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddAuthCodeExpirySeconds(v)
	})
}

// UpdateAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateAuthCodeExpirySeconds() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAuthCodeExpirySeconds()
	})
}

// SetRequiresPkce sets the "requires_pkce" field.
func (u *OAuthClientUpsertOne) SetRequiresPkce(v bool) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRequiresPkce(v)
	})
}

// UpdateRequiresPkce sets the "requires_pkce" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateRequiresPkce() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRequiresPkce()
	})
}

// SetRequiresConsent sets the "requires_consent" field.
func (u *OAuthClientUpsertOne) SetRequiresConsent(v bool) *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRequiresConsent(v)
	})
}

// UpdateRequiresConsent sets the "requires_consent" field to the value that was provided on create.
func (u *OAuthClientUpsertOne) UpdateRequiresConsent() *OAuthClientUpsertOne {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRequiresConsent()
	})
}

// Exec executes the query.
func (u *OAuthClientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthClientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthClientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthClientUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OAuthClientUpsertOne.ID is not supported by MySQL driver. Use OAuthClientUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthClientUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthClientCreateBulk is the builder for creating many OAuthClient entities in bulk.
type OAuthClientCreateBulk struct {
	config
	err      error
	builders []*OAuthClientCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthClient entities in the database.
func (occb *OAuthClientCreateBulk) Save(ctx context.Context) ([]*OAuthClient, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OAuthClient, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = occb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) SaveX(ctx context.Context) []*OAuthClient {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OAuthClientCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthClient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthClientUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (occb *OAuthClientCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthClientUpsertBulk {
	occb.conflict = opts
	return &OAuthClientUpsertBulk{
		create: occb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occb *OAuthClientCreateBulk) OnConflictColumns(columns ...string) *OAuthClientUpsertBulk {
	occb.conflict = append(occb.conflict, sql.ConflictColumns(columns...))
	return &OAuthClientUpsertBulk{
		create: occb,
	}
}

// OAuthClientUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthClient nodes.
type OAuthClientUpsertBulk struct {
	create *OAuthClientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OAuthClientUpsertBulk) UpdateNewValues() *OAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauthclient.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauthclient.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthClient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthClientUpsertBulk) Ignore() *OAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthClientUpsertBulk) DoNothing() *OAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthClientCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthClientUpsertBulk) Update(set func(*OAuthClientUpsert)) *OAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OAuthClientUpsertBulk) SetUpdatedAt(v time.Time) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateUpdatedAt() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OAuthClientUpsertBulk) SetDeletedAt(v time.Time) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateDeletedAt() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OAuthClientUpsertBulk) ClearDeletedAt() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthClientUpsertBulk) SetClientID(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateClientID() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthClientUpsertBulk) SetClientSecret(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateClientSecret() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientSecret()
	})
}

// SetClientName sets the "client_name" field.
func (u *OAuthClientUpsertBulk) SetClientName(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateClientName() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientName()
	})
}

// SetClientDescription sets the "client_description" field.
func (u *OAuthClientUpsertBulk) SetClientDescription(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientDescription(v)
	})
}

// UpdateClientDescription sets the "client_description" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateClientDescription() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientDescription()
	})
}

// ClearClientDescription clears the value of the "client_description" field.
func (u *OAuthClientUpsertBulk) ClearClientDescription() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearClientDescription()
	})
}

// SetClientURI sets the "client_uri" field.
func (u *OAuthClientUpsertBulk) SetClientURI(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetClientURI(v)
	})
}

// UpdateClientURI sets the "client_uri" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateClientURI() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateClientURI()
	})
}

// ClearClientURI clears the value of the "client_uri" field.
func (u *OAuthClientUpsertBulk) ClearClientURI() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearClientURI()
	})
}

// SetLogoURI sets the "logo_uri" field.
func (u *OAuthClientUpsertBulk) SetLogoURI(v string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetLogoURI(v)
	})
}

// UpdateLogoURI sets the "logo_uri" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateLogoURI() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateLogoURI()
	})
}

// ClearLogoURI clears the value of the "logo_uri" field.
func (u *OAuthClientUpsertBulk) ClearLogoURI() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearLogoURI()
	})
}

// SetRedirectUris sets the "redirect_uris" field.
func (u *OAuthClientUpsertBulk) SetRedirectUris(v []string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRedirectUris(v)
	})
}

// UpdateRedirectUris sets the "redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateRedirectUris() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRedirectUris()
	})
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsertBulk) SetPostLogoutRedirectUris(v []string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetPostLogoutRedirectUris(v)
	})
}

// UpdatePostLogoutRedirectUris sets the "post_logout_redirect_uris" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdatePostLogoutRedirectUris() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdatePostLogoutRedirectUris()
	})
}

// ClearPostLogoutRedirectUris clears the value of the "post_logout_redirect_uris" field.
func (u *OAuthClientUpsertBulk) ClearPostLogoutRedirectUris() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearPostLogoutRedirectUris()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OAuthClientUpsertBulk) SetOrganizationID(v xid.ID) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateOrganizationID() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *OAuthClientUpsertBulk) ClearOrganizationID() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearOrganizationID()
	})
}

// SetPublic sets the "public" field.
func (u *OAuthClientUpsertBulk) SetPublic(v bool) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdatePublic() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdatePublic()
	})
}

// SetActive sets the "active" field.
func (u *OAuthClientUpsertBulk) SetActive(v bool) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateActive() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateActive()
	})
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (u *OAuthClientUpsertBulk) SetAllowedCorsOrigins(v []string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAllowedCorsOrigins(v)
	})
}

// UpdateAllowedCorsOrigins sets the "allowed_cors_origins" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateAllowedCorsOrigins() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAllowedCorsOrigins()
	})
}

// ClearAllowedCorsOrigins clears the value of the "allowed_cors_origins" field.
func (u *OAuthClientUpsertBulk) ClearAllowedCorsOrigins() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.ClearAllowedCorsOrigins()
	})
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (u *OAuthClientUpsertBulk) SetAllowedGrantTypes(v []string) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAllowedGrantTypes(v)
	})
}

// UpdateAllowedGrantTypes sets the "allowed_grant_types" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateAllowedGrantTypes() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAllowedGrantTypes()
	})
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) SetTokenExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetTokenExpirySeconds(v)
	})
}

// AddTokenExpirySeconds adds v to the "token_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) AddTokenExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddTokenExpirySeconds(v)
	})
}

// UpdateTokenExpirySeconds sets the "token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateTokenExpirySeconds() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateTokenExpirySeconds()
	})
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) SetRefreshTokenExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRefreshTokenExpirySeconds(v)
	})
}

// AddRefreshTokenExpirySeconds adds v to the "refresh_token_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) AddRefreshTokenExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddRefreshTokenExpirySeconds(v)
	})
}

// UpdateRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateRefreshTokenExpirySeconds() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRefreshTokenExpirySeconds()
	})
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) SetAuthCodeExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetAuthCodeExpirySeconds(v)
	})
}

// AddAuthCodeExpirySeconds adds v to the "auth_code_expiry_seconds" field.
func (u *OAuthClientUpsertBulk) AddAuthCodeExpirySeconds(v int) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.AddAuthCodeExpirySeconds(v)
	})
}

// UpdateAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateAuthCodeExpirySeconds() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateAuthCodeExpirySeconds()
	})
}

// SetRequiresPkce sets the "requires_pkce" field.
func (u *OAuthClientUpsertBulk) SetRequiresPkce(v bool) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRequiresPkce(v)
	})
}

// UpdateRequiresPkce sets the "requires_pkce" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateRequiresPkce() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRequiresPkce()
	})
}

// SetRequiresConsent sets the "requires_consent" field.
func (u *OAuthClientUpsertBulk) SetRequiresConsent(v bool) *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.SetRequiresConsent(v)
	})
}

// UpdateRequiresConsent sets the "requires_consent" field to the value that was provided on create.
func (u *OAuthClientUpsertBulk) UpdateRequiresConsent() *OAuthClientUpsertBulk {
	return u.Update(func(s *OAuthClientUpsert) {
		s.UpdateRequiresConsent()
	})
}

// Exec executes the query.
func (u *OAuthClientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthClientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthClientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthClientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
