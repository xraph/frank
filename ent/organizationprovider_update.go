// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/providertemplate"
)

// OrganizationProviderUpdate is the builder for updating OrganizationProvider entities.
type OrganizationProviderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationProviderUpdate builder.
func (opu *OrganizationProviderUpdate) Where(ps ...predicate.OrganizationProvider) *OrganizationProviderUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrganizationProviderUpdate) SetUpdatedAt(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrganizationProviderUpdate) SetDeletedAt(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetDeletedAt(t)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationProviderUpdate {
	if t != nil {
		opu.SetDeletedAt(*t)
	}
	return opu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opu *OrganizationProviderUpdate) ClearDeletedAt() *OrganizationProviderUpdate {
	opu.mutation.ClearDeletedAt()
	return opu
}

// SetOrganizationID sets the "organization_id" field.
func (opu *OrganizationProviderUpdate) SetOrganizationID(x xid.ID) *OrganizationProviderUpdate {
	opu.mutation.SetOrganizationID(x)
	return opu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableOrganizationID(x *xid.ID) *OrganizationProviderUpdate {
	if x != nil {
		opu.SetOrganizationID(*x)
	}
	return opu
}

// SetProviderID sets the "provider_id" field.
func (opu *OrganizationProviderUpdate) SetProviderID(x xid.ID) *OrganizationProviderUpdate {
	opu.mutation.SetProviderID(x)
	return opu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableProviderID(x *xid.ID) *OrganizationProviderUpdate {
	if x != nil {
		opu.SetProviderID(*x)
	}
	return opu
}

// SetTemplateID sets the "template_id" field.
func (opu *OrganizationProviderUpdate) SetTemplateID(x xid.ID) *OrganizationProviderUpdate {
	opu.mutation.SetTemplateID(x)
	return opu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableTemplateID(x *xid.ID) *OrganizationProviderUpdate {
	if x != nil {
		opu.SetTemplateID(*x)
	}
	return opu
}

// SetTemplateKey sets the "template_key" field.
func (opu *OrganizationProviderUpdate) SetTemplateKey(s string) *OrganizationProviderUpdate {
	opu.mutation.SetTemplateKey(s)
	return opu
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableTemplateKey(s *string) *OrganizationProviderUpdate {
	if s != nil {
		opu.SetTemplateKey(*s)
	}
	return opu
}

// SetCustomConfig sets the "custom_config" field.
func (opu *OrganizationProviderUpdate) SetCustomConfig(m map[string]interface{}) *OrganizationProviderUpdate {
	opu.mutation.SetCustomConfig(m)
	return opu
}

// ClearCustomConfig clears the value of the "custom_config" field.
func (opu *OrganizationProviderUpdate) ClearCustomConfig() *OrganizationProviderUpdate {
	opu.mutation.ClearCustomConfig()
	return opu
}

// SetEnabledAt sets the "enabled_at" field.
func (opu *OrganizationProviderUpdate) SetEnabledAt(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetEnabledAt(t)
	return opu
}

// SetNillableEnabledAt sets the "enabled_at" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableEnabledAt(t *time.Time) *OrganizationProviderUpdate {
	if t != nil {
		opu.SetEnabledAt(*t)
	}
	return opu
}

// SetLastUsed sets the "last_used" field.
func (opu *OrganizationProviderUpdate) SetLastUsed(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetLastUsed(t)
	return opu
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableLastUsed(t *time.Time) *OrganizationProviderUpdate {
	if t != nil {
		opu.SetLastUsed(*t)
	}
	return opu
}

// ClearLastUsed clears the value of the "last_used" field.
func (opu *OrganizationProviderUpdate) ClearLastUsed() *OrganizationProviderUpdate {
	opu.mutation.ClearLastUsed()
	return opu
}

// SetUsageCount sets the "usage_count" field.
func (opu *OrganizationProviderUpdate) SetUsageCount(i int) *OrganizationProviderUpdate {
	opu.mutation.ResetUsageCount()
	opu.mutation.SetUsageCount(i)
	return opu
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableUsageCount(i *int) *OrganizationProviderUpdate {
	if i != nil {
		opu.SetUsageCount(*i)
	}
	return opu
}

// AddUsageCount adds i to the "usage_count" field.
func (opu *OrganizationProviderUpdate) AddUsageCount(i int) *OrganizationProviderUpdate {
	opu.mutation.AddUsageCount(i)
	return opu
}

// SetEnabled sets the "enabled" field.
func (opu *OrganizationProviderUpdate) SetEnabled(b bool) *OrganizationProviderUpdate {
	opu.mutation.SetEnabled(b)
	return opu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableEnabled(b *bool) *OrganizationProviderUpdate {
	if b != nil {
		opu.SetEnabled(*b)
	}
	return opu
}

// SetSuccessRate sets the "success_rate" field.
func (opu *OrganizationProviderUpdate) SetSuccessRate(f float64) *OrganizationProviderUpdate {
	opu.mutation.ResetSuccessRate()
	opu.mutation.SetSuccessRate(f)
	return opu
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableSuccessRate(f *float64) *OrganizationProviderUpdate {
	if f != nil {
		opu.SetSuccessRate(*f)
	}
	return opu
}

// AddSuccessRate adds f to the "success_rate" field.
func (opu *OrganizationProviderUpdate) AddSuccessRate(f float64) *OrganizationProviderUpdate {
	opu.mutation.AddSuccessRate(f)
	return opu
}

// SetTotalLogins sets the "total_logins" field.
func (opu *OrganizationProviderUpdate) SetTotalLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.ResetTotalLogins()
	opu.mutation.SetTotalLogins(i)
	return opu
}

// SetNillableTotalLogins sets the "total_logins" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableTotalLogins(i *int) *OrganizationProviderUpdate {
	if i != nil {
		opu.SetTotalLogins(*i)
	}
	return opu
}

// AddTotalLogins adds i to the "total_logins" field.
func (opu *OrganizationProviderUpdate) AddTotalLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.AddTotalLogins(i)
	return opu
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (opu *OrganizationProviderUpdate) SetSuccessfulLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.ResetSuccessfulLogins()
	opu.mutation.SetSuccessfulLogins(i)
	return opu
}

// SetNillableSuccessfulLogins sets the "successful_logins" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableSuccessfulLogins(i *int) *OrganizationProviderUpdate {
	if i != nil {
		opu.SetSuccessfulLogins(*i)
	}
	return opu
}

// AddSuccessfulLogins adds i to the "successful_logins" field.
func (opu *OrganizationProviderUpdate) AddSuccessfulLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.AddSuccessfulLogins(i)
	return opu
}

// SetFailedLogins sets the "failed_logins" field.
func (opu *OrganizationProviderUpdate) SetFailedLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.ResetFailedLogins()
	opu.mutation.SetFailedLogins(i)
	return opu
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableFailedLogins(i *int) *OrganizationProviderUpdate {
	if i != nil {
		opu.SetFailedLogins(*i)
	}
	return opu
}

// AddFailedLogins adds i to the "failed_logins" field.
func (opu *OrganizationProviderUpdate) AddFailedLogins(i int) *OrganizationProviderUpdate {
	opu.mutation.AddFailedLogins(i)
	return opu
}

// SetLastSuccess sets the "last_success" field.
func (opu *OrganizationProviderUpdate) SetLastSuccess(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetLastSuccess(t)
	return opu
}

// SetNillableLastSuccess sets the "last_success" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableLastSuccess(t *time.Time) *OrganizationProviderUpdate {
	if t != nil {
		opu.SetLastSuccess(*t)
	}
	return opu
}

// ClearLastSuccess clears the value of the "last_success" field.
func (opu *OrganizationProviderUpdate) ClearLastSuccess() *OrganizationProviderUpdate {
	opu.mutation.ClearLastSuccess()
	return opu
}

// SetLastFailure sets the "last_failure" field.
func (opu *OrganizationProviderUpdate) SetLastFailure(t time.Time) *OrganizationProviderUpdate {
	opu.mutation.SetLastFailure(t)
	return opu
}

// SetNillableLastFailure sets the "last_failure" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableLastFailure(t *time.Time) *OrganizationProviderUpdate {
	if t != nil {
		opu.SetLastFailure(*t)
	}
	return opu
}

// ClearLastFailure clears the value of the "last_failure" field.
func (opu *OrganizationProviderUpdate) ClearLastFailure() *OrganizationProviderUpdate {
	opu.mutation.ClearLastFailure()
	return opu
}

// SetConfigErrors sets the "config_errors" field.
func (opu *OrganizationProviderUpdate) SetConfigErrors(i int) *OrganizationProviderUpdate {
	opu.mutation.ResetConfigErrors()
	opu.mutation.SetConfigErrors(i)
	return opu
}

// SetNillableConfigErrors sets the "config_errors" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableConfigErrors(i *int) *OrganizationProviderUpdate {
	if i != nil {
		opu.SetConfigErrors(*i)
	}
	return opu
}

// AddConfigErrors adds i to the "config_errors" field.
func (opu *OrganizationProviderUpdate) AddConfigErrors(i int) *OrganizationProviderUpdate {
	opu.mutation.AddConfigErrors(i)
	return opu
}

// SetAverageResponseTime sets the "average_response_time" field.
func (opu *OrganizationProviderUpdate) SetAverageResponseTime(f float64) *OrganizationProviderUpdate {
	opu.mutation.ResetAverageResponseTime()
	opu.mutation.SetAverageResponseTime(f)
	return opu
}

// SetNillableAverageResponseTime sets the "average_response_time" field if the given value is not nil.
func (opu *OrganizationProviderUpdate) SetNillableAverageResponseTime(f *float64) *OrganizationProviderUpdate {
	if f != nil {
		opu.SetAverageResponseTime(*f)
	}
	return opu
}

// AddAverageResponseTime adds f to the "average_response_time" field.
func (opu *OrganizationProviderUpdate) AddAverageResponseTime(f float64) *OrganizationProviderUpdate {
	opu.mutation.AddAverageResponseTime(f)
	return opu
}

// SetAnalyticsData sets the "analytics_data" field.
func (opu *OrganizationProviderUpdate) SetAnalyticsData(m map[string]interface{}) *OrganizationProviderUpdate {
	opu.mutation.SetAnalyticsData(m)
	return opu
}

// ClearAnalyticsData clears the value of the "analytics_data" field.
func (opu *OrganizationProviderUpdate) ClearAnalyticsData() *OrganizationProviderUpdate {
	opu.mutation.ClearAnalyticsData()
	return opu
}

// SetMetadata sets the "metadata" field.
func (opu *OrganizationProviderUpdate) SetMetadata(m map[string]interface{}) *OrganizationProviderUpdate {
	opu.mutation.SetMetadata(m)
	return opu
}

// ClearMetadata clears the value of the "metadata" field.
func (opu *OrganizationProviderUpdate) ClearMetadata() *OrganizationProviderUpdate {
	opu.mutation.ClearMetadata()
	return opu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (opu *OrganizationProviderUpdate) SetOrganization(o *Organization) *OrganizationProviderUpdate {
	return opu.SetOrganizationID(o.ID)
}

// SetProvider sets the "provider" edge to the IdentityProvider entity.
func (opu *OrganizationProviderUpdate) SetProvider(i *IdentityProvider) *OrganizationProviderUpdate {
	return opu.SetProviderID(i.ID)
}

// SetTemplate sets the "template" edge to the ProviderTemplate entity.
func (opu *OrganizationProviderUpdate) SetTemplate(p *ProviderTemplate) *OrganizationProviderUpdate {
	return opu.SetTemplateID(p.ID)
}

// Mutation returns the OrganizationProviderMutation object of the builder.
func (opu *OrganizationProviderUpdate) Mutation() *OrganizationProviderMutation {
	return opu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (opu *OrganizationProviderUpdate) ClearOrganization() *OrganizationProviderUpdate {
	opu.mutation.ClearOrganization()
	return opu
}

// ClearProvider clears the "provider" edge to the IdentityProvider entity.
func (opu *OrganizationProviderUpdate) ClearProvider() *OrganizationProviderUpdate {
	opu.mutation.ClearProvider()
	return opu
}

// ClearTemplate clears the "template" edge to the ProviderTemplate entity.
func (opu *OrganizationProviderUpdate) ClearTemplate() *OrganizationProviderUpdate {
	opu.mutation.ClearTemplate()
	return opu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrganizationProviderUpdate) Save(ctx context.Context) (int, error) {
	opu.defaults()
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrganizationProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrganizationProviderUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrganizationProviderUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrganizationProviderUpdate) defaults() {
	if _, ok := opu.mutation.UpdatedAt(); !ok {
		v := organizationprovider.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrganizationProviderUpdate) check() error {
	if v, ok := opu.mutation.OrganizationID(); ok {
		if err := organizationprovider.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.organization_id": %w`, err)}
		}
	}
	if v, ok := opu.mutation.ProviderID(); ok {
		if err := organizationprovider.ProviderIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.provider_id": %w`, err)}
		}
	}
	if v, ok := opu.mutation.TemplateID(); ok {
		if err := organizationprovider.TemplateIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_id": %w`, err)}
		}
	}
	if v, ok := opu.mutation.TemplateKey(); ok {
		if err := organizationprovider.TemplateKeyValidator(v); err != nil {
			return &ValidationError{Name: "template_key", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_key": %w`, err)}
		}
	}
	if opu.mutation.OrganizationCleared() && len(opu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.organization"`)
	}
	if opu.mutation.ProviderCleared() && len(opu.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.provider"`)
	}
	if opu.mutation.TemplateCleared() && len(opu.mutation.TemplateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OrganizationProviderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationProviderUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OrganizationProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationprovider.Table, organizationprovider.Columns, sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.SetField(organizationprovider.FieldDeletedAt, field.TypeTime, value)
	}
	if opu.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationprovider.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opu.mutation.TemplateKey(); ok {
		_spec.SetField(organizationprovider.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := opu.mutation.CustomConfig(); ok {
		_spec.SetField(organizationprovider.FieldCustomConfig, field.TypeJSON, value)
	}
	if opu.mutation.CustomConfigCleared() {
		_spec.ClearField(organizationprovider.FieldCustomConfig, field.TypeJSON)
	}
	if value, ok := opu.mutation.EnabledAt(); ok {
		_spec.SetField(organizationprovider.FieldEnabledAt, field.TypeTime, value)
	}
	if value, ok := opu.mutation.LastUsed(); ok {
		_spec.SetField(organizationprovider.FieldLastUsed, field.TypeTime, value)
	}
	if opu.mutation.LastUsedCleared() {
		_spec.ClearField(organizationprovider.FieldLastUsed, field.TypeTime)
	}
	if value, ok := opu.mutation.UsageCount(); ok {
		_spec.SetField(organizationprovider.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AddedUsageCount(); ok {
		_spec.AddField(organizationprovider.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := opu.mutation.Enabled(); ok {
		_spec.SetField(organizationprovider.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := opu.mutation.SuccessRate(); ok {
		_spec.SetField(organizationprovider.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := opu.mutation.AddedSuccessRate(); ok {
		_spec.AddField(organizationprovider.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := opu.mutation.TotalLogins(); ok {
		_spec.SetField(organizationprovider.FieldTotalLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AddedTotalLogins(); ok {
		_spec.AddField(organizationprovider.FieldTotalLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.SuccessfulLogins(); ok {
		_spec.SetField(organizationprovider.FieldSuccessfulLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AddedSuccessfulLogins(); ok {
		_spec.AddField(organizationprovider.FieldSuccessfulLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.FailedLogins(); ok {
		_spec.SetField(organizationprovider.FieldFailedLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AddedFailedLogins(); ok {
		_spec.AddField(organizationprovider.FieldFailedLogins, field.TypeInt, value)
	}
	if value, ok := opu.mutation.LastSuccess(); ok {
		_spec.SetField(organizationprovider.FieldLastSuccess, field.TypeTime, value)
	}
	if opu.mutation.LastSuccessCleared() {
		_spec.ClearField(organizationprovider.FieldLastSuccess, field.TypeTime)
	}
	if value, ok := opu.mutation.LastFailure(); ok {
		_spec.SetField(organizationprovider.FieldLastFailure, field.TypeTime, value)
	}
	if opu.mutation.LastFailureCleared() {
		_spec.ClearField(organizationprovider.FieldLastFailure, field.TypeTime)
	}
	if value, ok := opu.mutation.ConfigErrors(); ok {
		_spec.SetField(organizationprovider.FieldConfigErrors, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AddedConfigErrors(); ok {
		_spec.AddField(organizationprovider.FieldConfigErrors, field.TypeInt, value)
	}
	if value, ok := opu.mutation.AverageResponseTime(); ok {
		_spec.SetField(organizationprovider.FieldAverageResponseTime, field.TypeFloat64, value)
	}
	if value, ok := opu.mutation.AddedAverageResponseTime(); ok {
		_spec.AddField(organizationprovider.FieldAverageResponseTime, field.TypeFloat64, value)
	}
	if value, ok := opu.mutation.AnalyticsData(); ok {
		_spec.SetField(organizationprovider.FieldAnalyticsData, field.TypeJSON, value)
	}
	if opu.mutation.AnalyticsDataCleared() {
		_spec.ClearField(organizationprovider.FieldAnalyticsData, field.TypeJSON)
	}
	if value, ok := opu.mutation.Metadata(); ok {
		_spec.SetField(organizationprovider.FieldMetadata, field.TypeJSON, value)
	}
	if opu.mutation.MetadataCleared() {
		_spec.ClearField(organizationprovider.FieldMetadata, field.TypeJSON)
	}
	if opu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(opu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OrganizationProviderUpdateOne is the builder for updating a single OrganizationProvider entity.
type OrganizationProviderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrganizationProviderUpdateOne) SetUpdatedAt(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrganizationProviderUpdateOne) SetDeletedAt(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetDeletedAt(t)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationProviderUpdateOne {
	if t != nil {
		opuo.SetDeletedAt(*t)
	}
	return opuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opuo *OrganizationProviderUpdateOne) ClearDeletedAt() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearDeletedAt()
	return opuo
}

// SetOrganizationID sets the "organization_id" field.
func (opuo *OrganizationProviderUpdateOne) SetOrganizationID(x xid.ID) *OrganizationProviderUpdateOne {
	opuo.mutation.SetOrganizationID(x)
	return opuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableOrganizationID(x *xid.ID) *OrganizationProviderUpdateOne {
	if x != nil {
		opuo.SetOrganizationID(*x)
	}
	return opuo
}

// SetProviderID sets the "provider_id" field.
func (opuo *OrganizationProviderUpdateOne) SetProviderID(x xid.ID) *OrganizationProviderUpdateOne {
	opuo.mutation.SetProviderID(x)
	return opuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableProviderID(x *xid.ID) *OrganizationProviderUpdateOne {
	if x != nil {
		opuo.SetProviderID(*x)
	}
	return opuo
}

// SetTemplateID sets the "template_id" field.
func (opuo *OrganizationProviderUpdateOne) SetTemplateID(x xid.ID) *OrganizationProviderUpdateOne {
	opuo.mutation.SetTemplateID(x)
	return opuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableTemplateID(x *xid.ID) *OrganizationProviderUpdateOne {
	if x != nil {
		opuo.SetTemplateID(*x)
	}
	return opuo
}

// SetTemplateKey sets the "template_key" field.
func (opuo *OrganizationProviderUpdateOne) SetTemplateKey(s string) *OrganizationProviderUpdateOne {
	opuo.mutation.SetTemplateKey(s)
	return opuo
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableTemplateKey(s *string) *OrganizationProviderUpdateOne {
	if s != nil {
		opuo.SetTemplateKey(*s)
	}
	return opuo
}

// SetCustomConfig sets the "custom_config" field.
func (opuo *OrganizationProviderUpdateOne) SetCustomConfig(m map[string]interface{}) *OrganizationProviderUpdateOne {
	opuo.mutation.SetCustomConfig(m)
	return opuo
}

// ClearCustomConfig clears the value of the "custom_config" field.
func (opuo *OrganizationProviderUpdateOne) ClearCustomConfig() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearCustomConfig()
	return opuo
}

// SetEnabledAt sets the "enabled_at" field.
func (opuo *OrganizationProviderUpdateOne) SetEnabledAt(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetEnabledAt(t)
	return opuo
}

// SetNillableEnabledAt sets the "enabled_at" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableEnabledAt(t *time.Time) *OrganizationProviderUpdateOne {
	if t != nil {
		opuo.SetEnabledAt(*t)
	}
	return opuo
}

// SetLastUsed sets the "last_used" field.
func (opuo *OrganizationProviderUpdateOne) SetLastUsed(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetLastUsed(t)
	return opuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableLastUsed(t *time.Time) *OrganizationProviderUpdateOne {
	if t != nil {
		opuo.SetLastUsed(*t)
	}
	return opuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (opuo *OrganizationProviderUpdateOne) ClearLastUsed() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearLastUsed()
	return opuo
}

// SetUsageCount sets the "usage_count" field.
func (opuo *OrganizationProviderUpdateOne) SetUsageCount(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetUsageCount()
	opuo.mutation.SetUsageCount(i)
	return opuo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableUsageCount(i *int) *OrganizationProviderUpdateOne {
	if i != nil {
		opuo.SetUsageCount(*i)
	}
	return opuo
}

// AddUsageCount adds i to the "usage_count" field.
func (opuo *OrganizationProviderUpdateOne) AddUsageCount(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.AddUsageCount(i)
	return opuo
}

// SetEnabled sets the "enabled" field.
func (opuo *OrganizationProviderUpdateOne) SetEnabled(b bool) *OrganizationProviderUpdateOne {
	opuo.mutation.SetEnabled(b)
	return opuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableEnabled(b *bool) *OrganizationProviderUpdateOne {
	if b != nil {
		opuo.SetEnabled(*b)
	}
	return opuo
}

// SetSuccessRate sets the "success_rate" field.
func (opuo *OrganizationProviderUpdateOne) SetSuccessRate(f float64) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetSuccessRate()
	opuo.mutation.SetSuccessRate(f)
	return opuo
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableSuccessRate(f *float64) *OrganizationProviderUpdateOne {
	if f != nil {
		opuo.SetSuccessRate(*f)
	}
	return opuo
}

// AddSuccessRate adds f to the "success_rate" field.
func (opuo *OrganizationProviderUpdateOne) AddSuccessRate(f float64) *OrganizationProviderUpdateOne {
	opuo.mutation.AddSuccessRate(f)
	return opuo
}

// SetTotalLogins sets the "total_logins" field.
func (opuo *OrganizationProviderUpdateOne) SetTotalLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetTotalLogins()
	opuo.mutation.SetTotalLogins(i)
	return opuo
}

// SetNillableTotalLogins sets the "total_logins" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableTotalLogins(i *int) *OrganizationProviderUpdateOne {
	if i != nil {
		opuo.SetTotalLogins(*i)
	}
	return opuo
}

// AddTotalLogins adds i to the "total_logins" field.
func (opuo *OrganizationProviderUpdateOne) AddTotalLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.AddTotalLogins(i)
	return opuo
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (opuo *OrganizationProviderUpdateOne) SetSuccessfulLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetSuccessfulLogins()
	opuo.mutation.SetSuccessfulLogins(i)
	return opuo
}

// SetNillableSuccessfulLogins sets the "successful_logins" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableSuccessfulLogins(i *int) *OrganizationProviderUpdateOne {
	if i != nil {
		opuo.SetSuccessfulLogins(*i)
	}
	return opuo
}

// AddSuccessfulLogins adds i to the "successful_logins" field.
func (opuo *OrganizationProviderUpdateOne) AddSuccessfulLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.AddSuccessfulLogins(i)
	return opuo
}

// SetFailedLogins sets the "failed_logins" field.
func (opuo *OrganizationProviderUpdateOne) SetFailedLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetFailedLogins()
	opuo.mutation.SetFailedLogins(i)
	return opuo
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableFailedLogins(i *int) *OrganizationProviderUpdateOne {
	if i != nil {
		opuo.SetFailedLogins(*i)
	}
	return opuo
}

// AddFailedLogins adds i to the "failed_logins" field.
func (opuo *OrganizationProviderUpdateOne) AddFailedLogins(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.AddFailedLogins(i)
	return opuo
}

// SetLastSuccess sets the "last_success" field.
func (opuo *OrganizationProviderUpdateOne) SetLastSuccess(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetLastSuccess(t)
	return opuo
}

// SetNillableLastSuccess sets the "last_success" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableLastSuccess(t *time.Time) *OrganizationProviderUpdateOne {
	if t != nil {
		opuo.SetLastSuccess(*t)
	}
	return opuo
}

// ClearLastSuccess clears the value of the "last_success" field.
func (opuo *OrganizationProviderUpdateOne) ClearLastSuccess() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearLastSuccess()
	return opuo
}

// SetLastFailure sets the "last_failure" field.
func (opuo *OrganizationProviderUpdateOne) SetLastFailure(t time.Time) *OrganizationProviderUpdateOne {
	opuo.mutation.SetLastFailure(t)
	return opuo
}

// SetNillableLastFailure sets the "last_failure" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableLastFailure(t *time.Time) *OrganizationProviderUpdateOne {
	if t != nil {
		opuo.SetLastFailure(*t)
	}
	return opuo
}

// ClearLastFailure clears the value of the "last_failure" field.
func (opuo *OrganizationProviderUpdateOne) ClearLastFailure() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearLastFailure()
	return opuo
}

// SetConfigErrors sets the "config_errors" field.
func (opuo *OrganizationProviderUpdateOne) SetConfigErrors(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetConfigErrors()
	opuo.mutation.SetConfigErrors(i)
	return opuo
}

// SetNillableConfigErrors sets the "config_errors" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableConfigErrors(i *int) *OrganizationProviderUpdateOne {
	if i != nil {
		opuo.SetConfigErrors(*i)
	}
	return opuo
}

// AddConfigErrors adds i to the "config_errors" field.
func (opuo *OrganizationProviderUpdateOne) AddConfigErrors(i int) *OrganizationProviderUpdateOne {
	opuo.mutation.AddConfigErrors(i)
	return opuo
}

// SetAverageResponseTime sets the "average_response_time" field.
func (opuo *OrganizationProviderUpdateOne) SetAverageResponseTime(f float64) *OrganizationProviderUpdateOne {
	opuo.mutation.ResetAverageResponseTime()
	opuo.mutation.SetAverageResponseTime(f)
	return opuo
}

// SetNillableAverageResponseTime sets the "average_response_time" field if the given value is not nil.
func (opuo *OrganizationProviderUpdateOne) SetNillableAverageResponseTime(f *float64) *OrganizationProviderUpdateOne {
	if f != nil {
		opuo.SetAverageResponseTime(*f)
	}
	return opuo
}

// AddAverageResponseTime adds f to the "average_response_time" field.
func (opuo *OrganizationProviderUpdateOne) AddAverageResponseTime(f float64) *OrganizationProviderUpdateOne {
	opuo.mutation.AddAverageResponseTime(f)
	return opuo
}

// SetAnalyticsData sets the "analytics_data" field.
func (opuo *OrganizationProviderUpdateOne) SetAnalyticsData(m map[string]interface{}) *OrganizationProviderUpdateOne {
	opuo.mutation.SetAnalyticsData(m)
	return opuo
}

// ClearAnalyticsData clears the value of the "analytics_data" field.
func (opuo *OrganizationProviderUpdateOne) ClearAnalyticsData() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearAnalyticsData()
	return opuo
}

// SetMetadata sets the "metadata" field.
func (opuo *OrganizationProviderUpdateOne) SetMetadata(m map[string]interface{}) *OrganizationProviderUpdateOne {
	opuo.mutation.SetMetadata(m)
	return opuo
}

// ClearMetadata clears the value of the "metadata" field.
func (opuo *OrganizationProviderUpdateOne) ClearMetadata() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearMetadata()
	return opuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (opuo *OrganizationProviderUpdateOne) SetOrganization(o *Organization) *OrganizationProviderUpdateOne {
	return opuo.SetOrganizationID(o.ID)
}

// SetProvider sets the "provider" edge to the IdentityProvider entity.
func (opuo *OrganizationProviderUpdateOne) SetProvider(i *IdentityProvider) *OrganizationProviderUpdateOne {
	return opuo.SetProviderID(i.ID)
}

// SetTemplate sets the "template" edge to the ProviderTemplate entity.
func (opuo *OrganizationProviderUpdateOne) SetTemplate(p *ProviderTemplate) *OrganizationProviderUpdateOne {
	return opuo.SetTemplateID(p.ID)
}

// Mutation returns the OrganizationProviderMutation object of the builder.
func (opuo *OrganizationProviderUpdateOne) Mutation() *OrganizationProviderMutation {
	return opuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (opuo *OrganizationProviderUpdateOne) ClearOrganization() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearOrganization()
	return opuo
}

// ClearProvider clears the "provider" edge to the IdentityProvider entity.
func (opuo *OrganizationProviderUpdateOne) ClearProvider() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearProvider()
	return opuo
}

// ClearTemplate clears the "template" edge to the ProviderTemplate entity.
func (opuo *OrganizationProviderUpdateOne) ClearTemplate() *OrganizationProviderUpdateOne {
	opuo.mutation.ClearTemplate()
	return opuo
}

// Where appends a list predicates to the OrganizationProviderUpdate builder.
func (opuo *OrganizationProviderUpdateOne) Where(ps ...predicate.OrganizationProvider) *OrganizationProviderUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrganizationProviderUpdateOne) Select(field string, fields ...string) *OrganizationProviderUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrganizationProvider entity.
func (opuo *OrganizationProviderUpdateOne) Save(ctx context.Context) (*OrganizationProvider, error) {
	opuo.defaults()
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrganizationProviderUpdateOne) SaveX(ctx context.Context) *OrganizationProvider {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrganizationProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrganizationProviderUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrganizationProviderUpdateOne) defaults() {
	if _, ok := opuo.mutation.UpdatedAt(); !ok {
		v := organizationprovider.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrganizationProviderUpdateOne) check() error {
	if v, ok := opuo.mutation.OrganizationID(); ok {
		if err := organizationprovider.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.organization_id": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.ProviderID(); ok {
		if err := organizationprovider.ProviderIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.provider_id": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.TemplateID(); ok {
		if err := organizationprovider.TemplateIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_id": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.TemplateKey(); ok {
		if err := organizationprovider.TemplateKeyValidator(v); err != nil {
			return &ValidationError{Name: "template_key", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_key": %w`, err)}
		}
	}
	if opuo.mutation.OrganizationCleared() && len(opuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.organization"`)
	}
	if opuo.mutation.ProviderCleared() && len(opuo.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.provider"`)
	}
	if opuo.mutation.TemplateCleared() && len(opuo.mutation.TemplateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationProvider.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OrganizationProviderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationProviderUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OrganizationProviderUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationProvider, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationprovider.Table, organizationprovider.Columns, sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationprovider.FieldID)
		for _, f := range fields {
			if !organizationprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.SetField(organizationprovider.FieldDeletedAt, field.TypeTime, value)
	}
	if opuo.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationprovider.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := opuo.mutation.TemplateKey(); ok {
		_spec.SetField(organizationprovider.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := opuo.mutation.CustomConfig(); ok {
		_spec.SetField(organizationprovider.FieldCustomConfig, field.TypeJSON, value)
	}
	if opuo.mutation.CustomConfigCleared() {
		_spec.ClearField(organizationprovider.FieldCustomConfig, field.TypeJSON)
	}
	if value, ok := opuo.mutation.EnabledAt(); ok {
		_spec.SetField(organizationprovider.FieldEnabledAt, field.TypeTime, value)
	}
	if value, ok := opuo.mutation.LastUsed(); ok {
		_spec.SetField(organizationprovider.FieldLastUsed, field.TypeTime, value)
	}
	if opuo.mutation.LastUsedCleared() {
		_spec.ClearField(organizationprovider.FieldLastUsed, field.TypeTime)
	}
	if value, ok := opuo.mutation.UsageCount(); ok {
		_spec.SetField(organizationprovider.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AddedUsageCount(); ok {
		_spec.AddField(organizationprovider.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.Enabled(); ok {
		_spec.SetField(organizationprovider.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := opuo.mutation.SuccessRate(); ok {
		_spec.SetField(organizationprovider.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := opuo.mutation.AddedSuccessRate(); ok {
		_spec.AddField(organizationprovider.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := opuo.mutation.TotalLogins(); ok {
		_spec.SetField(organizationprovider.FieldTotalLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AddedTotalLogins(); ok {
		_spec.AddField(organizationprovider.FieldTotalLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.SuccessfulLogins(); ok {
		_spec.SetField(organizationprovider.FieldSuccessfulLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AddedSuccessfulLogins(); ok {
		_spec.AddField(organizationprovider.FieldSuccessfulLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.FailedLogins(); ok {
		_spec.SetField(organizationprovider.FieldFailedLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AddedFailedLogins(); ok {
		_spec.AddField(organizationprovider.FieldFailedLogins, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.LastSuccess(); ok {
		_spec.SetField(organizationprovider.FieldLastSuccess, field.TypeTime, value)
	}
	if opuo.mutation.LastSuccessCleared() {
		_spec.ClearField(organizationprovider.FieldLastSuccess, field.TypeTime)
	}
	if value, ok := opuo.mutation.LastFailure(); ok {
		_spec.SetField(organizationprovider.FieldLastFailure, field.TypeTime, value)
	}
	if opuo.mutation.LastFailureCleared() {
		_spec.ClearField(organizationprovider.FieldLastFailure, field.TypeTime)
	}
	if value, ok := opuo.mutation.ConfigErrors(); ok {
		_spec.SetField(organizationprovider.FieldConfigErrors, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AddedConfigErrors(); ok {
		_spec.AddField(organizationprovider.FieldConfigErrors, field.TypeInt, value)
	}
	if value, ok := opuo.mutation.AverageResponseTime(); ok {
		_spec.SetField(organizationprovider.FieldAverageResponseTime, field.TypeFloat64, value)
	}
	if value, ok := opuo.mutation.AddedAverageResponseTime(); ok {
		_spec.AddField(organizationprovider.FieldAverageResponseTime, field.TypeFloat64, value)
	}
	if value, ok := opuo.mutation.AnalyticsData(); ok {
		_spec.SetField(organizationprovider.FieldAnalyticsData, field.TypeJSON, value)
	}
	if opuo.mutation.AnalyticsDataCleared() {
		_spec.ClearField(organizationprovider.FieldAnalyticsData, field.TypeJSON)
	}
	if value, ok := opuo.mutation.Metadata(); ok {
		_spec.SetField(organizationprovider.FieldMetadata, field.TypeJSON, value)
	}
	if opuo.mutation.MetadataCleared() {
		_spec.ClearField(organizationprovider.FieldMetadata, field.TypeJSON)
	}
	if opuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(opuo.modifiers...)
	_node = &OrganizationProvider{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
