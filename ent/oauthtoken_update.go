// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/user"
)

// OAuthTokenUpdate is the builder for updating OAuthToken entities.
type OAuthTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *OAuthTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OAuthTokenUpdate builder.
func (otu *OAuthTokenUpdate) Where(ps ...predicate.OAuthToken) *OAuthTokenUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetUpdatedAt sets the "updated_at" field.
func (otu *OAuthTokenUpdate) SetUpdatedAt(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetUpdatedAt(t)
	return otu
}

// SetDeletedAt sets the "deleted_at" field.
func (otu *OAuthTokenUpdate) SetDeletedAt(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetDeletedAt(t)
	return otu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableDeletedAt(t *time.Time) *OAuthTokenUpdate {
	if t != nil {
		otu.SetDeletedAt(*t)
	}
	return otu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (otu *OAuthTokenUpdate) ClearDeletedAt() *OAuthTokenUpdate {
	otu.mutation.ClearDeletedAt()
	return otu
}

// SetAccessToken sets the "access_token" field.
func (otu *OAuthTokenUpdate) SetAccessToken(s string) *OAuthTokenUpdate {
	otu.mutation.SetAccessToken(s)
	return otu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableAccessToken(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetAccessToken(*s)
	}
	return otu
}

// SetRefreshToken sets the "refresh_token" field.
func (otu *OAuthTokenUpdate) SetRefreshToken(s string) *OAuthTokenUpdate {
	otu.mutation.SetRefreshToken(s)
	return otu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableRefreshToken(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetRefreshToken(*s)
	}
	return otu
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (otu *OAuthTokenUpdate) ClearRefreshToken() *OAuthTokenUpdate {
	otu.mutation.ClearRefreshToken()
	return otu
}

// SetTokenType sets the "token_type" field.
func (otu *OAuthTokenUpdate) SetTokenType(s string) *OAuthTokenUpdate {
	otu.mutation.SetTokenType(s)
	return otu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableTokenType(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetTokenType(*s)
	}
	return otu
}

// SetClientID sets the "client_id" field.
func (otu *OAuthTokenUpdate) SetClientID(x xid.ID) *OAuthTokenUpdate {
	otu.mutation.SetClientID(x)
	return otu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableClientID(x *xid.ID) *OAuthTokenUpdate {
	if x != nil {
		otu.SetClientID(*x)
	}
	return otu
}

// SetUserID sets the "user_id" field.
func (otu *OAuthTokenUpdate) SetUserID(x xid.ID) *OAuthTokenUpdate {
	otu.mutation.SetUserID(x)
	return otu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableUserID(x *xid.ID) *OAuthTokenUpdate {
	if x != nil {
		otu.SetUserID(*x)
	}
	return otu
}

// SetOrganizationID sets the "organization_id" field.
func (otu *OAuthTokenUpdate) SetOrganizationID(x xid.ID) *OAuthTokenUpdate {
	otu.mutation.SetOrganizationID(x)
	return otu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableOrganizationID(x *xid.ID) *OAuthTokenUpdate {
	if x != nil {
		otu.SetOrganizationID(*x)
	}
	return otu
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (otu *OAuthTokenUpdate) ClearOrganizationID() *OAuthTokenUpdate {
	otu.mutation.ClearOrganizationID()
	return otu
}

// SetScopeNames sets the "scope_names" field.
func (otu *OAuthTokenUpdate) SetScopeNames(s []string) *OAuthTokenUpdate {
	otu.mutation.SetScopeNames(s)
	return otu
}

// AppendScopeNames appends s to the "scope_names" field.
func (otu *OAuthTokenUpdate) AppendScopeNames(s []string) *OAuthTokenUpdate {
	otu.mutation.AppendScopeNames(s)
	return otu
}

// ClearScopeNames clears the value of the "scope_names" field.
func (otu *OAuthTokenUpdate) ClearScopeNames() *OAuthTokenUpdate {
	otu.mutation.ClearScopeNames()
	return otu
}

// SetExpiresIn sets the "expires_in" field.
func (otu *OAuthTokenUpdate) SetExpiresIn(i int) *OAuthTokenUpdate {
	otu.mutation.ResetExpiresIn()
	otu.mutation.SetExpiresIn(i)
	return otu
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableExpiresIn(i *int) *OAuthTokenUpdate {
	if i != nil {
		otu.SetExpiresIn(*i)
	}
	return otu
}

// AddExpiresIn adds i to the "expires_in" field.
func (otu *OAuthTokenUpdate) AddExpiresIn(i int) *OAuthTokenUpdate {
	otu.mutation.AddExpiresIn(i)
	return otu
}

// SetExpiresAt sets the "expires_at" field.
func (otu *OAuthTokenUpdate) SetExpiresAt(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetExpiresAt(t)
	return otu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableExpiresAt(t *time.Time) *OAuthTokenUpdate {
	if t != nil {
		otu.SetExpiresAt(*t)
	}
	return otu
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (otu *OAuthTokenUpdate) SetRefreshTokenExpiresAt(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetRefreshTokenExpiresAt(t)
	return otu
}

// SetNillableRefreshTokenExpiresAt sets the "refresh_token_expires_at" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableRefreshTokenExpiresAt(t *time.Time) *OAuthTokenUpdate {
	if t != nil {
		otu.SetRefreshTokenExpiresAt(*t)
	}
	return otu
}

// ClearRefreshTokenExpiresAt clears the value of the "refresh_token_expires_at" field.
func (otu *OAuthTokenUpdate) ClearRefreshTokenExpiresAt() *OAuthTokenUpdate {
	otu.mutation.ClearRefreshTokenExpiresAt()
	return otu
}

// SetRevoked sets the "revoked" field.
func (otu *OAuthTokenUpdate) SetRevoked(b bool) *OAuthTokenUpdate {
	otu.mutation.SetRevoked(b)
	return otu
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableRevoked(b *bool) *OAuthTokenUpdate {
	if b != nil {
		otu.SetRevoked(*b)
	}
	return otu
}

// SetRevokedAt sets the "revoked_at" field.
func (otu *OAuthTokenUpdate) SetRevokedAt(t time.Time) *OAuthTokenUpdate {
	otu.mutation.SetRevokedAt(t)
	return otu
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableRevokedAt(t *time.Time) *OAuthTokenUpdate {
	if t != nil {
		otu.SetRevokedAt(*t)
	}
	return otu
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (otu *OAuthTokenUpdate) ClearRevokedAt() *OAuthTokenUpdate {
	otu.mutation.ClearRevokedAt()
	return otu
}

// SetIPAddress sets the "ip_address" field.
func (otu *OAuthTokenUpdate) SetIPAddress(s string) *OAuthTokenUpdate {
	otu.mutation.SetIPAddress(s)
	return otu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableIPAddress(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetIPAddress(*s)
	}
	return otu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (otu *OAuthTokenUpdate) ClearIPAddress() *OAuthTokenUpdate {
	otu.mutation.ClearIPAddress()
	return otu
}

// SetUserAgent sets the "user_agent" field.
func (otu *OAuthTokenUpdate) SetUserAgent(s string) *OAuthTokenUpdate {
	otu.mutation.SetUserAgent(s)
	return otu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (otu *OAuthTokenUpdate) SetNillableUserAgent(s *string) *OAuthTokenUpdate {
	if s != nil {
		otu.SetUserAgent(*s)
	}
	return otu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (otu *OAuthTokenUpdate) ClearUserAgent() *OAuthTokenUpdate {
	otu.mutation.ClearUserAgent()
	return otu
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (otu *OAuthTokenUpdate) SetClient(o *OAuthClient) *OAuthTokenUpdate {
	return otu.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (otu *OAuthTokenUpdate) SetUser(u *User) *OAuthTokenUpdate {
	return otu.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (otu *OAuthTokenUpdate) AddScopeIDs(ids ...xid.ID) *OAuthTokenUpdate {
	otu.mutation.AddScopeIDs(ids...)
	return otu
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (otu *OAuthTokenUpdate) AddScopes(o ...*OAuthScope) *OAuthTokenUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otu.AddScopeIDs(ids...)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otu *OAuthTokenUpdate) Mutation() *OAuthTokenMutation {
	return otu.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (otu *OAuthTokenUpdate) ClearClient() *OAuthTokenUpdate {
	otu.mutation.ClearClient()
	return otu
}

// ClearUser clears the "user" edge to the User entity.
func (otu *OAuthTokenUpdate) ClearUser() *OAuthTokenUpdate {
	otu.mutation.ClearUser()
	return otu
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (otu *OAuthTokenUpdate) ClearScopes() *OAuthTokenUpdate {
	otu.mutation.ClearScopes()
	return otu
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (otu *OAuthTokenUpdate) RemoveScopeIDs(ids ...xid.ID) *OAuthTokenUpdate {
	otu.mutation.RemoveScopeIDs(ids...)
	return otu
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (otu *OAuthTokenUpdate) RemoveScopes(o ...*OAuthScope) *OAuthTokenUpdate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otu.RemoveScopeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OAuthTokenUpdate) Save(ctx context.Context) (int, error) {
	otu.defaults()
	return withHooks(ctx, otu.sqlSave, otu.mutation, otu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OAuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OAuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OAuthTokenUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otu *OAuthTokenUpdate) defaults() {
	if _, ok := otu.mutation.UpdatedAt(); !ok {
		v := oauthtoken.UpdateDefaultUpdatedAt()
		otu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otu *OAuthTokenUpdate) check() error {
	if v, ok := otu.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.access_token": %w`, err)}
		}
	}
	if v, ok := otu.mutation.ClientID(); ok {
		if err := oauthtoken.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.client_id": %w`, err)}
		}
	}
	if v, ok := otu.mutation.UserID(); ok {
		if err := oauthtoken.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.user_id": %w`, err)}
		}
	}
	if otu.mutation.ClientCleared() && len(otu.mutation.ClientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthToken.client"`)
	}
	if otu.mutation.UserCleared() && len(otu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otu *OAuthTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthTokenUpdate {
	otu.modifiers = append(otu.modifiers, modifiers...)
	return otu
}

func (otu *OAuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := otu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString))
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otu.mutation.DeletedAt(); ok {
		_spec.SetField(oauthtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if otu.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := otu.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := otu.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if otu.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := otu.mutation.TokenType(); ok {
		_spec.SetField(oauthtoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := otu.mutation.OrganizationID(); ok {
		_spec.SetField(oauthtoken.FieldOrganizationID, field.TypeString, value)
	}
	if otu.mutation.OrganizationIDCleared() {
		_spec.ClearField(oauthtoken.FieldOrganizationID, field.TypeString)
	}
	if value, ok := otu.mutation.ScopeNames(); ok {
		_spec.SetField(oauthtoken.FieldScopeNames, field.TypeJSON, value)
	}
	if value, ok := otu.mutation.AppendedScopeNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthtoken.FieldScopeNames, value)
		})
	}
	if otu.mutation.ScopeNamesCleared() {
		_spec.ClearField(oauthtoken.FieldScopeNames, field.TypeJSON)
	}
	if value, ok := otu.mutation.ExpiresIn(); ok {
		_spec.SetField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := otu.mutation.AddedExpiresIn(); ok {
		_spec.AddField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := otu.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := otu.mutation.RefreshTokenExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime, value)
	}
	if otu.mutation.RefreshTokenExpiresAtCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime)
	}
	if value, ok := otu.mutation.Revoked(); ok {
		_spec.SetField(oauthtoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := otu.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
	}
	if otu.mutation.RevokedAtCleared() {
		_spec.ClearField(oauthtoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := otu.mutation.IPAddress(); ok {
		_spec.SetField(oauthtoken.FieldIPAddress, field.TypeString, value)
	}
	if otu.mutation.IPAddressCleared() {
		_spec.ClearField(oauthtoken.FieldIPAddress, field.TypeString)
	}
	if value, ok := otu.mutation.UserAgent(); ok {
		_spec.SetField(oauthtoken.FieldUserAgent, field.TypeString, value)
	}
	if otu.mutation.UserAgentCleared() {
		_spec.ClearField(oauthtoken.FieldUserAgent, field.TypeString)
	}
	if otu.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otu.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.RemovedScopesIDs(); len(nodes) > 0 && !otu.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(otu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	otu.mutation.done = true
	return n, nil
}

// OAuthTokenUpdateOne is the builder for updating a single OAuthToken entity.
type OAuthTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OAuthTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (otuo *OAuthTokenUpdateOne) SetUpdatedAt(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetUpdatedAt(t)
	return otuo
}

// SetDeletedAt sets the "deleted_at" field.
func (otuo *OAuthTokenUpdateOne) SetDeletedAt(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetDeletedAt(t)
	return otuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *OAuthTokenUpdateOne {
	if t != nil {
		otuo.SetDeletedAt(*t)
	}
	return otuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (otuo *OAuthTokenUpdateOne) ClearDeletedAt() *OAuthTokenUpdateOne {
	otuo.mutation.ClearDeletedAt()
	return otuo
}

// SetAccessToken sets the "access_token" field.
func (otuo *OAuthTokenUpdateOne) SetAccessToken(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetAccessToken(s)
	return otuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableAccessToken(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetAccessToken(*s)
	}
	return otuo
}

// SetRefreshToken sets the "refresh_token" field.
func (otuo *OAuthTokenUpdateOne) SetRefreshToken(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetRefreshToken(s)
	return otuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableRefreshToken(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetRefreshToken(*s)
	}
	return otuo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (otuo *OAuthTokenUpdateOne) ClearRefreshToken() *OAuthTokenUpdateOne {
	otuo.mutation.ClearRefreshToken()
	return otuo
}

// SetTokenType sets the "token_type" field.
func (otuo *OAuthTokenUpdateOne) SetTokenType(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetTokenType(s)
	return otuo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableTokenType(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetTokenType(*s)
	}
	return otuo
}

// SetClientID sets the "client_id" field.
func (otuo *OAuthTokenUpdateOne) SetClientID(x xid.ID) *OAuthTokenUpdateOne {
	otuo.mutation.SetClientID(x)
	return otuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableClientID(x *xid.ID) *OAuthTokenUpdateOne {
	if x != nil {
		otuo.SetClientID(*x)
	}
	return otuo
}

// SetUserID sets the "user_id" field.
func (otuo *OAuthTokenUpdateOne) SetUserID(x xid.ID) *OAuthTokenUpdateOne {
	otuo.mutation.SetUserID(x)
	return otuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableUserID(x *xid.ID) *OAuthTokenUpdateOne {
	if x != nil {
		otuo.SetUserID(*x)
	}
	return otuo
}

// SetOrganizationID sets the "organization_id" field.
func (otuo *OAuthTokenUpdateOne) SetOrganizationID(x xid.ID) *OAuthTokenUpdateOne {
	otuo.mutation.SetOrganizationID(x)
	return otuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableOrganizationID(x *xid.ID) *OAuthTokenUpdateOne {
	if x != nil {
		otuo.SetOrganizationID(*x)
	}
	return otuo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (otuo *OAuthTokenUpdateOne) ClearOrganizationID() *OAuthTokenUpdateOne {
	otuo.mutation.ClearOrganizationID()
	return otuo
}

// SetScopeNames sets the "scope_names" field.
func (otuo *OAuthTokenUpdateOne) SetScopeNames(s []string) *OAuthTokenUpdateOne {
	otuo.mutation.SetScopeNames(s)
	return otuo
}

// AppendScopeNames appends s to the "scope_names" field.
func (otuo *OAuthTokenUpdateOne) AppendScopeNames(s []string) *OAuthTokenUpdateOne {
	otuo.mutation.AppendScopeNames(s)
	return otuo
}

// ClearScopeNames clears the value of the "scope_names" field.
func (otuo *OAuthTokenUpdateOne) ClearScopeNames() *OAuthTokenUpdateOne {
	otuo.mutation.ClearScopeNames()
	return otuo
}

// SetExpiresIn sets the "expires_in" field.
func (otuo *OAuthTokenUpdateOne) SetExpiresIn(i int) *OAuthTokenUpdateOne {
	otuo.mutation.ResetExpiresIn()
	otuo.mutation.SetExpiresIn(i)
	return otuo
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableExpiresIn(i *int) *OAuthTokenUpdateOne {
	if i != nil {
		otuo.SetExpiresIn(*i)
	}
	return otuo
}

// AddExpiresIn adds i to the "expires_in" field.
func (otuo *OAuthTokenUpdateOne) AddExpiresIn(i int) *OAuthTokenUpdateOne {
	otuo.mutation.AddExpiresIn(i)
	return otuo
}

// SetExpiresAt sets the "expires_at" field.
func (otuo *OAuthTokenUpdateOne) SetExpiresAt(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetExpiresAt(t)
	return otuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *OAuthTokenUpdateOne {
	if t != nil {
		otuo.SetExpiresAt(*t)
	}
	return otuo
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (otuo *OAuthTokenUpdateOne) SetRefreshTokenExpiresAt(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetRefreshTokenExpiresAt(t)
	return otuo
}

// SetNillableRefreshTokenExpiresAt sets the "refresh_token_expires_at" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableRefreshTokenExpiresAt(t *time.Time) *OAuthTokenUpdateOne {
	if t != nil {
		otuo.SetRefreshTokenExpiresAt(*t)
	}
	return otuo
}

// ClearRefreshTokenExpiresAt clears the value of the "refresh_token_expires_at" field.
func (otuo *OAuthTokenUpdateOne) ClearRefreshTokenExpiresAt() *OAuthTokenUpdateOne {
	otuo.mutation.ClearRefreshTokenExpiresAt()
	return otuo
}

// SetRevoked sets the "revoked" field.
func (otuo *OAuthTokenUpdateOne) SetRevoked(b bool) *OAuthTokenUpdateOne {
	otuo.mutation.SetRevoked(b)
	return otuo
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableRevoked(b *bool) *OAuthTokenUpdateOne {
	if b != nil {
		otuo.SetRevoked(*b)
	}
	return otuo
}

// SetRevokedAt sets the "revoked_at" field.
func (otuo *OAuthTokenUpdateOne) SetRevokedAt(t time.Time) *OAuthTokenUpdateOne {
	otuo.mutation.SetRevokedAt(t)
	return otuo
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableRevokedAt(t *time.Time) *OAuthTokenUpdateOne {
	if t != nil {
		otuo.SetRevokedAt(*t)
	}
	return otuo
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (otuo *OAuthTokenUpdateOne) ClearRevokedAt() *OAuthTokenUpdateOne {
	otuo.mutation.ClearRevokedAt()
	return otuo
}

// SetIPAddress sets the "ip_address" field.
func (otuo *OAuthTokenUpdateOne) SetIPAddress(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetIPAddress(s)
	return otuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableIPAddress(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetIPAddress(*s)
	}
	return otuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (otuo *OAuthTokenUpdateOne) ClearIPAddress() *OAuthTokenUpdateOne {
	otuo.mutation.ClearIPAddress()
	return otuo
}

// SetUserAgent sets the "user_agent" field.
func (otuo *OAuthTokenUpdateOne) SetUserAgent(s string) *OAuthTokenUpdateOne {
	otuo.mutation.SetUserAgent(s)
	return otuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (otuo *OAuthTokenUpdateOne) SetNillableUserAgent(s *string) *OAuthTokenUpdateOne {
	if s != nil {
		otuo.SetUserAgent(*s)
	}
	return otuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (otuo *OAuthTokenUpdateOne) ClearUserAgent() *OAuthTokenUpdateOne {
	otuo.mutation.ClearUserAgent()
	return otuo
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (otuo *OAuthTokenUpdateOne) SetClient(o *OAuthClient) *OAuthTokenUpdateOne {
	return otuo.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (otuo *OAuthTokenUpdateOne) SetUser(u *User) *OAuthTokenUpdateOne {
	return otuo.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (otuo *OAuthTokenUpdateOne) AddScopeIDs(ids ...xid.ID) *OAuthTokenUpdateOne {
	otuo.mutation.AddScopeIDs(ids...)
	return otuo
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (otuo *OAuthTokenUpdateOne) AddScopes(o ...*OAuthScope) *OAuthTokenUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otuo.AddScopeIDs(ids...)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otuo *OAuthTokenUpdateOne) Mutation() *OAuthTokenMutation {
	return otuo.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (otuo *OAuthTokenUpdateOne) ClearClient() *OAuthTokenUpdateOne {
	otuo.mutation.ClearClient()
	return otuo
}

// ClearUser clears the "user" edge to the User entity.
func (otuo *OAuthTokenUpdateOne) ClearUser() *OAuthTokenUpdateOne {
	otuo.mutation.ClearUser()
	return otuo
}

// ClearScopes clears all "scopes" edges to the OAuthScope entity.
func (otuo *OAuthTokenUpdateOne) ClearScopes() *OAuthTokenUpdateOne {
	otuo.mutation.ClearScopes()
	return otuo
}

// RemoveScopeIDs removes the "scopes" edge to OAuthScope entities by IDs.
func (otuo *OAuthTokenUpdateOne) RemoveScopeIDs(ids ...xid.ID) *OAuthTokenUpdateOne {
	otuo.mutation.RemoveScopeIDs(ids...)
	return otuo
}

// RemoveScopes removes "scopes" edges to OAuthScope entities.
func (otuo *OAuthTokenUpdateOne) RemoveScopes(o ...*OAuthScope) *OAuthTokenUpdateOne {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otuo.RemoveScopeIDs(ids...)
}

// Where appends a list predicates to the OAuthTokenUpdate builder.
func (otuo *OAuthTokenUpdateOne) Where(ps ...predicate.OAuthToken) *OAuthTokenUpdateOne {
	otuo.mutation.Where(ps...)
	return otuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OAuthTokenUpdateOne) Select(field string, fields ...string) *OAuthTokenUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OAuthToken entity.
func (otuo *OAuthTokenUpdateOne) Save(ctx context.Context) (*OAuthToken, error) {
	otuo.defaults()
	return withHooks(ctx, otuo.sqlSave, otuo.mutation, otuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OAuthTokenUpdateOne) SaveX(ctx context.Context) *OAuthToken {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OAuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OAuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otuo *OAuthTokenUpdateOne) defaults() {
	if _, ok := otuo.mutation.UpdatedAt(); !ok {
		v := oauthtoken.UpdateDefaultUpdatedAt()
		otuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otuo *OAuthTokenUpdateOne) check() error {
	if v, ok := otuo.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.access_token": %w`, err)}
		}
	}
	if v, ok := otuo.mutation.ClientID(); ok {
		if err := oauthtoken.ClientIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.client_id": %w`, err)}
		}
	}
	if v, ok := otuo.mutation.UserID(); ok {
		if err := oauthtoken.UserIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.user_id": %w`, err)}
		}
	}
	if otuo.mutation.ClientCleared() && len(otuo.mutation.ClientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthToken.client"`)
	}
	if otuo.mutation.UserCleared() && len(otuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otuo *OAuthTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthTokenUpdateOne {
	otuo.modifiers = append(otuo.modifiers, modifiers...)
	return otuo
}

func (otuo *OAuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *OAuthToken, err error) {
	if err := otuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthtoken.Table, oauthtoken.Columns, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString))
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthtoken.FieldID)
		for _, f := range fields {
			if !oauthtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otuo.mutation.DeletedAt(); ok {
		_spec.SetField(oauthtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if otuo.mutation.DeletedAtCleared() {
		_spec.ClearField(oauthtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := otuo.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := otuo.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if otuo.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := otuo.mutation.TokenType(); ok {
		_spec.SetField(oauthtoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := otuo.mutation.OrganizationID(); ok {
		_spec.SetField(oauthtoken.FieldOrganizationID, field.TypeString, value)
	}
	if otuo.mutation.OrganizationIDCleared() {
		_spec.ClearField(oauthtoken.FieldOrganizationID, field.TypeString)
	}
	if value, ok := otuo.mutation.ScopeNames(); ok {
		_spec.SetField(oauthtoken.FieldScopeNames, field.TypeJSON, value)
	}
	if value, ok := otuo.mutation.AppendedScopeNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oauthtoken.FieldScopeNames, value)
		})
	}
	if otuo.mutation.ScopeNamesCleared() {
		_spec.ClearField(oauthtoken.FieldScopeNames, field.TypeJSON)
	}
	if value, ok := otuo.mutation.ExpiresIn(); ok {
		_spec.SetField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := otuo.mutation.AddedExpiresIn(); ok {
		_spec.AddField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := otuo.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := otuo.mutation.RefreshTokenExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime, value)
	}
	if otuo.mutation.RefreshTokenExpiresAtCleared() {
		_spec.ClearField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime)
	}
	if value, ok := otuo.mutation.Revoked(); ok {
		_spec.SetField(oauthtoken.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := otuo.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
	}
	if otuo.mutation.RevokedAtCleared() {
		_spec.ClearField(oauthtoken.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := otuo.mutation.IPAddress(); ok {
		_spec.SetField(oauthtoken.FieldIPAddress, field.TypeString, value)
	}
	if otuo.mutation.IPAddressCleared() {
		_spec.ClearField(oauthtoken.FieldIPAddress, field.TypeString)
	}
	if value, ok := otuo.mutation.UserAgent(); ok {
		_spec.SetField(oauthtoken.FieldUserAgent, field.TypeString, value)
	}
	if otuo.mutation.UserAgentCleared() {
		_spec.ClearField(oauthtoken.FieldUserAgent, field.TypeString)
	}
	if otuo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otuo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.RemovedScopesIDs(); len(nodes) > 0 && !otuo.mutation.ScopesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(otuo.modifiers...)
	_node = &OAuthToken{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	otuo.mutation.done = true
	return _node, nil
}
