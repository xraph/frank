// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/pkg/model"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks     []Hook
	mutation  *ActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetResourceType sets the "resource_type" field.
func (au *ActivityUpdate) SetResourceType(mt model.ResourceType) *ActivityUpdate {
	au.mutation.SetResourceType(mt)
	return au
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableResourceType(mt *model.ResourceType) *ActivityUpdate {
	if mt != nil {
		au.SetResourceType(*mt)
	}
	return au
}

// SetResourceID sets the "resource_id" field.
func (au *ActivityUpdate) SetResourceID(x xid.ID) *ActivityUpdate {
	au.mutation.SetResourceID(x)
	return au
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableResourceID(x *xid.ID) *ActivityUpdate {
	if x != nil {
		au.SetResourceID(*x)
	}
	return au
}

// SetUserID sets the "user_id" field.
func (au *ActivityUpdate) SetUserID(x xid.ID) *ActivityUpdate {
	au.mutation.SetUserID(x)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUserID(x *xid.ID) *ActivityUpdate {
	if x != nil {
		au.SetUserID(*x)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *ActivityUpdate) ClearUserID() *ActivityUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetOrganizationID sets the "organization_id" field.
func (au *ActivityUpdate) SetOrganizationID(x xid.ID) *ActivityUpdate {
	au.mutation.SetOrganizationID(x)
	return au
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableOrganizationID(x *xid.ID) *ActivityUpdate {
	if x != nil {
		au.SetOrganizationID(*x)
	}
	return au
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (au *ActivityUpdate) ClearOrganizationID() *ActivityUpdate {
	au.mutation.ClearOrganizationID()
	return au
}

// SetSessionID sets the "session_id" field.
func (au *ActivityUpdate) SetSessionID(x xid.ID) *ActivityUpdate {
	au.mutation.SetSessionID(x)
	return au
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSessionID(x *xid.ID) *ActivityUpdate {
	if x != nil {
		au.SetSessionID(*x)
	}
	return au
}

// ClearSessionID clears the value of the "session_id" field.
func (au *ActivityUpdate) ClearSessionID() *ActivityUpdate {
	au.mutation.ClearSessionID()
	return au
}

// SetAction sets the "action" field.
func (au *ActivityUpdate) SetAction(s string) *ActivityUpdate {
	au.mutation.SetAction(s)
	return au
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableAction(s *string) *ActivityUpdate {
	if s != nil {
		au.SetAction(*s)
	}
	return au
}

// SetCategory sets the "category" field.
func (au *ActivityUpdate) SetCategory(s string) *ActivityUpdate {
	au.mutation.SetCategory(s)
	return au
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCategory(s *string) *ActivityUpdate {
	if s != nil {
		au.SetCategory(*s)
	}
	return au
}

// SetSource sets the "source" field.
func (au *ActivityUpdate) SetSource(s string) *ActivityUpdate {
	au.mutation.SetSource(s)
	return au
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSource(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSource(*s)
	}
	return au
}

// ClearSource clears the value of the "source" field.
func (au *ActivityUpdate) ClearSource() *ActivityUpdate {
	au.mutation.ClearSource()
	return au
}

// SetEndpoint sets the "endpoint" field.
func (au *ActivityUpdate) SetEndpoint(s string) *ActivityUpdate {
	au.mutation.SetEndpoint(s)
	return au
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableEndpoint(s *string) *ActivityUpdate {
	if s != nil {
		au.SetEndpoint(*s)
	}
	return au
}

// ClearEndpoint clears the value of the "endpoint" field.
func (au *ActivityUpdate) ClearEndpoint() *ActivityUpdate {
	au.mutation.ClearEndpoint()
	return au
}

// SetMethod sets the "method" field.
func (au *ActivityUpdate) SetMethod(s string) *ActivityUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableMethod(s *string) *ActivityUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *ActivityUpdate) ClearMethod() *ActivityUpdate {
	au.mutation.ClearMethod()
	return au
}

// SetStatusCode sets the "status_code" field.
func (au *ActivityUpdate) SetStatusCode(i int) *ActivityUpdate {
	au.mutation.ResetStatusCode()
	au.mutation.SetStatusCode(i)
	return au
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableStatusCode(i *int) *ActivityUpdate {
	if i != nil {
		au.SetStatusCode(*i)
	}
	return au
}

// AddStatusCode adds i to the "status_code" field.
func (au *ActivityUpdate) AddStatusCode(i int) *ActivityUpdate {
	au.mutation.AddStatusCode(i)
	return au
}

// ClearStatusCode clears the value of the "status_code" field.
func (au *ActivityUpdate) ClearStatusCode() *ActivityUpdate {
	au.mutation.ClearStatusCode()
	return au
}

// SetResponseTime sets the "response_time" field.
func (au *ActivityUpdate) SetResponseTime(i int) *ActivityUpdate {
	au.mutation.ResetResponseTime()
	au.mutation.SetResponseTime(i)
	return au
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableResponseTime(i *int) *ActivityUpdate {
	if i != nil {
		au.SetResponseTime(*i)
	}
	return au
}

// AddResponseTime adds i to the "response_time" field.
func (au *ActivityUpdate) AddResponseTime(i int) *ActivityUpdate {
	au.mutation.AddResponseTime(i)
	return au
}

// ClearResponseTime clears the value of the "response_time" field.
func (au *ActivityUpdate) ClearResponseTime() *ActivityUpdate {
	au.mutation.ClearResponseTime()
	return au
}

// SetIPAddress sets the "ip_address" field.
func (au *ActivityUpdate) SetIPAddress(s string) *ActivityUpdate {
	au.mutation.SetIPAddress(s)
	return au
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIPAddress(s *string) *ActivityUpdate {
	if s != nil {
		au.SetIPAddress(*s)
	}
	return au
}

// ClearIPAddress clears the value of the "ip_address" field.
func (au *ActivityUpdate) ClearIPAddress() *ActivityUpdate {
	au.mutation.ClearIPAddress()
	return au
}

// SetUserAgent sets the "user_agent" field.
func (au *ActivityUpdate) SetUserAgent(s string) *ActivityUpdate {
	au.mutation.SetUserAgent(s)
	return au
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUserAgent(s *string) *ActivityUpdate {
	if s != nil {
		au.SetUserAgent(*s)
	}
	return au
}

// ClearUserAgent clears the value of the "user_agent" field.
func (au *ActivityUpdate) ClearUserAgent() *ActivityUpdate {
	au.mutation.ClearUserAgent()
	return au
}

// SetLocation sets the "location" field.
func (au *ActivityUpdate) SetLocation(s string) *ActivityUpdate {
	au.mutation.SetLocation(s)
	return au
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableLocation(s *string) *ActivityUpdate {
	if s != nil {
		au.SetLocation(*s)
	}
	return au
}

// ClearLocation clears the value of the "location" field.
func (au *ActivityUpdate) ClearLocation() *ActivityUpdate {
	au.mutation.ClearLocation()
	return au
}

// SetSuccess sets the "success" field.
func (au *ActivityUpdate) SetSuccess(b bool) *ActivityUpdate {
	au.mutation.SetSuccess(b)
	return au
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSuccess(b *bool) *ActivityUpdate {
	if b != nil {
		au.SetSuccess(*b)
	}
	return au
}

// SetError sets the "error" field.
func (au *ActivityUpdate) SetError(s string) *ActivityUpdate {
	au.mutation.SetError(s)
	return au
}

// SetNillableError sets the "error" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableError(s *string) *ActivityUpdate {
	if s != nil {
		au.SetError(*s)
	}
	return au
}

// ClearError clears the value of the "error" field.
func (au *ActivityUpdate) ClearError() *ActivityUpdate {
	au.mutation.ClearError()
	return au
}

// SetErrorCode sets the "error_code" field.
func (au *ActivityUpdate) SetErrorCode(s string) *ActivityUpdate {
	au.mutation.SetErrorCode(s)
	return au
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableErrorCode(s *string) *ActivityUpdate {
	if s != nil {
		au.SetErrorCode(*s)
	}
	return au
}

// ClearErrorCode clears the value of the "error_code" field.
func (au *ActivityUpdate) ClearErrorCode() *ActivityUpdate {
	au.mutation.ClearErrorCode()
	return au
}

// SetSize sets the "size" field.
func (au *ActivityUpdate) SetSize(i int) *ActivityUpdate {
	au.mutation.ResetSize()
	au.mutation.SetSize(i)
	return au
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSize(i *int) *ActivityUpdate {
	if i != nil {
		au.SetSize(*i)
	}
	return au
}

// AddSize adds i to the "size" field.
func (au *ActivityUpdate) AddSize(i int) *ActivityUpdate {
	au.mutation.AddSize(i)
	return au
}

// ClearSize clears the value of the "size" field.
func (au *ActivityUpdate) ClearSize() *ActivityUpdate {
	au.mutation.ClearSize()
	return au
}

// SetCount sets the "count" field.
func (au *ActivityUpdate) SetCount(i int) *ActivityUpdate {
	au.mutation.ResetCount()
	au.mutation.SetCount(i)
	return au
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCount(i *int) *ActivityUpdate {
	if i != nil {
		au.SetCount(*i)
	}
	return au
}

// AddCount adds i to the "count" field.
func (au *ActivityUpdate) AddCount(i int) *ActivityUpdate {
	au.mutation.AddCount(i)
	return au
}

// ClearCount clears the value of the "count" field.
func (au *ActivityUpdate) ClearCount() *ActivityUpdate {
	au.mutation.ClearCount()
	return au
}

// SetValue sets the "value" field.
func (au *ActivityUpdate) SetValue(f float64) *ActivityUpdate {
	au.mutation.ResetValue()
	au.mutation.SetValue(f)
	return au
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableValue(f *float64) *ActivityUpdate {
	if f != nil {
		au.SetValue(*f)
	}
	return au
}

// AddValue adds f to the "value" field.
func (au *ActivityUpdate) AddValue(f float64) *ActivityUpdate {
	au.mutation.AddValue(f)
	return au
}

// ClearValue clears the value of the "value" field.
func (au *ActivityUpdate) ClearValue() *ActivityUpdate {
	au.mutation.ClearValue()
	return au
}

// SetTimestamp sets the "timestamp" field.
func (au *ActivityUpdate) SetTimestamp(t time.Time) *ActivityUpdate {
	au.mutation.SetTimestamp(t)
	return au
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableTimestamp(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetTimestamp(*t)
	}
	return au
}

// SetExpiresAt sets the "expires_at" field.
func (au *ActivityUpdate) SetExpiresAt(t time.Time) *ActivityUpdate {
	au.mutation.SetExpiresAt(t)
	return au
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableExpiresAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetExpiresAt(*t)
	}
	return au
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (au *ActivityUpdate) ClearExpiresAt() *ActivityUpdate {
	au.mutation.ClearExpiresAt()
	return au
}

// SetMetadata sets the "metadata" field.
func (au *ActivityUpdate) SetMetadata(m map[string]interface{}) *ActivityUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *ActivityUpdate) ClearMetadata() *ActivityUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetTags sets the "tags" field.
func (au *ActivityUpdate) SetTags(s []string) *ActivityUpdate {
	au.mutation.SetTags(s)
	return au
}

// AppendTags appends s to the "tags" field.
func (au *ActivityUpdate) AppendTags(s []string) *ActivityUpdate {
	au.mutation.AppendTags(s)
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *ActivityUpdate) ClearTags() *ActivityUpdate {
	au.mutation.ClearTags()
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *ActivityUpdate) SetUser(u *User) *ActivityUpdate {
	return au.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (au *ActivityUpdate) SetOrganization(o *Organization) *ActivityUpdate {
	return au.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (au *ActivityUpdate) SetSession(s *Session) *ActivityUpdate {
	return au.SetSessionID(s.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *ActivityUpdate) ClearUser() *ActivityUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (au *ActivityUpdate) ClearOrganization() *ActivityUpdate {
	au.mutation.ClearOrganization()
	return au
}

// ClearSession clears the "session" edge to the Session entity.
func (au *ActivityUpdate) ClearSession() *ActivityUpdate {
	au.mutation.ClearSession()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if v, ok := au.mutation.ResourceType(); ok {
		if err := activity.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.ResourceID(); ok {
		if err := activity.ResourceIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Action(); ok {
		if err := activity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Activity.action": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *ActivityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActivityUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ResourceType(); ok {
		_spec.SetField(activity.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.ResourceID(); ok {
		_spec.SetField(activity.FieldResourceID, field.TypeString, value)
	}
	if value, ok := au.mutation.Action(); ok {
		_spec.SetField(activity.FieldAction, field.TypeString, value)
	}
	if value, ok := au.mutation.Category(); ok {
		_spec.SetField(activity.FieldCategory, field.TypeString, value)
	}
	if value, ok := au.mutation.Source(); ok {
		_spec.SetField(activity.FieldSource, field.TypeString, value)
	}
	if au.mutation.SourceCleared() {
		_spec.ClearField(activity.FieldSource, field.TypeString)
	}
	if value, ok := au.mutation.Endpoint(); ok {
		_spec.SetField(activity.FieldEndpoint, field.TypeString, value)
	}
	if au.mutation.EndpointCleared() {
		_spec.ClearField(activity.FieldEndpoint, field.TypeString)
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.SetField(activity.FieldMethod, field.TypeString, value)
	}
	if au.mutation.MethodCleared() {
		_spec.ClearField(activity.FieldMethod, field.TypeString)
	}
	if value, ok := au.mutation.StatusCode(); ok {
		_spec.SetField(activity.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedStatusCode(); ok {
		_spec.AddField(activity.FieldStatusCode, field.TypeInt, value)
	}
	if au.mutation.StatusCodeCleared() {
		_spec.ClearField(activity.FieldStatusCode, field.TypeInt)
	}
	if value, ok := au.mutation.ResponseTime(); ok {
		_spec.SetField(activity.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedResponseTime(); ok {
		_spec.AddField(activity.FieldResponseTime, field.TypeInt, value)
	}
	if au.mutation.ResponseTimeCleared() {
		_spec.ClearField(activity.FieldResponseTime, field.TypeInt)
	}
	if value, ok := au.mutation.IPAddress(); ok {
		_spec.SetField(activity.FieldIPAddress, field.TypeString, value)
	}
	if au.mutation.IPAddressCleared() {
		_spec.ClearField(activity.FieldIPAddress, field.TypeString)
	}
	if value, ok := au.mutation.UserAgent(); ok {
		_spec.SetField(activity.FieldUserAgent, field.TypeString, value)
	}
	if au.mutation.UserAgentCleared() {
		_spec.ClearField(activity.FieldUserAgent, field.TypeString)
	}
	if value, ok := au.mutation.Location(); ok {
		_spec.SetField(activity.FieldLocation, field.TypeString, value)
	}
	if au.mutation.LocationCleared() {
		_spec.ClearField(activity.FieldLocation, field.TypeString)
	}
	if value, ok := au.mutation.Success(); ok {
		_spec.SetField(activity.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := au.mutation.Error(); ok {
		_spec.SetField(activity.FieldError, field.TypeString, value)
	}
	if au.mutation.ErrorCleared() {
		_spec.ClearField(activity.FieldError, field.TypeString)
	}
	if value, ok := au.mutation.ErrorCode(); ok {
		_spec.SetField(activity.FieldErrorCode, field.TypeString, value)
	}
	if au.mutation.ErrorCodeCleared() {
		_spec.ClearField(activity.FieldErrorCode, field.TypeString)
	}
	if value, ok := au.mutation.Size(); ok {
		_spec.SetField(activity.FieldSize, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSize(); ok {
		_spec.AddField(activity.FieldSize, field.TypeInt, value)
	}
	if au.mutation.SizeCleared() {
		_spec.ClearField(activity.FieldSize, field.TypeInt)
	}
	if value, ok := au.mutation.Count(); ok {
		_spec.SetField(activity.FieldCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedCount(); ok {
		_spec.AddField(activity.FieldCount, field.TypeInt, value)
	}
	if au.mutation.CountCleared() {
		_spec.ClearField(activity.FieldCount, field.TypeInt)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(activity.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedValue(); ok {
		_spec.AddField(activity.FieldValue, field.TypeFloat64, value)
	}
	if au.mutation.ValueCleared() {
		_spec.ClearField(activity.FieldValue, field.TypeFloat64)
	}
	if value, ok := au.mutation.Timestamp(); ok {
		_spec.SetField(activity.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := au.mutation.ExpiresAt(); ok {
		_spec.SetField(activity.FieldExpiresAt, field.TypeTime, value)
	}
	if au.mutation.ExpiresAtCleared() {
		_spec.ClearField(activity.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(activity.FieldMetadata, field.TypeJSON)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(activity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldTags, value)
		})
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(activity.FieldTags, field.TypeJSON)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActivityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetResourceType sets the "resource_type" field.
func (auo *ActivityUpdateOne) SetResourceType(mt model.ResourceType) *ActivityUpdateOne {
	auo.mutation.SetResourceType(mt)
	return auo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableResourceType(mt *model.ResourceType) *ActivityUpdateOne {
	if mt != nil {
		auo.SetResourceType(*mt)
	}
	return auo
}

// SetResourceID sets the "resource_id" field.
func (auo *ActivityUpdateOne) SetResourceID(x xid.ID) *ActivityUpdateOne {
	auo.mutation.SetResourceID(x)
	return auo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableResourceID(x *xid.ID) *ActivityUpdateOne {
	if x != nil {
		auo.SetResourceID(*x)
	}
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *ActivityUpdateOne) SetUserID(x xid.ID) *ActivityUpdateOne {
	auo.mutation.SetUserID(x)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUserID(x *xid.ID) *ActivityUpdateOne {
	if x != nil {
		auo.SetUserID(*x)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *ActivityUpdateOne) ClearUserID() *ActivityUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetOrganizationID sets the "organization_id" field.
func (auo *ActivityUpdateOne) SetOrganizationID(x xid.ID) *ActivityUpdateOne {
	auo.mutation.SetOrganizationID(x)
	return auo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableOrganizationID(x *xid.ID) *ActivityUpdateOne {
	if x != nil {
		auo.SetOrganizationID(*x)
	}
	return auo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (auo *ActivityUpdateOne) ClearOrganizationID() *ActivityUpdateOne {
	auo.mutation.ClearOrganizationID()
	return auo
}

// SetSessionID sets the "session_id" field.
func (auo *ActivityUpdateOne) SetSessionID(x xid.ID) *ActivityUpdateOne {
	auo.mutation.SetSessionID(x)
	return auo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSessionID(x *xid.ID) *ActivityUpdateOne {
	if x != nil {
		auo.SetSessionID(*x)
	}
	return auo
}

// ClearSessionID clears the value of the "session_id" field.
func (auo *ActivityUpdateOne) ClearSessionID() *ActivityUpdateOne {
	auo.mutation.ClearSessionID()
	return auo
}

// SetAction sets the "action" field.
func (auo *ActivityUpdateOne) SetAction(s string) *ActivityUpdateOne {
	auo.mutation.SetAction(s)
	return auo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableAction(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetAction(*s)
	}
	return auo
}

// SetCategory sets the "category" field.
func (auo *ActivityUpdateOne) SetCategory(s string) *ActivityUpdateOne {
	auo.mutation.SetCategory(s)
	return auo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCategory(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetCategory(*s)
	}
	return auo
}

// SetSource sets the "source" field.
func (auo *ActivityUpdateOne) SetSource(s string) *ActivityUpdateOne {
	auo.mutation.SetSource(s)
	return auo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSource(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSource(*s)
	}
	return auo
}

// ClearSource clears the value of the "source" field.
func (auo *ActivityUpdateOne) ClearSource() *ActivityUpdateOne {
	auo.mutation.ClearSource()
	return auo
}

// SetEndpoint sets the "endpoint" field.
func (auo *ActivityUpdateOne) SetEndpoint(s string) *ActivityUpdateOne {
	auo.mutation.SetEndpoint(s)
	return auo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableEndpoint(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetEndpoint(*s)
	}
	return auo
}

// ClearEndpoint clears the value of the "endpoint" field.
func (auo *ActivityUpdateOne) ClearEndpoint() *ActivityUpdateOne {
	auo.mutation.ClearEndpoint()
	return auo
}

// SetMethod sets the "method" field.
func (auo *ActivityUpdateOne) SetMethod(s string) *ActivityUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableMethod(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *ActivityUpdateOne) ClearMethod() *ActivityUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// SetStatusCode sets the "status_code" field.
func (auo *ActivityUpdateOne) SetStatusCode(i int) *ActivityUpdateOne {
	auo.mutation.ResetStatusCode()
	auo.mutation.SetStatusCode(i)
	return auo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableStatusCode(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetStatusCode(*i)
	}
	return auo
}

// AddStatusCode adds i to the "status_code" field.
func (auo *ActivityUpdateOne) AddStatusCode(i int) *ActivityUpdateOne {
	auo.mutation.AddStatusCode(i)
	return auo
}

// ClearStatusCode clears the value of the "status_code" field.
func (auo *ActivityUpdateOne) ClearStatusCode() *ActivityUpdateOne {
	auo.mutation.ClearStatusCode()
	return auo
}

// SetResponseTime sets the "response_time" field.
func (auo *ActivityUpdateOne) SetResponseTime(i int) *ActivityUpdateOne {
	auo.mutation.ResetResponseTime()
	auo.mutation.SetResponseTime(i)
	return auo
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableResponseTime(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetResponseTime(*i)
	}
	return auo
}

// AddResponseTime adds i to the "response_time" field.
func (auo *ActivityUpdateOne) AddResponseTime(i int) *ActivityUpdateOne {
	auo.mutation.AddResponseTime(i)
	return auo
}

// ClearResponseTime clears the value of the "response_time" field.
func (auo *ActivityUpdateOne) ClearResponseTime() *ActivityUpdateOne {
	auo.mutation.ClearResponseTime()
	return auo
}

// SetIPAddress sets the "ip_address" field.
func (auo *ActivityUpdateOne) SetIPAddress(s string) *ActivityUpdateOne {
	auo.mutation.SetIPAddress(s)
	return auo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIPAddress(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetIPAddress(*s)
	}
	return auo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (auo *ActivityUpdateOne) ClearIPAddress() *ActivityUpdateOne {
	auo.mutation.ClearIPAddress()
	return auo
}

// SetUserAgent sets the "user_agent" field.
func (auo *ActivityUpdateOne) SetUserAgent(s string) *ActivityUpdateOne {
	auo.mutation.SetUserAgent(s)
	return auo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUserAgent(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetUserAgent(*s)
	}
	return auo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (auo *ActivityUpdateOne) ClearUserAgent() *ActivityUpdateOne {
	auo.mutation.ClearUserAgent()
	return auo
}

// SetLocation sets the "location" field.
func (auo *ActivityUpdateOne) SetLocation(s string) *ActivityUpdateOne {
	auo.mutation.SetLocation(s)
	return auo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableLocation(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetLocation(*s)
	}
	return auo
}

// ClearLocation clears the value of the "location" field.
func (auo *ActivityUpdateOne) ClearLocation() *ActivityUpdateOne {
	auo.mutation.ClearLocation()
	return auo
}

// SetSuccess sets the "success" field.
func (auo *ActivityUpdateOne) SetSuccess(b bool) *ActivityUpdateOne {
	auo.mutation.SetSuccess(b)
	return auo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSuccess(b *bool) *ActivityUpdateOne {
	if b != nil {
		auo.SetSuccess(*b)
	}
	return auo
}

// SetError sets the "error" field.
func (auo *ActivityUpdateOne) SetError(s string) *ActivityUpdateOne {
	auo.mutation.SetError(s)
	return auo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableError(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetError(*s)
	}
	return auo
}

// ClearError clears the value of the "error" field.
func (auo *ActivityUpdateOne) ClearError() *ActivityUpdateOne {
	auo.mutation.ClearError()
	return auo
}

// SetErrorCode sets the "error_code" field.
func (auo *ActivityUpdateOne) SetErrorCode(s string) *ActivityUpdateOne {
	auo.mutation.SetErrorCode(s)
	return auo
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableErrorCode(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetErrorCode(*s)
	}
	return auo
}

// ClearErrorCode clears the value of the "error_code" field.
func (auo *ActivityUpdateOne) ClearErrorCode() *ActivityUpdateOne {
	auo.mutation.ClearErrorCode()
	return auo
}

// SetSize sets the "size" field.
func (auo *ActivityUpdateOne) SetSize(i int) *ActivityUpdateOne {
	auo.mutation.ResetSize()
	auo.mutation.SetSize(i)
	return auo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSize(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetSize(*i)
	}
	return auo
}

// AddSize adds i to the "size" field.
func (auo *ActivityUpdateOne) AddSize(i int) *ActivityUpdateOne {
	auo.mutation.AddSize(i)
	return auo
}

// ClearSize clears the value of the "size" field.
func (auo *ActivityUpdateOne) ClearSize() *ActivityUpdateOne {
	auo.mutation.ClearSize()
	return auo
}

// SetCount sets the "count" field.
func (auo *ActivityUpdateOne) SetCount(i int) *ActivityUpdateOne {
	auo.mutation.ResetCount()
	auo.mutation.SetCount(i)
	return auo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCount(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetCount(*i)
	}
	return auo
}

// AddCount adds i to the "count" field.
func (auo *ActivityUpdateOne) AddCount(i int) *ActivityUpdateOne {
	auo.mutation.AddCount(i)
	return auo
}

// ClearCount clears the value of the "count" field.
func (auo *ActivityUpdateOne) ClearCount() *ActivityUpdateOne {
	auo.mutation.ClearCount()
	return auo
}

// SetValue sets the "value" field.
func (auo *ActivityUpdateOne) SetValue(f float64) *ActivityUpdateOne {
	auo.mutation.ResetValue()
	auo.mutation.SetValue(f)
	return auo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableValue(f *float64) *ActivityUpdateOne {
	if f != nil {
		auo.SetValue(*f)
	}
	return auo
}

// AddValue adds f to the "value" field.
func (auo *ActivityUpdateOne) AddValue(f float64) *ActivityUpdateOne {
	auo.mutation.AddValue(f)
	return auo
}

// ClearValue clears the value of the "value" field.
func (auo *ActivityUpdateOne) ClearValue() *ActivityUpdateOne {
	auo.mutation.ClearValue()
	return auo
}

// SetTimestamp sets the "timestamp" field.
func (auo *ActivityUpdateOne) SetTimestamp(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetTimestamp(t)
	return auo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableTimestamp(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetTimestamp(*t)
	}
	return auo
}

// SetExpiresAt sets the "expires_at" field.
func (auo *ActivityUpdateOne) SetExpiresAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetExpiresAt(t)
	return auo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableExpiresAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetExpiresAt(*t)
	}
	return auo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (auo *ActivityUpdateOne) ClearExpiresAt() *ActivityUpdateOne {
	auo.mutation.ClearExpiresAt()
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *ActivityUpdateOne) SetMetadata(m map[string]interface{}) *ActivityUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *ActivityUpdateOne) ClearMetadata() *ActivityUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetTags sets the "tags" field.
func (auo *ActivityUpdateOne) SetTags(s []string) *ActivityUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// AppendTags appends s to the "tags" field.
func (auo *ActivityUpdateOne) AppendTags(s []string) *ActivityUpdateOne {
	auo.mutation.AppendTags(s)
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *ActivityUpdateOne) ClearTags() *ActivityUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *ActivityUpdateOne) SetUser(u *User) *ActivityUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (auo *ActivityUpdateOne) SetOrganization(o *Organization) *ActivityUpdateOne {
	return auo.SetOrganizationID(o.ID)
}

// SetSession sets the "session" edge to the Session entity.
func (auo *ActivityUpdateOne) SetSession(s *Session) *ActivityUpdateOne {
	return auo.SetSessionID(s.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *ActivityUpdateOne) ClearUser() *ActivityUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (auo *ActivityUpdateOne) ClearOrganization() *ActivityUpdateOne {
	auo.mutation.ClearOrganization()
	return auo
}

// ClearSession clears the "session" edge to the Session entity.
func (auo *ActivityUpdateOne) ClearSession() *ActivityUpdateOne {
	auo.mutation.ClearSession()
	return auo
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if v, ok := auo.mutation.ResourceType(); ok {
		if err := activity.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ResourceID(); ok {
		if err := activity.ResourceIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "Activity.resource_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Action(); ok {
		if err := activity.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Activity.action": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *ActivityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActivityUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ResourceType(); ok {
		_spec.SetField(activity.FieldResourceType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.ResourceID(); ok {
		_spec.SetField(activity.FieldResourceID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Action(); ok {
		_spec.SetField(activity.FieldAction, field.TypeString, value)
	}
	if value, ok := auo.mutation.Category(); ok {
		_spec.SetField(activity.FieldCategory, field.TypeString, value)
	}
	if value, ok := auo.mutation.Source(); ok {
		_spec.SetField(activity.FieldSource, field.TypeString, value)
	}
	if auo.mutation.SourceCleared() {
		_spec.ClearField(activity.FieldSource, field.TypeString)
	}
	if value, ok := auo.mutation.Endpoint(); ok {
		_spec.SetField(activity.FieldEndpoint, field.TypeString, value)
	}
	if auo.mutation.EndpointCleared() {
		_spec.ClearField(activity.FieldEndpoint, field.TypeString)
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.SetField(activity.FieldMethod, field.TypeString, value)
	}
	if auo.mutation.MethodCleared() {
		_spec.ClearField(activity.FieldMethod, field.TypeString)
	}
	if value, ok := auo.mutation.StatusCode(); ok {
		_spec.SetField(activity.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedStatusCode(); ok {
		_spec.AddField(activity.FieldStatusCode, field.TypeInt, value)
	}
	if auo.mutation.StatusCodeCleared() {
		_spec.ClearField(activity.FieldStatusCode, field.TypeInt)
	}
	if value, ok := auo.mutation.ResponseTime(); ok {
		_spec.SetField(activity.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedResponseTime(); ok {
		_spec.AddField(activity.FieldResponseTime, field.TypeInt, value)
	}
	if auo.mutation.ResponseTimeCleared() {
		_spec.ClearField(activity.FieldResponseTime, field.TypeInt)
	}
	if value, ok := auo.mutation.IPAddress(); ok {
		_spec.SetField(activity.FieldIPAddress, field.TypeString, value)
	}
	if auo.mutation.IPAddressCleared() {
		_spec.ClearField(activity.FieldIPAddress, field.TypeString)
	}
	if value, ok := auo.mutation.UserAgent(); ok {
		_spec.SetField(activity.FieldUserAgent, field.TypeString, value)
	}
	if auo.mutation.UserAgentCleared() {
		_spec.ClearField(activity.FieldUserAgent, field.TypeString)
	}
	if value, ok := auo.mutation.Location(); ok {
		_spec.SetField(activity.FieldLocation, field.TypeString, value)
	}
	if auo.mutation.LocationCleared() {
		_spec.ClearField(activity.FieldLocation, field.TypeString)
	}
	if value, ok := auo.mutation.Success(); ok {
		_spec.SetField(activity.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Error(); ok {
		_spec.SetField(activity.FieldError, field.TypeString, value)
	}
	if auo.mutation.ErrorCleared() {
		_spec.ClearField(activity.FieldError, field.TypeString)
	}
	if value, ok := auo.mutation.ErrorCode(); ok {
		_spec.SetField(activity.FieldErrorCode, field.TypeString, value)
	}
	if auo.mutation.ErrorCodeCleared() {
		_spec.ClearField(activity.FieldErrorCode, field.TypeString)
	}
	if value, ok := auo.mutation.Size(); ok {
		_spec.SetField(activity.FieldSize, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSize(); ok {
		_spec.AddField(activity.FieldSize, field.TypeInt, value)
	}
	if auo.mutation.SizeCleared() {
		_spec.ClearField(activity.FieldSize, field.TypeInt)
	}
	if value, ok := auo.mutation.Count(); ok {
		_spec.SetField(activity.FieldCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedCount(); ok {
		_spec.AddField(activity.FieldCount, field.TypeInt, value)
	}
	if auo.mutation.CountCleared() {
		_spec.ClearField(activity.FieldCount, field.TypeInt)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(activity.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedValue(); ok {
		_spec.AddField(activity.FieldValue, field.TypeFloat64, value)
	}
	if auo.mutation.ValueCleared() {
		_spec.ClearField(activity.FieldValue, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Timestamp(); ok {
		_spec.SetField(activity.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ExpiresAt(); ok {
		_spec.SetField(activity.FieldExpiresAt, field.TypeTime, value)
	}
	if auo.mutation.ExpiresAtCleared() {
		_spec.ClearField(activity.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(activity.FieldMetadata, field.TypeJSON)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(activity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldTags, value)
		})
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(activity.FieldTags, field.TypeJSON)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
