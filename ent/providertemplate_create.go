// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/providertemplate"
)

// ProviderTemplateCreate is the builder for creating a ProviderTemplate entity.
type ProviderTemplateCreate struct {
	config
	mutation *ProviderTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProviderTemplateCreate) SetCreatedAt(t time.Time) *ProviderTemplateCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableCreatedAt(t *time.Time) *ProviderTemplateCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *ProviderTemplateCreate) SetUpdatedAt(t time.Time) *ProviderTemplateCreate {
	ptc.mutation.SetUpdatedAt(t)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableUpdatedAt(t *time.Time) *ProviderTemplateCreate {
	if t != nil {
		ptc.SetUpdatedAt(*t)
	}
	return ptc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *ProviderTemplateCreate) SetDeletedAt(t time.Time) *ProviderTemplateCreate {
	ptc.mutation.SetDeletedAt(t)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableDeletedAt(t *time.Time) *ProviderTemplateCreate {
	if t != nil {
		ptc.SetDeletedAt(*t)
	}
	return ptc
}

// SetKey sets the "key" field.
func (ptc *ProviderTemplateCreate) SetKey(s string) *ProviderTemplateCreate {
	ptc.mutation.SetKey(s)
	return ptc
}

// SetName sets the "name" field.
func (ptc *ProviderTemplateCreate) SetName(s string) *ProviderTemplateCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetDisplayName sets the "display_name" field.
func (ptc *ProviderTemplateCreate) SetDisplayName(s string) *ProviderTemplateCreate {
	ptc.mutation.SetDisplayName(s)
	return ptc
}

// SetType sets the "type" field.
func (ptc *ProviderTemplateCreate) SetType(s string) *ProviderTemplateCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// SetProtocol sets the "protocol" field.
func (ptc *ProviderTemplateCreate) SetProtocol(s string) *ProviderTemplateCreate {
	ptc.mutation.SetProtocol(s)
	return ptc
}

// SetIconURL sets the "icon_url" field.
func (ptc *ProviderTemplateCreate) SetIconURL(s string) *ProviderTemplateCreate {
	ptc.mutation.SetIconURL(s)
	return ptc
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableIconURL(s *string) *ProviderTemplateCreate {
	if s != nil {
		ptc.SetIconURL(*s)
	}
	return ptc
}

// SetCategory sets the "category" field.
func (ptc *ProviderTemplateCreate) SetCategory(s string) *ProviderTemplateCreate {
	ptc.mutation.SetCategory(s)
	return ptc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableCategory(s *string) *ProviderTemplateCreate {
	if s != nil {
		ptc.SetCategory(*s)
	}
	return ptc
}

// SetPopular sets the "popular" field.
func (ptc *ProviderTemplateCreate) SetPopular(b bool) *ProviderTemplateCreate {
	ptc.mutation.SetPopular(b)
	return ptc
}

// SetNillablePopular sets the "popular" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillablePopular(b *bool) *ProviderTemplateCreate {
	if b != nil {
		ptc.SetPopular(*b)
	}
	return ptc
}

// SetActive sets the "active" field.
func (ptc *ProviderTemplateCreate) SetActive(b bool) *ProviderTemplateCreate {
	ptc.mutation.SetActive(b)
	return ptc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableActive(b *bool) *ProviderTemplateCreate {
	if b != nil {
		ptc.SetActive(*b)
	}
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *ProviderTemplateCreate) SetDescription(s string) *ProviderTemplateCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableDescription(s *string) *ProviderTemplateCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetConfigTemplate sets the "config_template" field.
func (ptc *ProviderTemplateCreate) SetConfigTemplate(m map[string]interface{}) *ProviderTemplateCreate {
	ptc.mutation.SetConfigTemplate(m)
	return ptc
}

// SetRequiredFields sets the "required_fields" field.
func (ptc *ProviderTemplateCreate) SetRequiredFields(s []string) *ProviderTemplateCreate {
	ptc.mutation.SetRequiredFields(s)
	return ptc
}

// SetSupportedFeatures sets the "supported_features" field.
func (ptc *ProviderTemplateCreate) SetSupportedFeatures(s []string) *ProviderTemplateCreate {
	ptc.mutation.SetSupportedFeatures(s)
	return ptc
}

// SetDocumentationURL sets the "documentation_url" field.
func (ptc *ProviderTemplateCreate) SetDocumentationURL(s string) *ProviderTemplateCreate {
	ptc.mutation.SetDocumentationURL(s)
	return ptc
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableDocumentationURL(s *string) *ProviderTemplateCreate {
	if s != nil {
		ptc.SetDocumentationURL(*s)
	}
	return ptc
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (ptc *ProviderTemplateCreate) SetSetupGuideURL(s string) *ProviderTemplateCreate {
	ptc.mutation.SetSetupGuideURL(s)
	return ptc
}

// SetNillableSetupGuideURL sets the "setup_guide_url" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableSetupGuideURL(s *string) *ProviderTemplateCreate {
	if s != nil {
		ptc.SetSetupGuideURL(*s)
	}
	return ptc
}

// SetUsageCount sets the "usage_count" field.
func (ptc *ProviderTemplateCreate) SetUsageCount(i int) *ProviderTemplateCreate {
	ptc.mutation.SetUsageCount(i)
	return ptc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableUsageCount(i *int) *ProviderTemplateCreate {
	if i != nil {
		ptc.SetUsageCount(*i)
	}
	return ptc
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (ptc *ProviderTemplateCreate) SetAverageSetupTime(f float64) *ProviderTemplateCreate {
	ptc.mutation.SetAverageSetupTime(f)
	return ptc
}

// SetNillableAverageSetupTime sets the "average_setup_time" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableAverageSetupTime(f *float64) *ProviderTemplateCreate {
	if f != nil {
		ptc.SetAverageSetupTime(*f)
	}
	return ptc
}

// SetSuccessRate sets the "success_rate" field.
func (ptc *ProviderTemplateCreate) SetSuccessRate(f float64) *ProviderTemplateCreate {
	ptc.mutation.SetSuccessRate(f)
	return ptc
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableSuccessRate(f *float64) *ProviderTemplateCreate {
	if f != nil {
		ptc.SetSuccessRate(*f)
	}
	return ptc
}

// SetPopularityRank sets the "popularity_rank" field.
func (ptc *ProviderTemplateCreate) SetPopularityRank(i int) *ProviderTemplateCreate {
	ptc.mutation.SetPopularityRank(i)
	return ptc
}

// SetNillablePopularityRank sets the "popularity_rank" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillablePopularityRank(i *int) *ProviderTemplateCreate {
	if i != nil {
		ptc.SetPopularityRank(*i)
	}
	return ptc
}

// SetMetadata sets the "metadata" field.
func (ptc *ProviderTemplateCreate) SetMetadata(m map[string]interface{}) *ProviderTemplateCreate {
	ptc.mutation.SetMetadata(m)
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProviderTemplateCreate) SetID(x xid.ID) *ProviderTemplateCreate {
	ptc.mutation.SetID(x)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *ProviderTemplateCreate) SetNillableID(x *xid.ID) *ProviderTemplateCreate {
	if x != nil {
		ptc.SetID(*x)
	}
	return ptc
}

// AddOrganizationProviderIDs adds the "organization_providers" edge to the OrganizationProvider entity by IDs.
func (ptc *ProviderTemplateCreate) AddOrganizationProviderIDs(ids ...xid.ID) *ProviderTemplateCreate {
	ptc.mutation.AddOrganizationProviderIDs(ids...)
	return ptc
}

// AddOrganizationProviders adds the "organization_providers" edges to the OrganizationProvider entity.
func (ptc *ProviderTemplateCreate) AddOrganizationProviders(o ...*OrganizationProvider) *ProviderTemplateCreate {
	ids := make([]xid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptc.AddOrganizationProviderIDs(ids...)
}

// Mutation returns the ProviderTemplateMutation object of the builder.
func (ptc *ProviderTemplateCreate) Mutation() *ProviderTemplateMutation {
	return ptc.mutation
}

// Save creates the ProviderTemplate in the database.
func (ptc *ProviderTemplateCreate) Save(ctx context.Context) (*ProviderTemplate, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProviderTemplateCreate) SaveX(ctx context.Context) *ProviderTemplate {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProviderTemplateCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProviderTemplateCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProviderTemplateCreate) defaults() {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := providertemplate.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		v := providertemplate.DefaultUpdatedAt()
		ptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptc.mutation.Category(); !ok {
		v := providertemplate.DefaultCategory
		ptc.mutation.SetCategory(v)
	}
	if _, ok := ptc.mutation.Popular(); !ok {
		v := providertemplate.DefaultPopular
		ptc.mutation.SetPopular(v)
	}
	if _, ok := ptc.mutation.Active(); !ok {
		v := providertemplate.DefaultActive
		ptc.mutation.SetActive(v)
	}
	if _, ok := ptc.mutation.UsageCount(); !ok {
		v := providertemplate.DefaultUsageCount
		ptc.mutation.SetUsageCount(v)
	}
	if _, ok := ptc.mutation.SuccessRate(); !ok {
		v := providertemplate.DefaultSuccessRate
		ptc.mutation.SetSuccessRate(v)
	}
	if _, ok := ptc.mutation.PopularityRank(); !ok {
		v := providertemplate.DefaultPopularityRank
		ptc.mutation.SetPopularityRank(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := providertemplate.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProviderTemplateCreate) check() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProviderTemplate.created_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderTemplate.updated_at"`)}
	}
	if _, ok := ptc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ProviderTemplate.key"`)}
	}
	if v, ok := ptc.mutation.Key(); ok {
		if err := providertemplate.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.key": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProviderTemplate.name"`)}
	}
	if v, ok := ptc.mutation.Name(); ok {
		if err := providertemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.name": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "ProviderTemplate.display_name"`)}
	}
	if v, ok := ptc.mutation.DisplayName(); ok {
		if err := providertemplate.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.display_name": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ProviderTemplate.type"`)}
	}
	if v, ok := ptc.mutation.GetType(); ok {
		if err := providertemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.type": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`ent: missing required field "ProviderTemplate.protocol"`)}
	}
	if v, ok := ptc.mutation.Protocol(); ok {
		if err := providertemplate.ProtocolValidator(v); err != nil {
			return &ValidationError{Name: "protocol", err: fmt.Errorf(`ent: validator failed for field "ProviderTemplate.protocol": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "ProviderTemplate.category"`)}
	}
	if _, ok := ptc.mutation.Popular(); !ok {
		return &ValidationError{Name: "popular", err: errors.New(`ent: missing required field "ProviderTemplate.popular"`)}
	}
	if _, ok := ptc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "ProviderTemplate.active"`)}
	}
	if _, ok := ptc.mutation.ConfigTemplate(); !ok {
		return &ValidationError{Name: "config_template", err: errors.New(`ent: missing required field "ProviderTemplate.config_template"`)}
	}
	if _, ok := ptc.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`ent: missing required field "ProviderTemplate.usage_count"`)}
	}
	if _, ok := ptc.mutation.SuccessRate(); !ok {
		return &ValidationError{Name: "success_rate", err: errors.New(`ent: missing required field "ProviderTemplate.success_rate"`)}
	}
	if _, ok := ptc.mutation.PopularityRank(); !ok {
		return &ValidationError{Name: "popularity_rank", err: errors.New(`ent: missing required field "ProviderTemplate.popularity_rank"`)}
	}
	return nil
}

func (ptc *ProviderTemplateCreate) sqlSave(ctx context.Context) (*ProviderTemplate, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProviderTemplateCreate) createSpec() (*ProviderTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderTemplate{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(providertemplate.Table, sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString))
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(providertemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.SetField(providertemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.SetField(providertemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ptc.mutation.Key(); ok {
		_spec.SetField(providertemplate.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.SetField(providertemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptc.mutation.DisplayName(); ok {
		_spec.SetField(providertemplate.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(providertemplate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ptc.mutation.Protocol(); ok {
		_spec.SetField(providertemplate.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := ptc.mutation.IconURL(); ok {
		_spec.SetField(providertemplate.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := ptc.mutation.Category(); ok {
		_spec.SetField(providertemplate.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ptc.mutation.Popular(); ok {
		_spec.SetField(providertemplate.FieldPopular, field.TypeBool, value)
		_node.Popular = value
	}
	if value, ok := ptc.mutation.Active(); ok {
		_spec.SetField(providertemplate.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(providertemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.ConfigTemplate(); ok {
		_spec.SetField(providertemplate.FieldConfigTemplate, field.TypeJSON, value)
		_node.ConfigTemplate = value
	}
	if value, ok := ptc.mutation.RequiredFields(); ok {
		_spec.SetField(providertemplate.FieldRequiredFields, field.TypeJSON, value)
		_node.RequiredFields = value
	}
	if value, ok := ptc.mutation.SupportedFeatures(); ok {
		_spec.SetField(providertemplate.FieldSupportedFeatures, field.TypeJSON, value)
		_node.SupportedFeatures = value
	}
	if value, ok := ptc.mutation.DocumentationURL(); ok {
		_spec.SetField(providertemplate.FieldDocumentationURL, field.TypeString, value)
		_node.DocumentationURL = value
	}
	if value, ok := ptc.mutation.SetupGuideURL(); ok {
		_spec.SetField(providertemplate.FieldSetupGuideURL, field.TypeString, value)
		_node.SetupGuideURL = value
	}
	if value, ok := ptc.mutation.UsageCount(); ok {
		_spec.SetField(providertemplate.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if value, ok := ptc.mutation.AverageSetupTime(); ok {
		_spec.SetField(providertemplate.FieldAverageSetupTime, field.TypeFloat64, value)
		_node.AverageSetupTime = value
	}
	if value, ok := ptc.mutation.SuccessRate(); ok {
		_spec.SetField(providertemplate.FieldSuccessRate, field.TypeFloat64, value)
		_node.SuccessRate = value
	}
	if value, ok := ptc.mutation.PopularityRank(); ok {
		_spec.SetField(providertemplate.FieldPopularityRank, field.TypeInt, value)
		_node.PopularityRank = value
	}
	if value, ok := ptc.mutation.Metadata(); ok {
		_spec.SetField(providertemplate.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ptc.mutation.OrganizationProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptc *ProviderTemplateCreate) OnConflict(opts ...sql.ConflictOption) *ProviderTemplateUpsertOne {
	ptc.conflict = opts
	return &ProviderTemplateUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *ProviderTemplateCreate) OnConflictColumns(columns ...string) *ProviderTemplateUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &ProviderTemplateUpsertOne{
		create: ptc,
	}
}

type (
	// ProviderTemplateUpsertOne is the builder for "upsert"-ing
	//  one ProviderTemplate node.
	ProviderTemplateUpsertOne struct {
		create *ProviderTemplateCreate
	}

	// ProviderTemplateUpsert is the "OnConflict" setter.
	ProviderTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderTemplateUpsert) SetUpdatedAt(v time.Time) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateUpdatedAt() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProviderTemplateUpsert) SetDeletedAt(v time.Time) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateDeletedAt() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProviderTemplateUpsert) ClearDeletedAt() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldDeletedAt)
	return u
}

// SetKey sets the "key" field.
func (u *ProviderTemplateUpsert) SetKey(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateKey() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldKey)
	return u
}

// SetName sets the "name" field.
func (u *ProviderTemplateUpsert) SetName(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateName() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ProviderTemplateUpsert) SetDisplayName(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateDisplayName() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldDisplayName)
	return u
}

// SetType sets the "type" field.
func (u *ProviderTemplateUpsert) SetType(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateType() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldType)
	return u
}

// SetProtocol sets the "protocol" field.
func (u *ProviderTemplateUpsert) SetProtocol(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldProtocol, v)
	return u
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateProtocol() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldProtocol)
	return u
}

// SetIconURL sets the "icon_url" field.
func (u *ProviderTemplateUpsert) SetIconURL(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldIconURL, v)
	return u
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateIconURL() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldIconURL)
	return u
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *ProviderTemplateUpsert) ClearIconURL() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldIconURL)
	return u
}

// SetCategory sets the "category" field.
func (u *ProviderTemplateUpsert) SetCategory(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateCategory() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldCategory)
	return u
}

// SetPopular sets the "popular" field.
func (u *ProviderTemplateUpsert) SetPopular(v bool) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldPopular, v)
	return u
}

// UpdatePopular sets the "popular" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdatePopular() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldPopular)
	return u
}

// SetActive sets the "active" field.
func (u *ProviderTemplateUpsert) SetActive(v bool) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateActive() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldActive)
	return u
}

// SetDescription sets the "description" field.
func (u *ProviderTemplateUpsert) SetDescription(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateDescription() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ProviderTemplateUpsert) ClearDescription() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldDescription)
	return u
}

// SetConfigTemplate sets the "config_template" field.
func (u *ProviderTemplateUpsert) SetConfigTemplate(v map[string]interface{}) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldConfigTemplate, v)
	return u
}

// UpdateConfigTemplate sets the "config_template" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateConfigTemplate() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldConfigTemplate)
	return u
}

// SetRequiredFields sets the "required_fields" field.
func (u *ProviderTemplateUpsert) SetRequiredFields(v []string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldRequiredFields, v)
	return u
}

// UpdateRequiredFields sets the "required_fields" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateRequiredFields() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldRequiredFields)
	return u
}

// ClearRequiredFields clears the value of the "required_fields" field.
func (u *ProviderTemplateUpsert) ClearRequiredFields() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldRequiredFields)
	return u
}

// SetSupportedFeatures sets the "supported_features" field.
func (u *ProviderTemplateUpsert) SetSupportedFeatures(v []string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldSupportedFeatures, v)
	return u
}

// UpdateSupportedFeatures sets the "supported_features" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateSupportedFeatures() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldSupportedFeatures)
	return u
}

// ClearSupportedFeatures clears the value of the "supported_features" field.
func (u *ProviderTemplateUpsert) ClearSupportedFeatures() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldSupportedFeatures)
	return u
}

// SetDocumentationURL sets the "documentation_url" field.
func (u *ProviderTemplateUpsert) SetDocumentationURL(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldDocumentationURL, v)
	return u
}

// UpdateDocumentationURL sets the "documentation_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateDocumentationURL() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldDocumentationURL)
	return u
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (u *ProviderTemplateUpsert) ClearDocumentationURL() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldDocumentationURL)
	return u
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (u *ProviderTemplateUpsert) SetSetupGuideURL(v string) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldSetupGuideURL, v)
	return u
}

// UpdateSetupGuideURL sets the "setup_guide_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateSetupGuideURL() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldSetupGuideURL)
	return u
}

// ClearSetupGuideURL clears the value of the "setup_guide_url" field.
func (u *ProviderTemplateUpsert) ClearSetupGuideURL() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldSetupGuideURL)
	return u
}

// SetUsageCount sets the "usage_count" field.
func (u *ProviderTemplateUpsert) SetUsageCount(v int) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldUsageCount, v)
	return u
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateUsageCount() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldUsageCount)
	return u
}

// AddUsageCount adds v to the "usage_count" field.
func (u *ProviderTemplateUpsert) AddUsageCount(v int) *ProviderTemplateUpsert {
	u.Add(providertemplate.FieldUsageCount, v)
	return u
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (u *ProviderTemplateUpsert) SetAverageSetupTime(v float64) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldAverageSetupTime, v)
	return u
}

// UpdateAverageSetupTime sets the "average_setup_time" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateAverageSetupTime() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldAverageSetupTime)
	return u
}

// AddAverageSetupTime adds v to the "average_setup_time" field.
func (u *ProviderTemplateUpsert) AddAverageSetupTime(v float64) *ProviderTemplateUpsert {
	u.Add(providertemplate.FieldAverageSetupTime, v)
	return u
}

// ClearAverageSetupTime clears the value of the "average_setup_time" field.
func (u *ProviderTemplateUpsert) ClearAverageSetupTime() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldAverageSetupTime)
	return u
}

// SetSuccessRate sets the "success_rate" field.
func (u *ProviderTemplateUpsert) SetSuccessRate(v float64) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldSuccessRate, v)
	return u
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateSuccessRate() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldSuccessRate)
	return u
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *ProviderTemplateUpsert) AddSuccessRate(v float64) *ProviderTemplateUpsert {
	u.Add(providertemplate.FieldSuccessRate, v)
	return u
}

// SetPopularityRank sets the "popularity_rank" field.
func (u *ProviderTemplateUpsert) SetPopularityRank(v int) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldPopularityRank, v)
	return u
}

// UpdatePopularityRank sets the "popularity_rank" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdatePopularityRank() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldPopularityRank)
	return u
}

// AddPopularityRank adds v to the "popularity_rank" field.
func (u *ProviderTemplateUpsert) AddPopularityRank(v int) *ProviderTemplateUpsert {
	u.Add(providertemplate.FieldPopularityRank, v)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ProviderTemplateUpsert) SetMetadata(v map[string]interface{}) *ProviderTemplateUpsert {
	u.Set(providertemplate.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProviderTemplateUpsert) UpdateMetadata() *ProviderTemplateUpsert {
	u.SetExcluded(providertemplate.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ProviderTemplateUpsert) ClearMetadata() *ProviderTemplateUpsert {
	u.SetNull(providertemplate.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providertemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderTemplateUpsertOne) UpdateNewValues() *ProviderTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(providertemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(providertemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProviderTemplateUpsertOne) Ignore() *ProviderTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderTemplateUpsertOne) DoNothing() *ProviderTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderTemplateCreate.OnConflict
// documentation for more info.
func (u *ProviderTemplateUpsertOne) Update(set func(*ProviderTemplateUpsert)) *ProviderTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderTemplateUpsertOne) SetUpdatedAt(v time.Time) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateUpdatedAt() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProviderTemplateUpsertOne) SetDeletedAt(v time.Time) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateDeletedAt() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProviderTemplateUpsertOne) ClearDeletedAt() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetKey sets the "key" field.
func (u *ProviderTemplateUpsertOne) SetKey(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateKey() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *ProviderTemplateUpsertOne) SetName(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateName() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ProviderTemplateUpsertOne) SetDisplayName(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateDisplayName() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDisplayName()
	})
}

// SetType sets the "type" field.
func (u *ProviderTemplateUpsertOne) SetType(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateType() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateType()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ProviderTemplateUpsertOne) SetProtocol(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateProtocol() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateProtocol()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *ProviderTemplateUpsertOne) SetIconURL(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateIconURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *ProviderTemplateUpsertOne) ClearIconURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearIconURL()
	})
}

// SetCategory sets the "category" field.
func (u *ProviderTemplateUpsertOne) SetCategory(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateCategory() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateCategory()
	})
}

// SetPopular sets the "popular" field.
func (u *ProviderTemplateUpsertOne) SetPopular(v bool) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetPopular(v)
	})
}

// UpdatePopular sets the "popular" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdatePopular() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdatePopular()
	})
}

// SetActive sets the "active" field.
func (u *ProviderTemplateUpsertOne) SetActive(v bool) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateActive() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetDescription sets the "description" field.
func (u *ProviderTemplateUpsertOne) SetDescription(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateDescription() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProviderTemplateUpsertOne) ClearDescription() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetConfigTemplate sets the "config_template" field.
func (u *ProviderTemplateUpsertOne) SetConfigTemplate(v map[string]interface{}) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetConfigTemplate(v)
	})
}

// UpdateConfigTemplate sets the "config_template" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateConfigTemplate() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateConfigTemplate()
	})
}

// SetRequiredFields sets the "required_fields" field.
func (u *ProviderTemplateUpsertOne) SetRequiredFields(v []string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetRequiredFields(v)
	})
}

// UpdateRequiredFields sets the "required_fields" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateRequiredFields() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateRequiredFields()
	})
}

// ClearRequiredFields clears the value of the "required_fields" field.
func (u *ProviderTemplateUpsertOne) ClearRequiredFields() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearRequiredFields()
	})
}

// SetSupportedFeatures sets the "supported_features" field.
func (u *ProviderTemplateUpsertOne) SetSupportedFeatures(v []string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSupportedFeatures(v)
	})
}

// UpdateSupportedFeatures sets the "supported_features" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateSupportedFeatures() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSupportedFeatures()
	})
}

// ClearSupportedFeatures clears the value of the "supported_features" field.
func (u *ProviderTemplateUpsertOne) ClearSupportedFeatures() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearSupportedFeatures()
	})
}

// SetDocumentationURL sets the "documentation_url" field.
func (u *ProviderTemplateUpsertOne) SetDocumentationURL(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDocumentationURL(v)
	})
}

// UpdateDocumentationURL sets the "documentation_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateDocumentationURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDocumentationURL()
	})
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (u *ProviderTemplateUpsertOne) ClearDocumentationURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDocumentationURL()
	})
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (u *ProviderTemplateUpsertOne) SetSetupGuideURL(v string) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSetupGuideURL(v)
	})
}

// UpdateSetupGuideURL sets the "setup_guide_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateSetupGuideURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSetupGuideURL()
	})
}

// ClearSetupGuideURL clears the value of the "setup_guide_url" field.
func (u *ProviderTemplateUpsertOne) ClearSetupGuideURL() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearSetupGuideURL()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *ProviderTemplateUpsertOne) SetUsageCount(v int) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *ProviderTemplateUpsertOne) AddUsageCount(v int) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateUsageCount() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateUsageCount()
	})
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (u *ProviderTemplateUpsertOne) SetAverageSetupTime(v float64) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetAverageSetupTime(v)
	})
}

// AddAverageSetupTime adds v to the "average_setup_time" field.
func (u *ProviderTemplateUpsertOne) AddAverageSetupTime(v float64) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddAverageSetupTime(v)
	})
}

// UpdateAverageSetupTime sets the "average_setup_time" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateAverageSetupTime() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateAverageSetupTime()
	})
}

// ClearAverageSetupTime clears the value of the "average_setup_time" field.
func (u *ProviderTemplateUpsertOne) ClearAverageSetupTime() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearAverageSetupTime()
	})
}

// SetSuccessRate sets the "success_rate" field.
func (u *ProviderTemplateUpsertOne) SetSuccessRate(v float64) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSuccessRate(v)
	})
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *ProviderTemplateUpsertOne) AddSuccessRate(v float64) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddSuccessRate(v)
	})
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateSuccessRate() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSuccessRate()
	})
}

// SetPopularityRank sets the "popularity_rank" field.
func (u *ProviderTemplateUpsertOne) SetPopularityRank(v int) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetPopularityRank(v)
	})
}

// AddPopularityRank adds v to the "popularity_rank" field.
func (u *ProviderTemplateUpsertOne) AddPopularityRank(v int) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddPopularityRank(v)
	})
}

// UpdatePopularityRank sets the "popularity_rank" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdatePopularityRank() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdatePopularityRank()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProviderTemplateUpsertOne) SetMetadata(v map[string]interface{}) *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProviderTemplateUpsertOne) UpdateMetadata() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ProviderTemplateUpsertOne) ClearMetadata() *ProviderTemplateUpsertOne {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *ProviderTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProviderTemplateUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProviderTemplateUpsertOne.ID is not supported by MySQL driver. Use ProviderTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProviderTemplateUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProviderTemplateCreateBulk is the builder for creating many ProviderTemplate entities in bulk.
type ProviderTemplateCreateBulk struct {
	config
	err      error
	builders []*ProviderTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the ProviderTemplate entities in the database.
func (ptcb *ProviderTemplateCreateBulk) Save(ctx context.Context) ([]*ProviderTemplate, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProviderTemplate, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProviderTemplateCreateBulk) SaveX(ctx context.Context) []*ProviderTemplate {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProviderTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProviderTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptcb *ProviderTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProviderTemplateUpsertBulk {
	ptcb.conflict = opts
	return &ProviderTemplateUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *ProviderTemplateCreateBulk) OnConflictColumns(columns ...string) *ProviderTemplateUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &ProviderTemplateUpsertBulk{
		create: ptcb,
	}
}

// ProviderTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of ProviderTemplate nodes.
type ProviderTemplateUpsertBulk struct {
	create *ProviderTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providertemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderTemplateUpsertBulk) UpdateNewValues() *ProviderTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(providertemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(providertemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProviderTemplateUpsertBulk) Ignore() *ProviderTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderTemplateUpsertBulk) DoNothing() *ProviderTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *ProviderTemplateUpsertBulk) Update(set func(*ProviderTemplateUpsert)) *ProviderTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderTemplateUpsertBulk) SetUpdatedAt(v time.Time) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateUpdatedAt() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProviderTemplateUpsertBulk) SetDeletedAt(v time.Time) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateDeletedAt() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProviderTemplateUpsertBulk) ClearDeletedAt() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetKey sets the "key" field.
func (u *ProviderTemplateUpsertBulk) SetKey(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateKey() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *ProviderTemplateUpsertBulk) SetName(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateName() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ProviderTemplateUpsertBulk) SetDisplayName(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateDisplayName() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDisplayName()
	})
}

// SetType sets the "type" field.
func (u *ProviderTemplateUpsertBulk) SetType(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateType() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateType()
	})
}

// SetProtocol sets the "protocol" field.
func (u *ProviderTemplateUpsertBulk) SetProtocol(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetProtocol(v)
	})
}

// UpdateProtocol sets the "protocol" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateProtocol() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateProtocol()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *ProviderTemplateUpsertBulk) SetIconURL(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateIconURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateIconURL()
	})
}

// ClearIconURL clears the value of the "icon_url" field.
func (u *ProviderTemplateUpsertBulk) ClearIconURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearIconURL()
	})
}

// SetCategory sets the "category" field.
func (u *ProviderTemplateUpsertBulk) SetCategory(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateCategory() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateCategory()
	})
}

// SetPopular sets the "popular" field.
func (u *ProviderTemplateUpsertBulk) SetPopular(v bool) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetPopular(v)
	})
}

// UpdatePopular sets the "popular" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdatePopular() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdatePopular()
	})
}

// SetActive sets the "active" field.
func (u *ProviderTemplateUpsertBulk) SetActive(v bool) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateActive() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateActive()
	})
}

// SetDescription sets the "description" field.
func (u *ProviderTemplateUpsertBulk) SetDescription(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateDescription() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProviderTemplateUpsertBulk) ClearDescription() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetConfigTemplate sets the "config_template" field.
func (u *ProviderTemplateUpsertBulk) SetConfigTemplate(v map[string]interface{}) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetConfigTemplate(v)
	})
}

// UpdateConfigTemplate sets the "config_template" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateConfigTemplate() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateConfigTemplate()
	})
}

// SetRequiredFields sets the "required_fields" field.
func (u *ProviderTemplateUpsertBulk) SetRequiredFields(v []string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetRequiredFields(v)
	})
}

// UpdateRequiredFields sets the "required_fields" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateRequiredFields() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateRequiredFields()
	})
}

// ClearRequiredFields clears the value of the "required_fields" field.
func (u *ProviderTemplateUpsertBulk) ClearRequiredFields() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearRequiredFields()
	})
}

// SetSupportedFeatures sets the "supported_features" field.
func (u *ProviderTemplateUpsertBulk) SetSupportedFeatures(v []string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSupportedFeatures(v)
	})
}

// UpdateSupportedFeatures sets the "supported_features" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateSupportedFeatures() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSupportedFeatures()
	})
}

// ClearSupportedFeatures clears the value of the "supported_features" field.
func (u *ProviderTemplateUpsertBulk) ClearSupportedFeatures() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearSupportedFeatures()
	})
}

// SetDocumentationURL sets the "documentation_url" field.
func (u *ProviderTemplateUpsertBulk) SetDocumentationURL(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetDocumentationURL(v)
	})
}

// UpdateDocumentationURL sets the "documentation_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateDocumentationURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateDocumentationURL()
	})
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (u *ProviderTemplateUpsertBulk) ClearDocumentationURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearDocumentationURL()
	})
}

// SetSetupGuideURL sets the "setup_guide_url" field.
func (u *ProviderTemplateUpsertBulk) SetSetupGuideURL(v string) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSetupGuideURL(v)
	})
}

// UpdateSetupGuideURL sets the "setup_guide_url" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateSetupGuideURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSetupGuideURL()
	})
}

// ClearSetupGuideURL clears the value of the "setup_guide_url" field.
func (u *ProviderTemplateUpsertBulk) ClearSetupGuideURL() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearSetupGuideURL()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *ProviderTemplateUpsertBulk) SetUsageCount(v int) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *ProviderTemplateUpsertBulk) AddUsageCount(v int) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateUsageCount() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateUsageCount()
	})
}

// SetAverageSetupTime sets the "average_setup_time" field.
func (u *ProviderTemplateUpsertBulk) SetAverageSetupTime(v float64) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetAverageSetupTime(v)
	})
}

// AddAverageSetupTime adds v to the "average_setup_time" field.
func (u *ProviderTemplateUpsertBulk) AddAverageSetupTime(v float64) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddAverageSetupTime(v)
	})
}

// UpdateAverageSetupTime sets the "average_setup_time" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateAverageSetupTime() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateAverageSetupTime()
	})
}

// ClearAverageSetupTime clears the value of the "average_setup_time" field.
func (u *ProviderTemplateUpsertBulk) ClearAverageSetupTime() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearAverageSetupTime()
	})
}

// SetSuccessRate sets the "success_rate" field.
func (u *ProviderTemplateUpsertBulk) SetSuccessRate(v float64) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetSuccessRate(v)
	})
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *ProviderTemplateUpsertBulk) AddSuccessRate(v float64) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddSuccessRate(v)
	})
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateSuccessRate() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateSuccessRate()
	})
}

// SetPopularityRank sets the "popularity_rank" field.
func (u *ProviderTemplateUpsertBulk) SetPopularityRank(v int) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetPopularityRank(v)
	})
}

// AddPopularityRank adds v to the "popularity_rank" field.
func (u *ProviderTemplateUpsertBulk) AddPopularityRank(v int) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.AddPopularityRank(v)
	})
}

// UpdatePopularityRank sets the "popularity_rank" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdatePopularityRank() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdatePopularityRank()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProviderTemplateUpsertBulk) SetMetadata(v map[string]interface{}) *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProviderTemplateUpsertBulk) UpdateMetadata() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ProviderTemplateUpsertBulk) ClearMetadata() *ProviderTemplateUpsertBulk {
	return u.Update(func(s *ProviderTemplateUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *ProviderTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProviderTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
