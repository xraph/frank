// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/pkg/model"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the entity
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Role name (system_admin, org_owner, app_user, etc.)
	Name string `json:"name,omitempty"`
	// Human-readable role name
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// system = platform roles, organization = org roles, application = customer's app roles
	RoleType model.RoleType `json:"role_type,omitempty"`
	// If set, role is scoped to this organization
	OrganizationID xid.ID `json:"organization_id,omitempty"`
	// If set, role is scoped to this application (for customer's app roles)
	ApplicationID xid.ID `json:"application_id,omitempty"`
	// System roles cannot be modified
	System bool `json:"system,omitempty"`
	// Default role assigned to new users in this context
	IsDefault bool `json:"is_default,omitempty"`
	// Role priority for hierarchy (higher = more powerful)
	Priority int `json:"priority,omitempty"`
	// Color for UI display
	Color string `json:"color,omitempty"`
	// Which user types this role can be assigned to: ['internal', 'external', 'end_user']
	ApplicableUserTypes []model.UserType `json:"applicable_user_types,omitempty"`
	// User who created this role
	CreatedBy string `json:"created_by,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Parent role ID for role hierarchy
	ParentID xid.ID `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// UserAssignments holds the value of the user_assignments edge.
	UserAssignments []*UserRole `json:"user_assignments,omitempty"`
	// SystemUsers holds the value of the system_users edge.
	SystemUsers []*User `json:"system_users,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Role `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Role `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes          [7]bool
	namedUserAssignments map[string][]*UserRole
	namedSystemUsers     map[string][]*User
	namedPermissions     map[string][]*Permission
	namedMemberships     map[string][]*Membership
	namedChildren        map[string][]*Role
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// UserAssignmentsOrErr returns the UserAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) UserAssignmentsOrErr() ([]*UserRole, error) {
	if e.loadedTypes[1] {
		return e.UserAssignments, nil
	}
	return nil, &NotLoadedError{edge: "user_assignments"}
}

// SystemUsersOrErr returns the SystemUsers value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) SystemUsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.SystemUsers, nil
	}
	return nil, &NotLoadedError{edge: "system_users"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[3] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[4] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleEdges) ParentOrErr() (*Role, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) ChildrenOrErr() ([]*Role, error) {
	if e.loadedTypes[6] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldApplicableUserTypes:
			values[i] = new([]byte)
		case role.FieldSystem, role.FieldIsDefault, role.FieldActive:
			values[i] = new(sql.NullBool)
		case role.FieldPriority:
			values[i] = new(sql.NullInt64)
		case role.FieldName, role.FieldDisplayName, role.FieldDescription, role.FieldRoleType, role.FieldColor, role.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case role.FieldCreatedAt, role.FieldUpdatedAt, role.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case role.FieldID, role.FieldOrganizationID, role.FieldApplicationID, role.FieldParentID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (r *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case role.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case role.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case role.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				r.DisplayName = value.String
			}
		case role.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case role.FieldRoleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_type", values[i])
			} else if value.Valid {
				r.RoleType = model.RoleType(value.String)
			}
		case role.FieldOrganizationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				r.OrganizationID = *value
			}
		case role.FieldApplicationID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value != nil {
				r.ApplicationID = *value
			}
		case role.FieldSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system", values[i])
			} else if value.Valid {
				r.System = value.Bool
			}
		case role.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				r.IsDefault = value.Bool
			}
		case role.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				r.Priority = int(value.Int64)
			}
		case role.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				r.Color = value.String
			}
		case role.FieldApplicableUserTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field applicable_user_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.ApplicableUserTypes); err != nil {
					return fmt.Errorf("unmarshal field applicable_user_types: %w", err)
				}
			}
		case role.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = value.String
			}
		case role.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				r.Active = value.Bool
			}
		case role.FieldParentID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				r.ParentID = *value
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (r *Role) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Role entity.
func (r *Role) QueryOrganization() *OrganizationQuery {
	return NewRoleClient(r.config).QueryOrganization(r)
}

// QueryUserAssignments queries the "user_assignments" edge of the Role entity.
func (r *Role) QueryUserAssignments() *UserRoleQuery {
	return NewRoleClient(r.config).QueryUserAssignments(r)
}

// QuerySystemUsers queries the "system_users" edge of the Role entity.
func (r *Role) QuerySystemUsers() *UserQuery {
	return NewRoleClient(r.config).QuerySystemUsers(r)
}

// QueryPermissions queries the "permissions" edge of the Role entity.
func (r *Role) QueryPermissions() *PermissionQuery {
	return NewRoleClient(r.config).QueryPermissions(r)
}

// QueryMemberships queries the "memberships" edge of the Role entity.
func (r *Role) QueryMemberships() *MembershipQuery {
	return NewRoleClient(r.config).QueryMemberships(r)
}

// QueryParent queries the "parent" edge of the Role entity.
func (r *Role) QueryParent() *RoleQuery {
	return NewRoleClient(r.config).QueryParent(r)
}

// QueryChildren queries the "children" edge of the Role entity.
func (r *Role) QueryChildren() *RoleQuery {
	return NewRoleClient(r.config).QueryChildren(r)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Role) Update() *RoleUpdateOne {
	return NewRoleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Role) Unwrap() *Role {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Role is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(r.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("role_type=")
	builder.WriteString(fmt.Sprintf("%v", r.RoleType))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", r.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("application_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("system=")
	builder.WriteString(fmt.Sprintf("%v", r.System))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", r.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", r.Priority))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(r.Color)
	builder.WriteString(", ")
	builder.WriteString("applicable_user_types=")
	builder.WriteString(fmt.Sprintf("%v", r.ApplicableUserTypes))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(r.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", r.Active))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserAssignments returns the UserAssignments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedUserAssignments(name string) ([]*UserRole, error) {
	if r.Edges.namedUserAssignments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUserAssignments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedUserAssignments(name string, edges ...*UserRole) {
	if r.Edges.namedUserAssignments == nil {
		r.Edges.namedUserAssignments = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		r.Edges.namedUserAssignments[name] = []*UserRole{}
	} else {
		r.Edges.namedUserAssignments[name] = append(r.Edges.namedUserAssignments[name], edges...)
	}
}

// NamedSystemUsers returns the SystemUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedSystemUsers(name string) ([]*User, error) {
	if r.Edges.namedSystemUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedSystemUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedSystemUsers(name string, edges ...*User) {
	if r.Edges.namedSystemUsers == nil {
		r.Edges.namedSystemUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		r.Edges.namedSystemUsers[name] = []*User{}
	} else {
		r.Edges.namedSystemUsers[name] = append(r.Edges.namedSystemUsers[name], edges...)
	}
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedPermissions(name string) ([]*Permission, error) {
	if r.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedPermissions(name string, edges ...*Permission) {
	if r.Edges.namedPermissions == nil {
		r.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		r.Edges.namedPermissions[name] = []*Permission{}
	} else {
		r.Edges.namedPermissions[name] = append(r.Edges.namedPermissions[name], edges...)
	}
}

// NamedMemberships returns the Memberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedMemberships(name string) ([]*Membership, error) {
	if r.Edges.namedMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedMemberships(name string, edges ...*Membership) {
	if r.Edges.namedMemberships == nil {
		r.Edges.namedMemberships = make(map[string][]*Membership)
	}
	if len(edges) == 0 {
		r.Edges.namedMemberships[name] = []*Membership{}
	} else {
		r.Edges.namedMemberships[name] = append(r.Edges.namedMemberships[name], edges...)
	}
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedChildren(name string) ([]*Role, error) {
	if r.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedChildren(name string, edges ...*Role) {
	if r.Edges.namedChildren == nil {
		r.Edges.namedChildren = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		r.Edges.namedChildren[name] = []*Role{}
	} else {
		r.Edges.namedChildren[name] = append(r.Edges.namedChildren[name], edges...)
	}
}

// Roles is a parsable slice of Role.
type Roles []*Role
