// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/providertemplate"
)

// OrganizationProviderCreate is the builder for creating a OrganizationProvider entity.
type OrganizationProviderCreate struct {
	config
	mutation *OrganizationProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrganizationProviderCreate) SetCreatedAt(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableCreatedAt(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrganizationProviderCreate) SetUpdatedAt(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetDeletedAt sets the "deleted_at" field.
func (opc *OrganizationProviderCreate) SetDeletedAt(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetDeletedAt(t)
	return opc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableDeletedAt(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetDeletedAt(*t)
	}
	return opc
}

// SetOrganizationID sets the "organization_id" field.
func (opc *OrganizationProviderCreate) SetOrganizationID(x xid.ID) *OrganizationProviderCreate {
	opc.mutation.SetOrganizationID(x)
	return opc
}

// SetProviderID sets the "provider_id" field.
func (opc *OrganizationProviderCreate) SetProviderID(x xid.ID) *OrganizationProviderCreate {
	opc.mutation.SetProviderID(x)
	return opc
}

// SetTemplateID sets the "template_id" field.
func (opc *OrganizationProviderCreate) SetTemplateID(x xid.ID) *OrganizationProviderCreate {
	opc.mutation.SetTemplateID(x)
	return opc
}

// SetTemplateKey sets the "template_key" field.
func (opc *OrganizationProviderCreate) SetTemplateKey(s string) *OrganizationProviderCreate {
	opc.mutation.SetTemplateKey(s)
	return opc
}

// SetCustomConfig sets the "custom_config" field.
func (opc *OrganizationProviderCreate) SetCustomConfig(m map[string]interface{}) *OrganizationProviderCreate {
	opc.mutation.SetCustomConfig(m)
	return opc
}

// SetEnabledAt sets the "enabled_at" field.
func (opc *OrganizationProviderCreate) SetEnabledAt(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetEnabledAt(t)
	return opc
}

// SetNillableEnabledAt sets the "enabled_at" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableEnabledAt(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetEnabledAt(*t)
	}
	return opc
}

// SetLastUsed sets the "last_used" field.
func (opc *OrganizationProviderCreate) SetLastUsed(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetLastUsed(t)
	return opc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableLastUsed(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetLastUsed(*t)
	}
	return opc
}

// SetUsageCount sets the "usage_count" field.
func (opc *OrganizationProviderCreate) SetUsageCount(i int) *OrganizationProviderCreate {
	opc.mutation.SetUsageCount(i)
	return opc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableUsageCount(i *int) *OrganizationProviderCreate {
	if i != nil {
		opc.SetUsageCount(*i)
	}
	return opc
}

// SetEnabled sets the "enabled" field.
func (opc *OrganizationProviderCreate) SetEnabled(b bool) *OrganizationProviderCreate {
	opc.mutation.SetEnabled(b)
	return opc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableEnabled(b *bool) *OrganizationProviderCreate {
	if b != nil {
		opc.SetEnabled(*b)
	}
	return opc
}

// SetSuccessRate sets the "success_rate" field.
func (opc *OrganizationProviderCreate) SetSuccessRate(f float64) *OrganizationProviderCreate {
	opc.mutation.SetSuccessRate(f)
	return opc
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableSuccessRate(f *float64) *OrganizationProviderCreate {
	if f != nil {
		opc.SetSuccessRate(*f)
	}
	return opc
}

// SetTotalLogins sets the "total_logins" field.
func (opc *OrganizationProviderCreate) SetTotalLogins(i int) *OrganizationProviderCreate {
	opc.mutation.SetTotalLogins(i)
	return opc
}

// SetNillableTotalLogins sets the "total_logins" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableTotalLogins(i *int) *OrganizationProviderCreate {
	if i != nil {
		opc.SetTotalLogins(*i)
	}
	return opc
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (opc *OrganizationProviderCreate) SetSuccessfulLogins(i int) *OrganizationProviderCreate {
	opc.mutation.SetSuccessfulLogins(i)
	return opc
}

// SetNillableSuccessfulLogins sets the "successful_logins" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableSuccessfulLogins(i *int) *OrganizationProviderCreate {
	if i != nil {
		opc.SetSuccessfulLogins(*i)
	}
	return opc
}

// SetFailedLogins sets the "failed_logins" field.
func (opc *OrganizationProviderCreate) SetFailedLogins(i int) *OrganizationProviderCreate {
	opc.mutation.SetFailedLogins(i)
	return opc
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableFailedLogins(i *int) *OrganizationProviderCreate {
	if i != nil {
		opc.SetFailedLogins(*i)
	}
	return opc
}

// SetLastSuccess sets the "last_success" field.
func (opc *OrganizationProviderCreate) SetLastSuccess(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetLastSuccess(t)
	return opc
}

// SetNillableLastSuccess sets the "last_success" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableLastSuccess(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetLastSuccess(*t)
	}
	return opc
}

// SetLastFailure sets the "last_failure" field.
func (opc *OrganizationProviderCreate) SetLastFailure(t time.Time) *OrganizationProviderCreate {
	opc.mutation.SetLastFailure(t)
	return opc
}

// SetNillableLastFailure sets the "last_failure" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableLastFailure(t *time.Time) *OrganizationProviderCreate {
	if t != nil {
		opc.SetLastFailure(*t)
	}
	return opc
}

// SetConfigErrors sets the "config_errors" field.
func (opc *OrganizationProviderCreate) SetConfigErrors(i int) *OrganizationProviderCreate {
	opc.mutation.SetConfigErrors(i)
	return opc
}

// SetNillableConfigErrors sets the "config_errors" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableConfigErrors(i *int) *OrganizationProviderCreate {
	if i != nil {
		opc.SetConfigErrors(*i)
	}
	return opc
}

// SetAverageResponseTime sets the "average_response_time" field.
func (opc *OrganizationProviderCreate) SetAverageResponseTime(f float64) *OrganizationProviderCreate {
	opc.mutation.SetAverageResponseTime(f)
	return opc
}

// SetNillableAverageResponseTime sets the "average_response_time" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableAverageResponseTime(f *float64) *OrganizationProviderCreate {
	if f != nil {
		opc.SetAverageResponseTime(*f)
	}
	return opc
}

// SetAnalyticsData sets the "analytics_data" field.
func (opc *OrganizationProviderCreate) SetAnalyticsData(m map[string]interface{}) *OrganizationProviderCreate {
	opc.mutation.SetAnalyticsData(m)
	return opc
}

// SetMetadata sets the "metadata" field.
func (opc *OrganizationProviderCreate) SetMetadata(m map[string]interface{}) *OrganizationProviderCreate {
	opc.mutation.SetMetadata(m)
	return opc
}

// SetID sets the "id" field.
func (opc *OrganizationProviderCreate) SetID(x xid.ID) *OrganizationProviderCreate {
	opc.mutation.SetID(x)
	return opc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (opc *OrganizationProviderCreate) SetNillableID(x *xid.ID) *OrganizationProviderCreate {
	if x != nil {
		opc.SetID(*x)
	}
	return opc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (opc *OrganizationProviderCreate) SetOrganization(o *Organization) *OrganizationProviderCreate {
	return opc.SetOrganizationID(o.ID)
}

// SetProvider sets the "provider" edge to the IdentityProvider entity.
func (opc *OrganizationProviderCreate) SetProvider(i *IdentityProvider) *OrganizationProviderCreate {
	return opc.SetProviderID(i.ID)
}

// SetTemplate sets the "template" edge to the ProviderTemplate entity.
func (opc *OrganizationProviderCreate) SetTemplate(p *ProviderTemplate) *OrganizationProviderCreate {
	return opc.SetTemplateID(p.ID)
}

// Mutation returns the OrganizationProviderMutation object of the builder.
func (opc *OrganizationProviderCreate) Mutation() *OrganizationProviderMutation {
	return opc.mutation
}

// Save creates the OrganizationProvider in the database.
func (opc *OrganizationProviderCreate) Save(ctx context.Context) (*OrganizationProvider, error) {
	opc.defaults()
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrganizationProviderCreate) SaveX(ctx context.Context) *OrganizationProvider {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrganizationProviderCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrganizationProviderCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrganizationProviderCreate) defaults() {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		v := organizationprovider.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		v := organizationprovider.DefaultUpdatedAt()
		opc.mutation.SetUpdatedAt(v)
	}
	if _, ok := opc.mutation.EnabledAt(); !ok {
		v := organizationprovider.DefaultEnabledAt()
		opc.mutation.SetEnabledAt(v)
	}
	if _, ok := opc.mutation.UsageCount(); !ok {
		v := organizationprovider.DefaultUsageCount
		opc.mutation.SetUsageCount(v)
	}
	if _, ok := opc.mutation.Enabled(); !ok {
		v := organizationprovider.DefaultEnabled
		opc.mutation.SetEnabled(v)
	}
	if _, ok := opc.mutation.SuccessRate(); !ok {
		v := organizationprovider.DefaultSuccessRate
		opc.mutation.SetSuccessRate(v)
	}
	if _, ok := opc.mutation.TotalLogins(); !ok {
		v := organizationprovider.DefaultTotalLogins
		opc.mutation.SetTotalLogins(v)
	}
	if _, ok := opc.mutation.SuccessfulLogins(); !ok {
		v := organizationprovider.DefaultSuccessfulLogins
		opc.mutation.SetSuccessfulLogins(v)
	}
	if _, ok := opc.mutation.FailedLogins(); !ok {
		v := organizationprovider.DefaultFailedLogins
		opc.mutation.SetFailedLogins(v)
	}
	if _, ok := opc.mutation.ConfigErrors(); !ok {
		v := organizationprovider.DefaultConfigErrors
		opc.mutation.SetConfigErrors(v)
	}
	if _, ok := opc.mutation.AverageResponseTime(); !ok {
		v := organizationprovider.DefaultAverageResponseTime
		opc.mutation.SetAverageResponseTime(v)
	}
	if _, ok := opc.mutation.ID(); !ok {
		v := organizationprovider.DefaultID()
		opc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrganizationProviderCreate) check() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationProvider.created_at"`)}
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrganizationProvider.updated_at"`)}
	}
	if _, ok := opc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrganizationProvider.organization_id"`)}
	}
	if v, ok := opc.mutation.OrganizationID(); ok {
		if err := organizationprovider.OrganizationIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.organization_id": %w`, err)}
		}
	}
	if _, ok := opc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OrganizationProvider.provider_id"`)}
	}
	if v, ok := opc.mutation.ProviderID(); ok {
		if err := organizationprovider.ProviderIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.provider_id": %w`, err)}
		}
	}
	if _, ok := opc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "OrganizationProvider.template_id"`)}
	}
	if v, ok := opc.mutation.TemplateID(); ok {
		if err := organizationprovider.TemplateIDValidator(v.String()); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_id": %w`, err)}
		}
	}
	if _, ok := opc.mutation.TemplateKey(); !ok {
		return &ValidationError{Name: "template_key", err: errors.New(`ent: missing required field "OrganizationProvider.template_key"`)}
	}
	if v, ok := opc.mutation.TemplateKey(); ok {
		if err := organizationprovider.TemplateKeyValidator(v); err != nil {
			return &ValidationError{Name: "template_key", err: fmt.Errorf(`ent: validator failed for field "OrganizationProvider.template_key": %w`, err)}
		}
	}
	if _, ok := opc.mutation.EnabledAt(); !ok {
		return &ValidationError{Name: "enabled_at", err: errors.New(`ent: missing required field "OrganizationProvider.enabled_at"`)}
	}
	if _, ok := opc.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`ent: missing required field "OrganizationProvider.usage_count"`)}
	}
	if _, ok := opc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "OrganizationProvider.enabled"`)}
	}
	if _, ok := opc.mutation.SuccessRate(); !ok {
		return &ValidationError{Name: "success_rate", err: errors.New(`ent: missing required field "OrganizationProvider.success_rate"`)}
	}
	if _, ok := opc.mutation.TotalLogins(); !ok {
		return &ValidationError{Name: "total_logins", err: errors.New(`ent: missing required field "OrganizationProvider.total_logins"`)}
	}
	if _, ok := opc.mutation.SuccessfulLogins(); !ok {
		return &ValidationError{Name: "successful_logins", err: errors.New(`ent: missing required field "OrganizationProvider.successful_logins"`)}
	}
	if _, ok := opc.mutation.FailedLogins(); !ok {
		return &ValidationError{Name: "failed_logins", err: errors.New(`ent: missing required field "OrganizationProvider.failed_logins"`)}
	}
	if _, ok := opc.mutation.ConfigErrors(); !ok {
		return &ValidationError{Name: "config_errors", err: errors.New(`ent: missing required field "OrganizationProvider.config_errors"`)}
	}
	if _, ok := opc.mutation.AverageResponseTime(); !ok {
		return &ValidationError{Name: "average_response_time", err: errors.New(`ent: missing required field "OrganizationProvider.average_response_time"`)}
	}
	if len(opc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationProvider.organization"`)}
	}
	if len(opc.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "OrganizationProvider.provider"`)}
	}
	if len(opc.mutation.TemplateIDs()) == 0 {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "OrganizationProvider.template"`)}
	}
	return nil
}

func (opc *OrganizationProviderCreate) sqlSave(ctx context.Context) (*OrganizationProvider, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrganizationProviderCreate) createSpec() (*OrganizationProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationProvider{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(organizationprovider.Table, sqlgraph.NewFieldSpec(organizationprovider.FieldID, field.TypeString))
	)
	_spec.OnConflict = opc.conflict
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.DeletedAt(); ok {
		_spec.SetField(organizationprovider.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := opc.mutation.TemplateKey(); ok {
		_spec.SetField(organizationprovider.FieldTemplateKey, field.TypeString, value)
		_node.TemplateKey = value
	}
	if value, ok := opc.mutation.CustomConfig(); ok {
		_spec.SetField(organizationprovider.FieldCustomConfig, field.TypeJSON, value)
		_node.CustomConfig = value
	}
	if value, ok := opc.mutation.EnabledAt(); ok {
		_spec.SetField(organizationprovider.FieldEnabledAt, field.TypeTime, value)
		_node.EnabledAt = value
	}
	if value, ok := opc.mutation.LastUsed(); ok {
		_spec.SetField(organizationprovider.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = &value
	}
	if value, ok := opc.mutation.UsageCount(); ok {
		_spec.SetField(organizationprovider.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if value, ok := opc.mutation.Enabled(); ok {
		_spec.SetField(organizationprovider.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := opc.mutation.SuccessRate(); ok {
		_spec.SetField(organizationprovider.FieldSuccessRate, field.TypeFloat64, value)
		_node.SuccessRate = value
	}
	if value, ok := opc.mutation.TotalLogins(); ok {
		_spec.SetField(organizationprovider.FieldTotalLogins, field.TypeInt, value)
		_node.TotalLogins = value
	}
	if value, ok := opc.mutation.SuccessfulLogins(); ok {
		_spec.SetField(organizationprovider.FieldSuccessfulLogins, field.TypeInt, value)
		_node.SuccessfulLogins = value
	}
	if value, ok := opc.mutation.FailedLogins(); ok {
		_spec.SetField(organizationprovider.FieldFailedLogins, field.TypeInt, value)
		_node.FailedLogins = value
	}
	if value, ok := opc.mutation.LastSuccess(); ok {
		_spec.SetField(organizationprovider.FieldLastSuccess, field.TypeTime, value)
		_node.LastSuccess = &value
	}
	if value, ok := opc.mutation.LastFailure(); ok {
		_spec.SetField(organizationprovider.FieldLastFailure, field.TypeTime, value)
		_node.LastFailure = &value
	}
	if value, ok := opc.mutation.ConfigErrors(); ok {
		_spec.SetField(organizationprovider.FieldConfigErrors, field.TypeInt, value)
		_node.ConfigErrors = value
	}
	if value, ok := opc.mutation.AverageResponseTime(); ok {
		_spec.SetField(organizationprovider.FieldAverageResponseTime, field.TypeFloat64, value)
		_node.AverageResponseTime = value
	}
	if value, ok := opc.mutation.AnalyticsData(); ok {
		_spec.SetField(organizationprovider.FieldAnalyticsData, field.TypeJSON, value)
		_node.AnalyticsData = value
	}
	if value, ok := opc.mutation.Metadata(); ok {
		_spec.SetField(organizationprovider.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := opc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providertemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationProvider.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationProviderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (opc *OrganizationProviderCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationProviderUpsertOne {
	opc.conflict = opts
	return &OrganizationProviderUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opc *OrganizationProviderCreate) OnConflictColumns(columns ...string) *OrganizationProviderUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OrganizationProviderUpsertOne{
		create: opc,
	}
}

type (
	// OrganizationProviderUpsertOne is the builder for "upsert"-ing
	//  one OrganizationProvider node.
	OrganizationProviderUpsertOne struct {
		create *OrganizationProviderCreate
	}

	// OrganizationProviderUpsert is the "OnConflict" setter.
	OrganizationProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationProviderUpsert) SetUpdatedAt(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateUpdatedAt() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationProviderUpsert) SetDeletedAt(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateDeletedAt() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationProviderUpsert) ClearDeletedAt() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldDeletedAt)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationProviderUpsert) SetOrganizationID(v xid.ID) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateOrganizationID() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldOrganizationID)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OrganizationProviderUpsert) SetProviderID(v xid.ID) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateProviderID() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldProviderID)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *OrganizationProviderUpsert) SetTemplateID(v xid.ID) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateTemplateID() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldTemplateID)
	return u
}

// SetTemplateKey sets the "template_key" field.
func (u *OrganizationProviderUpsert) SetTemplateKey(v string) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldTemplateKey, v)
	return u
}

// UpdateTemplateKey sets the "template_key" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateTemplateKey() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldTemplateKey)
	return u
}

// SetCustomConfig sets the "custom_config" field.
func (u *OrganizationProviderUpsert) SetCustomConfig(v map[string]interface{}) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldCustomConfig, v)
	return u
}

// UpdateCustomConfig sets the "custom_config" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateCustomConfig() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldCustomConfig)
	return u
}

// ClearCustomConfig clears the value of the "custom_config" field.
func (u *OrganizationProviderUpsert) ClearCustomConfig() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldCustomConfig)
	return u
}

// SetEnabledAt sets the "enabled_at" field.
func (u *OrganizationProviderUpsert) SetEnabledAt(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldEnabledAt, v)
	return u
}

// UpdateEnabledAt sets the "enabled_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateEnabledAt() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldEnabledAt)
	return u
}

// SetLastUsed sets the "last_used" field.
func (u *OrganizationProviderUpsert) SetLastUsed(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldLastUsed, v)
	return u
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateLastUsed() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldLastUsed)
	return u
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *OrganizationProviderUpsert) ClearLastUsed() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldLastUsed)
	return u
}

// SetUsageCount sets the "usage_count" field.
func (u *OrganizationProviderUpsert) SetUsageCount(v int) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldUsageCount, v)
	return u
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateUsageCount() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldUsageCount)
	return u
}

// AddUsageCount adds v to the "usage_count" field.
func (u *OrganizationProviderUpsert) AddUsageCount(v int) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldUsageCount, v)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *OrganizationProviderUpsert) SetEnabled(v bool) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateEnabled() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldEnabled)
	return u
}

// SetSuccessRate sets the "success_rate" field.
func (u *OrganizationProviderUpsert) SetSuccessRate(v float64) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldSuccessRate, v)
	return u
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateSuccessRate() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldSuccessRate)
	return u
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *OrganizationProviderUpsert) AddSuccessRate(v float64) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldSuccessRate, v)
	return u
}

// SetTotalLogins sets the "total_logins" field.
func (u *OrganizationProviderUpsert) SetTotalLogins(v int) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldTotalLogins, v)
	return u
}

// UpdateTotalLogins sets the "total_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateTotalLogins() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldTotalLogins)
	return u
}

// AddTotalLogins adds v to the "total_logins" field.
func (u *OrganizationProviderUpsert) AddTotalLogins(v int) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldTotalLogins, v)
	return u
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (u *OrganizationProviderUpsert) SetSuccessfulLogins(v int) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldSuccessfulLogins, v)
	return u
}

// UpdateSuccessfulLogins sets the "successful_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateSuccessfulLogins() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldSuccessfulLogins)
	return u
}

// AddSuccessfulLogins adds v to the "successful_logins" field.
func (u *OrganizationProviderUpsert) AddSuccessfulLogins(v int) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldSuccessfulLogins, v)
	return u
}

// SetFailedLogins sets the "failed_logins" field.
func (u *OrganizationProviderUpsert) SetFailedLogins(v int) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldFailedLogins, v)
	return u
}

// UpdateFailedLogins sets the "failed_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateFailedLogins() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldFailedLogins)
	return u
}

// AddFailedLogins adds v to the "failed_logins" field.
func (u *OrganizationProviderUpsert) AddFailedLogins(v int) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldFailedLogins, v)
	return u
}

// SetLastSuccess sets the "last_success" field.
func (u *OrganizationProviderUpsert) SetLastSuccess(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldLastSuccess, v)
	return u
}

// UpdateLastSuccess sets the "last_success" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateLastSuccess() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldLastSuccess)
	return u
}

// ClearLastSuccess clears the value of the "last_success" field.
func (u *OrganizationProviderUpsert) ClearLastSuccess() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldLastSuccess)
	return u
}

// SetLastFailure sets the "last_failure" field.
func (u *OrganizationProviderUpsert) SetLastFailure(v time.Time) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldLastFailure, v)
	return u
}

// UpdateLastFailure sets the "last_failure" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateLastFailure() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldLastFailure)
	return u
}

// ClearLastFailure clears the value of the "last_failure" field.
func (u *OrganizationProviderUpsert) ClearLastFailure() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldLastFailure)
	return u
}

// SetConfigErrors sets the "config_errors" field.
func (u *OrganizationProviderUpsert) SetConfigErrors(v int) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldConfigErrors, v)
	return u
}

// UpdateConfigErrors sets the "config_errors" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateConfigErrors() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldConfigErrors)
	return u
}

// AddConfigErrors adds v to the "config_errors" field.
func (u *OrganizationProviderUpsert) AddConfigErrors(v int) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldConfigErrors, v)
	return u
}

// SetAverageResponseTime sets the "average_response_time" field.
func (u *OrganizationProviderUpsert) SetAverageResponseTime(v float64) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldAverageResponseTime, v)
	return u
}

// UpdateAverageResponseTime sets the "average_response_time" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateAverageResponseTime() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldAverageResponseTime)
	return u
}

// AddAverageResponseTime adds v to the "average_response_time" field.
func (u *OrganizationProviderUpsert) AddAverageResponseTime(v float64) *OrganizationProviderUpsert {
	u.Add(organizationprovider.FieldAverageResponseTime, v)
	return u
}

// SetAnalyticsData sets the "analytics_data" field.
func (u *OrganizationProviderUpsert) SetAnalyticsData(v map[string]interface{}) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldAnalyticsData, v)
	return u
}

// UpdateAnalyticsData sets the "analytics_data" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateAnalyticsData() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldAnalyticsData)
	return u
}

// ClearAnalyticsData clears the value of the "analytics_data" field.
func (u *OrganizationProviderUpsert) ClearAnalyticsData() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldAnalyticsData)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationProviderUpsert) SetMetadata(v map[string]interface{}) *OrganizationProviderUpsert {
	u.Set(organizationprovider.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationProviderUpsert) UpdateMetadata() *OrganizationProviderUpsert {
	u.SetExcluded(organizationprovider.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationProviderUpsert) ClearMetadata() *OrganizationProviderUpsert {
	u.SetNull(organizationprovider.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organizationprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationProviderUpsertOne) UpdateNewValues() *OrganizationProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(organizationprovider.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(organizationprovider.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationProviderUpsertOne) Ignore() *OrganizationProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationProviderUpsertOne) DoNothing() *OrganizationProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationProviderCreate.OnConflict
// documentation for more info.
func (u *OrganizationProviderUpsertOne) Update(set func(*OrganizationProviderUpsert)) *OrganizationProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationProviderUpsertOne) SetUpdatedAt(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateUpdatedAt() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationProviderUpsertOne) SetDeletedAt(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateDeletedAt() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationProviderUpsertOne) ClearDeletedAt() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationProviderUpsertOne) SetOrganizationID(v xid.ID) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateOrganizationID() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OrganizationProviderUpsertOne) SetProviderID(v xid.ID) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateProviderID() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateProviderID()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *OrganizationProviderUpsertOne) SetTemplateID(v xid.ID) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateTemplateID() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTemplateKey sets the "template_key" field.
func (u *OrganizationProviderUpsertOne) SetTemplateKey(v string) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTemplateKey(v)
	})
}

// UpdateTemplateKey sets the "template_key" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateTemplateKey() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTemplateKey()
	})
}

// SetCustomConfig sets the "custom_config" field.
func (u *OrganizationProviderUpsertOne) SetCustomConfig(v map[string]interface{}) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetCustomConfig(v)
	})
}

// UpdateCustomConfig sets the "custom_config" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateCustomConfig() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateCustomConfig()
	})
}

// ClearCustomConfig clears the value of the "custom_config" field.
func (u *OrganizationProviderUpsertOne) ClearCustomConfig() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearCustomConfig()
	})
}

// SetEnabledAt sets the "enabled_at" field.
func (u *OrganizationProviderUpsertOne) SetEnabledAt(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetEnabledAt(v)
	})
}

// UpdateEnabledAt sets the "enabled_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateEnabledAt() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateEnabledAt()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *OrganizationProviderUpsertOne) SetLastUsed(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateLastUsed() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *OrganizationProviderUpsertOne) ClearLastUsed() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastUsed()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *OrganizationProviderUpsertOne) SetUsageCount(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *OrganizationProviderUpsertOne) AddUsageCount(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateUsageCount() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateUsageCount()
	})
}

// SetEnabled sets the "enabled" field.
func (u *OrganizationProviderUpsertOne) SetEnabled(v bool) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateEnabled() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetSuccessRate sets the "success_rate" field.
func (u *OrganizationProviderUpsertOne) SetSuccessRate(v float64) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetSuccessRate(v)
	})
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *OrganizationProviderUpsertOne) AddSuccessRate(v float64) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddSuccessRate(v)
	})
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateSuccessRate() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateSuccessRate()
	})
}

// SetTotalLogins sets the "total_logins" field.
func (u *OrganizationProviderUpsertOne) SetTotalLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTotalLogins(v)
	})
}

// AddTotalLogins adds v to the "total_logins" field.
func (u *OrganizationProviderUpsertOne) AddTotalLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddTotalLogins(v)
	})
}

// UpdateTotalLogins sets the "total_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateTotalLogins() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTotalLogins()
	})
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (u *OrganizationProviderUpsertOne) SetSuccessfulLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetSuccessfulLogins(v)
	})
}

// AddSuccessfulLogins adds v to the "successful_logins" field.
func (u *OrganizationProviderUpsertOne) AddSuccessfulLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddSuccessfulLogins(v)
	})
}

// UpdateSuccessfulLogins sets the "successful_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateSuccessfulLogins() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateSuccessfulLogins()
	})
}

// SetFailedLogins sets the "failed_logins" field.
func (u *OrganizationProviderUpsertOne) SetFailedLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetFailedLogins(v)
	})
}

// AddFailedLogins adds v to the "failed_logins" field.
func (u *OrganizationProviderUpsertOne) AddFailedLogins(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddFailedLogins(v)
	})
}

// UpdateFailedLogins sets the "failed_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateFailedLogins() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateFailedLogins()
	})
}

// SetLastSuccess sets the "last_success" field.
func (u *OrganizationProviderUpsertOne) SetLastSuccess(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastSuccess(v)
	})
}

// UpdateLastSuccess sets the "last_success" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateLastSuccess() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastSuccess()
	})
}

// ClearLastSuccess clears the value of the "last_success" field.
func (u *OrganizationProviderUpsertOne) ClearLastSuccess() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastSuccess()
	})
}

// SetLastFailure sets the "last_failure" field.
func (u *OrganizationProviderUpsertOne) SetLastFailure(v time.Time) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastFailure(v)
	})
}

// UpdateLastFailure sets the "last_failure" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateLastFailure() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastFailure()
	})
}

// ClearLastFailure clears the value of the "last_failure" field.
func (u *OrganizationProviderUpsertOne) ClearLastFailure() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastFailure()
	})
}

// SetConfigErrors sets the "config_errors" field.
func (u *OrganizationProviderUpsertOne) SetConfigErrors(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetConfigErrors(v)
	})
}

// AddConfigErrors adds v to the "config_errors" field.
func (u *OrganizationProviderUpsertOne) AddConfigErrors(v int) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddConfigErrors(v)
	})
}

// UpdateConfigErrors sets the "config_errors" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateConfigErrors() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateConfigErrors()
	})
}

// SetAverageResponseTime sets the "average_response_time" field.
func (u *OrganizationProviderUpsertOne) SetAverageResponseTime(v float64) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetAverageResponseTime(v)
	})
}

// AddAverageResponseTime adds v to the "average_response_time" field.
func (u *OrganizationProviderUpsertOne) AddAverageResponseTime(v float64) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddAverageResponseTime(v)
	})
}

// UpdateAverageResponseTime sets the "average_response_time" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateAverageResponseTime() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateAverageResponseTime()
	})
}

// SetAnalyticsData sets the "analytics_data" field.
func (u *OrganizationProviderUpsertOne) SetAnalyticsData(v map[string]interface{}) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetAnalyticsData(v)
	})
}

// UpdateAnalyticsData sets the "analytics_data" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateAnalyticsData() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateAnalyticsData()
	})
}

// ClearAnalyticsData clears the value of the "analytics_data" field.
func (u *OrganizationProviderUpsertOne) ClearAnalyticsData() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearAnalyticsData()
	})
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationProviderUpsertOne) SetMetadata(v map[string]interface{}) *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationProviderUpsertOne) UpdateMetadata() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationProviderUpsertOne) ClearMetadata() *OrganizationProviderUpsertOne {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *OrganizationProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationProviderUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrganizationProviderUpsertOne.ID is not supported by MySQL driver. Use OrganizationProviderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationProviderUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationProviderCreateBulk is the builder for creating many OrganizationProvider entities in bulk.
type OrganizationProviderCreateBulk struct {
	config
	err      error
	builders []*OrganizationProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the OrganizationProvider entities in the database.
func (opcb *OrganizationProviderCreateBulk) Save(ctx context.Context) ([]*OrganizationProvider, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrganizationProvider, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrganizationProviderCreateBulk) SaveX(ctx context.Context) []*OrganizationProvider {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrganizationProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrganizationProviderCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationProviderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (opcb *OrganizationProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationProviderUpsertBulk {
	opcb.conflict = opts
	return &OrganizationProviderUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opcb *OrganizationProviderCreateBulk) OnConflictColumns(columns ...string) *OrganizationProviderUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OrganizationProviderUpsertBulk{
		create: opcb,
	}
}

// OrganizationProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of OrganizationProvider nodes.
type OrganizationProviderUpsertBulk struct {
	create *OrganizationProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(organizationprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrganizationProviderUpsertBulk) UpdateNewValues() *OrganizationProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(organizationprovider.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(organizationprovider.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationProviderUpsertBulk) Ignore() *OrganizationProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationProviderUpsertBulk) DoNothing() *OrganizationProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationProviderCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationProviderUpsertBulk) Update(set func(*OrganizationProviderUpsert)) *OrganizationProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationProviderUpsertBulk) SetUpdatedAt(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateUpdatedAt() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrganizationProviderUpsertBulk) SetDeletedAt(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateDeletedAt() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrganizationProviderUpsertBulk) ClearDeletedAt() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationProviderUpsertBulk) SetOrganizationID(v xid.ID) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateOrganizationID() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OrganizationProviderUpsertBulk) SetProviderID(v xid.ID) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateProviderID() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateProviderID()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *OrganizationProviderUpsertBulk) SetTemplateID(v xid.ID) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateTemplateID() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTemplateID()
	})
}

// SetTemplateKey sets the "template_key" field.
func (u *OrganizationProviderUpsertBulk) SetTemplateKey(v string) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTemplateKey(v)
	})
}

// UpdateTemplateKey sets the "template_key" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateTemplateKey() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTemplateKey()
	})
}

// SetCustomConfig sets the "custom_config" field.
func (u *OrganizationProviderUpsertBulk) SetCustomConfig(v map[string]interface{}) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetCustomConfig(v)
	})
}

// UpdateCustomConfig sets the "custom_config" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateCustomConfig() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateCustomConfig()
	})
}

// ClearCustomConfig clears the value of the "custom_config" field.
func (u *OrganizationProviderUpsertBulk) ClearCustomConfig() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearCustomConfig()
	})
}

// SetEnabledAt sets the "enabled_at" field.
func (u *OrganizationProviderUpsertBulk) SetEnabledAt(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetEnabledAt(v)
	})
}

// UpdateEnabledAt sets the "enabled_at" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateEnabledAt() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateEnabledAt()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *OrganizationProviderUpsertBulk) SetLastUsed(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateLastUsed() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *OrganizationProviderUpsertBulk) ClearLastUsed() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastUsed()
	})
}

// SetUsageCount sets the "usage_count" field.
func (u *OrganizationProviderUpsertBulk) SetUsageCount(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetUsageCount(v)
	})
}

// AddUsageCount adds v to the "usage_count" field.
func (u *OrganizationProviderUpsertBulk) AddUsageCount(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddUsageCount(v)
	})
}

// UpdateUsageCount sets the "usage_count" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateUsageCount() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateUsageCount()
	})
}

// SetEnabled sets the "enabled" field.
func (u *OrganizationProviderUpsertBulk) SetEnabled(v bool) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateEnabled() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetSuccessRate sets the "success_rate" field.
func (u *OrganizationProviderUpsertBulk) SetSuccessRate(v float64) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetSuccessRate(v)
	})
}

// AddSuccessRate adds v to the "success_rate" field.
func (u *OrganizationProviderUpsertBulk) AddSuccessRate(v float64) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddSuccessRate(v)
	})
}

// UpdateSuccessRate sets the "success_rate" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateSuccessRate() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateSuccessRate()
	})
}

// SetTotalLogins sets the "total_logins" field.
func (u *OrganizationProviderUpsertBulk) SetTotalLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetTotalLogins(v)
	})
}

// AddTotalLogins adds v to the "total_logins" field.
func (u *OrganizationProviderUpsertBulk) AddTotalLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddTotalLogins(v)
	})
}

// UpdateTotalLogins sets the "total_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateTotalLogins() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateTotalLogins()
	})
}

// SetSuccessfulLogins sets the "successful_logins" field.
func (u *OrganizationProviderUpsertBulk) SetSuccessfulLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetSuccessfulLogins(v)
	})
}

// AddSuccessfulLogins adds v to the "successful_logins" field.
func (u *OrganizationProviderUpsertBulk) AddSuccessfulLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddSuccessfulLogins(v)
	})
}

// UpdateSuccessfulLogins sets the "successful_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateSuccessfulLogins() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateSuccessfulLogins()
	})
}

// SetFailedLogins sets the "failed_logins" field.
func (u *OrganizationProviderUpsertBulk) SetFailedLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetFailedLogins(v)
	})
}

// AddFailedLogins adds v to the "failed_logins" field.
func (u *OrganizationProviderUpsertBulk) AddFailedLogins(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddFailedLogins(v)
	})
}

// UpdateFailedLogins sets the "failed_logins" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateFailedLogins() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateFailedLogins()
	})
}

// SetLastSuccess sets the "last_success" field.
func (u *OrganizationProviderUpsertBulk) SetLastSuccess(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastSuccess(v)
	})
}

// UpdateLastSuccess sets the "last_success" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateLastSuccess() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastSuccess()
	})
}

// ClearLastSuccess clears the value of the "last_success" field.
func (u *OrganizationProviderUpsertBulk) ClearLastSuccess() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastSuccess()
	})
}

// SetLastFailure sets the "last_failure" field.
func (u *OrganizationProviderUpsertBulk) SetLastFailure(v time.Time) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetLastFailure(v)
	})
}

// UpdateLastFailure sets the "last_failure" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateLastFailure() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateLastFailure()
	})
}

// ClearLastFailure clears the value of the "last_failure" field.
func (u *OrganizationProviderUpsertBulk) ClearLastFailure() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearLastFailure()
	})
}

// SetConfigErrors sets the "config_errors" field.
func (u *OrganizationProviderUpsertBulk) SetConfigErrors(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetConfigErrors(v)
	})
}

// AddConfigErrors adds v to the "config_errors" field.
func (u *OrganizationProviderUpsertBulk) AddConfigErrors(v int) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddConfigErrors(v)
	})
}

// UpdateConfigErrors sets the "config_errors" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateConfigErrors() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateConfigErrors()
	})
}

// SetAverageResponseTime sets the "average_response_time" field.
func (u *OrganizationProviderUpsertBulk) SetAverageResponseTime(v float64) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetAverageResponseTime(v)
	})
}

// AddAverageResponseTime adds v to the "average_response_time" field.
func (u *OrganizationProviderUpsertBulk) AddAverageResponseTime(v float64) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.AddAverageResponseTime(v)
	})
}

// UpdateAverageResponseTime sets the "average_response_time" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateAverageResponseTime() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateAverageResponseTime()
	})
}

// SetAnalyticsData sets the "analytics_data" field.
func (u *OrganizationProviderUpsertBulk) SetAnalyticsData(v map[string]interface{}) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetAnalyticsData(v)
	})
}

// UpdateAnalyticsData sets the "analytics_data" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateAnalyticsData() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateAnalyticsData()
	})
}

// ClearAnalyticsData clears the value of the "analytics_data" field.
func (u *OrganizationProviderUpsertBulk) ClearAnalyticsData() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearAnalyticsData()
	})
}

// SetMetadata sets the "metadata" field.
func (u *OrganizationProviderUpsertBulk) SetMetadata(v map[string]interface{}) *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *OrganizationProviderUpsertBulk) UpdateMetadata() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *OrganizationProviderUpsertBulk) ClearMetadata() *OrganizationProviderUpsertBulk {
	return u.Update(func(s *OrganizationProviderUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *OrganizationProviderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
